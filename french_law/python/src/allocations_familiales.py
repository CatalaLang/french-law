# This file has been generated by the Catala compiler, do not edit!

from .catala import *
from typing import Any, List, Callable, Tuple
from enum import Enum


class PriseEnCharge_Code(Enum):
    GardeAlterneePartageAllocations = 0
    GardeAlterneeAllocataireUnique = 1
    EffectiveEtPermanente = 2
    ServicesSociauxAllocationVerseeALaFamille = 3
    ServicesSociauxAllocationVerseeAuxServicesSociaux = 4


class PriseEnCharge:
    def __init__(self, code: PriseEnCharge_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PriseEnCharge):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class SituationObligationScolaire_Code(Enum):
    Avant = 0
    Pendant = 1
    Apres = 2


class SituationObligationScolaire:
    def __init__(self, code: SituationObligationScolaire_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SituationObligationScolaire):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class Collectivite_Code(Enum):
    Guadeloupe = 0
    Guyane = 1
    Martinique = 2
    LaReunion = 3
    SaintBarthelemy = 4
    SaintMartin = 5
    Metropole = 6
    SaintPierreEtMiquelon = 7
    Mayotte = 8


class Collectivite:
    def __init__(self, code: Collectivite_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Collectivite):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class PriseEnCompte_Code(Enum):
    Complete = 0
    Partagee = 1
    Zero = 2


class PriseEnCompte:
    def __init__(self, code: PriseEnCompte_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PriseEnCompte):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class VersementAllocations_Code(Enum):
    Normal = 0
    AllocationVerseeAuxServicesSociaux = 1


class VersementAllocations:
    def __init__(self, code: VersementAllocations_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, VersementAllocations):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class ElementPrestationsFamiliales_Code(Enum):
    PrestationAccueilJeuneEnfant = 0
    AllocationsFamiliales = 1
    ComplementFamilial = 2
    AllocationLogement = 3
    AllocationEducationEnfantHandicape = 4
    AllocationSoutienFamilial = 5
    AllocationRentreeScolaire = 6
    AllocationJournalierePresenceParentale = 7


class ElementPrestationsFamiliales:
    def __init__(self, code: ElementPrestationsFamiliales_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ElementPrestationsFamiliales):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class EnfantEntree:
    def __init__(self, d_identifiant: Integer, d_remuneration_mensuelle: Money, d_date_de_naissance: Date, d_prise_en_charge: PriseEnCharge, d_a_deja_ouvert_droit_aux_allocations_familiales: bool) -> None:
        self.d_identifiant = d_identifiant
        self.d_remuneration_mensuelle = d_remuneration_mensuelle
        self.d_date_de_naissance = d_date_de_naissance
        self.d_prise_en_charge = d_prise_en_charge
        self.d_a_deja_ouvert_droit_aux_allocations_familiales = d_a_deja_ouvert_droit_aux_allocations_familiales

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EnfantEntree):
            return (self.d_identifiant == other.d_identifiant and
                    self.d_remuneration_mensuelle == other.d_remuneration_mensuelle and
                    self.d_date_de_naissance == other.d_date_de_naissance and
                    self.d_prise_en_charge == other.d_prise_en_charge and
                    self.d_a_deja_ouvert_droit_aux_allocations_familiales == other.d_a_deja_ouvert_droit_aux_allocations_familiales)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EnfantEntree(d_identifiant={},d_remuneration_mensuelle={},d_date_de_naissance={},d_prise_en_charge={},d_a_deja_ouvert_droit_aux_allocations_familiales={})".format(self.d_identifiant,
                                                                                                                                                                                   self.d_remuneration_mensuelle, self.d_date_de_naissance,
                                                                                                                                                                                   self.d_prise_en_charge,
                                                                                                                                                                                   self.d_a_deja_ouvert_droit_aux_allocations_familiales)


class Enfant:
    def __init__(self, identifiant: Integer, obligation_scolaire: SituationObligationScolaire, remuneration_mensuelle: Money, date_de_naissance: Date, age: Integer, prise_en_charge: PriseEnCharge, a_deja_ouvert_droit_aux_allocations_familiales: bool) -> None:
        self.identifiant = identifiant
        self.obligation_scolaire = obligation_scolaire
        self.remuneration_mensuelle = remuneration_mensuelle
        self.date_de_naissance = date_de_naissance
        self.age = age
        self.prise_en_charge = prise_en_charge
        self.a_deja_ouvert_droit_aux_allocations_familiales = a_deja_ouvert_droit_aux_allocations_familiales

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Enfant):
            return (self.identifiant == other.identifiant and
                    self.obligation_scolaire == other.obligation_scolaire and
                    self.remuneration_mensuelle == other.remuneration_mensuelle and
                    self.date_de_naissance == other.date_de_naissance and
                    self.age == other.age and
                    self.prise_en_charge == other.prise_en_charge and
                    self.a_deja_ouvert_droit_aux_allocations_familiales == other.a_deja_ouvert_droit_aux_allocations_familiales)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Enfant(identifiant={},obligation_scolaire={},remuneration_mensuelle={},date_de_naissance={},age={},prise_en_charge={},a_deja_ouvert_droit_aux_allocations_familiales={})".format(self.identifiant,
                                                                                                                                                                                                 self.obligation_scolaire, self.remuneration_mensuelle,
                                                                                                                                                                                                 self.date_de_naissance, self.age, self.prise_en_charge,
                                                                                                                                                                                                 self.a_deja_ouvert_droit_aux_allocations_familiales)


class SmicOut:
    def __init__(self, brut_horaire_out: Money) -> None:
        self.brut_horaire_out = brut_horaire_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmicOut):
            return (self.brut_horaire_out == other.brut_horaire_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SmicOut(brut_horaire_out={})".format(self.brut_horaire_out)


class SmicIn:
    def __init__(self, date_courante_in: Date, residence_in: Collectivite) -> None:
        self.date_courante_in = date_courante_in
        self.residence_in = residence_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmicIn):
            return (self.date_courante_in == other.date_courante_in and
                    self.residence_in == other.residence_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SmicIn(date_courante_in={},residence_in={})".format(self.date_courante_in,
                                                                    self.residence_in)


class PrestationsFamilialesOut:
    def __init__(self, droit_ouvert_out: Callable[[Enfant], bool], conditions_hors_age_out: Callable[[Enfant], bool], age_l512_3_2_out: Integer, regime_outre_mer_l751_1_out: bool, base_mensuelle_out: Money) -> None:
        self.droit_ouvert_out = droit_ouvert_out
        self.conditions_hors_age_out = conditions_hors_age_out
        self.age_l512_3_2_out = age_l512_3_2_out
        self.regime_outre_mer_l751_1_out = regime_outre_mer_l751_1_out
        self.base_mensuelle_out = base_mensuelle_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PrestationsFamilialesOut):
            return (self.droit_ouvert_out == other.droit_ouvert_out and
                    self.conditions_hors_age_out == other.conditions_hors_age_out and
                    self.age_l512_3_2_out == other.age_l512_3_2_out and
                    self.regime_outre_mer_l751_1_out == other.regime_outre_mer_l751_1_out and
                    self.base_mensuelle_out == other.base_mensuelle_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "PrestationsFamilialesOut(droit_ouvert_out={},conditions_hors_age_out={},age_l512_3_2_out={},regime_outre_mer_l751_1_out={},base_mensuelle_out={})".format(self.droit_ouvert_out,
                                                                                                                                                                          self.conditions_hors_age_out, self.age_l512_3_2_out,
                                                                                                                                                                          self.regime_outre_mer_l751_1_out, self.base_mensuelle_out)


class PrestationsFamilialesIn:
    def __init__(self, date_courante_in: Date, prestation_courante_in: ElementPrestationsFamiliales, residence_in: Collectivite) -> None:
        self.date_courante_in = date_courante_in
        self.prestation_courante_in = prestation_courante_in
        self.residence_in = residence_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PrestationsFamilialesIn):
            return (self.date_courante_in == other.date_courante_in and
                    self.prestation_courante_in == other.prestation_courante_in and
                    self.residence_in == other.residence_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "PrestationsFamilialesIn(date_courante_in={},prestation_courante_in={},residence_in={})".format(self.date_courante_in,
                                                                                                               self.prestation_courante_in, self.residence_in)


class AllocationFamilialesAvril2008Out:
    def __init__(self, age_minimum_alinea_1_l521_3_out: Integer) -> None:
        self.age_minimum_alinea_1_l521_3_out = age_minimum_alinea_1_l521_3_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AllocationFamilialesAvril2008Out):
            return (self.age_minimum_alinea_1_l521_3_out == other.age_minimum_alinea_1_l521_3_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "AllocationFamilialesAvril2008Out(age_minimum_alinea_1_l521_3_out={})".format(self.age_minimum_alinea_1_l521_3_out)


class AllocationFamilialesAvril2008In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AllocationFamilialesAvril2008In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "AllocationFamilialesAvril2008In()".format()


class EnfantLePlusAgeOut:
    def __init__(self, le_plus_age_out: Enfant) -> None:
        self.le_plus_age_out = le_plus_age_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EnfantLePlusAgeOut):
            return (self.le_plus_age_out == other.le_plus_age_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EnfantLePlusAgeOut(le_plus_age_out={})".format(self.le_plus_age_out)


class EnfantLePlusAgeIn:
    def __init__(self, enfants_in: List[Enfant]) -> None:
        self.enfants_in = enfants_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EnfantLePlusAgeIn):
            return (self.enfants_in == other.enfants_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EnfantLePlusAgeIn(enfants_in={})".format(self.enfants_in)


class AllocationsFamilialesOut:
    def __init__(self, montant_verse_out: Money) -> None:
        self.montant_verse_out = montant_verse_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AllocationsFamilialesOut):
            return (self.montant_verse_out == other.montant_verse_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "AllocationsFamilialesOut(montant_verse_out={})".format(self.montant_verse_out)


class AllocationsFamilialesIn:
    def __init__(self, personne_charge_effective_permanente_est_parent_in: bool, personne_charge_effective_permanente_remplit_titre_I_in: bool, ressources_menage_in: Money, residence_in: Collectivite, date_courante_in: Date, enfants_a_charge_in: List[Enfant], avait_enfant_a_charge_avant_1er_janvier_2012_in: bool) -> None:
        self.personne_charge_effective_permanente_est_parent_in = personne_charge_effective_permanente_est_parent_in
        self.personne_charge_effective_permanente_remplit_titre_I_in = personne_charge_effective_permanente_remplit_titre_I_in
        self.ressources_menage_in = ressources_menage_in
        self.residence_in = residence_in
        self.date_courante_in = date_courante_in
        self.enfants_a_charge_in = enfants_a_charge_in
        self.avait_enfant_a_charge_avant_1er_janvier_2012_in = avait_enfant_a_charge_avant_1er_janvier_2012_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AllocationsFamilialesIn):
            return (self.personne_charge_effective_permanente_est_parent_in == other.personne_charge_effective_permanente_est_parent_in and
                    self.personne_charge_effective_permanente_remplit_titre_I_in == other.personne_charge_effective_permanente_remplit_titre_I_in and
                    self.ressources_menage_in == other.ressources_menage_in and
                    self.residence_in == other.residence_in and
                    self.date_courante_in == other.date_courante_in and
                    self.enfants_a_charge_in == other.enfants_a_charge_in and
                    self.avait_enfant_a_charge_avant_1er_janvier_2012_in == other.avait_enfant_a_charge_avant_1er_janvier_2012_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "AllocationsFamilialesIn(personne_charge_effective_permanente_est_parent_in={},personne_charge_effective_permanente_remplit_titre_I_in={},ressources_menage_in={},residence_in={},date_courante_in={},enfants_a_charge_in={},avait_enfant_a_charge_avant_1er_janvier_2012_in={})".format(self.personne_charge_effective_permanente_est_parent_in,
                                                                                                                                                                                                                                                                                                        self.personne_charge_effective_permanente_remplit_titre_I_in,
                                                                                                                                                                                                                                                                                                        self.ressources_menage_in, self.residence_in, self.date_courante_in,
                                                                                                                                                                                                                                                                                                        self.enfants_a_charge_in,
                                                                                                                                                                                                                                                                                                        self.avait_enfant_a_charge_avant_1er_janvier_2012_in)


class InterfaceAllocationsFamilialesOut:
    def __init__(self, i_montant_verse_out: Money) -> None:
        self.i_montant_verse_out = i_montant_verse_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InterfaceAllocationsFamilialesOut):
            return (self.i_montant_verse_out == other.i_montant_verse_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "InterfaceAllocationsFamilialesOut(i_montant_verse_out={})".format(self.i_montant_verse_out)


class InterfaceAllocationsFamilialesIn:
    def __init__(self, i_date_courante_in: Date, i_enfants_in: List[EnfantEntree], i_ressources_menage_in: Money, i_residence_in: Collectivite, i_personne_charge_effective_permanente_est_parent_in: bool, i_personne_charge_effective_permanente_remplit_titre_I_in: bool, i_avait_enfant_a_charge_avant_1er_janvier_2012_in: bool) -> None:
        self.i_date_courante_in = i_date_courante_in
        self.i_enfants_in = i_enfants_in
        self.i_ressources_menage_in = i_ressources_menage_in
        self.i_residence_in = i_residence_in
        self.i_personne_charge_effective_permanente_est_parent_in = i_personne_charge_effective_permanente_est_parent_in
        self.i_personne_charge_effective_permanente_remplit_titre_I_in = i_personne_charge_effective_permanente_remplit_titre_I_in
        self.i_avait_enfant_a_charge_avant_1er_janvier_2012_in = i_avait_enfant_a_charge_avant_1er_janvier_2012_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InterfaceAllocationsFamilialesIn):
            return (self.i_date_courante_in == other.i_date_courante_in and
                    self.i_enfants_in == other.i_enfants_in and
                    self.i_ressources_menage_in == other.i_ressources_menage_in and
                    self.i_residence_in == other.i_residence_in and
                    self.i_personne_charge_effective_permanente_est_parent_in == other.i_personne_charge_effective_permanente_est_parent_in and
                    self.i_personne_charge_effective_permanente_remplit_titre_I_in == other.i_personne_charge_effective_permanente_remplit_titre_I_in and
                    self.i_avait_enfant_a_charge_avant_1er_janvier_2012_in == other.i_avait_enfant_a_charge_avant_1er_janvier_2012_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "InterfaceAllocationsFamilialesIn(i_date_courante_in={},i_enfants_in={},i_ressources_menage_in={},i_residence_in={},i_personne_charge_effective_permanente_est_parent_in={},i_personne_charge_effective_permanente_remplit_titre_I_in={},i_avait_enfant_a_charge_avant_1er_janvier_2012_in={})".format(self.i_date_courante_in,
                                                                                                                                                                                                                                                                                                                      self.i_enfants_in, self.i_ressources_menage_in, self.i_residence_in,
                                                                                                                                                                                                                                                                                                                      self.i_personne_charge_effective_permanente_est_parent_in,
                                                                                                                                                                                                                                                                                                                      self.i_personne_charge_effective_permanente_remplit_titre_I_in,
                                                                                                                                                                                                                                                                                                                      self.i_avait_enfant_a_charge_avant_1er_janvier_2012_in)


def smic(smic_in: SmicIn):
    date_courante = smic_in.date_courante_in
    residence = smic_in.residence_in
    try:
        def temp_brut_horaire(_: Any):
            raise EmptyError

        def temp_brut_horaire_1(_: Any):
            return True

        def temp_brut_horaire_2(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=219, start_column=5, end_line=228, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2018-1173 du 19 décembre 2018 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance",
                                                               "Décrets divers"]), ((date_courante >=
                                                                                     date_of_numbers(2019, 1, 1)) and ((date_courante <=
                                                                                                                        date_of_numbers(2019, 12, 31)) and ((residence ==
                                                                                                                                                             Collectivite(Collectivite_Code.Metropole, Unit())) or
                                                                                                                                                            ((residence == Collectivite(Collectivite_Code.Guadeloupe,
                                                                                                                                                                                        Unit())) or ((residence ==
                                                                                                                                                                                                      Collectivite(Collectivite_Code.Guyane, Unit())) or
                                                                                                                                                                                                     ((residence == Collectivite(Collectivite_Code.Martinique,
                                                                                                                                                                                                                                 Unit())) or ((residence ==
                                                                                                                                                                                                                                               Collectivite(Collectivite_Code.LaReunion, Unit())) or
                                                                                                                                                                                                                                              ((residence ==
                                                                                                                                                                                                                                                Collectivite(Collectivite_Code.SaintBarthelemy, Unit())) or
                                                                                                                                                                                                                                               ((residence == Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                                                                           Unit())) or (residence ==
                                                                                                                                                                                                                                                                                        Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                                                                                                                                                                                                                                                                                                     Unit())))))))))))):
                return money_of_cents_string("1003")
            else:
                raise EmptyError

        def temp_brut_horaire_3(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=237, start_column=5, end_line=239, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2018-1173 du 19 décembre 2018 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance",
                                                               "Décrets divers"]), ((date_courante >=
                                                                                     date_of_numbers(2019, 1, 1)) and ((date_courante <=
                                                                                                                        date_of_numbers(2019, 12, 31)) and (residence ==
                                                                                                                                                            Collectivite(Collectivite_Code.Mayotte,
                                                                                                                                                                         Unit()))))):
                return money_of_cents_string("757")
            else:
                raise EmptyError

        def temp_brut_horaire_4(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=258, start_column=5, end_line=267, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2019-1387 du 18 décembre 2019 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance",
                                                               "Décrets divers"]), ((date_courante >=
                                                                                     date_of_numbers(2020, 1, 1)) and ((date_courante <=
                                                                                                                        date_of_numbers(2020, 12, 31)) and ((residence ==
                                                                                                                                                             Collectivite(Collectivite_Code.Metropole, Unit())) or
                                                                                                                                                            ((residence == Collectivite(Collectivite_Code.Guadeloupe,
                                                                                                                                                                                        Unit())) or ((residence ==
                                                                                                                                                                                                      Collectivite(Collectivite_Code.Guyane, Unit())) or
                                                                                                                                                                                                     ((residence == Collectivite(Collectivite_Code.Martinique,
                                                                                                                                                                                                                                 Unit())) or ((residence ==
                                                                                                                                                                                                                                               Collectivite(Collectivite_Code.LaReunion, Unit())) or
                                                                                                                                                                                                                                              ((residence ==
                                                                                                                                                                                                                                                Collectivite(Collectivite_Code.SaintBarthelemy, Unit())) or
                                                                                                                                                                                                                                               ((residence == Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                                                                           Unit())) or (residence ==
                                                                                                                                                                                                                                                                                        Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                                                                                                                                                                                                                                                                                                     Unit())))))))))))):
                return money_of_cents_string("1015")
            else:
                raise EmptyError

        def temp_brut_horaire_5(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=276, start_column=5, end_line=278, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2019-1387 du 18 décembre 2019 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance",
                                                               "Décrets divers"]), ((date_courante >=
                                                                                     date_of_numbers(2020, 1, 1)) and ((date_courante <=
                                                                                                                        date_of_numbers(2020, 12, 31)) and (residence ==
                                                                                                                                                            Collectivite(Collectivite_Code.Mayotte,
                                                                                                                                                                         Unit()))))):
                return money_of_cents_string("766")
            else:
                raise EmptyError

        def temp_brut_horaire_6(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=297, start_column=5, end_line=306, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2020-1598 du 16 décembre 2020 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance",
                                                               "Décrets divers"]), ((date_courante >=
                                                                                     date_of_numbers(2021, 1, 1)) and ((date_courante <=
                                                                                                                        date_of_numbers(2021, 12, 31)) and ((residence ==
                                                                                                                                                             Collectivite(Collectivite_Code.Metropole, Unit())) or
                                                                                                                                                            ((residence == Collectivite(Collectivite_Code.Guadeloupe,
                                                                                                                                                                                        Unit())) or ((residence ==
                                                                                                                                                                                                      Collectivite(Collectivite_Code.Guyane, Unit())) or
                                                                                                                                                                                                     ((residence == Collectivite(Collectivite_Code.Martinique,
                                                                                                                                                                                                                                 Unit())) or ((residence ==
                                                                                                                                                                                                                                               Collectivite(Collectivite_Code.LaReunion, Unit())) or
                                                                                                                                                                                                                                              ((residence ==
                                                                                                                                                                                                                                                Collectivite(Collectivite_Code.SaintBarthelemy, Unit())) or
                                                                                                                                                                                                                                               ((residence == Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                                                                           Unit())) or (residence ==
                                                                                                                                                                                                                                                                                        Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                                                                                                                                                                                                                                                                                                     Unit())))))))))))):
                return money_of_cents_string("1025")
            else:
                raise EmptyError

        def temp_brut_horaire_7(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=315, start_column=5, end_line=317, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2020-1598 du 16 décembre 2020 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance",
                                                               "Décrets divers"]), ((date_courante >=
                                                                                     date_of_numbers(2021, 1, 1)) and ((date_courante <=
                                                                                                                        date_of_numbers(2021, 12, 31)) and (residence ==
                                                                                                                                                            Collectivite(Collectivite_Code.Mayotte,
                                                                                                                                                                         Unit()))))):
                return money_of_cents_string("774")
            else:
                raise EmptyError
        temp_brut_horaire_8 = handle_default([temp_brut_horaire_7,
                                             temp_brut_horaire_6,
                                             temp_brut_horaire_5,
                                             temp_brut_horaire_4,
                                             temp_brut_horaire_3,
                                             temp_brut_horaire_2],
                                             temp_brut_horaire_1,
                                             temp_brut_horaire)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=43, start_column=10,
                                             end_line=43, end_column=22,
                                             law_headings=["Prologue"]))
    brut_horaire = log_variable_definition(["Smic", "brut_horaire"],
                                           temp_brut_horaire_8)
    return SmicOut(brut_horaire_out=brut_horaire)


def allocation_familiales_avril2008(allocation_familiales_avril2008_in: AllocationFamilialesAvril2008In):
    try:
        temp_age_minimum_alinea_1_l521_3 = integer_of_string("16")
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=81, start_column=10,
                                             end_line=81, end_column=37,
                                             law_headings=["Prologue"]))
    age_minimum_alinea_1_l521_3 = log_variable_definition(["AllocationFamilialesAvril2008",
                                                           "âge_minimum_alinéa_1_l521_3"], temp_age_minimum_alinea_1_l521_3)
    return AllocationFamilialesAvril2008Out(age_minimum_alinea_1_l521_3_out=age_minimum_alinea_1_l521_3)


def enfant_le_plus_age(enfant_le_plus_age_in: EnfantLePlusAgeIn):
    enfants = enfant_le_plus_age_in.enfants_in
    try:
        def temp_le_plus_age(acc: Any, item: Any):
            if (acc.age > item.age):
                return acc
            else:
                return item
        temp_le_plus_age_1 = list_fold_left(temp_le_plus_age,
                                            Enfant(identifiant=- integer_of_string("1"),
                                                   obligation_scolaire=SituationObligationScolaire(SituationObligationScolaire_Code.Pendant,
                                                                                                   Unit()),
                                                   remuneration_mensuelle=money_of_cents_string(
                                                       "0"),
                                                   date_de_naissance=date_of_numbers(
                                                       1900, 1, 1),
                                                   age=integer_of_string("0"),
                                                   prise_en_charge=PriseEnCharge(PriseEnCharge_Code.EffectiveEtPermanente,
                                                                                 Unit()),
                                                   a_deja_ouvert_droit_aux_allocations_familiales=False),
                                            enfants)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=85, start_column=10,
                                             end_line=85, end_column=21,
                                             law_headings=["Prologue"]))
    le_plus_age = log_variable_definition(["EnfantLePlusÂgé",
                                           "le_plus_âgé"], temp_le_plus_age_1)
    return EnfantLePlusAgeOut(le_plus_age_out=le_plus_age)


def prestations_familiales(prestations_familiales_in: PrestationsFamilialesIn):
    date_courante_1 = prestations_familiales_in.date_courante_in
    prestation_courante = prestations_familiales_in.prestation_courante_in
    residence_1 = prestations_familiales_in.residence_in
    try:
        temp_age_l512_3_2 = integer_of_string("20")
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=68, start_column=10,
                                             end_line=68, end_column=22,
                                             law_headings=["Prologue"]))
    age_l512_3_2 = log_variable_definition(["PrestationsFamiliales",
                                            "âge_l512_3_2"], temp_age_l512_3_2)
    try:
        def temp_base_mensuelle(_: Any):
            raise EmptyError

        def temp_base_mensuelle_1(_: Any):
            return True

        def temp_base_mensuelle_2(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=24, start_column=5, end_line=25, end_column=34,
                                                 law_headings=["Instruction ministérielle N°DSS/SD2B/2019/65 du 25 mars 2019 relative à la revalorisation au 1er avril 2019 des prestations familiales servies en métropole",
                                                               "Montant de la base mensuelle des allocations familiales",
                                                               "Décrets divers"]), ((date_courante_1 >=
                                                                                     date_of_numbers(2019, 4, 1)) and (date_courante_1 <
                                                                                                                       date_of_numbers(2020, 4, 1)))):
                return money_of_cents_string("41316")
            else:
                raise EmptyError

        def temp_base_mensuelle_3(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=44, start_column=5, end_line=45, end_column=34,
                                                 law_headings=["Instruction interministérielle no DSS/SD2B/2020/33 du 18 février 2020 relative à la revalorisation au 1er avril 2020 des prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à La Réunion, à Saint-Barthélemy, à Saint-Martin et dans le département de Mayotte",
                                                               "Montant de la base mensuelle des allocations familiales",
                                                               "Décrets divers"]), ((date_courante_1 >=
                                                                                     date_of_numbers(2020, 4, 1)) and (date_courante_1 <
                                                                                                                       date_of_numbers(2021, 4, 1)))):
                return money_of_cents_string("41404")
            else:
                raise EmptyError

        def temp_base_mensuelle_4(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=60, start_column=5, end_line=61, end_column=34,
                                                 law_headings=["Instruction interministérielle n°DSS/2B/2021/65 du 19 mars 2021 relative à la revalorisation au 1er avril 2021 des prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à la Réunion, à Saint-Barthélemy, à Saint-Martin et dans le département de Mayotte",
                                                               "Montant de la base mensuelle des allocations familiales",
                                                               "Décrets divers"]), ((date_courante_1 >=
                                                                                     date_of_numbers(2021, 4, 1)) and (date_courante_1 <
                                                                                                                       date_of_numbers(2022, 4, 1)))):
                return money_of_cents_string("41481")
            else:
                raise EmptyError
        temp_base_mensuelle_5 = handle_default([temp_base_mensuelle_4,
                                               temp_base_mensuelle_3,
                                               temp_base_mensuelle_2],
                                               temp_base_mensuelle_1,
                                               temp_base_mensuelle)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=74, start_column=10,
                                             end_line=74, end_column=24,
                                             law_headings=["Prologue"]))
    base_mensuelle = log_variable_definition(["PrestationsFamiliales",
                                              "base_mensuelle"], temp_base_mensuelle_5)
    try:
        temp_smic_dot_date_courante = log_variable_definition(["PrestationsFamiliales",
                                                               "smic.date_courante"], date_courante_1)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=41, start_column=10,
                                             end_line=41, end_column=23,
                                             law_headings=["Prologue"]))
    smic_dot_date_courante = temp_smic_dot_date_courante
    try:
        temp_smic_dot_residence = log_variable_definition(["PrestationsFamiliales",
                                                           "smic.résidence"], residence_1)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=42, start_column=10,
                                             end_line=42, end_column=19,
                                             law_headings=["Prologue"]))
    smic_dot_residence = temp_smic_dot_residence
    result = log_end_call(["PrestationsFamiliales", "smic", "Smic"],
                          log_begin_call(["PrestationsFamiliales", "smic", "Smic"], smic,
                                         SmicIn(date_courante_in=smic_dot_date_courante,
                                                residence_in=smic_dot_residence)))
    smic_dot_brut_horaire = result.brut_horaire_out
    try:
        try:
            if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                 start_line=354, start_column=5, end_line=359, end_column=30,
                                                 law_headings=["Article L751-1",
                                                               "Chapitre 1er : Généralités",
                                                               "Titre 5 : Dispositions particulières à la Guadeloupe, à la Guyane, à la Martinique, à La Réunion, à Saint-Barthélemy et à Saint-Martin",
                                                               "Livre 7 : Régimes divers - Dispositions diverses",
                                                               "Partie législative",
                                                               "Code de la sécurité sociale"]), ((residence_1 ==
                                                                                                  Collectivite(Collectivite_Code.Guadeloupe, Unit())) or
                                                                                                 ((residence_1 == Collectivite(Collectivite_Code.Guyane,
                                                                                                                               Unit())) or ((residence_1 ==
                                                                                                                                             Collectivite(Collectivite_Code.Martinique, Unit())) or
                                                                                                                                            ((residence_1 == Collectivite(Collectivite_Code.LaReunion,
                                                                                                                                                                          Unit())) or ((residence_1 ==
                                                                                                                                                                                        Collectivite(Collectivite_Code.SaintBarthelemy, Unit())) or
                                                                                                                                                                                       (residence_1 == Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                    Unit())))))))):
                temp_regime_outre_mer_l751_1 = True
            else:
                raise EmptyError
        except EmptyError:
            temp_regime_outre_mer_l751_1 = False
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=69, start_column=10,
                                             end_line=69, end_column=33,
                                             law_headings=["Prologue"]))
    regime_outre_mer_l751_1 = log_variable_definition(["PrestationsFamiliales",
                                                       "régime_outre_mer_l751_1"], temp_regime_outre_mer_l751_1)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                 start_line=216, start_column=18, end_line=216, end_column=41,
                                                 law_headings=["Article R755-0-2",
                                                               "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                               "Titre 5 : Départements d'outre-mer",
                                                               "Livre 7 : Régimes divers - Dispositions diverses",
                                                               "Partie réglementaire - Décrets en Conseil d'Etat",
                                                               "Code de la sécurité sociale"]), regime_outre_mer_l751_1):
                temp_plafond_l512_3_2 = ((smic_dot_brut_horaire *
                                          decimal_of_string("0.55")) * decimal_of_string("169."))
            else:
                raise EmptyError
        except EmptyError:
            temp_plafond_l512_3_2 = ((smic_dot_brut_horaire *
                                      decimal_of_string("0.55")) * decimal_of_string("169."))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=67, start_column=11,
                                             end_line=67, end_column=27,
                                             law_headings=["Prologue"]))
    plafond_l512_3_2 = log_variable_definition(["PrestationsFamiliales",
                                                "plafond_l512_3_2"], temp_plafond_l512_3_2)
    try:
        def temp_conditions_hors_age(param: Enfant):
            try:
                try:
                    match_arg = param.obligation_scolaire
                    if match_arg.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg.value
                        temp_conditions_hors_age_1 = False
                    elif match_arg.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg.value
                        temp_conditions_hors_age_1 = False
                    elif match_arg.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg.value
                        temp_conditions_hors_age_1 = True
                    match_arg_1 = param.obligation_scolaire
                    if match_arg_1.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg_1.value
                        temp_conditions_hors_age_2 = False
                    elif match_arg_1.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg_1.value
                        temp_conditions_hors_age_2 = True
                    elif match_arg_1.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg_1.value
                        temp_conditions_hors_age_2 = False
                    match_arg_2 = param.obligation_scolaire
                    if match_arg_2.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg_2.value
                        temp_conditions_hors_age_3 = True
                    elif match_arg_2.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg_2.value
                        temp_conditions_hors_age_3 = False
                    elif match_arg_2.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg_2.value
                        temp_conditions_hors_age_3 = False
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                         start_line=68, start_column=5,
                                                         end_line=71, end_column=57,
                                                         law_headings=["Article L512-3",
                                                                       "Chapitre 2 : Champ d'application",
                                                                       "Titre 1 : Champ d'application - Généralités",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), ((temp_conditions_hors_age_3 or
                                                                                                          (temp_conditions_hors_age_2 or
                                                                                                           temp_conditions_hors_age_1)) and
                                                                                                         (param.remuneration_mensuelle <=
                                                                                                          plafond_l512_3_2))):
                        return True
                    else:
                        raise EmptyError
                except EmptyError:
                    return False
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                     start_line=66,
                                                     start_column=10,
                                                     end_line=66,
                                                     end_column=29,
                                                     law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=66, start_column=10,
                                             end_line=66, end_column=29,
                                             law_headings=["Prologue"]))
    conditions_hors_age = log_variable_definition(["PrestationsFamiliales",
                                                   "conditions_hors_âge"], temp_conditions_hors_age)
    try:
        def temp_droit_ouvert(param_1: Enfant):
            try:
                def temp_droit_ouvert_1(_: Any):
                    return False

                def temp_droit_ouvert_2(_: Any):
                    return True

                def temp_droit_ouvert_3(_: Any):
                    match_arg_3 = param_1.obligation_scolaire
                    if match_arg_3.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg_3.value
                        temp_droit_ouvert_4 = False
                    elif match_arg_3.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg_3.value
                        temp_droit_ouvert_4 = True
                    elif match_arg_3.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg_3.value
                        temp_droit_ouvert_4 = False
                    match_arg_4 = param_1.obligation_scolaire
                    if match_arg_4.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg_4.value
                        temp_droit_ouvert_5 = True
                    elif match_arg_4.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg_4.value
                        temp_droit_ouvert_5 = False
                    elif match_arg_4.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg_4.value
                        temp_droit_ouvert_5 = False
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                         start_line=49, start_column=5,
                                                         end_line=50, end_column=50,
                                                         law_headings=["Article L512-3",
                                                                       "Chapitre 2 : Champ d'application",
                                                                       "Titre 1 : Champ d'application - Généralités",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), (temp_droit_ouvert_5 or
                                                                                                         temp_droit_ouvert_4)):
                        return True
                    else:
                        raise EmptyError

                def temp_droit_ouvert_6(_: Any):
                    match_arg_5 = param_1.obligation_scolaire
                    if match_arg_5.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg_5.value
                        temp_droit_ouvert_7 = False
                    elif match_arg_5.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg_5.value
                        temp_droit_ouvert_7 = False
                    elif match_arg_5.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg_5.value
                        temp_droit_ouvert_7 = True
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                         start_line=60, start_column=5,
                                                         end_line=62, end_column=32,
                                                         law_headings=["Article L512-3",
                                                                       "Chapitre 2 : Champ d'application",
                                                                       "Titre 1 : Champ d'application - Généralités",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), (temp_droit_ouvert_7 and
                                                                                                         ((param_1.remuneration_mensuelle <=
                                                                                                           plafond_l512_3_2) and (param_1.age <
                                                                                                                                  age_l512_3_2)))):
                        return True
                    else:
                        raise EmptyError
                return handle_default([temp_droit_ouvert_6,
                                      temp_droit_ouvert_3],
                                      temp_droit_ouvert_2,
                                      temp_droit_ouvert_1)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                     start_line=65,
                                                     start_column=10,
                                                     end_line=65,
                                                     end_column=22,
                                                     law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=65, start_column=10,
                                             end_line=65, end_column=22,
                                             law_headings=["Prologue"]))
    droit_ouvert = log_variable_definition(["PrestationsFamiliales",
                                            "droit_ouvert"], temp_droit_ouvert)
    return PrestationsFamilialesOut(droit_ouvert_out=droit_ouvert,
                                    conditions_hors_age_out=conditions_hors_age,
                                    age_l512_3_2_out=age_l512_3_2,
                                    regime_outre_mer_l751_1_out=regime_outre_mer_l751_1,
                                    base_mensuelle_out=base_mensuelle)


def allocations_familiales(allocations_familiales_in: AllocationsFamilialesIn):
    personne_charge_effective_permanente_est_parent = allocations_familiales_in.personne_charge_effective_permanente_est_parent_in
    personne_charge_effective_permanente_remplit_titre__i = allocations_familiales_in.personne_charge_effective_permanente_remplit_titre_I_in
    ressources_menage = allocations_familiales_in.ressources_menage_in
    residence_2 = allocations_familiales_in.residence_in
    date_courante_2 = allocations_familiales_in.date_courante_in
    enfants_a_charge = allocations_familiales_in.enfants_a_charge_in
    avait_enfant_a_charge_avant_1er_janvier_2012 = allocations_familiales_in.avait_enfant_a_charge_avant_1er_janvier_2012_in
    try:
        def temp_prise_en_compte(param_2: Enfant):
            try:
                def temp_prise_en_compte_1(_: Any):
                    raise EmptyError

                def temp_prise_en_compte_2(_: Any):
                    return True

                def temp_prise_en_compte_3(_: Any):
                    match_arg_6 = param_2.prise_en_charge
                    if match_arg_6.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                        _ = match_arg_6.value
                        temp_prise_en_compte_4 = False
                    elif match_arg_6.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                        _ = match_arg_6.value
                        temp_prise_en_compte_4 = False
                    elif match_arg_6.code == PriseEnCharge_Code.EffectiveEtPermanente:
                        _ = match_arg_6.value
                        temp_prise_en_compte_4 = True
                    elif match_arg_6.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                        _ = match_arg_6.value
                        temp_prise_en_compte_4 = False
                    elif match_arg_6.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                        _ = match_arg_6.value
                        temp_prise_en_compte_4 = False
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                         start_line=184, start_column=5,
                                                         end_line=184, end_column=60,
                                                         law_headings=["Article L521-2",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), temp_prise_en_compte_4):
                        return PriseEnCompte(PriseEnCompte_Code.Complete,
                                             Unit())
                    else:
                        raise EmptyError

                def temp_prise_en_compte_5(_: Any):
                    match_arg_7 = param_2.prise_en_charge
                    if match_arg_7.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                        _ = match_arg_7.value
                        temp_prise_en_compte_6 = False
                    elif match_arg_7.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                        _ = match_arg_7.value
                        temp_prise_en_compte_6 = True
                    elif match_arg_7.code == PriseEnCharge_Code.EffectiveEtPermanente:
                        _ = match_arg_7.value
                        temp_prise_en_compte_6 = False
                    elif match_arg_7.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                        _ = match_arg_7.value
                        temp_prise_en_compte_6 = False
                    elif match_arg_7.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                        _ = match_arg_7.value
                        temp_prise_en_compte_6 = False
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                         start_line=204, start_column=5,
                                                         end_line=204, end_column=69,
                                                         law_headings=["Article L521-2",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), temp_prise_en_compte_6):
                        return PriseEnCompte(PriseEnCompte_Code.Complete,
                                             Unit())
                    else:
                        raise EmptyError

                def temp_prise_en_compte_7(_: Any):
                    match_arg_8 = param_2.prise_en_charge
                    if match_arg_8.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                        _ = match_arg_8.value
                        temp_prise_en_compte_8 = True
                    elif match_arg_8.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                        _ = match_arg_8.value
                        temp_prise_en_compte_8 = False
                    elif match_arg_8.code == PriseEnCharge_Code.EffectiveEtPermanente:
                        _ = match_arg_8.value
                        temp_prise_en_compte_8 = False
                    elif match_arg_8.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                        _ = match_arg_8.value
                        temp_prise_en_compte_8 = False
                    elif match_arg_8.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                        _ = match_arg_8.value
                        temp_prise_en_compte_8 = False
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                         start_line=214, start_column=5,
                                                         end_line=214, end_column=70,
                                                         law_headings=["Article L521-2",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), temp_prise_en_compte_8):
                        return PriseEnCompte(PriseEnCompte_Code.Partagee,
                                             Unit())
                    else:
                        raise EmptyError

                def temp_prise_en_compte_9(_: Any):
                    match_arg_9 = param_2.prise_en_charge
                    if match_arg_9.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                        _ = match_arg_9.value
                        temp_prise_en_compte_10 = False
                    elif match_arg_9.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                        _ = match_arg_9.value
                        temp_prise_en_compte_10 = False
                    elif match_arg_9.code == PriseEnCharge_Code.EffectiveEtPermanente:
                        _ = match_arg_9.value
                        temp_prise_en_compte_10 = False
                    elif match_arg_9.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                        _ = match_arg_9.value
                        temp_prise_en_compte_10 = False
                    elif match_arg_9.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                        _ = match_arg_9.value
                        temp_prise_en_compte_10 = True
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                         start_line=253, start_column=5,
                                                         end_line=254, end_column=56,
                                                         law_headings=["Article L521-2",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), temp_prise_en_compte_10):
                        return PriseEnCompte(PriseEnCompte_Code.Zero, Unit())
                    else:
                        raise EmptyError

                def temp_prise_en_compte_11(_: Any):
                    match_arg_10 = param_2.prise_en_charge
                    if match_arg_10.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                        _ = match_arg_10.value
                        temp_prise_en_compte_12 = False
                    elif match_arg_10.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                        _ = match_arg_10.value
                        temp_prise_en_compte_12 = False
                    elif match_arg_10.code == PriseEnCharge_Code.EffectiveEtPermanente:
                        _ = match_arg_10.value
                        temp_prise_en_compte_12 = False
                    elif match_arg_10.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                        _ = match_arg_10.value
                        temp_prise_en_compte_12 = True
                    elif match_arg_10.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                        _ = match_arg_10.value
                        temp_prise_en_compte_12 = False
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                         start_line=263, start_column=5,
                                                         end_line=264, end_column=48,
                                                         law_headings=["Article L521-2",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), temp_prise_en_compte_12):
                        return PriseEnCompte(PriseEnCompte_Code.Complete,
                                             Unit())
                    else:
                        raise EmptyError
                return handle_default([temp_prise_en_compte_11,
                                      temp_prise_en_compte_9,
                                      temp_prise_en_compte_7,
                                      temp_prise_en_compte_5,
                                      temp_prise_en_compte_3],
                                      temp_prise_en_compte_2,
                                      temp_prise_en_compte_1)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                     start_line=102,
                                                     start_column=11,
                                                     end_line=102,
                                                     end_column=26,
                                                     law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=102, start_column=11,
                                             end_line=102, end_column=26,
                                             law_headings=["Prologue"]))
    prise_en_compte = log_variable_definition(["AllocationsFamiliales",
                                               "prise_en_compte"], temp_prise_en_compte)
    try:
        def temp_versement(param_3: Enfant):
            try:
                def temp_versement_1(_: Any):
                    raise EmptyError

                def temp_versement_2(_: Any):
                    return True

                def temp_versement_3(_: Any):
                    match_arg_11 = param_3.prise_en_charge
                    if match_arg_11.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                        _ = match_arg_11.value
                        temp_versement_4 = False
                    elif match_arg_11.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                        _ = match_arg_11.value
                        temp_versement_4 = False
                    elif match_arg_11.code == PriseEnCharge_Code.EffectiveEtPermanente:
                        _ = match_arg_11.value
                        temp_versement_4 = True
                    elif match_arg_11.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                        _ = match_arg_11.value
                        temp_versement_4 = False
                    elif match_arg_11.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                        _ = match_arg_11.value
                        temp_versement_4 = False
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                         start_line=188, start_column=5,
                                                         end_line=188, end_column=60,
                                                         law_headings=["Article L521-2",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), temp_versement_4):
                        return VersementAllocations(VersementAllocations_Code.Normal,
                                                    Unit())
                    else:
                        raise EmptyError

                def temp_versement_5(_: Any):
                    match_arg_12 = param_3.prise_en_charge
                    if match_arg_12.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                        _ = match_arg_12.value
                        temp_versement_6 = False
                    elif match_arg_12.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                        _ = match_arg_12.value
                        temp_versement_6 = True
                    elif match_arg_12.code == PriseEnCharge_Code.EffectiveEtPermanente:
                        _ = match_arg_12.value
                        temp_versement_6 = False
                    elif match_arg_12.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                        _ = match_arg_12.value
                        temp_versement_6 = False
                    elif match_arg_12.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                        _ = match_arg_12.value
                        temp_versement_6 = False
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                         start_line=208, start_column=5,
                                                         end_line=208, end_column=69,
                                                         law_headings=["Article L521-2",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), temp_versement_6):
                        return VersementAllocations(VersementAllocations_Code.Normal,
                                                    Unit())
                    else:
                        raise EmptyError

                def temp_versement_7(_: Any):
                    match_arg_13 = param_3.prise_en_charge
                    if match_arg_13.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                        _ = match_arg_13.value
                        temp_versement_8 = True
                    elif match_arg_13.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                        _ = match_arg_13.value
                        temp_versement_8 = False
                    elif match_arg_13.code == PriseEnCharge_Code.EffectiveEtPermanente:
                        _ = match_arg_13.value
                        temp_versement_8 = False
                    elif match_arg_13.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                        _ = match_arg_13.value
                        temp_versement_8 = False
                    elif match_arg_13.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                        _ = match_arg_13.value
                        temp_versement_8 = False
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                         start_line=218, start_column=5,
                                                         end_line=218, end_column=70,
                                                         law_headings=["Article L521-2",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), temp_versement_8):
                        return VersementAllocations(VersementAllocations_Code.Normal,
                                                    Unit())
                    else:
                        raise EmptyError

                def temp_versement_9(_: Any):
                    match_arg_14 = param_3.prise_en_charge
                    if match_arg_14.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                        _ = match_arg_14.value
                        temp_versement_10 = False
                    elif match_arg_14.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                        _ = match_arg_14.value
                        temp_versement_10 = False
                    elif match_arg_14.code == PriseEnCharge_Code.EffectiveEtPermanente:
                        _ = match_arg_14.value
                        temp_versement_10 = False
                    elif match_arg_14.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                        _ = match_arg_14.value
                        temp_versement_10 = False
                    elif match_arg_14.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                        _ = match_arg_14.value
                        temp_versement_10 = True
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                         start_line=258, start_column=5,
                                                         end_line=259, end_column=56,
                                                         law_headings=["Article L521-2",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), temp_versement_10):
                        return VersementAllocations(VersementAllocations_Code.AllocationVerseeAuxServicesSociaux,
                                                    Unit())
                    else:
                        raise EmptyError

                def temp_versement_11(_: Any):
                    match_arg_15 = param_3.prise_en_charge
                    if match_arg_15.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                        _ = match_arg_15.value
                        temp_versement_12 = False
                    elif match_arg_15.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                        _ = match_arg_15.value
                        temp_versement_12 = False
                    elif match_arg_15.code == PriseEnCharge_Code.EffectiveEtPermanente:
                        _ = match_arg_15.value
                        temp_versement_12 = False
                    elif match_arg_15.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                        _ = match_arg_15.value
                        temp_versement_12 = True
                    elif match_arg_15.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                        _ = match_arg_15.value
                        temp_versement_12 = False
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                         start_line=269, start_column=5,
                                                         end_line=270, end_column=48,
                                                         law_headings=["Article L521-2",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), temp_versement_12):
                        return VersementAllocations(VersementAllocations_Code.Normal,
                                                    Unit())
                    else:
                        raise EmptyError
                return handle_default([temp_versement_11, temp_versement_9,
                                      temp_versement_7, temp_versement_5,
                                      temp_versement_3], temp_versement_2,
                                      temp_versement_1)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                     start_line=103,
                                                     start_column=11,
                                                     end_line=103,
                                                     end_column=20,
                                                     law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=103, start_column=11,
                                             end_line=103, end_column=20,
                                             law_headings=["Prologue"]))
    versement = log_variable_definition(["AllocationsFamiliales",
                                         "versement"], temp_versement)
    try:
        temp_nombre_enfants_l521_1 = integer_of_string("3")
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=151, start_column=11,
                                             end_line=151, end_column=32,
                                             law_headings=["Prologue"]))
    nombre_enfants_l521_1 = log_variable_definition(["AllocationsFamiliales",
                                                     "nombre_enfants_l521_1"], temp_nombre_enfants_l521_1)
    try:
        temp_nombre_enfants_alinea_2_l521_3 = integer_of_string("3")
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=153, start_column=11,
                                             end_line=153, end_column=41,
                                             law_headings=["Prologue"]))
    nombre_enfants_alinea_2_l521_3 = log_variable_definition(["AllocationsFamiliales",
                                                              "nombre_enfants_alinéa_2_l521_3"],
                                                             temp_nombre_enfants_alinea_2_l521_3)
    result_1 = log_end_call(["AllocationsFamiliales", "version_avril_2008",
                             "AllocationFamilialesAvril2008"],
                            log_begin_call(["AllocationsFamiliales", "version_avril_2008",
                                            "AllocationFamilialesAvril2008"], allocation_familiales_avril2008,
                                           AllocationFamilialesAvril2008In()))
    version_avril_2008_dot_age_minimum_alinea_1_l521_3 = result_1.age_minimum_alinea_1_l521_3_out
    try:
        temp_prestations_familiales_dot_date_courante = log_variable_definition(["AllocationsFamiliales",
                                                                                 "prestations_familiales.date_courante"], date_courante_2)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=70, start_column=10,
                                             end_line=70, end_column=23,
                                             law_headings=["Prologue"]))
    prestations_familiales_dot_date_courante = temp_prestations_familiales_dot_date_courante
    try:
        temp_prestations_familiales_dot_prestation_courante = log_variable_definition(["AllocationsFamiliales",
                                                                                       "prestations_familiales.prestation_courante"],
                                                                                      ElementPrestationsFamiliales(ElementPrestationsFamiliales_Code.AllocationsFamiliales,
                                                                                                                   Unit()))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=71, start_column=10,
                                             end_line=71, end_column=29,
                                             law_headings=["Prologue"]))
    prestations_familiales_dot_prestation_courante = temp_prestations_familiales_dot_prestation_courante
    try:
        temp_prestations_familiales_dot_residence = log_variable_definition(["AllocationsFamiliales",
                                                                             "prestations_familiales.résidence"], residence_2)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=72, start_column=10,
                                             end_line=72, end_column=19,
                                             law_headings=["Prologue"]))
    prestations_familiales_dot_residence = temp_prestations_familiales_dot_residence
    result_2 = log_end_call(["AllocationsFamiliales",
                             "prestations_familiales", "PrestationsFamiliales"],
                            log_begin_call(["AllocationsFamiliales", "prestations_familiales",
                                            "PrestationsFamiliales"], prestations_familiales,
                                           PrestationsFamilialesIn(date_courante_in=prestations_familiales_dot_date_courante,
                                                                   prestation_courante_in=prestations_familiales_dot_prestation_courante,
                                                                   residence_in=prestations_familiales_dot_residence)))
    prestations_familiales_dot_droit_ouvert = result_2.droit_ouvert_out
    prestations_familiales_dot_conditions_hors_age = result_2.conditions_hors_age_out
    prestations_familiales_dot_age_l512_3_2 = result_2.age_l512_3_2_out
    prestations_familiales_dot_regime_outre_mer_l751_1 = result_2.regime_outre_mer_l751_1_out
    prestations_familiales_dot_base_mensuelle = result_2.base_mensuelle_out
    try:
        temp_enfant_le_plus_age_dot_enfants = log_variable_definition(["AllocationsFamiliales",
                                                                       "enfant_le_plus_âgé.enfants"], enfants_a_charge)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=84, start_column=10,
                                             end_line=84, end_column=17,
                                             law_headings=["Prologue"]))
    enfant_le_plus_age_dot_enfants = temp_enfant_le_plus_age_dot_enfants
    result_3 = log_end_call(["AllocationsFamiliales", "enfant_le_plus_âgé",
                             "EnfantLePlusÂgé"], log_begin_call(["AllocationsFamiliales",
                                                                 "enfant_le_plus_âgé", "EnfantLePlusÂgé"], enfant_le_plus_age,
                                                                EnfantLePlusAgeIn(enfants_in=enfant_le_plus_age_dot_enfants)))
    enfant_le_plus_age_dot_le_plus_age = result_3.le_plus_age_out
    try:
        def temp_age_minimum_alinea_1_l521_3_1(param_4: Enfant):
            try:
                try:
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                         start_line=83, start_column=19,
                                                         end_line=83, end_column=69,
                                                         law_headings=["Article R521-1",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie réglementaire - Décrets en Conseil d'Etat",
                                                                       "Code de la sécurité sociale"]), ((param_4.date_de_naissance +
                                                                                                          duration_of_numbers(11, 0, 0)) <=
                                                                                                         date_of_numbers(2008, 4, 30))):
                        return version_avril_2008_dot_age_minimum_alinea_1_l521_3
                    else:
                        raise EmptyError
                except EmptyError:
                    return integer_of_string("14")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                     start_line=152,
                                                     start_column=11,
                                                     end_line=152,
                                                     end_column=38,
                                                     law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=152, start_column=11,
                                             end_line=152, end_column=38,
                                             law_headings=["Prologue"]))
    age_minimum_alinea_1_l521_3_1 = log_variable_definition(["AllocationsFamiliales",
                                                             "âge_minimum_alinéa_1_l521_3"], temp_age_minimum_alinea_1_l521_3_1)
    try:
        def temp_enfants_a_charge_droit_ouvert_prestation_familiale(enfant: Any):
            return log_end_call(["PrestationsFamiliales", "droit_ouvert"],
                                log_variable_definition(["PrestationsFamiliales",
                                                         "droit_ouvert", "output"],
                                                        log_begin_call(["PrestationsFamiliales", "droit_ouvert"],
                                                                       prestations_familiales_dot_droit_ouvert,
                                                                       log_variable_definition(["PrestationsFamiliales",
                                                                                                "droit_ouvert", "input"], enfant))))
        temp_enfants_a_charge_droit_ouvert_prestation_familiale_1 = list_filter(temp_enfants_a_charge_droit_ouvert_prestation_familiale,
                                                                                enfants_a_charge)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=100, start_column=11,
                                             end_line=100, end_column=61,
                                             law_headings=["Prologue"]))
    enfants_a_charge_droit_ouvert_prestation_familiale = log_variable_definition(["AllocationsFamiliales",
                                                                                  "enfants_à_charge_droit_ouvert_prestation_familiale"],
                                                                                 temp_enfants_a_charge_droit_ouvert_prestation_familiale_1)
    try:
        def temp_est_enfant_le_plus_age(param_5: Enfant):
            try:
                return (enfant_le_plus_age_dot_le_plus_age == param_5)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                     start_line=154,
                                                     start_column=11,
                                                     end_line=154,
                                                     end_column=33,
                                                     law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=154, start_column=11,
                                             end_line=154, end_column=33,
                                             law_headings=["Prologue"]))
    est_enfant_le_plus_age = log_variable_definition(["AllocationsFamiliales",
                                                      "est_enfant_le_plus_âgé"], temp_est_enfant_le_plus_age)
    try:
        def temp_plafond__i_i_d521_3(_: Any):
            return (money_of_cents_string("7830000") +
                    (money_of_cents_string("559500") *
                     decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale))))

        def temp_plafond__i_i_d521_3_1(_: Any):
            return True

        def temp_plafond__i_i_d521_3_2(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=94, start_column=5, end_line=94, end_column=69,
                                                 law_headings=["Circulaire interministérielle N° DSS/SD2B/2017/352 du 22 décembre 2017 relative à la revalorisation au 1er janvier 2018 des plafonds de ressources d’attribution de certaines prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à la Réunion, à Saint-Barthélemy, à Saint-Martin et à Mayotte",
                                                               "Montant des plafonds de ressources",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2018, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2018, 12, 31)))):
                return (money_of_cents_string("7877000") +
                        (money_of_cents_string("562800") *
                         decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale))))
            else:
                raise EmptyError

        def temp_plafond__i_i_d521_3_3(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=127, start_column=5, end_line=127, end_column=69,
                                                 law_headings=["Instruction interministérielle n° DSS/SD2B/2018/279 du 17 décembre 2018 relative à la revalorisation au 1er janvier 2019 des plafonds de ressources d’attribution de certaines prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à la Réunion, à Saint-Barthélemy, à Saint-Martin et à Mayotte",
                                                               "Montant des plafonds de ressources",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2019, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2019, 12, 31)))):
                return (money_of_cents_string("7955800") +
                        (money_of_cents_string("568400") *
                         decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale))))
            else:
                raise EmptyError

        def temp_plafond__i_i_d521_3_4(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=160, start_column=5, end_line=160, end_column=69,
                                                 law_headings=["Instruction interministerielle no DSS/SD2B/2019/261 du 18 décembre 2019 relative à la revalorisation au 1er janvier 2020 des plafonds de ressources d’attribution de certaines prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à La Réunion, à Saint-Barthélemy, à Saint-Martin et à Mayotte",
                                                               "Montant des plafonds de ressources",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2020, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2020, 12, 31)))):
                return (money_of_cents_string("8083100") +
                        (money_of_cents_string("577500") *
                         decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale))))
            else:
                raise EmptyError

        def temp_plafond__i_i_d521_3_5(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=196, start_column=5, end_line=196, end_column=69,
                                                 law_headings=["Article 1",
                                                               "Arrêté du 14 décembre 2020 relatif au montant des plafonds de ressources de certaines prestations familiales et aux tranches du barème applicable au recouvrement des indus et à la saisie des prestations",
                                                               "Montant des plafonds de ressources",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2021, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2021, 12, 31)))):
                return (money_of_cents_string("8155800") +
                        (money_of_cents_string("582700") *
                         decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale))))
            else:
                raise EmptyError
        temp_plafond__i_i_d521_3_6 = handle_default([temp_plafond__i_i_d521_3_5,
                                                    temp_plafond__i_i_d521_3_4,
                                                    temp_plafond__i_i_d521_3_3,
                                                    temp_plafond__i_i_d521_3_2],
                                                    temp_plafond__i_i_d521_3_1,
                                                    temp_plafond__i_i_d521_3)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=156, start_column=11,
                                             end_line=156, end_column=28,
                                             law_headings=["Prologue"]))
    plafond__i_i_d521_3 = log_variable_definition(["AllocationsFamiliales",
                                                   "plafond_II_d521_3"], temp_plafond__i_i_d521_3_6)
    try:
        def temp_plafond__i_d521_3(_: Any):
            return (money_of_cents_string("5595000") +
                    (money_of_cents_string("559500") *
                     decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale))))

        def temp_plafond__i_d521_3_1(_: Any):
            return True

        def temp_plafond__i_d521_3_2(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=87, start_column=5, end_line=87, end_column=69,
                                                 law_headings=["Circulaire interministérielle N° DSS/SD2B/2017/352 du 22 décembre 2017 relative à la revalorisation au 1er janvier 2018 des plafonds de ressources d’attribution de certaines prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à la Réunion, à Saint-Barthélemy, à Saint-Martin et à Mayotte",
                                                               "Montant des plafonds de ressources",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2018, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2018, 12, 31)))):
                return (money_of_cents_string("5628600") +
                        (money_of_cents_string("562800") *
                         decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale))))
            else:
                raise EmptyError

        def temp_plafond__i_d521_3_3(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=120, start_column=5, end_line=120, end_column=69,
                                                 law_headings=["Instruction interministérielle n° DSS/SD2B/2018/279 du 17 décembre 2018 relative à la revalorisation au 1er janvier 2019 des plafonds de ressources d’attribution de certaines prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à la Réunion, à Saint-Barthélemy, à Saint-Martin et à Mayotte",
                                                               "Montant des plafonds de ressources",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2019, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2019, 12, 31)))):
                return (money_of_cents_string("5684900") +
                        (money_of_cents_string("568400") *
                         decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale))))
            else:
                raise EmptyError

        def temp_plafond__i_d521_3_4(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=153, start_column=5, end_line=153, end_column=69,
                                                 law_headings=["Instruction interministerielle no DSS/SD2B/2019/261 du 18 décembre 2019 relative à la revalorisation au 1er janvier 2020 des plafonds de ressources d’attribution de certaines prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à La Réunion, à Saint-Barthélemy, à Saint-Martin et à Mayotte",
                                                               "Montant des plafonds de ressources",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2020, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2020, 12, 31)))):
                return (money_of_cents_string("5775900") +
                        (money_of_cents_string("577500") *
                         decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale))))
            else:
                raise EmptyError

        def temp_plafond__i_d521_3_5(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=180, start_column=5, end_line=180, end_column=69,
                                                 law_headings=["Article 1",
                                                               "Arrêté du 14 décembre 2020 relatif au montant des plafonds de ressources de certaines prestations familiales et aux tranches du barème applicable au recouvrement des indus et à la saisie des prestations",
                                                               "Montant des plafonds de ressources",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2021, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2021, 12, 31)))):
                return (money_of_cents_string("5827900") +
                        (money_of_cents_string("582700") *
                         decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale))))
            else:
                raise EmptyError
        temp_plafond__i_d521_3_6 = handle_default([temp_plafond__i_d521_3_5,
                                                  temp_plafond__i_d521_3_4,
                                                  temp_plafond__i_d521_3_3,
                                                  temp_plafond__i_d521_3_2],
                                                  temp_plafond__i_d521_3_1,
                                                  temp_plafond__i_d521_3)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=155, start_column=11,
                                             end_line=155, end_column=27,
                                             law_headings=["Prologue"]))
    plafond__i_d521_3 = log_variable_definition(["AllocationsFamiliales",
                                                 "plafond_I_d521_3"], temp_plafond__i_d521_3_6)
    try:
        try:
            try:
                if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                     start_line=426, start_column=5,
                                                     end_line=427, end_column=71,
                                                     law_headings=["Article L755-12",
                                                                   "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                   "Titre 5 : Dispositions particulières à la Guadeloupe, à la Guyane, à la Martinique, à La Réunion, à Saint-Barthélemy et à Saint-Martin",
                                                                   "Livre 7 : Régimes divers - Dispositions diverses",
                                                                   "Partie législative",
                                                                   "Code de la sécurité sociale"]), (prestations_familiales_dot_regime_outre_mer_l751_1 and
                                                                                                     (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) ==
                                                                                                      integer_of_string("1")))):
                    temp_droit_ouvert_complement = False
                else:
                    raise EmptyError
            except EmptyError:
                temp_droit_ouvert_complement = True
        except EmptyError:
            temp_droit_ouvert_complement = False
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=139, start_column=11,
                                             end_line=139, end_column=34,
                                             law_headings=["Prologue"]))
    droit_ouvert_complement = log_variable_definition(["AllocationsFamiliales",
                                                       "droit_ouvert_complément"], temp_droit_ouvert_complement)
    try:
        def temp_droit_ouvert_forfaitaire(param_6: Enfant):
            try:
                try:
                    try:
                        if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                             start_line=420, start_column=6,
                                                             end_line=421, end_column=72,
                                                             law_headings=["Article L755-12",
                                                                           "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                           "Titre 5 : Dispositions particulières à la Guadeloupe, à la Guyane, à la Martinique, à La Réunion, à Saint-Barthélemy et à Saint-Martin",
                                                                           "Livre 7 : Régimes divers - Dispositions diverses",
                                                                           "Partie législative",
                                                                           "Code de la sécurité sociale"]), (prestations_familiales_dot_regime_outre_mer_l751_1 and
                                                                                                             (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) ==
                                                                                                              integer_of_string("1")))):
                            return False
                        else:
                            raise EmptyError
                    except EmptyError:
                        if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                             start_line=119, start_column=5,
                                                             end_line=125, end_column=59,
                                                             law_headings=["Article L521-1",
                                                                           "Chapitre 1er : Allocations familiales",
                                                                           "Titre 2 : Prestations générales d'entretien",
                                                                           "Livre 5 : Prestations familiales et prestations assimilées",
                                                                           "Partie législative",
                                                                           "Code de la sécurité sociale"]), ((list_length(enfants_a_charge) >=
                                                                                                              nombre_enfants_alinea_2_l521_3) and
                                                                                                             ((param_6.age ==
                                                                                                               prestations_familiales_dot_age_l512_3_2) and
                                                                                                              (param_6.a_deja_ouvert_droit_aux_allocations_familiales and
                                                                                                               log_end_call(["PrestationsFamiliales",
                                                                                                                             "conditions_hors_âge"],
                                                                                                                            log_variable_definition(["PrestationsFamiliales",
                                                                                                                                                     "conditions_hors_âge", "output"],
                                                                                                                                                    log_begin_call(["PrestationsFamiliales",
                                                                                                                                                                    "conditions_hors_âge"],
                                                                                                                                                                   prestations_familiales_dot_conditions_hors_age,
                                                                                                                                                                   log_variable_definition(["PrestationsFamiliales",
                                                                                                                                                                                            "conditions_hors_âge", "input"],
                                                                                                                                                                                           param_6)))))))):
                            return True
                        else:
                            raise EmptyError
                except EmptyError:
                    return False
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                     start_line=127,
                                                     start_column=11,
                                                     end_line=127,
                                                     end_column=35,
                                                     law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=127, start_column=11,
                                             end_line=127, end_column=35,
                                             law_headings=["Prologue"]))
    droit_ouvert_forfaitaire = log_variable_definition(["AllocationsFamiliales",
                                                        "droit_ouvert_forfaitaire"], temp_droit_ouvert_forfaitaire)
    try:
        if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                integer_of_string("3")):
            temp_montant_initial_base_quatrieme_enfant_et_plus_mayotte = ((prestations_familiales_dot_base_mensuelle *
                                                                           decimal_of_string("0.0463")) *
                                                                          decimal_of_integer((list_length(enfants_a_charge_droit_ouvert_prestation_familiale) -
                                                                                              integer_of_string("3"))))
        else:
            temp_montant_initial_base_quatrieme_enfant_et_plus_mayotte = money_of_cents_string(
                "0")
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=124, start_column=11,
                                             end_line=124, end_column=64,
                                             law_headings=["Prologue"]))
    montant_initial_base_quatrieme_enfant_et_plus_mayotte = log_variable_definition(["AllocationsFamiliales",
                                                                                     "montant_initial_base_quatrième_enfant_et_plus_mayotte"],
                                                                                    temp_montant_initial_base_quatrieme_enfant_et_plus_mayotte)
    try:
        def temp_montant_initial_base_troisieme_enfant_mayotte(_: Any):
            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                    integer_of_string("2")):
                return (prestations_familiales_dot_base_mensuelle *
                        decimal_of_string("0.16"))
            else:
                return money_of_cents_string("0")

        def temp_montant_initial_base_troisieme_enfant_mayotte_1(_: Any):
            return True

        def temp_montant_initial_base_troisieme_enfant_mayotte_2(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=584, start_column=5, end_line=584, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2011, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2011, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("2")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.0463"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_troisieme_enfant_mayotte_3(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=591, start_column=5, end_line=591, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2012, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2012, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("2")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.0539"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_troisieme_enfant_mayotte_4(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=598, start_column=5, end_line=598, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2013, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2013, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("2")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.075"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_troisieme_enfant_mayotte_5(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=605, start_column=5, end_line=605, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2014, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2014, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("2")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.069"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_troisieme_enfant_mayotte_6(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=612, start_column=5, end_line=612, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2015, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2015, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("2")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.0766"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_troisieme_enfant_mayotte_7(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=619, start_column=5, end_line=619, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2016, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2016, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("2")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.0842"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_troisieme_enfant_mayotte_8(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=626, start_column=5, end_line=626, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2017, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2017, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("2")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.0918"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_troisieme_enfant_mayotte_9(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=633, start_column=5, end_line=633, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2018, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2018, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("2")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.1089"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_troisieme_enfant_mayotte_10(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=640, start_column=5, end_line=640, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2019, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2019, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("2")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.1259"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_troisieme_enfant_mayotte_11(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=647, start_column=5, end_line=647, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2020, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2020, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("2")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.143"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError
        temp_montant_initial_base_troisieme_enfant_mayotte_12 = handle_default(
            [temp_montant_initial_base_troisieme_enfant_mayotte_11,
             temp_montant_initial_base_troisieme_enfant_mayotte_10,
             temp_montant_initial_base_troisieme_enfant_mayotte_9,
             temp_montant_initial_base_troisieme_enfant_mayotte_8,
             temp_montant_initial_base_troisieme_enfant_mayotte_7,
             temp_montant_initial_base_troisieme_enfant_mayotte_6,
             temp_montant_initial_base_troisieme_enfant_mayotte_5,
             temp_montant_initial_base_troisieme_enfant_mayotte_4,
             temp_montant_initial_base_troisieme_enfant_mayotte_3,
             temp_montant_initial_base_troisieme_enfant_mayotte_2],
            temp_montant_initial_base_troisieme_enfant_mayotte_1,
            temp_montant_initial_base_troisieme_enfant_mayotte)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=123, start_column=11,
                                             end_line=123, end_column=56,
                                             law_headings=["Prologue"]))
    montant_initial_base_troisieme_enfant_mayotte = log_variable_definition(["AllocationsFamiliales",
                                                                             "montant_initial_base_troisième_enfant_mayotte"],
                                                                            temp_montant_initial_base_troisieme_enfant_mayotte_12)
    try:
        def temp_montant_initial_base_deuxieme_enfant_mayotte(_: Any):
            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                    integer_of_string("1")):
                return (prestations_familiales_dot_base_mensuelle *
                        decimal_of_string("0.32"))
            else:
                return money_of_cents_string("0")

        def temp_montant_initial_base_deuxieme_enfant_mayotte_1(_: Any):
            return True

        def temp_montant_initial_base_deuxieme_enfant_mayotte_2(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=513, start_column=5, end_line=513, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2011, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2011, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("1")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.232"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_deuxieme_enfant_mayotte_3(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=520, start_column=5, end_line=520, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2012, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2012, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("1")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.2379"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_deuxieme_enfant_mayotte_4(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=527, start_column=5, end_line=527, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2013, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2013, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("1")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.2437"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_deuxieme_enfant_mayotte_5(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=534, start_column=5, end_line=534, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2014, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2014, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("1")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.2496"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_deuxieme_enfant_mayotte_6(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=541, start_column=5, end_line=541, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2015, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2015, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("1")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.2555"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_deuxieme_enfant_mayotte_7(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=548, start_column=5, end_line=548, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2016, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2016, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("1")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.273"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_deuxieme_enfant_mayotte_8(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=555, start_column=5, end_line=555, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2017, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2017, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("1")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.2672"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_deuxieme_enfant_mayotte_9(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=562, start_column=5, end_line=562, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2018, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2018, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("1")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.284"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_deuxieme_enfant_mayotte_10(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=569, start_column=5, end_line=569, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2019, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2019, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("1")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.2936"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_deuxieme_enfant_mayotte_11(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=576, start_column=5, end_line=576, end_column=69,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2020, 1, 1)) and (date_courante_2 <=
                                                                                                                       date_of_numbers(2020, 12, 31)))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("1")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.3068"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError
        temp_montant_initial_base_deuxieme_enfant_mayotte_12 = handle_default(
            [temp_montant_initial_base_deuxieme_enfant_mayotte_11,
             temp_montant_initial_base_deuxieme_enfant_mayotte_10,
             temp_montant_initial_base_deuxieme_enfant_mayotte_9,
             temp_montant_initial_base_deuxieme_enfant_mayotte_8,
             temp_montant_initial_base_deuxieme_enfant_mayotte_7,
             temp_montant_initial_base_deuxieme_enfant_mayotte_6,
             temp_montant_initial_base_deuxieme_enfant_mayotte_5,
             temp_montant_initial_base_deuxieme_enfant_mayotte_4,
             temp_montant_initial_base_deuxieme_enfant_mayotte_3,
             temp_montant_initial_base_deuxieme_enfant_mayotte_2],
            temp_montant_initial_base_deuxieme_enfant_mayotte_1,
            temp_montant_initial_base_deuxieme_enfant_mayotte)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=122, start_column=11,
                                             end_line=122, end_column=55,
                                             law_headings=["Prologue"]))
    montant_initial_base_deuxieme_enfant_mayotte = log_variable_definition(["AllocationsFamiliales",
                                                                            "montant_initial_base_deuxième_enfant_mayotte"],
                                                                           temp_montant_initial_base_deuxieme_enfant_mayotte_12)
    try:
        def temp_montant_initial_base_premier_enfant_mayotte(_: Any):
            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                    integer_of_string("0")):
                return (prestations_familiales_dot_base_mensuelle *
                        decimal_of_string("0.0588"))
            else:
                return money_of_cents_string("0")

        def temp_montant_initial_base_premier_enfant_mayotte_1(_: Any):
            return True

        def temp_montant_initial_base_premier_enfant_mayotte_2(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=425, start_column=5, end_line=426, end_column=53,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2011, 1, 1)) and ((date_courante_2 <=
                                                                                                                        date_of_numbers(2011, 12, 31)) and
                                                                                                                       not avait_enfant_a_charge_avant_1er_janvier_2012))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("0")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.145"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_premier_enfant_mayotte_3(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=433, start_column=5, end_line=434, end_column=53,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2012, 1, 1)) and ((date_courante_2 <=
                                                                                                                        date_of_numbers(2012, 12, 31)) and
                                                                                                                       not avait_enfant_a_charge_avant_1er_janvier_2012))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("0")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.1393"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_premier_enfant_mayotte_4(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=441, start_column=5, end_line=442, end_column=53,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2013, 1, 1)) and ((date_courante_2 <=
                                                                                                                        date_of_numbers(2013, 12, 31)) and
                                                                                                                       not avait_enfant_a_charge_avant_1er_janvier_2012))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("0")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.1335"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_premier_enfant_mayotte_5(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=449, start_column=5, end_line=450, end_column=53,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2014, 1, 1)) and ((date_courante_2 <=
                                                                                                                        date_of_numbers(2014, 12, 31)) and
                                                                                                                       not avait_enfant_a_charge_avant_1er_janvier_2012))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("0")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.1278"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_premier_enfant_mayotte_6(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=457, start_column=5, end_line=458, end_column=53,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2015, 1, 1)) and ((date_courante_2 <=
                                                                                                                        date_of_numbers(2015, 12, 31)) and
                                                                                                                       not avait_enfant_a_charge_avant_1er_janvier_2012))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("0")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.122"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_premier_enfant_mayotte_7(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=465, start_column=5, end_line=466, end_column=53,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2016, 1, 1)) and ((date_courante_2 <=
                                                                                                                        date_of_numbers(2016, 12, 31)) and
                                                                                                                       not avait_enfant_a_charge_avant_1er_janvier_2012))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("0")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.1163"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_premier_enfant_mayotte_8(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=473, start_column=5, end_line=474, end_column=53,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2017, 1, 1)) and ((date_courante_2 <=
                                                                                                                        date_of_numbers(2017, 12, 31)) and
                                                                                                                       not avait_enfant_a_charge_avant_1er_janvier_2012))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("0")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.115"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_premier_enfant_mayotte_9(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=481, start_column=5, end_line=482, end_column=53,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2018, 1, 1)) and ((date_courante_2 <=
                                                                                                                        date_of_numbers(2018, 12, 31)) and
                                                                                                                       not avait_enfant_a_charge_avant_1er_janvier_2012))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("0")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.0976"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_premier_enfant_mayotte_10(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=489, start_column=5, end_line=490, end_column=53,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2019, 1, 1)) and ((date_courante_2 <=
                                                                                                                        date_of_numbers(2019, 12, 31)) and
                                                                                                                       not avait_enfant_a_charge_avant_1er_janvier_2012))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("0")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.0847"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_premier_enfant_mayotte_11(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=497, start_column=5, end_line=498, end_column=53,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), ((date_courante_2 >=
                                                                                     date_of_numbers(2020, 1, 1)) and ((date_courante_2 <=
                                                                                                                        date_of_numbers(2020, 12, 31)) and
                                                                                                                       not avait_enfant_a_charge_avant_1er_janvier_2012))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("0")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.0717"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_premier_enfant_mayotte_12(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=505, start_column=5, end_line=505, end_column=49,
                                                 law_headings=["Annexe",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), avait_enfant_a_charge_avant_1er_janvier_2012):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("0")):
                    return money_of_cents_string("5728")
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError
        temp_montant_initial_base_premier_enfant_mayotte_13 = handle_default(
            [temp_montant_initial_base_premier_enfant_mayotte_12,
             temp_montant_initial_base_premier_enfant_mayotte_11,
             temp_montant_initial_base_premier_enfant_mayotte_10,
             temp_montant_initial_base_premier_enfant_mayotte_9,
             temp_montant_initial_base_premier_enfant_mayotte_8,
             temp_montant_initial_base_premier_enfant_mayotte_7,
             temp_montant_initial_base_premier_enfant_mayotte_6,
             temp_montant_initial_base_premier_enfant_mayotte_5,
             temp_montant_initial_base_premier_enfant_mayotte_4,
             temp_montant_initial_base_premier_enfant_mayotte_3,
             temp_montant_initial_base_premier_enfant_mayotte_2],
            temp_montant_initial_base_premier_enfant_mayotte_1,
            temp_montant_initial_base_premier_enfant_mayotte)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=121, start_column=11,
                                             end_line=121, end_column=54,
                                             law_headings=["Prologue"]))
    montant_initial_base_premier_enfant_mayotte = log_variable_definition(["AllocationsFamiliales",
                                                                           "montant_initial_base_premier_enfant_mayotte"],
                                                                          temp_montant_initial_base_premier_enfant_mayotte_13)
    try:
        temp_nombre_total_enfants = decimal_of_integer(
            list_length(enfants_a_charge_droit_ouvert_prestation_familiale))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=115, start_column=11,
                                             end_line=115, end_column=31,
                                             law_headings=["Prologue"]))
    nombre_total_enfants = log_variable_definition(["AllocationsFamiliales",
                                                    "nombre_total_enfants"], temp_nombre_total_enfants)
    try:
        def temp_nombre_moyen_enfants(acc_1: Decimal, enfant_1: Any):
            match_arg_16 = log_end_call(["AllocationsFamiliales",
                                         "prise_en_compte"],
                                        log_variable_definition(["AllocationsFamiliales",
                                                                 "prise_en_compte", "output"],
                                                                log_begin_call(["AllocationsFamiliales", "prise_en_compte"],
                                                                               prise_en_compte,
                                                                               log_variable_definition(["AllocationsFamiliales",
                                                                                                        "prise_en_compte", "input"],
                                                                                                       enfant_1))))
            if match_arg_16.code == PriseEnCompte_Code.Complete:
                _ = match_arg_16.value
                temp_nombre_moyen_enfants_1 = decimal_of_string("1.")
            elif match_arg_16.code == PriseEnCompte_Code.Partagee:
                _ = match_arg_16.value
                temp_nombre_moyen_enfants_1 = decimal_of_string("0.5")
            elif match_arg_16.code == PriseEnCompte_Code.Zero:
                _ = match_arg_16.value
                temp_nombre_moyen_enfants_1 = decimal_of_string("0.")
            return (acc_1 + temp_nombre_moyen_enfants_1)
        temp_nombre_moyen_enfants_2 = list_fold_left(temp_nombre_moyen_enfants,
                                                     decimal_of_string("0."),
                                                     enfants_a_charge_droit_ouvert_prestation_familiale)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=114, start_column=11,
                                             end_line=114, end_column=31,
                                             law_headings=["Prologue"]))
    nombre_moyen_enfants = log_variable_definition(["AllocationsFamiliales",
                                                    "nombre_moyen_enfants"], temp_nombre_moyen_enfants_2)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                 start_line=359, start_column=5, end_line=360, end_column=71,
                                                 law_headings=["Article D755-5",
                                                               "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                               "Titre 5 : Départements d'outre-mer",
                                                               "Livre 7 : Régimes divers - Dispositions diverses",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), (prestations_familiales_dot_regime_outre_mer_l751_1 and
                                                                                                 (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) ==
                                                                                                  integer_of_string("1")))):
                temp_montant_initial_base_premier_enfant = (prestations_familiales_dot_base_mensuelle *
                                                            decimal_of_string("0.0588"))
            else:
                raise EmptyError
        except EmptyError:
            temp_montant_initial_base_premier_enfant = money_of_cents_string(
                "0")
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=110, start_column=11,
                                             end_line=110, end_column=46,
                                             law_headings=["Prologue"]))
    montant_initial_base_premier_enfant = log_variable_definition(["AllocationsFamiliales",
                                                                   "montant_initial_base_premier_enfant"],
                                                                  temp_montant_initial_base_premier_enfant)
    try:
        try:
            def temp_droit_ouvert_base(_: Any):
                if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                     start_line=101, start_column=5,
                                                     end_line=101, end_column=70,
                                                     law_headings=["Article L521-1",
                                                                   "Chapitre 1er : Allocations familiales",
                                                                   "Titre 2 : Prestations générales d'entretien",
                                                                   "Livre 5 : Prestations familiales et prestations assimilées",
                                                                   "Partie législative",
                                                                   "Code de la sécurité sociale"]), (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >=
                                                                                                     integer_of_string("2"))):
                    return True
                else:
                    raise EmptyError

            def temp_droit_ouvert_base_1(_: Any):
                return True

            def temp_droit_ouvert_base_2(_: Any):
                if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                     start_line=406, start_column=5,
                                                     end_line=407, end_column=72,
                                                     law_headings=["Article L755-12",
                                                                   "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                   "Titre 5 : Dispositions particulières à la Guadeloupe, à la Guyane, à la Martinique, à La Réunion, à Saint-Barthélemy et à Saint-Martin",
                                                                   "Livre 7 : Régimes divers - Dispositions diverses",
                                                                   "Partie législative",
                                                                   "Code de la sécurité sociale"]), (prestations_familiales_dot_regime_outre_mer_l751_1 and
                                                                                                     (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >=
                                                                                                      integer_of_string("1")))):
                    return True
                else:
                    raise EmptyError

            def temp_droit_ouvert_base_3(_: Any):
                if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                     start_line=344, start_column=5,
                                                     end_line=345, end_column=72, law_headings=["Article 7",
                                                                                                "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                                "Dispositions spéciales relatives à Mayotte",
                                                                                                "Décrets divers"]), ((residence_2 ==
                                                                                                                      Collectivite(Collectivite_Code.Mayotte, Unit())) and
                                                                                                                     (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >=
                                                                                                                      integer_of_string("1")))):
                    return True
                else:
                    raise EmptyError
            temp_droit_ouvert_base_4 = handle_default([temp_droit_ouvert_base_3,
                                                      temp_droit_ouvert_base_2],
                                                      temp_droit_ouvert_base_1,
                                                      temp_droit_ouvert_base)
        except EmptyError:
            temp_droit_ouvert_base_4 = False
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=108, start_column=11,
                                             end_line=108, end_column=28,
                                             law_headings=["Prologue"]))
    droit_ouvert_base = log_variable_definition(["AllocationsFamiliales",
                                                 "droit_ouvert_base"], temp_droit_ouvert_base_4)
    try:
        def temp_droit_ouvert_majoration(param_7: Enfant):
            try:
                try:
                    try:
                        if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                             start_line=313, start_column=5,
                                                             end_line=315, end_column=58,
                                                             law_headings=["Article L521-3",
                                                                           "Chapitre 1er : Allocations familiales",
                                                                           "Titre 2 : Prestations générales d'entretien",
                                                                           "Livre 5 : Prestations familiales et prestations assimilées",
                                                                           "Partie législative",
                                                                           "Code de la sécurité sociale"]), ((list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >=
                                                                                                              nombre_enfants_alinea_2_l521_3) and
                                                                                                             (param_7.age >=
                                                                                                              log_end_call(["AllocationsFamiliales",
                                                                                                                            "âge_minimum_alinéa_1_l521_3"],
                                                                                                                           log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                    "âge_minimum_alinéa_1_l521_3", "output"],
                                                                                                                                                   log_begin_call(["AllocationsFamiliales",
                                                                                                                                                                   "âge_minimum_alinéa_1_l521_3"],
                                                                                                                                                                  age_minimum_alinea_1_l521_3_1,
                                                                                                                                                                  log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                           "âge_minimum_alinéa_1_l521_3", "input"],
                                                                                                                                                                                          param_7))))))):
                            return True
                        else:
                            raise EmptyError
                    except EmptyError:
                        if log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                             start_line=299, start_column=5,
                                                             end_line=300, end_column=58,
                                                             law_headings=["Article L521-3",
                                                                           "Chapitre 1er : Allocations familiales",
                                                                           "Titre 2 : Prestations générales d'entretien",
                                                                           "Livre 5 : Prestations familiales et prestations assimilées",
                                                                           "Partie législative",
                                                                           "Code de la sécurité sociale"]), (not log_end_call(["AllocationsFamiliales",
                                                                                                                               "est_enfant_le_plus_âgé"],
                                                                                                                              log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                       "est_enfant_le_plus_âgé", "output"],
                                                                                                                                                      log_begin_call(["AllocationsFamiliales",
                                                                                                                                                                      "est_enfant_le_plus_âgé"],
                                                                                                                                                                     est_enfant_le_plus_age,
                                                                                                                                                                     log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                              "est_enfant_le_plus_âgé", "input"],
                                                                                                                                                                                             param_7)))) and (param_7.age >=
                                                                                                                                                                                                              log_end_call(["AllocationsFamiliales",
                                                                                                                                                                                                                            "âge_minimum_alinéa_1_l521_3"],
                                                                                                                                                                                                                           log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                                                                                    "âge_minimum_alinéa_1_l521_3", "output"],
                                                                                                                                                                                                                                                   log_begin_call(["AllocationsFamiliales",
                                                                                                                                                                                                                                                                   "âge_minimum_alinéa_1_l521_3"],
                                                                                                                                                                                                                                                                  age_minimum_alinea_1_l521_3_1,
                                                                                                                                                                                                                                                                  log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                                                                                                                           "âge_minimum_alinéa_1_l521_3", "input"],
                                                                                                                                                                                                                                                                                          param_7))))))):
                            return True
                        else:
                            raise EmptyError
                except EmptyError:
                    return False
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                     start_line=132,
                                                     start_column=11,
                                                     end_line=132,
                                                     end_column=34,
                                                     law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=132, start_column=11,
                                             end_line=132, end_column=34,
                                             law_headings=["Prologue"]))
    droit_ouvert_majoration = log_variable_definition(["AllocationsFamiliales",
                                                       "droit_ouvert_majoration"], temp_droit_ouvert_majoration)
    try:
        def temp_complement_degressif(param_8: Money):
            try:
                def temp_complement_degressif_1(_: Any):
                    return money_of_cents_string("0")

                def temp_complement_degressif_2(_: Any):
                    return True

                def temp_complement_degressif_3(_: Any):
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                         start_line=162, start_column=5,
                                                         end_line=163, end_column=68,
                                                         law_headings=["Article D521-1",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie réglementaire - Décrets simples",
                                                                       "Code de la sécurité sociale"]), ((ressources_menage >
                                                                                                          plafond__i_d521_3) and (ressources_menage <=
                                                                                                                                  (plafond__i_d521_3 + (param_8 *
                                                                                                                                                        decimal_of_string("12.")))))):
                        return ((plafond__i_d521_3 + ((param_8 *
                                                       decimal_of_string("12.")) - ressources_menage)) *
                                (decimal_of_string("1.") /
                                 decimal_of_string("12.")))
                    else:
                        raise EmptyError

                def temp_complement_degressif_4(_: Any):
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                         start_line=170, start_column=5,
                                                         end_line=171, end_column=68,
                                                         law_headings=["Article D521-1",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie réglementaire - Décrets simples",
                                                                       "Code de la sécurité sociale"]), ((ressources_menage >
                                                                                                          plafond__i_i_d521_3) and (ressources_menage <=
                                                                                                                                    (plafond__i_i_d521_3 + (param_8 *
                                                                                                                                                            decimal_of_string("12.")))))):
                        return ((plafond__i_i_d521_3 + ((param_8 *
                                                         decimal_of_string("12.")) - ressources_menage)) *
                                (decimal_of_string("1.") /
                                 decimal_of_string("12.")))
                    else:
                        raise EmptyError
                return handle_default([temp_complement_degressif_4,
                                      temp_complement_degressif_3],
                                      temp_complement_degressif_2,
                                      temp_complement_degressif_1)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                     start_line=141,
                                                     start_column=11,
                                                     end_line=141,
                                                     end_column=31,
                                                     law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=141, start_column=11,
                                             end_line=141, end_column=31,
                                             law_headings=["Prologue"]))
    complement_degressif = log_variable_definition(["AllocationsFamiliales",
                                                    "complément_dégressif"], temp_complement_degressif)
    try:
        def temp_montant_verse_forfaitaire_par_enfant(_: Any):
            raise EmptyError

        def temp_montant_verse_forfaitaire_par_enfant_1(_: Any):
            return True

        def temp_montant_verse_forfaitaire_par_enfant_2(_: Any):
            if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                 start_line=215, start_column=5, end_line=215, end_column=43,
                                                 law_headings=["Article D521-2",
                                                               "Chapitre 1er : Allocations familiales",
                                                               "Titre 2 : Prestations générales d'entretien",
                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), (ressources_menage <=
                                                                                                 plafond__i_d521_3)):
                return (prestations_familiales_dot_base_mensuelle *
                        decimal_of_string("0.20234"))
            else:
                raise EmptyError

        def temp_montant_verse_forfaitaire_par_enfant_3(_: Any):
            if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                 start_line=229, start_column=5, end_line=230, end_column=46,
                                                 law_headings=["Article D521-2",
                                                               "Chapitre 1er : Allocations familiales",
                                                               "Titre 2 : Prestations générales d'entretien",
                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), ((ressources_menage >
                                                                                                  plafond__i_d521_3) and (ressources_menage <=
                                                                                                                          plafond__i_i_d521_3))):
                return (prestations_familiales_dot_base_mensuelle *
                        decimal_of_string("0.1117"))
            else:
                raise EmptyError

        def temp_montant_verse_forfaitaire_par_enfant_4(_: Any):
            if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                 start_line=243, start_column=5, end_line=243, end_column=43,
                                                 law_headings=["Article D521-2",
                                                               "Chapitre 1er : Allocations familiales",
                                                               "Titre 2 : Prestations générales d'entretien",
                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), (ressources_menage >
                                                                                                 plafond__i_i_d521_3)):
                return (prestations_familiales_dot_base_mensuelle *
                        decimal_of_string("0.0559"))
            else:
                raise EmptyError
        temp_montant_verse_forfaitaire_par_enfant_5 = handle_default(
            [temp_montant_verse_forfaitaire_par_enfant_4,
             temp_montant_verse_forfaitaire_par_enfant_3,
             temp_montant_verse_forfaitaire_par_enfant_2],
            temp_montant_verse_forfaitaire_par_enfant_1,
            temp_montant_verse_forfaitaire_par_enfant)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=128, start_column=11,
                                             end_line=128, end_column=47,
                                             law_headings=["Prologue"]))
    montant_verse_forfaitaire_par_enfant = log_variable_definition(["AllocationsFamiliales",
                                                                    "montant_versé_forfaitaire_par_enfant"],
                                                                   temp_montant_verse_forfaitaire_par_enfant_5)
    try:
        def temp_montant_initial_base_troisieme_enfant_et_plus(_: Any):
            raise EmptyError

        def temp_montant_initial_base_troisieme_enfant_et_plus_1(_: Any):
            return True

        def temp_montant_initial_base_troisieme_enfant_et_plus_2(_: Any):
            if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                 start_line=35, start_column=3, end_line=35, end_column=41,
                                                 law_headings=["Article D521-1",
                                                               "Chapitre 1er : Allocations familiales",
                                                               "Titre 2 : Prestations générales d'entretien",
                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), (ressources_menage <=
                                                                                                 plafond__i_d521_3)):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("2")):
                    return ((prestations_familiales_dot_base_mensuelle *
                             decimal_of_string("0.41")) *
                            decimal_of_integer((list_length(enfants_a_charge_droit_ouvert_prestation_familiale) -
                                                integer_of_string("2"))))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_troisieme_enfant_et_plus_3(_: Any):
            if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                 start_line=74, start_column=3, end_line=75, end_column=44,
                                                 law_headings=["Article D521-1",
                                                               "Chapitre 1er : Allocations familiales",
                                                               "Titre 2 : Prestations générales d'entretien",
                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), ((ressources_menage >
                                                                                                  plafond__i_d521_3) and (ressources_menage <=
                                                                                                                          plafond__i_i_d521_3))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("2")):
                    return ((prestations_familiales_dot_base_mensuelle *
                             decimal_of_string("0.205")) *
                            decimal_of_integer((list_length(enfants_a_charge_droit_ouvert_prestation_familiale) -
                                                integer_of_string("2"))))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_troisieme_enfant_et_plus_4(_: Any):
            if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                 start_line=113, start_column=3, end_line=113, end_column=41,
                                                 law_headings=["Article D521-1",
                                                               "Chapitre 1er : Allocations familiales",
                                                               "Titre 2 : Prestations générales d'entretien",
                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), (ressources_menage >
                                                                                                 plafond__i_i_d521_3)):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("2")):
                    return ((prestations_familiales_dot_base_mensuelle *
                             decimal_of_string("0.1025")) *
                            decimal_of_integer((list_length(enfants_a_charge_droit_ouvert_prestation_familiale) -
                                                integer_of_string("2"))))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError
        temp_montant_initial_base_troisieme_enfant_et_plus_5 = handle_default(
            [temp_montant_initial_base_troisieme_enfant_et_plus_4,
             temp_montant_initial_base_troisieme_enfant_et_plus_3,
             temp_montant_initial_base_troisieme_enfant_et_plus_2],
            temp_montant_initial_base_troisieme_enfant_et_plus_1,
            temp_montant_initial_base_troisieme_enfant_et_plus)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=112, start_column=11,
                                             end_line=112, end_column=56,
                                             law_headings=["Prologue"]))
    montant_initial_base_troisieme_enfant_et_plus = log_variable_definition(["AllocationsFamiliales",
                                                                             "montant_initial_base_troisième_enfant_et_plus"],
                                                                            temp_montant_initial_base_troisieme_enfant_et_plus_5)
    try:
        def temp_montant_initial_base_deuxieme_enfant(_: Any):
            raise EmptyError

        def temp_montant_initial_base_deuxieme_enfant_1(_: Any):
            return True

        def temp_montant_initial_base_deuxieme_enfant_2(_: Any):
            if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                 start_line=35, start_column=3, end_line=35, end_column=41,
                                                 law_headings=["Article D521-1",
                                                               "Chapitre 1er : Allocations familiales",
                                                               "Titre 2 : Prestations générales d'entretien",
                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), (ressources_menage <=
                                                                                                 plafond__i_d521_3)):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("1")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.32"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_deuxieme_enfant_3(_: Any):
            if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                 start_line=74, start_column=3, end_line=75, end_column=44,
                                                 law_headings=["Article D521-1",
                                                               "Chapitre 1er : Allocations familiales",
                                                               "Titre 2 : Prestations générales d'entretien",
                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), ((ressources_menage >
                                                                                                  plafond__i_d521_3) and (ressources_menage <=
                                                                                                                          plafond__i_i_d521_3))):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("1")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.16"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError

        def temp_montant_initial_base_deuxieme_enfant_4(_: Any):
            if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                 start_line=113, start_column=3, end_line=113, end_column=41,
                                                 law_headings=["Article D521-1",
                                                               "Chapitre 1er : Allocations familiales",
                                                               "Titre 2 : Prestations générales d'entretien",
                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), (ressources_menage >
                                                                                                 plafond__i_i_d521_3)):
                if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) >
                        integer_of_string("1")):
                    return (prestations_familiales_dot_base_mensuelle *
                            decimal_of_string("0.08"))
                else:
                    return money_of_cents_string("0")
            else:
                raise EmptyError
        temp_montant_initial_base_deuxieme_enfant_5 = handle_default(
            [temp_montant_initial_base_deuxieme_enfant_4,
             temp_montant_initial_base_deuxieme_enfant_3,
             temp_montant_initial_base_deuxieme_enfant_2],
            temp_montant_initial_base_deuxieme_enfant_1,
            temp_montant_initial_base_deuxieme_enfant)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=111, start_column=11,
                                             end_line=111, end_column=47,
                                             law_headings=["Prologue"]))
    montant_initial_base_deuxieme_enfant = log_variable_definition(["AllocationsFamiliales",
                                                                    "montant_initial_base_deuxième_enfant"],
                                                                   temp_montant_initial_base_deuxieme_enfant_5)
    try:
        if (nombre_total_enfants ==
                decimal_of_string("0.")):
            temp_rapport_enfants_total_moyen = decimal_of_string("0.")
        else:
            temp_rapport_enfants_total_moyen = (nombre_moyen_enfants /
                                                nombre_total_enfants)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=113, start_column=11,
                                             end_line=113, end_column=38,
                                             law_headings=["Prologue"]))
    rapport_enfants_total_moyen = log_variable_definition(["AllocationsFamiliales",
                                                           "rapport_enfants_total_moyen"], temp_rapport_enfants_total_moyen)
    try:
        def temp_montant_initial_metropole_majoration(param_9: Enfant):
            try:
                def temp_montant_initial_metropole_majoration_1(_: Any):
                    raise EmptyError

                def temp_montant_initial_metropole_majoration_2(_: Any):
                    return True

                def temp_montant_initial_metropole_majoration_3(_: Any):
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                         start_line=55, start_column=3,
                                                         end_line=55, end_column=41,
                                                         law_headings=["Article D521-1",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie réglementaire - Décrets simples",
                                                                       "Code de la sécurité sociale"]), ((ressources_menage <=
                                                                                                          plafond__i_d521_3) and
                                                                                                         log_end_call(["AllocationsFamiliales",
                                                                                                                       "droit_ouvert_majoration"],
                                                                                                                      log_variable_definition(["AllocationsFamiliales",
                                                                                                                                               "droit_ouvert_majoration", "output"],
                                                                                                                                              log_begin_call(["AllocationsFamiliales",
                                                                                                                                                              "droit_ouvert_majoration"], droit_ouvert_majoration,
                                                                                                                                                             log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                      "droit_ouvert_majoration", "input"],
                                                                                                                                                                                     param_9)))))):
                        return (prestations_familiales_dot_base_mensuelle *
                                decimal_of_string("0.16"))
                    else:
                        raise EmptyError

                def temp_montant_initial_metropole_majoration_4(_: Any):
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                         start_line=95, start_column=3,
                                                         end_line=96, end_column=44,
                                                         law_headings=["Article D521-1",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie réglementaire - Décrets simples",
                                                                       "Code de la sécurité sociale"]), (((ressources_menage >
                                                                                                           plafond__i_d521_3) and (ressources_menage <=
                                                                                                                                   plafond__i_i_d521_3)) and
                                                                                                         log_end_call(["AllocationsFamiliales",
                                                                                                                       "droit_ouvert_majoration"],
                                                                                                                      log_variable_definition(["AllocationsFamiliales",
                                                                                                                                               "droit_ouvert_majoration", "output"],
                                                                                                                                              log_begin_call(["AllocationsFamiliales",
                                                                                                                                                              "droit_ouvert_majoration"], droit_ouvert_majoration,
                                                                                                                                                             log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                      "droit_ouvert_majoration", "input"],
                                                                                                                                                                                     param_9)))))):
                        return (prestations_familiales_dot_base_mensuelle *
                                decimal_of_string("0.08"))
                    else:
                        raise EmptyError

                def temp_montant_initial_metropole_majoration_5(_: Any):
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                         start_line=132, start_column=3,
                                                         end_line=132, end_column=41,
                                                         law_headings=["Article D521-1",
                                                                       "Chapitre 1er : Allocations familiales",
                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie réglementaire - Décrets simples",
                                                                       "Code de la sécurité sociale"]), ((ressources_menage >
                                                                                                          plafond__i_i_d521_3) and
                                                                                                         log_end_call(["AllocationsFamiliales",
                                                                                                                       "droit_ouvert_majoration"],
                                                                                                                      log_variable_definition(["AllocationsFamiliales",
                                                                                                                                               "droit_ouvert_majoration", "output"],
                                                                                                                                              log_begin_call(["AllocationsFamiliales",
                                                                                                                                                              "droit_ouvert_majoration"], droit_ouvert_majoration,
                                                                                                                                                             log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                      "droit_ouvert_majoration", "input"],
                                                                                                                                                                                     param_9)))))):
                        return (prestations_familiales_dot_base_mensuelle *
                                decimal_of_string("0.04"))
                    else:
                        raise EmptyError

                def temp_montant_initial_metropole_majoration_6(_: Any):
                    if log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=27, start_column=5,
                                                         end_line=27, end_column=44,
                                                         law_headings=["Règles diverses", "Épilogue",
                                                                       "Décrets divers"]), not log_end_call(["AllocationsFamiliales",
                                                                                                             "droit_ouvert_majoration"],
                                                                                                            log_variable_definition(["AllocationsFamiliales",
                                                                                                                                     "droit_ouvert_majoration", "output"],
                                                                                                                                    log_begin_call(["AllocationsFamiliales",
                                                                                                                                                    "droit_ouvert_majoration"], droit_ouvert_majoration,
                                                                                                                                                   log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                            "droit_ouvert_majoration", "input"],
                                                                                                                                                                           param_9))))):
                        return money_of_cents_string("0")
                    else:
                        raise EmptyError
                return handle_default([temp_montant_initial_metropole_majoration_6,
                                      temp_montant_initial_metropole_majoration_5,
                                      temp_montant_initial_metropole_majoration_4,
                                      temp_montant_initial_metropole_majoration_3],
                                      temp_montant_initial_metropole_majoration_2,
                                      temp_montant_initial_metropole_majoration_1)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                     start_line=133,
                                                     start_column=11,
                                                     end_line=133,
                                                     end_column=47,
                                                     law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=133, start_column=11,
                                             end_line=133, end_column=47,
                                             law_headings=["Prologue"]))
    montant_initial_metropole_majoration = log_variable_definition(["AllocationsFamiliales",
                                                                    "montant_initial_métropole_majoration"],
                                                                   temp_montant_initial_metropole_majoration)
    try:
        def temp_montant_verse_forfaitaire(acc_2: Integer, enfant_2: Any):
            if log_end_call(["AllocationsFamiliales",
                             "droit_ouvert_forfaitaire"],
                            log_variable_definition(["AllocationsFamiliales",
                                                     "droit_ouvert_forfaitaire", "output"],
                                                    log_begin_call(["AllocationsFamiliales",
                                                                    "droit_ouvert_forfaitaire"], droit_ouvert_forfaitaire,
                                                                   log_variable_definition(["AllocationsFamiliales",
                                                                                            "droit_ouvert_forfaitaire", "input"],
                                                                                           enfant_2)))):
                return (acc_2 + integer_of_string("1"))
            else:
                return acc_2
        temp_montant_verse_forfaitaire_1 = (montant_verse_forfaitaire_par_enfant *
                                            decimal_of_integer(list_fold_left(temp_montant_verse_forfaitaire,
                                                                              integer_of_string(
                                                                                  "0"),
                                                                              enfants_a_charge)))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=129, start_column=11,
                                             end_line=129, end_column=36,
                                             law_headings=["Prologue"]))
    montant_verse_forfaitaire = log_variable_definition(["AllocationsFamiliales",
                                                         "montant_versé_forfaitaire"], temp_montant_verse_forfaitaire_1)
    try:
        def temp_montant_initial_base(_: Any):
            return (montant_initial_base_deuxieme_enfant +
                    montant_initial_base_troisieme_enfant_et_plus)

        def temp_montant_initial_base_1(_: Any):
            return True

        def temp_montant_initial_base_2(_: Any):
            if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                 start_line=350, start_column=5, end_line=351, end_column=69,
                                                 law_headings=["Article D755-5",
                                                               "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                               "Titre 5 : Départements d'outre-mer",
                                                               "Livre 7 : Régimes divers - Dispositions diverses",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), (prestations_familiales_dot_regime_outre_mer_l751_1 and
                                                                                                 (list_length(enfants_a_charge_droit_ouvert_prestation_familiale) ==
                                                                                                  integer_of_string("1")))):
                return montant_initial_base_premier_enfant
            else:
                raise EmptyError

        def temp_montant_initial_base_3(_: Any):
            if log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                 start_line=335, start_column=5, end_line=335, end_column=24,
                                                 law_headings=["Article 7",
                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                               "Dispositions spéciales relatives à Mayotte",
                                                               "Décrets divers"]), (residence_2 ==
                                                                                    Collectivite(Collectivite_Code.Mayotte,
                                                                                                 Unit()))):
                return (montant_initial_base_premier_enfant_mayotte +
                        (montant_initial_base_deuxieme_enfant_mayotte +
                         (montant_initial_base_troisieme_enfant_mayotte +
                          montant_initial_base_quatrieme_enfant_et_plus_mayotte)))
            else:
                raise EmptyError
        temp_montant_initial_base_4 = handle_default([temp_montant_initial_base_3,
                                                     temp_montant_initial_base_2],
                                                     temp_montant_initial_base_1,
                                                     temp_montant_initial_base)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=109, start_column=11,
                                             end_line=109, end_column=31,
                                             law_headings=["Prologue"]))
    montant_initial_base = log_variable_definition(["AllocationsFamiliales",
                                                    "montant_initial_base"], temp_montant_initial_base_4)
    try:
        def temp_montant_initial_majoration(param_10: Enfant):
            try:
                def temp_montant_initial_majoration_1(_: Any):
                    return log_end_call(["AllocationsFamiliales",
                                         "montant_initial_métropole_majoration"],
                                        log_variable_definition(["AllocationsFamiliales",
                                                                 "montant_initial_métropole_majoration", "output"],
                                                                log_begin_call(["AllocationsFamiliales",
                                                                                "montant_initial_métropole_majoration"],
                                                                               montant_initial_metropole_majoration,
                                                                               log_variable_definition(["AllocationsFamiliales",
                                                                                                        "montant_initial_métropole_majoration", "input"],
                                                                                                       param_10))))

                def temp_montant_initial_majoration_2(_: Any):
                    return True

                def temp_montant_initial_majoration_3(_: Any):
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                         start_line=373, start_column=5,
                                                         end_line=376, end_column=42,
                                                         law_headings=["Article D755-5",
                                                                       "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                       "Titre 5 : Départements d'outre-mer",
                                                                       "Livre 7 : Régimes divers - Dispositions diverses",
                                                                       "Partie réglementaire - Décrets simples",
                                                                       "Code de la sécurité sociale"]), (log_end_call(["AllocationsFamiliales",
                                                                                                                       "droit_ouvert_majoration"],
                                                                                                                      log_variable_definition(["AllocationsFamiliales",
                                                                                                                                               "droit_ouvert_majoration", "output"],
                                                                                                                                              log_begin_call(["AllocationsFamiliales",
                                                                                                                                                              "droit_ouvert_majoration"], droit_ouvert_majoration,
                                                                                                                                                             log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                      "droit_ouvert_majoration", "input"], param_10)))) and
                                                                                                         (prestations_familiales_dot_regime_outre_mer_l751_1 and
                                                                                                          ((list_length(enfants_a_charge_droit_ouvert_prestation_familiale) ==
                                                                                                            integer_of_string("1")) and ((param_10.age >=
                                                                                                                                          integer_of_string("11")) and (param_10.age <
                                                                                                                                         integer_of_string("16"))))))):
                        return (prestations_familiales_dot_base_mensuelle *
                                decimal_of_string("0.0369"))
                    else:
                        raise EmptyError

                def temp_montant_initial_majoration_4(_: Any):
                    if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                         start_line=382, start_column=5,
                                                         end_line=385, end_column=23,
                                                         law_headings=["Article D755-5",
                                                                       "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                       "Titre 5 : Départements d'outre-mer",
                                                                       "Livre 7 : Régimes divers - Dispositions diverses",
                                                                       "Partie réglementaire - Décrets simples",
                                                                       "Code de la sécurité sociale"]), (log_end_call(["AllocationsFamiliales",
                                                                                                                       "droit_ouvert_majoration"],
                                                                                                                      log_variable_definition(["AllocationsFamiliales",
                                                                                                                                               "droit_ouvert_majoration", "output"],
                                                                                                                                              log_begin_call(["AllocationsFamiliales",
                                                                                                                                                              "droit_ouvert_majoration"], droit_ouvert_majoration,
                                                                                                                                                             log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                      "droit_ouvert_majoration", "input"], param_10)))) and
                                                                                                         (prestations_familiales_dot_regime_outre_mer_l751_1 and
                                                                                                          ((list_length(enfants_a_charge_droit_ouvert_prestation_familiale) ==
                                                                                                            integer_of_string("1")) and (param_10.age >=
                                                                                                                                         integer_of_string("16")))))):
                        return (prestations_familiales_dot_base_mensuelle *
                                decimal_of_string("0.0567"))
                    else:
                        raise EmptyError
                return handle_default([temp_montant_initial_majoration_4,
                                      temp_montant_initial_majoration_3],
                                      temp_montant_initial_majoration_2,
                                      temp_montant_initial_majoration_1)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                     start_line=134,
                                                     start_column=11,
                                                     end_line=134,
                                                     end_column=37,
                                                     law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=134, start_column=11,
                                             end_line=134, end_column=37,
                                             law_headings=["Prologue"]))
    montant_initial_majoration = log_variable_definition(["AllocationsFamiliales",
                                                          "montant_initial_majoration"], temp_montant_initial_majoration)
    try:
        def temp_montant_verse_complement_pour_forfaitaire(_: Any):
            return money_of_cents_string("0")

        def temp_montant_verse_complement_pour_forfaitaire_1(_: Any):
            return True

        def temp_montant_verse_complement_pour_forfaitaire_2(_: Any):
            if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                 start_line=262, start_column=5, end_line=264, end_column=42,
                                                 law_headings=["Article D521-2",
                                                               "Chapitre 1er : Allocations familiales",
                                                               "Titre 2 : Prestations générales d'entretien",
                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), ((ressources_menage >
                                                                                                  plafond__i_d521_3) and (ressources_menage <=
                                                                                                                          (plafond__i_d521_3 + (montant_verse_forfaitaire *
                                                                                                                                                decimal_of_string("12.")))))):
                return ((plafond__i_d521_3 + ((montant_verse_forfaitaire *
                                               decimal_of_string("12.")) - ressources_menage)) *
                        (decimal_of_string("1.") / decimal_of_string("12.")))
            else:
                raise EmptyError

        def temp_montant_verse_complement_pour_forfaitaire_3(_: Any):
            if log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                 start_line=272, start_column=5, end_line=274, end_column=41,
                                                 law_headings=["Article D521-2",
                                                               "Chapitre 1er : Allocations familiales",
                                                               "Titre 2 : Prestations générales d'entretien",
                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), ((ressources_menage >
                                                                                                  plafond__i_i_d521_3) and (ressources_menage <=
                                                                                                                            (plafond__i_i_d521_3 + (montant_verse_forfaitaire *
                                                                                                                                                    decimal_of_string("12.")))))):
                return ((plafond__i_i_d521_3 + ((montant_verse_forfaitaire *
                                                 decimal_of_string("12.")) - ressources_menage)) *
                        (decimal_of_string("1.") / decimal_of_string("12.")))
            else:
                raise EmptyError
        temp_montant_verse_complement_pour_forfaitaire_4 = handle_default(
            [temp_montant_verse_complement_pour_forfaitaire_3,
             temp_montant_verse_complement_pour_forfaitaire_2],
            temp_montant_verse_complement_pour_forfaitaire_1,
            temp_montant_verse_complement_pour_forfaitaire)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=143, start_column=11,
                                             end_line=143, end_column=52,
                                             law_headings=["Prologue"]))
    montant_verse_complement_pour_forfaitaire = log_variable_definition(["AllocationsFamiliales",
                                                                         "montant_versé_complément_pour_forfaitaire"],
                                                                        temp_montant_verse_complement_pour_forfaitaire_4)
    try:
        temp_montant_avec_garde_alternee_base = (montant_initial_base *
                                                 rapport_enfants_total_moyen)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=116, start_column=11,
                                             end_line=116, end_column=43,
                                             law_headings=["Prologue"]))
    montant_avec_garde_alternee_base = log_variable_definition(["AllocationsFamiliales",
                                                                "montant_avec_garde_alternée_base"],
                                                               temp_montant_avec_garde_alternee_base)
    try:
        def temp_montant_avec_garde_alternee_majoration(param_11: Enfant):
            try:
                match_arg_17 = log_end_call(["AllocationsFamiliales",
                                             "prise_en_compte"],
                                            log_variable_definition(["AllocationsFamiliales",
                                                                     "prise_en_compte", "output"],
                                                                    log_begin_call(["AllocationsFamiliales", "prise_en_compte"],
                                                                                   prise_en_compte,
                                                                                   log_variable_definition(["AllocationsFamiliales",
                                                                                                            "prise_en_compte", "input"],
                                                                                                           param_11))))
                if match_arg_17.code == PriseEnCompte_Code.Complete:
                    _ = match_arg_17.value
                    temp_montant_avec_garde_alternee_majoration_1 = decimal_of_string(
                        "1.")
                elif match_arg_17.code == PriseEnCompte_Code.Partagee:
                    _ = match_arg_17.value
                    temp_montant_avec_garde_alternee_majoration_1 = decimal_of_string(
                        "0.5")
                elif match_arg_17.code == PriseEnCompte_Code.Zero:
                    _ = match_arg_17.value
                    temp_montant_avec_garde_alternee_majoration_1 = decimal_of_string(
                        "0.")
                return (log_end_call(["AllocationsFamiliales",
                                      "montant_initial_majoration"],
                                     log_variable_definition(["AllocationsFamiliales",
                                                              "montant_initial_majoration", "output"],
                                                             log_begin_call(["AllocationsFamiliales",
                                                                             "montant_initial_majoration"],
                                                                            montant_initial_majoration,
                                                                            log_variable_definition(["AllocationsFamiliales",
                                                                                                     "montant_initial_majoration", "input"], param_11)))) *
                        temp_montant_avec_garde_alternee_majoration_1)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                     start_line=135,
                                                     start_column=11,
                                                     end_line=135,
                                                     end_column=49,
                                                     law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=135, start_column=11,
                                             end_line=135, end_column=49,
                                             law_headings=["Prologue"]))
    montant_avec_garde_alternee_majoration = log_variable_definition(["AllocationsFamiliales",
                                                                      "montant_avec_garde_alternée_majoration"],
                                                                     temp_montant_avec_garde_alternee_majoration)
    try:
        if droit_ouvert_base:
            temp_montant_verse_base = montant_avec_garde_alternee_base
        else:
            temp_montant_verse_base = money_of_cents_string("0")
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=117, start_column=11,
                                             end_line=117, end_column=29,
                                             law_headings=["Prologue"]))
    montant_verse_base = log_variable_definition(["AllocationsFamiliales",
                                                  "montant_versé_base"], temp_montant_verse_base)
    try:
        if droit_ouvert_base:
            def temp_montant_verse_majoration(acc_3: Money, enfant_3: Any):
                return (acc_3 + log_end_call(["AllocationsFamiliales",
                                              "montant_avec_garde_alternée_majoration"],
                                             log_variable_definition(["AllocationsFamiliales",
                                                                      "montant_avec_garde_alternée_majoration", "output"],
                                                                     log_begin_call(["AllocationsFamiliales",
                                                                                     "montant_avec_garde_alternée_majoration"],
                                                                                    montant_avec_garde_alternee_majoration,
                                                                                    log_variable_definition(["AllocationsFamiliales",
                                                                                                             "montant_avec_garde_alternée_majoration", "input"],
                                                                                                            enfant_3)))))
            temp_montant_verse_majoration_1 = list_fold_left(temp_montant_verse_majoration,
                                                             money_of_cents_string(
                                                                 "0"),
                                                             enfants_a_charge)
        else:
            temp_montant_verse_majoration_1 = money_of_cents_string("0")
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=136, start_column=11,
                                             end_line=136, end_column=35,
                                             law_headings=["Prologue"]))
    montant_verse_majoration = log_variable_definition(["AllocationsFamiliales",
                                                        "montant_versé_majoration"], temp_montant_verse_majoration_1)
    try:
        temp_montant_base_complement_pour_base_et_majoration = (montant_verse_base +
                                                                montant_verse_majoration)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=140, start_column=11,
                                             end_line=140, end_column=58,
                                             law_headings=["Prologue"]))
    montant_base_complement_pour_base_et_majoration = log_variable_definition(["AllocationsFamiliales",
                                                                               "montant_base_complément_pour_base_et_majoration"],
                                                                              temp_montant_base_complement_pour_base_et_majoration)
    try:
        if droit_ouvert_complement:
            temp_montant_verse_complement_pour_base_et_majoration = log_end_call(["AllocationsFamiliales",
                                                                                  "complément_dégressif"],
                                                                                 log_variable_definition(["AllocationsFamiliales",
                                                                                                          "complément_dégressif", "output"],
                                                                                                         log_begin_call(["AllocationsFamiliales",
                                                                                                                         "complément_dégressif"], complement_degressif,
                                                                                                                        log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                 "complément_dégressif", "input"],
                                                                                                                                                montant_base_complement_pour_base_et_majoration))))
        else:
            temp_montant_verse_complement_pour_base_et_majoration = money_of_cents_string(
                "0")
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=142, start_column=11,
                                             end_line=142, end_column=59,
                                             law_headings=["Prologue"]))
    montant_verse_complement_pour_base_et_majoration = log_variable_definition(["AllocationsFamiliales",
                                                                                "montant_versé_complément_pour_base_et_majoration"],
                                                                               temp_montant_verse_complement_pour_base_et_majoration)
    try:
        if droit_ouvert_base:
            temp_montant_verse = (montant_verse_base +
                                  (montant_verse_majoration + (montant_verse_forfaitaire +
                                                               (montant_verse_complement_pour_base_et_majoration +
                                                                montant_verse_complement_pour_forfaitaire))))
        else:
            temp_montant_verse = money_of_cents_string("0")
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=105, start_column=10,
                                             end_line=105, end_column=23,
                                             law_headings=["Prologue"]))
    montant_verse = log_variable_definition(["AllocationsFamiliales",
                                             "montant_versé"], temp_montant_verse)
    try:
        allocations_familiales = (personne_charge_effective_permanente_est_parent or
                                  (not personne_charge_effective_permanente_est_parent and
                                   personne_charge_effective_permanente_remplit_titre__i))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                             start_line=230, start_column=5,
                                             end_line=234, end_column=6,
                                             law_headings=["Article L521-2",
                                                           "Chapitre 1er : Allocations familiales",
                                                           "Titre 2 : Prestations générales d'entretien",
                                                           "Livre 5 : Prestations familiales et prestations assimilées",
                                                           "Partie législative",
                                                           "Code de la sécurité sociale"]))
    assert allocations_familiales
    return AllocationsFamilialesOut(montant_verse_out=montant_verse)


def interface_allocations_familiales(interface_allocations_familiales_in: InterfaceAllocationsFamilialesIn):
    i_date_courante = interface_allocations_familiales_in.i_date_courante_in
    i_enfants = interface_allocations_familiales_in.i_enfants_in
    i_ressources_menage = interface_allocations_familiales_in.i_ressources_menage_in
    i_residence = interface_allocations_familiales_in.i_residence_in
    i_personne_charge_effective_permanente_est_parent = interface_allocations_familiales_in.i_personne_charge_effective_permanente_est_parent_in
    i_personne_charge_effective_permanente_remplit_titre__i = interface_allocations_familiales_in.i_personne_charge_effective_permanente_remplit_titre_I_in
    i_avait_enfant_a_charge_avant_1er_janvier_2012 = interface_allocations_familiales_in.i_avait_enfant_a_charge_avant_1er_janvier_2012_in
    try:
        def temp_enfants_a_charge(enfant_4: Any):
            if ((enfant_4.d_date_de_naissance +
                duration_of_numbers(3, 0, 0)) >=
                    i_date_courante):
                temp_enfants_a_charge_1 = SituationObligationScolaire(SituationObligationScolaire_Code.Avant,
                                                                      Unit())
            else:
                if ((enfant_4.d_date_de_naissance +
                    duration_of_numbers(16, 0, 0)) >=
                        i_date_courante):
                    temp_enfants_a_charge_1 = SituationObligationScolaire(SituationObligationScolaire_Code.Pendant,
                                                                          Unit())
                else:
                    temp_enfants_a_charge_1 = SituationObligationScolaire(SituationObligationScolaire_Code.Apres,
                                                                          Unit())
            return Enfant(identifiant=enfant_4.d_identifiant,
                          obligation_scolaire=temp_enfants_a_charge_1,
                          remuneration_mensuelle=enfant_4.d_remuneration_mensuelle,
                          date_de_naissance=enfant_4.d_date_de_naissance,
                          age=year_of_date((date_of_numbers(0, 1, 1) +
                                            (i_date_courante - enfant_4.d_date_de_naissance))),
                          prise_en_charge=enfant_4.d_prise_en_charge,
                          a_deja_ouvert_droit_aux_allocations_familiales=enfant_4.d_a_deja_ouvert_droit_aux_allocations_familiales)
        temp_enfants_a_charge_2 = list_map(temp_enfants_a_charge, i_enfants)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./epilogue.catala_fr",
                                             start_line=74, start_column=11,
                                             end_line=74, end_column=27,
                                             law_headings=["Interface du programme",
                                                           "Épilogue", "Décrets divers"]))
    enfants_a_charge_1 = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                  "enfants_à_charge"], temp_enfants_a_charge_2)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                 start_line=90, start_column=20, end_line=90, end_column=69,
                                                 law_headings=["Interface du programme", "Épilogue",
                                                               "Décrets divers"]), i_personne_charge_effective_permanente_est_parent):
                temp_allocations_familiales_dot_personne_charge_effective_permanente_est_parent = True
            else:
                raise EmptyError
        except EmptyError:
            temp_allocations_familiales_dot_personne_charge_effective_permanente_est_parent = False
        temp_allocations_familiales_dot_personne_charge_effective_permanente_est_parent_1 = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                                                                                     "allocations_familiales.personne_charge_effective_permanente_est_parent"],
                                                                                                                    temp_allocations_familiales_dot_personne_charge_effective_permanente_est_parent)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=90, start_column=10,
                                             end_line=90, end_column=57,
                                             law_headings=["Prologue"]))
    allocations_familiales_dot_personne_charge_effective_permanente_est_parent = temp_allocations_familiales_dot_personne_charge_effective_permanente_est_parent_1
    try:
        try:
            if log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                 start_line=93, start_column=20, end_line=93, end_column=74,
                                                 law_headings=["Interface du programme", "Épilogue",
                                                               "Décrets divers"]), i_personne_charge_effective_permanente_remplit_titre__i):
                temp_allocations_familiales_dot_personne_charge_effective_permanente_remplit_titre__i = True
            else:
                raise EmptyError
        except EmptyError:
            temp_allocations_familiales_dot_personne_charge_effective_permanente_remplit_titre__i = False
        temp_allocations_familiales_dot_personne_charge_effective_permanente_remplit_titre__i_1 = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                                                                                           "allocations_familiales.personne_charge_effective_permanente_remplit_titre_I"],
                                                                                                                          temp_allocations_familiales_dot_personne_charge_effective_permanente_remplit_titre__i)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=91, start_column=10,
                                             end_line=91, end_column=62,
                                             law_headings=["Prologue"]))
    allocations_familiales_dot_personne_charge_effective_permanente_remplit_titre__i = temp_allocations_familiales_dot_personne_charge_effective_permanente_remplit_titre__i_1
    try:
        temp_allocations_familiales_dot_ressources_menage = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                                                     "allocations_familiales.ressources_ménage"],
                                                                                    i_ressources_menage)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=92, start_column=10,
                                             end_line=92, end_column=27,
                                             law_headings=["Prologue"]))
    allocations_familiales_dot_ressources_menage = temp_allocations_familiales_dot_ressources_menage
    try:
        temp_allocations_familiales_dot_residence = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                                             "allocations_familiales.résidence"], i_residence)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=93, start_column=10,
                                             end_line=93, end_column=19,
                                             law_headings=["Prologue"]))
    allocations_familiales_dot_residence = temp_allocations_familiales_dot_residence
    try:
        temp_allocations_familiales_dot_date_courante = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                                                 "allocations_familiales.date_courante"], i_date_courante)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=96, start_column=10,
                                             end_line=96, end_column=23,
                                             law_headings=["Prologue"]))
    allocations_familiales_dot_date_courante = temp_allocations_familiales_dot_date_courante
    try:
        temp_allocations_familiales_dot_enfants_a_charge = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                                                    "allocations_familiales.enfants_à_charge"], enfants_a_charge_1)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=99, start_column=10,
                                             end_line=99, end_column=26,
                                             law_headings=["Prologue"]))
    allocations_familiales_dot_enfants_a_charge = temp_allocations_familiales_dot_enfants_a_charge
    try:
        try:
            if log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                 start_line=96, start_column=20, end_line=96, end_column=66,
                                                 law_headings=["Interface du programme", "Épilogue",
                                                               "Décrets divers"]), i_avait_enfant_a_charge_avant_1er_janvier_2012):
                temp_allocations_familiales_dot_avait_enfant_a_charge_avant_1er_janvier_2012 = True
            else:
                raise EmptyError
        except EmptyError:
            temp_allocations_familiales_dot_avait_enfant_a_charge_avant_1er_janvier_2012 = False
        temp_allocations_familiales_dot_avait_enfant_a_charge_avant_1er_janvier_2012_1 = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                                                                                  "allocations_familiales.avait_enfant_à_charge_avant_1er_janvier_2012"],
                                                                                                                 temp_allocations_familiales_dot_avait_enfant_a_charge_avant_1er_janvier_2012)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=120, start_column=10,
                                             end_line=120, end_column=54,
                                             law_headings=["Prologue"]))
    allocations_familiales_dot_avait_enfant_a_charge_avant_1er_janvier_2012 = temp_allocations_familiales_dot_avait_enfant_a_charge_avant_1er_janvier_2012_1
    result_4 = log_end_call(["InterfaceAllocationsFamiliales",
                             "allocations_familiales", "AllocationsFamiliales"],
                            log_begin_call(["InterfaceAllocationsFamiliales",
                                            "allocations_familiales", "AllocationsFamiliales"],
                                           allocations_familiales,
                                           AllocationsFamilialesIn(personne_charge_effective_permanente_est_parent_in=allocations_familiales_dot_personne_charge_effective_permanente_est_parent,
                                                                   personne_charge_effective_permanente_remplit_titre_I_in=allocations_familiales_dot_personne_charge_effective_permanente_remplit_titre__i,
                                                                   ressources_menage_in=allocations_familiales_dot_ressources_menage,
                                                                   residence_in=allocations_familiales_dot_residence,
                                                                   date_courante_in=allocations_familiales_dot_date_courante,
                                                                   enfants_a_charge_in=allocations_familiales_dot_enfants_a_charge,
                                                                   avait_enfant_a_charge_avant_1er_janvier_2012_in=allocations_familiales_dot_avait_enfant_a_charge_avant_1er_janvier_2012)))
    allocations_familiales_dot_montant_verse = result_4.montant_verse_out
    try:
        temp_i_montant_verse = allocations_familiales_dot_montant_verse
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./epilogue.catala_fr",
                                             start_line=78, start_column=10,
                                             end_line=78, end_column=25,
                                             law_headings=["Interface du programme",
                                                           "Épilogue", "Décrets divers"]))
    i_montant_verse = log_variable_definition(["InterfaceAllocationsFamiliales",
                                               "i_montant_versé"], temp_i_montant_verse)
    return InterfaceAllocationsFamilialesOut(i_montant_verse_out=i_montant_verse)

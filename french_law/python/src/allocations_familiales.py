# This file has been generated by the Catala compiler, do not edit!

from .catala import *
from typing import Any, List, Callable, Tuple
from enum import Enum


class PriseEnCharge_Code(Enum):
    GardeAlterneePartageAllocations = 0
    GardeAlterneeAllocataireUnique = 1
    EffectiveEtPermanente = 2
    ServicesSociauxAllocationVerseeALaFamille = 3
    ServicesSociauxAllocationVerseeAuxServicesSociaux = 4


class PriseEnCharge:
    def __init__(self, code: PriseEnCharge_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PriseEnCharge):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class SituationObligationScolaire_Code(Enum):
    Avant = 0
    Pendant = 1
    Apres = 2


class SituationObligationScolaire:
    def __init__(self, code: SituationObligationScolaire_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SituationObligationScolaire):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class Collectivite_Code(Enum):
    Guadeloupe = 0
    Guyane = 1
    Martinique = 2
    LaReunion = 3
    SaintBarthelemy = 4
    SaintMartin = 5
    Metropole = 6
    SaintPierreEtMiquelon = 7
    Mayotte = 8


class Collectivite:
    def __init__(self, code: Collectivite_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Collectivite):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class PriseEnCompte_Code(Enum):
    Complete = 0
    Partagee = 1
    Zero = 2


class PriseEnCompte:
    def __init__(self, code: PriseEnCompte_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PriseEnCompte):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class VersementAllocations_Code(Enum):
    Normal = 0
    AllocationVerseeAuxServicesSociaux = 1


class VersementAllocations:
    def __init__(self, code: VersementAllocations_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, VersementAllocations):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class ElementPrestationsFamiliales_Code(Enum):
    PrestationAccueilJeuneEnfant = 0
    AllocationsFamiliales = 1
    ComplementFamilial = 2
    AllocationLogement = 3
    AllocationEducationEnfantHandicape = 4
    AllocationSoutienFamilial = 5
    AllocationRentreeScolaire = 6
    AllocationJournalierePresenceParentale = 7


class ElementPrestationsFamiliales:
    def __init__(self, code: ElementPrestationsFamiliales_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ElementPrestationsFamiliales):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class EnfantEntree:
    def __init__(self, d_identifiant: Integer, d_remuneration_mensuelle: Money, d_date_de_naissance: Date, d_prise_en_charge: PriseEnCharge, d_a_deja_ouvert_droit_aux_allocations_familiales: bool) -> None:
        self.d_identifiant = d_identifiant
        self.d_remuneration_mensuelle = d_remuneration_mensuelle
        self.d_date_de_naissance = d_date_de_naissance
        self.d_prise_en_charge = d_prise_en_charge
        self.d_a_deja_ouvert_droit_aux_allocations_familiales = d_a_deja_ouvert_droit_aux_allocations_familiales

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EnfantEntree):
            return (self.d_identifiant == other.d_identifiant and
                    self.d_remuneration_mensuelle == other.d_remuneration_mensuelle and
                    self.d_date_de_naissance == other.d_date_de_naissance and
                    self.d_prise_en_charge == other.d_prise_en_charge and
                    self.d_a_deja_ouvert_droit_aux_allocations_familiales == other.d_a_deja_ouvert_droit_aux_allocations_familiales)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EnfantEntree(d_identifiant={},d_remuneration_mensuelle={},d_date_de_naissance={},d_prise_en_charge={},d_a_deja_ouvert_droit_aux_allocations_familiales={})".format(self.d_identifiant,
                                                                                                                                                                                   self.d_remuneration_mensuelle, self.d_date_de_naissance,
                                                                                                                                                                                   self.d_prise_en_charge,
                                                                                                                                                                                   self.d_a_deja_ouvert_droit_aux_allocations_familiales)


class Enfant:
    def __init__(self, identifiant: Integer, obligation_scolaire: SituationObligationScolaire, remuneration_mensuelle: Money, date_de_naissance: Date, age: Integer, prise_en_charge: PriseEnCharge, a_deja_ouvert_droit_aux_allocations_familiales: bool) -> None:
        self.identifiant = identifiant
        self.obligation_scolaire = obligation_scolaire
        self.remuneration_mensuelle = remuneration_mensuelle
        self.date_de_naissance = date_de_naissance
        self.age = age
        self.prise_en_charge = prise_en_charge
        self.a_deja_ouvert_droit_aux_allocations_familiales = a_deja_ouvert_droit_aux_allocations_familiales

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Enfant):
            return (self.identifiant == other.identifiant and
                    self.obligation_scolaire == other.obligation_scolaire and
                    self.remuneration_mensuelle == other.remuneration_mensuelle and
                    self.date_de_naissance == other.date_de_naissance and
                    self.age == other.age and
                    self.prise_en_charge == other.prise_en_charge and
                    self.a_deja_ouvert_droit_aux_allocations_familiales == other.a_deja_ouvert_droit_aux_allocations_familiales)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Enfant(identifiant={},obligation_scolaire={},remuneration_mensuelle={},date_de_naissance={},age={},prise_en_charge={},a_deja_ouvert_droit_aux_allocations_familiales={})".format(self.identifiant,
                                                                                                                                                                                                 self.obligation_scolaire, self.remuneration_mensuelle,
                                                                                                                                                                                                 self.date_de_naissance, self.age, self.prise_en_charge,
                                                                                                                                                                                                 self.a_deja_ouvert_droit_aux_allocations_familiales)


class SmicOut:
    def __init__(self, date_courante_out: Date, residence_out: Collectivite, brut_horaire_out: Money) -> None:
        self.date_courante_out = date_courante_out
        self.residence_out = residence_out
        self.brut_horaire_out = brut_horaire_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmicOut):
            return (self.date_courante_out == other.date_courante_out and
                    self.residence_out == other.residence_out and
                    self.brut_horaire_out == other.brut_horaire_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SmicOut(date_courante_out={},residence_out={},brut_horaire_out={})".format(self.date_courante_out,
                                                                                           self.residence_out, self.brut_horaire_out)


class SmicIn:
    def __init__(self, date_courante_in: Callable[[Unit], Date], residence_in: Callable[[Unit], Collectivite], brut_horaire_in: Callable[[Unit], Money]) -> None:
        self.date_courante_in = date_courante_in
        self.residence_in = residence_in
        self.brut_horaire_in = brut_horaire_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmicIn):
            return (self.date_courante_in == other.date_courante_in and
                    self.residence_in == other.residence_in and
                    self.brut_horaire_in == other.brut_horaire_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SmicIn(date_courante_in={},residence_in={},brut_horaire_in={})".format(self.date_courante_in,
                                                                                       self.residence_in, self.brut_horaire_in)


class PrestationsFamilialesOut:
    def __init__(self, droit_ouvert_out: Callable[[Enfant], bool], conditions_hors_age_out: Callable[[Enfant], bool], plafond_l512_3_2_out: Money, age_l512_3_2_out: Integer, regime_outre_mer_l751_1_out: bool, date_courante_out: Date, prestation_courante_out: ElementPrestationsFamiliales, residence_out: Collectivite, base_mensuelle_out: Money) -> None:
        self.droit_ouvert_out = droit_ouvert_out
        self.conditions_hors_age_out = conditions_hors_age_out
        self.plafond_l512_3_2_out = plafond_l512_3_2_out
        self.age_l512_3_2_out = age_l512_3_2_out
        self.regime_outre_mer_l751_1_out = regime_outre_mer_l751_1_out
        self.date_courante_out = date_courante_out
        self.prestation_courante_out = prestation_courante_out
        self.residence_out = residence_out
        self.base_mensuelle_out = base_mensuelle_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PrestationsFamilialesOut):
            return (self.droit_ouvert_out == other.droit_ouvert_out and
                    self.conditions_hors_age_out == other.conditions_hors_age_out and
                    self.plafond_l512_3_2_out == other.plafond_l512_3_2_out and
                    self.age_l512_3_2_out == other.age_l512_3_2_out and
                    self.regime_outre_mer_l751_1_out == other.regime_outre_mer_l751_1_out and
                    self.date_courante_out == other.date_courante_out and
                    self.prestation_courante_out == other.prestation_courante_out and
                    self.residence_out == other.residence_out and
                    self.base_mensuelle_out == other.base_mensuelle_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "PrestationsFamilialesOut(droit_ouvert_out={},conditions_hors_age_out={},plafond_l512_3_2_out={},age_l512_3_2_out={},regime_outre_mer_l751_1_out={},date_courante_out={},prestation_courante_out={},residence_out={},base_mensuelle_out={})".format(self.droit_ouvert_out,
                                                                                                                                                                                                                                                                   self.conditions_hors_age_out, self.plafond_l512_3_2_out,
                                                                                                                                                                                                                                                                   self.age_l512_3_2_out, self.regime_outre_mer_l751_1_out,
                                                                                                                                                                                                                                                                   self.date_courante_out, self.prestation_courante_out,
                                                                                                                                                                                                                                                                   self.residence_out, self.base_mensuelle_out)


class PrestationsFamilialesIn:
    def __init__(self, droit_ouvert_in: Callable[[Unit], (Callable[[Enfant], bool])], conditions_hors_age_in: Callable[[Unit], (Callable[[Enfant], bool])], plafond_l512_3_2_in: Callable[[Unit], Money], age_l512_3_2_in: Callable[[Unit], Integer], regime_outre_mer_l751_1_in: Callable[[Unit], bool], date_courante_in: Callable[[Unit], Date], prestation_courante_in: Callable[[Unit], ElementPrestationsFamiliales], residence_in: Callable[[Unit], Collectivite], base_mensuelle_in: Callable[[Unit], Money]) -> None:
        self.droit_ouvert_in = droit_ouvert_in
        self.conditions_hors_age_in = conditions_hors_age_in
        self.plafond_l512_3_2_in = plafond_l512_3_2_in
        self.age_l512_3_2_in = age_l512_3_2_in
        self.regime_outre_mer_l751_1_in = regime_outre_mer_l751_1_in
        self.date_courante_in = date_courante_in
        self.prestation_courante_in = prestation_courante_in
        self.residence_in = residence_in
        self.base_mensuelle_in = base_mensuelle_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PrestationsFamilialesIn):
            return (self.droit_ouvert_in == other.droit_ouvert_in and
                    self.conditions_hors_age_in == other.conditions_hors_age_in and
                    self.plafond_l512_3_2_in == other.plafond_l512_3_2_in and
                    self.age_l512_3_2_in == other.age_l512_3_2_in and
                    self.regime_outre_mer_l751_1_in == other.regime_outre_mer_l751_1_in and
                    self.date_courante_in == other.date_courante_in and
                    self.prestation_courante_in == other.prestation_courante_in and
                    self.residence_in == other.residence_in and
                    self.base_mensuelle_in == other.base_mensuelle_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "PrestationsFamilialesIn(droit_ouvert_in={},conditions_hors_age_in={},plafond_l512_3_2_in={},age_l512_3_2_in={},regime_outre_mer_l751_1_in={},date_courante_in={},prestation_courante_in={},residence_in={},base_mensuelle_in={})".format(self.droit_ouvert_in,
                                                                                                                                                                                                                                                         self.conditions_hors_age_in, self.plafond_l512_3_2_in,
                                                                                                                                                                                                                                                         self.age_l512_3_2_in, self.regime_outre_mer_l751_1_in,
                                                                                                                                                                                                                                                         self.date_courante_in, self.prestation_courante_in, self.residence_in,
                                                                                                                                                                                                                                                         self.base_mensuelle_in)


class AllocationFamilialesAvril2008Out:
    def __init__(self, age_minimum_alinea_1_l521_3_out: Integer) -> None:
        self.age_minimum_alinea_1_l521_3_out = age_minimum_alinea_1_l521_3_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AllocationFamilialesAvril2008Out):
            return (self.age_minimum_alinea_1_l521_3_out == other.age_minimum_alinea_1_l521_3_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "AllocationFamilialesAvril2008Out(age_minimum_alinea_1_l521_3_out={})".format(self.age_minimum_alinea_1_l521_3_out)


class AllocationFamilialesAvril2008In:
    def __init__(self, age_minimum_alinea_1_l521_3_in: Callable[[Unit], Integer]) -> None:
        self.age_minimum_alinea_1_l521_3_in = age_minimum_alinea_1_l521_3_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AllocationFamilialesAvril2008In):
            return (self.age_minimum_alinea_1_l521_3_in == other.age_minimum_alinea_1_l521_3_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "AllocationFamilialesAvril2008In(age_minimum_alinea_1_l521_3_in={})".format(self.age_minimum_alinea_1_l521_3_in)


class EnfantLePlusAgeOut:
    def __init__(self, enfants_out: List[Enfant], le_plus_age_out: Enfant) -> None:
        self.enfants_out = enfants_out
        self.le_plus_age_out = le_plus_age_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EnfantLePlusAgeOut):
            return (self.enfants_out == other.enfants_out and
                    self.le_plus_age_out == other.le_plus_age_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EnfantLePlusAgeOut(enfants_out={},le_plus_age_out={})".format(self.enfants_out,
                                                                              self.le_plus_age_out)


class EnfantLePlusAgeIn:
    def __init__(self, enfants_in: Callable[[Unit], (List[Enfant])], le_plus_age_in: Callable[[Unit], Enfant]) -> None:
        self.enfants_in = enfants_in
        self.le_plus_age_in = le_plus_age_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EnfantLePlusAgeIn):
            return (self.enfants_in == other.enfants_in and
                    self.le_plus_age_in == other.le_plus_age_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EnfantLePlusAgeIn(enfants_in={},le_plus_age_in={})".format(self.enfants_in,
                                                                           self.le_plus_age_in)


class AllocationsFamilialesOut:
    def __init__(self, personne_charge_effective_permanente_est_parent_out: bool, personne_charge_effective_permanente_remplit_titre_I_out: bool, ressources_menage_out: Money, residence_out: Collectivite, date_courante_out: Date, enfants_a_charge_out: List[Enfant], enfants_a_charge_droit_ouvert_prestation_familiale_out: List[Enfant], prise_en_compte_out: Callable[[Enfant], PriseEnCompte], versement_out: Callable[[Enfant], VersementAllocations], montant_verse_out: Money, droit_ouvert_base_out: bool, montant_initial_base_out: Money, montant_initial_base_premier_enfant_out: Money, montant_initial_base_deuxieme_enfant_out: Money, montant_initial_base_troisieme_enfant_et_plus_out: Money, rapport_enfants_total_moyen_out: Decimal, nombre_moyen_enfants_out: Decimal, nombre_total_enfants_out: Decimal, montant_avec_garde_alternee_base_out: Money, montant_verse_base_out: Money, avait_enfant_a_charge_avant_1er_janvier_2012_out: bool, montant_initial_base_premier_enfant_mayotte_out: Money, montant_initial_base_deuxieme_enfant_mayotte_out: Money, montant_initial_base_troisieme_enfant_mayotte_out: Money, montant_initial_base_quatrieme_enfant_et_plus_mayotte_out: Money, droit_ouvert_forfaitaire_out: Callable[[Enfant], bool], montant_verse_forfaitaire_par_enfant_out: Money, montant_verse_forfaitaire_out: Money, droit_ouvert_majoration_out: Callable[[Enfant], bool], montant_initial_metropole_majoration_out: Callable[[Enfant], Money], montant_initial_majoration_out: Callable[[Enfant], Money], montant_avec_garde_alternee_majoration_out: Callable[[Enfant], Money], montant_verse_majoration_out: Money, droit_ouvert_complement_out: bool, montant_base_complement_pour_base_et_majoration_out: Money, complement_degressif_out: Callable[[Money], Money], montant_verse_complement_pour_base_et_majoration_out: Money, montant_verse_complement_pour_forfaitaire_out: Money, nombre_enfants_l521_1_out: Integer, age_minimum_alinea_1_l521_3_out: Callable[[Enfant], Integer], nombre_enfants_alinea_2_l521_3_out: Integer, est_enfant_le_plus_age_out: Callable[[Enfant], bool], plafond_I_d521_3_out: Money, plafond_II_d521_3_out: Money) -> None:
        self.personne_charge_effective_permanente_est_parent_out = personne_charge_effective_permanente_est_parent_out
        self.personne_charge_effective_permanente_remplit_titre_I_out = personne_charge_effective_permanente_remplit_titre_I_out
        self.ressources_menage_out = ressources_menage_out
        self.residence_out = residence_out
        self.date_courante_out = date_courante_out
        self.enfants_a_charge_out = enfants_a_charge_out
        self.enfants_a_charge_droit_ouvert_prestation_familiale_out = enfants_a_charge_droit_ouvert_prestation_familiale_out
        self.prise_en_compte_out = prise_en_compte_out
        self.versement_out = versement_out
        self.montant_verse_out = montant_verse_out
        self.droit_ouvert_base_out = droit_ouvert_base_out
        self.montant_initial_base_out = montant_initial_base_out
        self.montant_initial_base_premier_enfant_out = montant_initial_base_premier_enfant_out
        self.montant_initial_base_deuxieme_enfant_out = montant_initial_base_deuxieme_enfant_out
        self.montant_initial_base_troisieme_enfant_et_plus_out = montant_initial_base_troisieme_enfant_et_plus_out
        self.rapport_enfants_total_moyen_out = rapport_enfants_total_moyen_out
        self.nombre_moyen_enfants_out = nombre_moyen_enfants_out
        self.nombre_total_enfants_out = nombre_total_enfants_out
        self.montant_avec_garde_alternee_base_out = montant_avec_garde_alternee_base_out
        self.montant_verse_base_out = montant_verse_base_out
        self.avait_enfant_a_charge_avant_1er_janvier_2012_out = avait_enfant_a_charge_avant_1er_janvier_2012_out
        self.montant_initial_base_premier_enfant_mayotte_out = montant_initial_base_premier_enfant_mayotte_out
        self.montant_initial_base_deuxieme_enfant_mayotte_out = montant_initial_base_deuxieme_enfant_mayotte_out
        self.montant_initial_base_troisieme_enfant_mayotte_out = montant_initial_base_troisieme_enfant_mayotte_out
        self.montant_initial_base_quatrieme_enfant_et_plus_mayotte_out = montant_initial_base_quatrieme_enfant_et_plus_mayotte_out
        self.droit_ouvert_forfaitaire_out = droit_ouvert_forfaitaire_out
        self.montant_verse_forfaitaire_par_enfant_out = montant_verse_forfaitaire_par_enfant_out
        self.montant_verse_forfaitaire_out = montant_verse_forfaitaire_out
        self.droit_ouvert_majoration_out = droit_ouvert_majoration_out
        self.montant_initial_metropole_majoration_out = montant_initial_metropole_majoration_out
        self.montant_initial_majoration_out = montant_initial_majoration_out
        self.montant_avec_garde_alternee_majoration_out = montant_avec_garde_alternee_majoration_out
        self.montant_verse_majoration_out = montant_verse_majoration_out
        self.droit_ouvert_complement_out = droit_ouvert_complement_out
        self.montant_base_complement_pour_base_et_majoration_out = montant_base_complement_pour_base_et_majoration_out
        self.complement_degressif_out = complement_degressif_out
        self.montant_verse_complement_pour_base_et_majoration_out = montant_verse_complement_pour_base_et_majoration_out
        self.montant_verse_complement_pour_forfaitaire_out = montant_verse_complement_pour_forfaitaire_out
        self.nombre_enfants_l521_1_out = nombre_enfants_l521_1_out
        self.age_minimum_alinea_1_l521_3_out = age_minimum_alinea_1_l521_3_out
        self.nombre_enfants_alinea_2_l521_3_out = nombre_enfants_alinea_2_l521_3_out
        self.est_enfant_le_plus_age_out = est_enfant_le_plus_age_out
        self.plafond_I_d521_3_out = plafond_I_d521_3_out
        self.plafond_II_d521_3_out = plafond_II_d521_3_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AllocationsFamilialesOut):
            return (self.personne_charge_effective_permanente_est_parent_out == other.personne_charge_effective_permanente_est_parent_out and
                    self.personne_charge_effective_permanente_remplit_titre_I_out == other.personne_charge_effective_permanente_remplit_titre_I_out and
                    self.ressources_menage_out == other.ressources_menage_out and
                    self.residence_out == other.residence_out and
                    self.date_courante_out == other.date_courante_out and
                    self.enfants_a_charge_out == other.enfants_a_charge_out and
                    self.enfants_a_charge_droit_ouvert_prestation_familiale_out == other.enfants_a_charge_droit_ouvert_prestation_familiale_out and
                    self.prise_en_compte_out == other.prise_en_compte_out and
                    self.versement_out == other.versement_out and
                    self.montant_verse_out == other.montant_verse_out and
                    self.droit_ouvert_base_out == other.droit_ouvert_base_out and
                    self.montant_initial_base_out == other.montant_initial_base_out and
                    self.montant_initial_base_premier_enfant_out == other.montant_initial_base_premier_enfant_out and
                    self.montant_initial_base_deuxieme_enfant_out == other.montant_initial_base_deuxieme_enfant_out and
                    self.montant_initial_base_troisieme_enfant_et_plus_out == other.montant_initial_base_troisieme_enfant_et_plus_out and
                    self.rapport_enfants_total_moyen_out == other.rapport_enfants_total_moyen_out and
                    self.nombre_moyen_enfants_out == other.nombre_moyen_enfants_out and
                    self.nombre_total_enfants_out == other.nombre_total_enfants_out and
                    self.montant_avec_garde_alternee_base_out == other.montant_avec_garde_alternee_base_out and
                    self.montant_verse_base_out == other.montant_verse_base_out and
                    self.avait_enfant_a_charge_avant_1er_janvier_2012_out == other.avait_enfant_a_charge_avant_1er_janvier_2012_out and
                    self.montant_initial_base_premier_enfant_mayotte_out == other.montant_initial_base_premier_enfant_mayotte_out and
                    self.montant_initial_base_deuxieme_enfant_mayotte_out == other.montant_initial_base_deuxieme_enfant_mayotte_out and
                    self.montant_initial_base_troisieme_enfant_mayotte_out == other.montant_initial_base_troisieme_enfant_mayotte_out and
                    self.montant_initial_base_quatrieme_enfant_et_plus_mayotte_out == other.montant_initial_base_quatrieme_enfant_et_plus_mayotte_out and
                    self.droit_ouvert_forfaitaire_out == other.droit_ouvert_forfaitaire_out and
                    self.montant_verse_forfaitaire_par_enfant_out == other.montant_verse_forfaitaire_par_enfant_out and
                    self.montant_verse_forfaitaire_out == other.montant_verse_forfaitaire_out and
                    self.droit_ouvert_majoration_out == other.droit_ouvert_majoration_out and
                    self.montant_initial_metropole_majoration_out == other.montant_initial_metropole_majoration_out and
                    self.montant_initial_majoration_out == other.montant_initial_majoration_out and
                    self.montant_avec_garde_alternee_majoration_out == other.montant_avec_garde_alternee_majoration_out and
                    self.montant_verse_majoration_out == other.montant_verse_majoration_out and
                    self.droit_ouvert_complement_out == other.droit_ouvert_complement_out and
                    self.montant_base_complement_pour_base_et_majoration_out == other.montant_base_complement_pour_base_et_majoration_out and
                    self.complement_degressif_out == other.complement_degressif_out and
                    self.montant_verse_complement_pour_base_et_majoration_out == other.montant_verse_complement_pour_base_et_majoration_out and
                    self.montant_verse_complement_pour_forfaitaire_out == other.montant_verse_complement_pour_forfaitaire_out and
                    self.nombre_enfants_l521_1_out == other.nombre_enfants_l521_1_out and
                    self.age_minimum_alinea_1_l521_3_out == other.age_minimum_alinea_1_l521_3_out and
                    self.nombre_enfants_alinea_2_l521_3_out == other.nombre_enfants_alinea_2_l521_3_out and
                    self.est_enfant_le_plus_age_out == other.est_enfant_le_plus_age_out and
                    self.plafond_I_d521_3_out == other.plafond_I_d521_3_out and
                    self.plafond_II_d521_3_out == other.plafond_II_d521_3_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "AllocationsFamilialesOut(personne_charge_effective_permanente_est_parent_out={},personne_charge_effective_permanente_remplit_titre_I_out={},ressources_menage_out={},residence_out={},date_courante_out={},enfants_a_charge_out={},enfants_a_charge_droit_ouvert_prestation_familiale_out={},prise_en_compte_out={},versement_out={},montant_verse_out={},droit_ouvert_base_out={},montant_initial_base_out={},montant_initial_base_premier_enfant_out={},montant_initial_base_deuxieme_enfant_out={},montant_initial_base_troisieme_enfant_et_plus_out={},rapport_enfants_total_moyen_out={},nombre_moyen_enfants_out={},nombre_total_enfants_out={},montant_avec_garde_alternee_base_out={},montant_verse_base_out={},avait_enfant_a_charge_avant_1er_janvier_2012_out={},montant_initial_base_premier_enfant_mayotte_out={},montant_initial_base_deuxieme_enfant_mayotte_out={},montant_initial_base_troisieme_enfant_mayotte_out={},montant_initial_base_quatrieme_enfant_et_plus_mayotte_out={},droit_ouvert_forfaitaire_out={},montant_verse_forfaitaire_par_enfant_out={},montant_verse_forfaitaire_out={},droit_ouvert_majoration_out={},montant_initial_metropole_majoration_out={},montant_initial_majoration_out={},montant_avec_garde_alternee_majoration_out={},montant_verse_majoration_out={},droit_ouvert_complement_out={},montant_base_complement_pour_base_et_majoration_out={},complement_degressif_out={},montant_verse_complement_pour_base_et_majoration_out={},montant_verse_complement_pour_forfaitaire_out={},nombre_enfants_l521_1_out={},age_minimum_alinea_1_l521_3_out={},nombre_enfants_alinea_2_l521_3_out={},est_enfant_le_plus_age_out={},plafond_I_d521_3_out={},plafond_II_d521_3_out={})".format(self.personne_charge_effective_permanente_est_parent_out,
self.personne_charge_effective_permanente_remplit_titre_I_out,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      self.ressources_menage_out, self.residence_out, self.date_courante_out,
self.enfants_a_charge_out,
self.enfants_a_charge_droit_ouvert_prestation_familiale_out,
self.prise_en_compte_out, self.versement_out, self.montant_verse_out,
self.droit_ouvert_base_out, self.montant_initial_base_out,
self.montant_initial_base_premier_enfant_out,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      self.montant_initial_base_deuxieme_enfant_out,
self.montant_initial_base_troisieme_enfant_et_plus_out,
self.rapport_enfants_total_moyen_out, self.nombre_moyen_enfants_out,
self.nombre_total_enfants_out,
self.montant_avec_garde_alternee_base_out, self.montant_verse_base_out,
self.avait_enfant_a_charge_avant_1er_janvier_2012_out,
self.montant_initial_base_premier_enfant_mayotte_out,
self.montant_initial_base_deuxieme_enfant_mayotte_out,
self.montant_initial_base_troisieme_enfant_mayotte_out,
self.montant_initial_base_quatrieme_enfant_et_plus_mayotte_out,
self.droit_ouvert_forfaitaire_out,
self.montant_verse_forfaitaire_par_enfant_out,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      self.montant_verse_forfaitaire_out, self.droit_ouvert_majoration_out,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      self.montant_initial_metropole_majoration_out,
self.montant_initial_majoration_out,
self.montant_avec_garde_alternee_majoration_out,
self.montant_verse_majoration_out, self.droit_ouvert_complement_out,
self.montant_base_complement_pour_base_et_majoration_out,
self.complement_degressif_out,
self.montant_verse_complement_pour_base_et_majoration_out,
self.montant_verse_complement_pour_forfaitaire_out,
self.nombre_enfants_l521_1_out, self.age_minimum_alinea_1_l521_3_out,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      self.nombre_enfants_alinea_2_l521_3_out,
self.est_enfant_le_plus_age_out, self.plafond_I_d521_3_out,
self.plafond_II_d521_3_out)


class AllocationsFamilialesIn:
    def __init__(self, personne_charge_effective_permanente_est_parent_in: Callable[[Unit], bool], personne_charge_effective_permanente_remplit_titre_I_in: Callable[[Unit], bool], ressources_menage_in: Callable[[Unit], Money], residence_in: Callable[[Unit], Collectivite], date_courante_in: Callable[[Unit], Date], enfants_a_charge_in: Callable[[Unit], (List[Enfant])], enfants_a_charge_droit_ouvert_prestation_familiale_in: Callable[[Unit], (List[Enfant])], prise_en_compte_in: Callable[[Unit], (Callable[[Enfant], PriseEnCompte])], versement_in: Callable[[Unit], (Callable[[Enfant], VersementAllocations])], montant_verse_in: Callable[[Unit], Money], droit_ouvert_base_in: Callable[[Unit], bool], montant_initial_base_in: Callable[[Unit], Money], montant_initial_base_premier_enfant_in: Callable[[Unit], Money], montant_initial_base_deuxieme_enfant_in: Callable[[Unit], Money], montant_initial_base_troisieme_enfant_et_plus_in: Callable[[Unit], Money], rapport_enfants_total_moyen_in: Callable[[Unit], Decimal], nombre_moyen_enfants_in: Callable[[Unit], Decimal], nombre_total_enfants_in: Callable[[Unit], Decimal], montant_avec_garde_alternee_base_in: Callable[[Unit], Money], montant_verse_base_in: Callable[[Unit], Money], avait_enfant_a_charge_avant_1er_janvier_2012_in: Callable[[Unit], bool], montant_initial_base_premier_enfant_mayotte_in: Callable[[Unit], Money], montant_initial_base_deuxieme_enfant_mayotte_in: Callable[[Unit], Money], montant_initial_base_troisieme_enfant_mayotte_in: Callable[[Unit], Money], montant_initial_base_quatrieme_enfant_et_plus_mayotte_in: Callable[[Unit], Money], droit_ouvert_forfaitaire_in: Callable[[Unit], (Callable[[Enfant], bool])], montant_verse_forfaitaire_par_enfant_in: Callable[[Unit], Money], montant_verse_forfaitaire_in: Callable[[Unit], Money], droit_ouvert_majoration_in: Callable[[Unit], (Callable[[Enfant], bool])], montant_initial_metropole_majoration_in: Callable[[Unit], (Callable[[Enfant], Money])], montant_initial_majoration_in: Callable[[Unit], (Callable[[Enfant], Money])], montant_avec_garde_alternee_majoration_in: Callable[[Unit], (Callable[[Enfant], Money])], montant_verse_majoration_in: Callable[[Unit], Money], droit_ouvert_complement_in: Callable[[Unit], bool], montant_base_complement_pour_base_et_majoration_in: Callable[[Unit], Money], complement_degressif_in: Callable[[Unit], (Callable[[Money], Money])], montant_verse_complement_pour_base_et_majoration_in: Callable[[Unit], Money], montant_verse_complement_pour_forfaitaire_in: Callable[[Unit], Money], nombre_enfants_l521_1_in: Callable[[Unit], Integer], age_minimum_alinea_1_l521_3_in: Callable[[Unit], (Callable[[Enfant], Integer])], nombre_enfants_alinea_2_l521_3_in: Callable[[Unit], Integer], est_enfant_le_plus_age_in: Callable[[Unit], (Callable[[Enfant], bool])], plafond_I_d521_3_in: Callable[[Unit], Money], plafond_II_d521_3_in: Callable[[Unit], Money]) -> None:
        self.personne_charge_effective_permanente_est_parent_in = personne_charge_effective_permanente_est_parent_in
        self.personne_charge_effective_permanente_remplit_titre_I_in = personne_charge_effective_permanente_remplit_titre_I_in
        self.ressources_menage_in = ressources_menage_in
        self.residence_in = residence_in
        self.date_courante_in = date_courante_in
        self.enfants_a_charge_in = enfants_a_charge_in
        self.enfants_a_charge_droit_ouvert_prestation_familiale_in = enfants_a_charge_droit_ouvert_prestation_familiale_in
        self.prise_en_compte_in = prise_en_compte_in
        self.versement_in = versement_in
        self.montant_verse_in = montant_verse_in
        self.droit_ouvert_base_in = droit_ouvert_base_in
        self.montant_initial_base_in = montant_initial_base_in
        self.montant_initial_base_premier_enfant_in = montant_initial_base_premier_enfant_in
        self.montant_initial_base_deuxieme_enfant_in = montant_initial_base_deuxieme_enfant_in
        self.montant_initial_base_troisieme_enfant_et_plus_in = montant_initial_base_troisieme_enfant_et_plus_in
        self.rapport_enfants_total_moyen_in = rapport_enfants_total_moyen_in
        self.nombre_moyen_enfants_in = nombre_moyen_enfants_in
        self.nombre_total_enfants_in = nombre_total_enfants_in
        self.montant_avec_garde_alternee_base_in = montant_avec_garde_alternee_base_in
        self.montant_verse_base_in = montant_verse_base_in
        self.avait_enfant_a_charge_avant_1er_janvier_2012_in = avait_enfant_a_charge_avant_1er_janvier_2012_in
        self.montant_initial_base_premier_enfant_mayotte_in = montant_initial_base_premier_enfant_mayotte_in
        self.montant_initial_base_deuxieme_enfant_mayotte_in = montant_initial_base_deuxieme_enfant_mayotte_in
        self.montant_initial_base_troisieme_enfant_mayotte_in = montant_initial_base_troisieme_enfant_mayotte_in
        self.montant_initial_base_quatrieme_enfant_et_plus_mayotte_in = montant_initial_base_quatrieme_enfant_et_plus_mayotte_in
        self.droit_ouvert_forfaitaire_in = droit_ouvert_forfaitaire_in
        self.montant_verse_forfaitaire_par_enfant_in = montant_verse_forfaitaire_par_enfant_in
        self.montant_verse_forfaitaire_in = montant_verse_forfaitaire_in
        self.droit_ouvert_majoration_in = droit_ouvert_majoration_in
        self.montant_initial_metropole_majoration_in = montant_initial_metropole_majoration_in
        self.montant_initial_majoration_in = montant_initial_majoration_in
        self.montant_avec_garde_alternee_majoration_in = montant_avec_garde_alternee_majoration_in
        self.montant_verse_majoration_in = montant_verse_majoration_in
        self.droit_ouvert_complement_in = droit_ouvert_complement_in
        self.montant_base_complement_pour_base_et_majoration_in = montant_base_complement_pour_base_et_majoration_in
        self.complement_degressif_in = complement_degressif_in
        self.montant_verse_complement_pour_base_et_majoration_in = montant_verse_complement_pour_base_et_majoration_in
        self.montant_verse_complement_pour_forfaitaire_in = montant_verse_complement_pour_forfaitaire_in
        self.nombre_enfants_l521_1_in = nombre_enfants_l521_1_in
        self.age_minimum_alinea_1_l521_3_in = age_minimum_alinea_1_l521_3_in
        self.nombre_enfants_alinea_2_l521_3_in = nombre_enfants_alinea_2_l521_3_in
        self.est_enfant_le_plus_age_in = est_enfant_le_plus_age_in
        self.plafond_I_d521_3_in = plafond_I_d521_3_in
        self.plafond_II_d521_3_in = plafond_II_d521_3_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AllocationsFamilialesIn):
            return (self.personne_charge_effective_permanente_est_parent_in == other.personne_charge_effective_permanente_est_parent_in and
                    self.personne_charge_effective_permanente_remplit_titre_I_in == other.personne_charge_effective_permanente_remplit_titre_I_in and
                    self.ressources_menage_in == other.ressources_menage_in and
                    self.residence_in == other.residence_in and
                    self.date_courante_in == other.date_courante_in and
                    self.enfants_a_charge_in == other.enfants_a_charge_in and
                    self.enfants_a_charge_droit_ouvert_prestation_familiale_in == other.enfants_a_charge_droit_ouvert_prestation_familiale_in and
                    self.prise_en_compte_in == other.prise_en_compte_in and
                    self.versement_in == other.versement_in and
                    self.montant_verse_in == other.montant_verse_in and
                    self.droit_ouvert_base_in == other.droit_ouvert_base_in and
                    self.montant_initial_base_in == other.montant_initial_base_in and
                    self.montant_initial_base_premier_enfant_in == other.montant_initial_base_premier_enfant_in and
                    self.montant_initial_base_deuxieme_enfant_in == other.montant_initial_base_deuxieme_enfant_in and
                    self.montant_initial_base_troisieme_enfant_et_plus_in == other.montant_initial_base_troisieme_enfant_et_plus_in and
                    self.rapport_enfants_total_moyen_in == other.rapport_enfants_total_moyen_in and
                    self.nombre_moyen_enfants_in == other.nombre_moyen_enfants_in and
                    self.nombre_total_enfants_in == other.nombre_total_enfants_in and
                    self.montant_avec_garde_alternee_base_in == other.montant_avec_garde_alternee_base_in and
                    self.montant_verse_base_in == other.montant_verse_base_in and
                    self.avait_enfant_a_charge_avant_1er_janvier_2012_in == other.avait_enfant_a_charge_avant_1er_janvier_2012_in and
                    self.montant_initial_base_premier_enfant_mayotte_in == other.montant_initial_base_premier_enfant_mayotte_in and
                    self.montant_initial_base_deuxieme_enfant_mayotte_in == other.montant_initial_base_deuxieme_enfant_mayotte_in and
                    self.montant_initial_base_troisieme_enfant_mayotte_in == other.montant_initial_base_troisieme_enfant_mayotte_in and
                    self.montant_initial_base_quatrieme_enfant_et_plus_mayotte_in == other.montant_initial_base_quatrieme_enfant_et_plus_mayotte_in and
                    self.droit_ouvert_forfaitaire_in == other.droit_ouvert_forfaitaire_in and
                    self.montant_verse_forfaitaire_par_enfant_in == other.montant_verse_forfaitaire_par_enfant_in and
                    self.montant_verse_forfaitaire_in == other.montant_verse_forfaitaire_in and
                    self.droit_ouvert_majoration_in == other.droit_ouvert_majoration_in and
                    self.montant_initial_metropole_majoration_in == other.montant_initial_metropole_majoration_in and
                    self.montant_initial_majoration_in == other.montant_initial_majoration_in and
                    self.montant_avec_garde_alternee_majoration_in == other.montant_avec_garde_alternee_majoration_in and
                    self.montant_verse_majoration_in == other.montant_verse_majoration_in and
                    self.droit_ouvert_complement_in == other.droit_ouvert_complement_in and
                    self.montant_base_complement_pour_base_et_majoration_in == other.montant_base_complement_pour_base_et_majoration_in and
                    self.complement_degressif_in == other.complement_degressif_in and
                    self.montant_verse_complement_pour_base_et_majoration_in == other.montant_verse_complement_pour_base_et_majoration_in and
                    self.montant_verse_complement_pour_forfaitaire_in == other.montant_verse_complement_pour_forfaitaire_in and
                    self.nombre_enfants_l521_1_in == other.nombre_enfants_l521_1_in and
                    self.age_minimum_alinea_1_l521_3_in == other.age_minimum_alinea_1_l521_3_in and
                    self.nombre_enfants_alinea_2_l521_3_in == other.nombre_enfants_alinea_2_l521_3_in and
                    self.est_enfant_le_plus_age_in == other.est_enfant_le_plus_age_in and
                    self.plafond_I_d521_3_in == other.plafond_I_d521_3_in and
                    self.plafond_II_d521_3_in == other.plafond_II_d521_3_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "AllocationsFamilialesIn(personne_charge_effective_permanente_est_parent_in={},personne_charge_effective_permanente_remplit_titre_I_in={},ressources_menage_in={},residence_in={},date_courante_in={},enfants_a_charge_in={},enfants_a_charge_droit_ouvert_prestation_familiale_in={},prise_en_compte_in={},versement_in={},montant_verse_in={},droit_ouvert_base_in={},montant_initial_base_in={},montant_initial_base_premier_enfant_in={},montant_initial_base_deuxieme_enfant_in={},montant_initial_base_troisieme_enfant_et_plus_in={},rapport_enfants_total_moyen_in={},nombre_moyen_enfants_in={},nombre_total_enfants_in={},montant_avec_garde_alternee_base_in={},montant_verse_base_in={},avait_enfant_a_charge_avant_1er_janvier_2012_in={},montant_initial_base_premier_enfant_mayotte_in={},montant_initial_base_deuxieme_enfant_mayotte_in={},montant_initial_base_troisieme_enfant_mayotte_in={},montant_initial_base_quatrieme_enfant_et_plus_mayotte_in={},droit_ouvert_forfaitaire_in={},montant_verse_forfaitaire_par_enfant_in={},montant_verse_forfaitaire_in={},droit_ouvert_majoration_in={},montant_initial_metropole_majoration_in={},montant_initial_majoration_in={},montant_avec_garde_alternee_majoration_in={},montant_verse_majoration_in={},droit_ouvert_complement_in={},montant_base_complement_pour_base_et_majoration_in={},complement_degressif_in={},montant_verse_complement_pour_base_et_majoration_in={},montant_verse_complement_pour_forfaitaire_in={},nombre_enfants_l521_1_in={},age_minimum_alinea_1_l521_3_in={},nombre_enfants_alinea_2_l521_3_in={},est_enfant_le_plus_age_in={},plafond_I_d521_3_in={},plafond_II_d521_3_in={})".format(self.personne_charge_effective_permanente_est_parent_in,
self.personne_charge_effective_permanente_remplit_titre_I_in,
self.ressources_menage_in, self.residence_in, self.date_courante_in,
self.enfants_a_charge_in,
self.enfants_a_charge_droit_ouvert_prestation_familiale_in,
self.prise_en_compte_in, self.versement_in, self.montant_verse_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         self.droit_ouvert_base_in, self.montant_initial_base_in,
self.montant_initial_base_premier_enfant_in,
self.montant_initial_base_deuxieme_enfant_in,
self.montant_initial_base_troisieme_enfant_et_plus_in,
self.rapport_enfants_total_moyen_in, self.nombre_moyen_enfants_in,
self.nombre_total_enfants_in, self.montant_avec_garde_alternee_base_in,
self.montant_verse_base_in,
self.avait_enfant_a_charge_avant_1er_janvier_2012_in,
self.montant_initial_base_premier_enfant_mayotte_in,
self.montant_initial_base_deuxieme_enfant_mayotte_in,
self.montant_initial_base_troisieme_enfant_mayotte_in,
self.montant_initial_base_quatrieme_enfant_et_plus_mayotte_in,
self.droit_ouvert_forfaitaire_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         self.montant_verse_forfaitaire_par_enfant_in,
self.montant_verse_forfaitaire_in, self.droit_ouvert_majoration_in,
self.montant_initial_metropole_majoration_in,
self.montant_initial_majoration_in,
self.montant_avec_garde_alternee_majoration_in,
self.montant_verse_majoration_in, self.droit_ouvert_complement_in,
self.montant_base_complement_pour_base_et_majoration_in,
self.complement_degressif_in,
self.montant_verse_complement_pour_base_et_majoration_in,
self.montant_verse_complement_pour_forfaitaire_in,
self.nombre_enfants_l521_1_in, self.age_minimum_alinea_1_l521_3_in,
self.nombre_enfants_alinea_2_l521_3_in, self.est_enfant_le_plus_age_in,
self.plafond_I_d521_3_in, self.plafond_II_d521_3_in)


class InterfaceAllocationsFamilialesOut:
    def __init__(self, date_courante_out: Date, enfants_out: List[EnfantEntree], enfants_a_charge_out: List[Enfant], ressources_menage_out: Money, residence_out: Collectivite, montant_verse_out: Money, personne_charge_effective_permanente_est_parent_out: bool, personne_charge_effective_permanente_remplit_titre_I_out: bool, avait_enfant_a_charge_avant_1er_janvier_2012_out: bool) -> None:
        self.date_courante_out = date_courante_out
        self.enfants_out = enfants_out
        self.enfants_a_charge_out = enfants_a_charge_out
        self.ressources_menage_out = ressources_menage_out
        self.residence_out = residence_out
        self.montant_verse_out = montant_verse_out
        self.personne_charge_effective_permanente_est_parent_out = personne_charge_effective_permanente_est_parent_out
        self.personne_charge_effective_permanente_remplit_titre_I_out = personne_charge_effective_permanente_remplit_titre_I_out
        self.avait_enfant_a_charge_avant_1er_janvier_2012_out = avait_enfant_a_charge_avant_1er_janvier_2012_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InterfaceAllocationsFamilialesOut):
            return (self.date_courante_out == other.date_courante_out and
                    self.enfants_out == other.enfants_out and
                    self.enfants_a_charge_out == other.enfants_a_charge_out and
                    self.ressources_menage_out == other.ressources_menage_out and
                    self.residence_out == other.residence_out and
                    self.montant_verse_out == other.montant_verse_out and
                    self.personne_charge_effective_permanente_est_parent_out == other.personne_charge_effective_permanente_est_parent_out and
                    self.personne_charge_effective_permanente_remplit_titre_I_out == other.personne_charge_effective_permanente_remplit_titre_I_out and
                    self.avait_enfant_a_charge_avant_1er_janvier_2012_out == other.avait_enfant_a_charge_avant_1er_janvier_2012_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "InterfaceAllocationsFamilialesOut(date_courante_out={},enfants_out={},enfants_a_charge_out={},ressources_menage_out={},residence_out={},montant_verse_out={},personne_charge_effective_permanente_est_parent_out={},personne_charge_effective_permanente_remplit_titre_I_out={},avait_enfant_a_charge_avant_1er_janvier_2012_out={})".format(self.date_courante_out,
                                                                                                                                                                                                                                                                                                                                                             self.enfants_out, self.enfants_a_charge_out,
                                                                                                                                                                                                                                                                                                                                                             self.ressources_menage_out, self.residence_out, self.montant_verse_out,
                                                                                                                                                                                                                                                                                                                                                             self.personne_charge_effective_permanente_est_parent_out,
                                                                                                                                                                                                                                                                                                                                                             self.personne_charge_effective_permanente_remplit_titre_I_out,
                                                                                                                                                                                                                                                                                                                                                             self.avait_enfant_a_charge_avant_1er_janvier_2012_out)


class InterfaceAllocationsFamilialesIn:
    def __init__(self, date_courante_in: Callable[[Unit], Date], enfants_in: Callable[[Unit], (List[EnfantEntree])], enfants_a_charge_in: Callable[[Unit], (List[Enfant])], ressources_menage_in: Callable[[Unit], Money], residence_in: Callable[[Unit], Collectivite], montant_verse_in: Callable[[Unit], Money], personne_charge_effective_permanente_est_parent_in: Callable[[Unit], bool], personne_charge_effective_permanente_remplit_titre_I_in: Callable[[Unit], bool], avait_enfant_a_charge_avant_1er_janvier_2012_in: Callable[[Unit], bool]) -> None:
        self.date_courante_in = date_courante_in
        self.enfants_in = enfants_in
        self.enfants_a_charge_in = enfants_a_charge_in
        self.ressources_menage_in = ressources_menage_in
        self.residence_in = residence_in
        self.montant_verse_in = montant_verse_in
        self.personne_charge_effective_permanente_est_parent_in = personne_charge_effective_permanente_est_parent_in
        self.personne_charge_effective_permanente_remplit_titre_I_in = personne_charge_effective_permanente_remplit_titre_I_in
        self.avait_enfant_a_charge_avant_1er_janvier_2012_in = avait_enfant_a_charge_avant_1er_janvier_2012_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InterfaceAllocationsFamilialesIn):
            return (self.date_courante_in == other.date_courante_in and
                    self.enfants_in == other.enfants_in and
                    self.enfants_a_charge_in == other.enfants_a_charge_in and
                    self.ressources_menage_in == other.ressources_menage_in and
                    self.residence_in == other.residence_in and
                    self.montant_verse_in == other.montant_verse_in and
                    self.personne_charge_effective_permanente_est_parent_in == other.personne_charge_effective_permanente_est_parent_in and
                    self.personne_charge_effective_permanente_remplit_titre_I_in == other.personne_charge_effective_permanente_remplit_titre_I_in and
                    self.avait_enfant_a_charge_avant_1er_janvier_2012_in == other.avait_enfant_a_charge_avant_1er_janvier_2012_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "InterfaceAllocationsFamilialesIn(date_courante_in={},enfants_in={},enfants_a_charge_in={},ressources_menage_in={},residence_in={},montant_verse_in={},personne_charge_effective_permanente_est_parent_in={},personne_charge_effective_permanente_remplit_titre_I_in={},avait_enfant_a_charge_avant_1er_janvier_2012_in={})".format(self.date_courante_in,
                                                                                                                                                                                                                                                                                                                                                   self.enfants_in, self.enfants_a_charge_in, self.ressources_menage_in,
                                                                                                                                                                                                                                                                                                                                                   self.residence_in, self.montant_verse_in,
                                                                                                                                                                                                                                                                                                                                                   self.personne_charge_effective_permanente_est_parent_in,
                                                                                                                                                                                                                                                                                                                                                   self.personne_charge_effective_permanente_remplit_titre_I_in,
                                                                                                                                                                                                                                                                                                                                                   self.avait_enfant_a_charge_avant_1er_janvier_2012_in)


def smic(smic_in_1: SmicIn):
    date_courante_2 = smic_in_1.date_courante_in
    residence_3 = smic_in_1.residence_in
    brut_horaire_4 = smic_in_1.brut_horaire_in
    try:
        try:
            local_var_6 = date_courante_2(Unit())
        except EmptyError:
            def local_var_7(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=41, start_column=12,
                                                         end_line=41, end_column=25,
                                                         law_headings=["Prologue"]), True)

            def local_var_9(_: Any):
                def local_var_11(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_13(_: Any):
                    raise EmptyError
                return handle_default([], local_var_11, local_var_13)
            local_var_6 = handle_default([], local_var_7, local_var_9)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=41, start_column=12, end_line=41, end_column=25,
                                             law_headings=["Prologue"]))
    date_courante_5 = log_variable_definition(["Smic", "date_courante"],
                                              local_var_6)
    try:
        try:
            local_var_16 = residence_3(Unit())
        except EmptyError:
            def local_var_17(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=42, start_column=12,
                                                         end_line=42, end_column=21,
                                                         law_headings=["Prologue"]), True)

            def local_var_19(_: Any):
                def local_var_21(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_23(_: Any):
                    raise EmptyError
                return handle_default([], local_var_21, local_var_23)
            local_var_16 = handle_default([], local_var_17, local_var_19)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=42, start_column=12, end_line=42, end_column=21,
                                             law_headings=["Prologue"]))
    residence_15 = log_variable_definition(["Smic", "résidence"],
                                           local_var_16)
    try:
        try:
            local_var_26 = brut_horaire_4(Unit())
        except EmptyError:
            def local_var_77(_: Any):
                def local_var_79(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=43, start_column=12,
                                                             end_line=43, end_column=24,
                                                             law_headings=["Prologue"]), True)

                def local_var_81(_: Any):
                    def local_var_83(_: Any):
                        return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                 start_line=219, start_column=5,
                                                                 end_line=228, end_column=6,
                                                                 law_headings=["Article 1",
                                                                               "Décret n° 2018-1173 du 19 décembre 2018 portant relèvement du salaire minimum de croissance",
                                                                               "Montant du salaire minimum de croissance",
                                                                               "Décrets divers"]), ((date_courante_5 >=
                                                                                                     date_of_numbers(2019, 1, 1)) and
                                                                                                    ((date_courante_5 <=
                                                                                                      date_of_numbers(2019, 12, 31)) and
                                                                                                     ((residence_15 ==
                                                                                                       Collectivite(Collectivite_Code.Metropole,
                                                                                                                    Unit())) or ((residence_15 ==
                                                                                                                                  Collectivite(Collectivite_Code.Guadeloupe,
                                                                                                                                               Unit())) or ((residence_15 ==
                                                                                                                                                             Collectivite(Collectivite_Code.Guyane,
                                                                                                                                                                          Unit())) or ((residence_15 ==
                                                                                                                                                                                        Collectivite(Collectivite_Code.Martinique,
                                                                                                                                                                                                     Unit())) or ((residence_15 ==
                                                                                                                                                                                                                   Collectivite(Collectivite_Code.LaReunion,
                                                                                                                                                                                                                                Unit())) or ((residence_15 ==
                                                                                                                                                                                                                                              Collectivite(Collectivite_Code.SaintBarthelemy,
                                                                                                                                                                                                                                                           Unit())) or ((residence_15 ==
                                                                                                                                                                                                                                                                         Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                                                                                      Unit())) or (residence_15 ==
                                                                                                                                                                                                                                                                                                   Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                                                                                                                                                                                                                                                                                                                Unit()))))))))))))

                    def local_var_85(_: Any):
                        return money_of_cents_string("1003")
                    return handle_default([], local_var_83, local_var_85)
                return handle_default([], local_var_79, local_var_81)

            def local_var_67(_: Any):
                def local_var_69(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=43, start_column=12,
                                                             end_line=43, end_column=24,
                                                             law_headings=["Prologue"]), True)

                def local_var_71(_: Any):
                    def local_var_73(_: Any):
                        return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                 start_line=237, start_column=5,
                                                                 end_line=239, end_column=6,
                                                                 law_headings=["Article 1",
                                                                               "Décret n° 2018-1173 du 19 décembre 2018 portant relèvement du salaire minimum de croissance",
                                                                               "Montant du salaire minimum de croissance",
                                                                               "Décrets divers"]), ((date_courante_5 >=
                                                                                                     date_of_numbers(2019, 1, 1)) and
                                                                                                    ((date_courante_5 <=
                                                                                                      date_of_numbers(2019, 12, 31)) and (residence_15 ==
                                                                                                                                          Collectivite(Collectivite_Code.Mayotte,
                                                                                                                                                       Unit())))))

                    def local_var_75(_: Any):
                        return money_of_cents_string("757")
                    return handle_default([], local_var_73, local_var_75)
                return handle_default([], local_var_69, local_var_71)

            def local_var_57(_: Any):
                def local_var_59(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=43, start_column=12,
                                                             end_line=43, end_column=24,
                                                             law_headings=["Prologue"]), True)

                def local_var_61(_: Any):
                    def local_var_63(_: Any):
                        return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                 start_line=258, start_column=5,
                                                                 end_line=267, end_column=6,
                                                                 law_headings=["Article 1",
                                                                               "Décret n° 2019-1387 du 18 décembre 2019 portant relèvement du salaire minimum de croissance",
                                                                               "Montant du salaire minimum de croissance",
                                                                               "Décrets divers"]), ((date_courante_5 >=
                                                                                                     date_of_numbers(2020, 1, 1)) and
                                                                                                    ((date_courante_5 <=
                                                                                                      date_of_numbers(2020, 12, 31)) and
                                                                                                     ((residence_15 ==
                                                                                                       Collectivite(Collectivite_Code.Metropole,
                                                                                                                    Unit())) or ((residence_15 ==
                                                                                                                                  Collectivite(Collectivite_Code.Guadeloupe,
                                                                                                                                               Unit())) or ((residence_15 ==
                                                                                                                                                             Collectivite(Collectivite_Code.Guyane,
                                                                                                                                                                          Unit())) or ((residence_15 ==
                                                                                                                                                                                        Collectivite(Collectivite_Code.Martinique,
                                                                                                                                                                                                     Unit())) or ((residence_15 ==
                                                                                                                                                                                                                   Collectivite(Collectivite_Code.LaReunion,
                                                                                                                                                                                                                                Unit())) or ((residence_15 ==
                                                                                                                                                                                                                                              Collectivite(Collectivite_Code.SaintBarthelemy,
                                                                                                                                                                                                                                                           Unit())) or ((residence_15 ==
                                                                                                                                                                                                                                                                         Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                                                                                      Unit())) or (residence_15 ==
                                                                                                                                                                                                                                                                                                   Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                                                                                                                                                                                                                                                                                                                Unit()))))))))))))

                    def local_var_65(_: Any):
                        return money_of_cents_string("1015")
                    return handle_default([], local_var_63, local_var_65)
                return handle_default([], local_var_59, local_var_61)

            def local_var_47(_: Any):
                def local_var_49(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=43, start_column=12,
                                                             end_line=43, end_column=24,
                                                             law_headings=["Prologue"]), True)

                def local_var_51(_: Any):
                    def local_var_53(_: Any):
                        return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                 start_line=276, start_column=5,
                                                                 end_line=278, end_column=6,
                                                                 law_headings=["Article 1",
                                                                               "Décret n° 2019-1387 du 18 décembre 2019 portant relèvement du salaire minimum de croissance",
                                                                               "Montant du salaire minimum de croissance",
                                                                               "Décrets divers"]), ((date_courante_5 >=
                                                                                                     date_of_numbers(2020, 1, 1)) and
                                                                                                    ((date_courante_5 <=
                                                                                                      date_of_numbers(2020, 12, 31)) and (residence_15 ==
                                                                                                                                          Collectivite(Collectivite_Code.Mayotte,
                                                                                                                                                       Unit())))))

                    def local_var_55(_: Any):
                        return money_of_cents_string("766")
                    return handle_default([], local_var_53, local_var_55)
                return handle_default([], local_var_49, local_var_51)

            def local_var_37(_: Any):
                def local_var_39(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=43, start_column=12,
                                                             end_line=43, end_column=24,
                                                             law_headings=["Prologue"]), True)

                def local_var_41(_: Any):
                    def local_var_43(_: Any):
                        return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                 start_line=297, start_column=5,
                                                                 end_line=306, end_column=6,
                                                                 law_headings=["Article 1",
                                                                               "Décret n° 2020-1598 du 16 décembre 2020 portant relèvement du salaire minimum de croissance",
                                                                               "Montant du salaire minimum de croissance",
                                                                               "Décrets divers"]), ((date_courante_5 >=
                                                                                                     date_of_numbers(2021, 1, 1)) and
                                                                                                    ((date_courante_5 <=
                                                                                                      date_of_numbers(2021, 12, 31)) and
                                                                                                     ((residence_15 ==
                                                                                                       Collectivite(Collectivite_Code.Metropole,
                                                                                                                    Unit())) or ((residence_15 ==
                                                                                                                                  Collectivite(Collectivite_Code.Guadeloupe,
                                                                                                                                               Unit())) or ((residence_15 ==
                                                                                                                                                             Collectivite(Collectivite_Code.Guyane,
                                                                                                                                                                          Unit())) or ((residence_15 ==
                                                                                                                                                                                        Collectivite(Collectivite_Code.Martinique,
                                                                                                                                                                                                     Unit())) or ((residence_15 ==
                                                                                                                                                                                                                   Collectivite(Collectivite_Code.LaReunion,
                                                                                                                                                                                                                                Unit())) or ((residence_15 ==
                                                                                                                                                                                                                                              Collectivite(Collectivite_Code.SaintBarthelemy,
                                                                                                                                                                                                                                                           Unit())) or ((residence_15 ==
                                                                                                                                                                                                                                                                         Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                                                                                      Unit())) or (residence_15 ==
                                                                                                                                                                                                                                                                                                   Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                                                                                                                                                                                                                                                                                                                Unit()))))))))))))

                    def local_var_45(_: Any):
                        return money_of_cents_string("1025")
                    return handle_default([], local_var_43, local_var_45)
                return handle_default([], local_var_39, local_var_41)

            def local_var_27(_: Any):
                def local_var_29(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=43, start_column=12,
                                                             end_line=43, end_column=24,
                                                             law_headings=["Prologue"]), True)

                def local_var_31(_: Any):
                    def local_var_33(_: Any):
                        return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                 start_line=315, start_column=5,
                                                                 end_line=317, end_column=6,
                                                                 law_headings=["Article 1",
                                                                               "Décret n° 2020-1598 du 16 décembre 2020 portant relèvement du salaire minimum de croissance",
                                                                               "Montant du salaire minimum de croissance",
                                                                               "Décrets divers"]), ((date_courante_5 >=
                                                                                                     date_of_numbers(2021, 1, 1)) and
                                                                                                    ((date_courante_5 <=
                                                                                                      date_of_numbers(2021, 12, 31)) and (residence_15 ==
                                                                                                                                          Collectivite(Collectivite_Code.Mayotte,
                                                                                                                                                       Unit())))))

                    def local_var_35(_: Any):
                        return money_of_cents_string("774")
                    return handle_default([], local_var_33, local_var_35)
                return handle_default([], local_var_29, local_var_31)

            def local_var_87(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=43, start_column=12,
                                                         end_line=43, end_column=24,
                                                         law_headings=["Prologue"]), True)

            def local_var_89(_: Any):
                def local_var_91(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_93(_: Any):
                    raise EmptyError
                return handle_default([], local_var_91, local_var_93)
            local_var_26 = handle_default([local_var_27, local_var_37,
                                           local_var_47, local_var_57, local_var_67, local_var_77],
                                          local_var_87, local_var_89)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=43, start_column=12, end_line=43, end_column=24,
                                             law_headings=["Prologue"]))
    brut_horaire_25 = log_variable_definition(["Smic", "brut_horaire"],
                                              local_var_26)
    return SmicOut(date_courante_out=date_courante_5,
                   residence_out=residence_15, brut_horaire_out=brut_horaire_25)


def allocation_familiales_avril2008(allocation_familiales_avril2008_in_95: AllocationFamilialesAvril2008In):
    age_minimum_alinea_1_l521_3_96 = allocation_familiales_avril2008_in_95.age_minimum_alinea_1_l521_3_in
    try:
        try:
            local_var_98 = age_minimum_alinea_1_l521_3_96(Unit())
        except EmptyError:
            try:
                def local_var_99(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=81, start_column=12,
                                                             end_line=81, end_column=39,
                                                             law_headings=["Prologue"]), True)

                def local_var_101(_: Any):
                    def local_var_103(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                                 start_line=78, start_column=14,
                                                                 end_line=78, end_column=41,
                                                                 law_headings=["Article R521-1",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets en Conseil d'Etat",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_105(_: Any):
                        return integer_of_string("16")
                    return handle_default([], local_var_103, local_var_105)
                local_var_98 = handle_default([], local_var_99,
                                              local_var_101)
            except EmptyError:
                def local_var_107(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_109(_: Any):
                    raise EmptyError
                local_var_98 = handle_default([], local_var_107,
                                              local_var_109)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=81, start_column=12, end_line=81, end_column=39,
                                             law_headings=["Prologue"]))
    age_minimum_alinea_1_l521_3_97 = log_variable_definition(["AllocationFamilialesAvril2008",
                                                              "âge_minimum_alinéa_1_l521_3"], local_var_98)
    return AllocationFamilialesAvril2008Out(age_minimum_alinea_1_l521_3_out=age_minimum_alinea_1_l521_3_97)


def enfant_le_plus_age(enfant_le_plus_age_in_111: EnfantLePlusAgeIn):
    enfants_112 = enfant_le_plus_age_in_111.enfants_in
    le_plus_age_113 = enfant_le_plus_age_in_111.le_plus_age_in
    try:
        try:
            local_var_115 = enfants_112(Unit())
        except EmptyError:
            def local_var_116(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=84, start_column=12,
                                                         end_line=84, end_column=19,
                                                         law_headings=["Prologue"]), True)

            def local_var_118(_: Any):
                def local_var_120(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_122(_: Any):
                    raise EmptyError
                return handle_default([], local_var_120, local_var_122)
            local_var_115 = handle_default([], local_var_116, local_var_118)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=84, start_column=12, end_line=84, end_column=19,
                                             law_headings=["Prologue"]))
    enfants_114 = log_variable_definition(["EnfantLePlusÂgé", "enfants"],
                                          local_var_115)
    try:
        try:
            local_var_125 = le_plus_age_113(Unit())
        except EmptyError:
            try:
                def local_var_126(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=85, start_column=12,
                                                             end_line=85, end_column=23,
                                                             law_headings=["Prologue"]), True)

                def local_var_128(_: Any):
                    def local_var_130(_: Any):
                        return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                                 start_line=12, start_column=14,
                                                                 end_line=12, end_column=25,
                                                                 law_headings=["Règles diverses", "Épilogue",
                                                                               "Décrets divers"]), True)

                    def local_var_132(_: Any):
                        def local_var_134(acc_135: Any, item_136: Any):
                            if (acc_135.age > item_136.age):
                                return acc_135
                            else:
                                return item_136
                        return list_fold_left(local_var_134,
                                              Enfant(identifiant=- integer_of_string("1"),
                                                     obligation_scolaire=SituationObligationScolaire(SituationObligationScolaire_Code.Pendant,
                                                                                                     Unit()),
                                                     remuneration_mensuelle=money_of_cents_string(
                                                         "0"),
                                                     date_de_naissance=date_of_numbers(
                                                         1900, 1, 1),
                                                     age=integer_of_string(
                                                         "0"),
                                                     prise_en_charge=PriseEnCharge(PriseEnCharge_Code.EffectiveEtPermanente,
                                                                                   Unit()),
                                                     a_deja_ouvert_droit_aux_allocations_familiales=False),
                                              enfants_114)
                    return handle_default([], local_var_130, local_var_132)
                local_var_125 = handle_default([], local_var_126,
                                               local_var_128)
            except EmptyError:
                def local_var_137(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_139(_: Any):
                    raise EmptyError
                local_var_125 = handle_default([], local_var_137,
                                               local_var_139)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=85, start_column=12, end_line=85, end_column=23,
                                             law_headings=["Prologue"]))
    le_plus_age_124 = log_variable_definition(["EnfantLePlusÂgé",
                                               "le_plus_âgé"], local_var_125)
    return EnfantLePlusAgeOut(enfants_out=enfants_114,
                              le_plus_age_out=le_plus_age_124)


def prestations_familiales(prestations_familiales_in_141: PrestationsFamilialesIn):
    droit_ouvert_142 = prestations_familiales_in_141.droit_ouvert_in
    conditions_hors_age_143 = prestations_familiales_in_141.conditions_hors_age_in
    plafond_l512_3_2_144 = prestations_familiales_in_141.plafond_l512_3_2_in
    age_l512_3_2_145 = prestations_familiales_in_141.age_l512_3_2_in
    regime_outre_mer_l751_1_146 = prestations_familiales_in_141.regime_outre_mer_l751_1_in
    date_courante_147 = prestations_familiales_in_141.date_courante_in
    prestation_courante_148 = prestations_familiales_in_141.prestation_courante_in
    residence_149 = prestations_familiales_in_141.residence_in
    base_mensuelle_150 = prestations_familiales_in_141.base_mensuelle_in
    try:
        try:
            local_var_152 = age_l512_3_2_145(Unit())
        except EmptyError:
            try:
                def local_var_153(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=68, start_column=12,
                                                             end_line=68, end_column=24,
                                                             law_headings=["Prologue"]), True)

                def local_var_155(_: Any):
                    def local_var_157(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                                 start_line=21, start_column=14,
                                                                 end_line=21, end_column=26,
                                                                 law_headings=["Article R512-2",
                                                                               "Chapitre 2 : Champ d'application.",
                                                                               "Titre 1 : Champ d'application - Généralités",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets en Conseil d'Etat",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_159(_: Any):
                        return integer_of_string("20")
                    return handle_default([], local_var_157, local_var_159)
                local_var_152 = handle_default([], local_var_153,
                                               local_var_155)
            except EmptyError:
                def local_var_161(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_163(_: Any):
                    raise EmptyError
                local_var_152 = handle_default([], local_var_161,
                                               local_var_163)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=68, start_column=12, end_line=68, end_column=24,
                                             law_headings=["Prologue"]))
    age_l512_3_2_151 = log_variable_definition(["PrestationsFamiliales",
                                                "âge_l512_3_2"], local_var_152)
    try:
        try:
            local_var_166 = date_courante_147(Unit())
        except EmptyError:
            def local_var_167(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=70, start_column=12,
                                                         end_line=70, end_column=25,
                                                         law_headings=["Prologue"]), True)

            def local_var_169(_: Any):
                def local_var_171(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_173(_: Any):
                    raise EmptyError
                return handle_default([], local_var_171, local_var_173)
            local_var_166 = handle_default([], local_var_167, local_var_169)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=70, start_column=12, end_line=70, end_column=25,
                                             law_headings=["Prologue"]))
    date_courante_165 = log_variable_definition(["PrestationsFamiliales",
                                                 "date_courante"], local_var_166)
    try:
        try:
            local_var_176 = prestation_courante_148(Unit())
        except EmptyError:
            def local_var_177(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=71, start_column=12,
                                                         end_line=71, end_column=31,
                                                         law_headings=["Prologue"]), True)

            def local_var_179(_: Any):
                def local_var_181(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_183(_: Any):
                    raise EmptyError
                return handle_default([], local_var_181, local_var_183)
            local_var_176 = handle_default([], local_var_177, local_var_179)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=71, start_column=12, end_line=71, end_column=31,
                                             law_headings=["Prologue"]))
    prestation_courante_175 = log_variable_definition(["PrestationsFamiliales",
                                                       "prestation_courante"], local_var_176)
    try:
        try:
            local_var_186 = residence_149(Unit())
        except EmptyError:
            def local_var_187(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=72, start_column=12,
                                                         end_line=72, end_column=21,
                                                         law_headings=["Prologue"]), True)

            def local_var_189(_: Any):
                def local_var_191(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_193(_: Any):
                    raise EmptyError
                return handle_default([], local_var_191, local_var_193)
            local_var_186 = handle_default([], local_var_187, local_var_189)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=72, start_column=12, end_line=72, end_column=21,
                                             law_headings=["Prologue"]))
    residence_185 = log_variable_definition(["PrestationsFamiliales",
                                             "résidence"], local_var_186)
    try:
        try:
            local_var_196 = base_mensuelle_150(Unit())
        except EmptyError:
            def local_var_217(_: Any):
                def local_var_219(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=74, start_column=12,
                                                             end_line=74, end_column=26,
                                                             law_headings=["Prologue"]), True)

                def local_var_221(_: Any):
                    def local_var_223(_: Any):
                        return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                 start_line=24, start_column=5,
                                                                 end_line=25, end_column=34,
                                                                 law_headings=["Instruction ministérielle N°DSS/SD2B/2019/65 du 25 mars 2019 relative à la revalorisation au 1er avril 2019 des prestations familiales servies en métropole",
                                                                               "Montant de la base mensuelle des allocations familiales",
                                                                               "Décrets divers"]), ((date_courante_165 >=
                                                                                                     date_of_numbers(2019, 4, 1)) and
                                                                                                    (date_courante_165 < date_of_numbers(2020, 4, 1))))

                    def local_var_225(_: Any):
                        return money_of_cents_string("41316")
                    return handle_default([], local_var_223, local_var_225)
                return handle_default([], local_var_219, local_var_221)

            def local_var_207(_: Any):
                def local_var_209(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=74, start_column=12,
                                                             end_line=74, end_column=26,
                                                             law_headings=["Prologue"]), True)

                def local_var_211(_: Any):
                    def local_var_213(_: Any):
                        return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                 start_line=44, start_column=5,
                                                                 end_line=45, end_column=34,
                                                                 law_headings=["Instruction interministérielle no DSS/SD2B/2020/33 du 18 février 2020 relative à la revalorisation au 1er avril 2020 des prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à La Réunion, à Saint-Barthélemy, à Saint-Martin et dans le département de Mayotte",
                                                                               "Montant de la base mensuelle des allocations familiales",
                                                                               "Décrets divers"]), ((date_courante_165 >=
                                                                                                     date_of_numbers(2020, 4, 1)) and
                                                                                                    (date_courante_165 < date_of_numbers(2021, 4, 1))))

                    def local_var_215(_: Any):
                        return money_of_cents_string("41404")
                    return handle_default([], local_var_213, local_var_215)
                return handle_default([], local_var_209, local_var_211)

            def local_var_197(_: Any):
                def local_var_199(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=74, start_column=12,
                                                             end_line=74, end_column=26,
                                                             law_headings=["Prologue"]), True)

                def local_var_201(_: Any):
                    def local_var_203(_: Any):
                        return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                 start_line=60, start_column=5,
                                                                 end_line=61, end_column=34,
                                                                 law_headings=["Instruction interministérielle n°DSS/2B/2021/65 du 19 mars 2021 relative à la revalorisation au 1er avril 2021 des prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à la Réunion, à Saint-Barthélemy, à Saint-Martin et dans le département de Mayotte",
                                                                               "Montant de la base mensuelle des allocations familiales",
                                                                               "Décrets divers"]), ((date_courante_165 >=
                                                                                                     date_of_numbers(2021, 4, 1)) and
                                                                                                    (date_courante_165 < date_of_numbers(2022, 4, 1))))

                    def local_var_205(_: Any):
                        return money_of_cents_string("41481")
                    return handle_default([], local_var_203, local_var_205)
                return handle_default([], local_var_199, local_var_201)

            def local_var_227(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=74, start_column=12,
                                                         end_line=74, end_column=26,
                                                         law_headings=["Prologue"]), True)

            def local_var_229(_: Any):
                def local_var_231(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_233(_: Any):
                    raise EmptyError
                return handle_default([], local_var_231, local_var_233)
            local_var_196 = handle_default([local_var_197, local_var_207,
                                            local_var_217], local_var_227, local_var_229)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=74, start_column=12, end_line=74, end_column=26,
                                             law_headings=["Prologue"]))
    base_mensuelle_195 = log_variable_definition(["PrestationsFamiliales",
                                                  "base_mensuelle"], local_var_196)

    def local_var_236(_: Unit):
        try:
            def local_var_239(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=73, start_column=12,
                                                         end_line=73, end_column=16,
                                                         law_headings=["Prologue"]), True)

            def local_var_241(_: Any):
                def local_var_243(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=78, start_column=14,
                                                             end_line=78, end_column=32,
                                                             law_headings=["Prologue"]), True)

                def local_var_245(_: Any):
                    return date_courante_165
                return handle_default([], local_var_243, local_var_245)
            local_var_238 = handle_default([], local_var_239, local_var_241)
        except EmptyError:
            def local_var_247(_: Any):
                return log_decision_taken(SourcePosition(filename="",
                                                         start_line=0, start_column=1, end_line=0, end_column=1,
                                                         law_headings=[]), False)

            def local_var_249(_: Any):
                raise EmptyError
            local_var_238 = handle_default([], local_var_247, local_var_249)
        return log_variable_definition(["PrestationsFamiliales",
                                        "smic.date_courante"], local_var_238)
    smic_dot_date_courante_235 = local_var_236

    def local_var_252(_: Unit):
        try:
            def local_var_255(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=73, start_column=12,
                                                         end_line=73, end_column=16,
                                                         law_headings=["Prologue"]), True)

            def local_var_257(_: Any):
                def local_var_259(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=77, start_column=14,
                                                             end_line=77, end_column=28,
                                                             law_headings=["Prologue"]), True)

                def local_var_261(_: Any):
                    return residence_185
                return handle_default([], local_var_259, local_var_261)
            local_var_254 = handle_default([], local_var_255, local_var_257)
        except EmptyError:
            def local_var_263(_: Any):
                return log_decision_taken(SourcePosition(filename="",
                                                         start_line=0, start_column=1, end_line=0, end_column=1,
                                                         law_headings=[]), False)

            def local_var_265(_: Any):
                raise EmptyError
            local_var_254 = handle_default([], local_var_263, local_var_265)
        return log_variable_definition(["PrestationsFamiliales",
                                        "smic.résidence"], local_var_254)
    smic_dot_residence_251 = local_var_252

    def local_var_268(_: Unit):
        raise EmptyError
    result_267 = log_end_call(["PrestationsFamiliales", "smic", "Smic"],
                              log_begin_call(["PrestationsFamiliales", "smic", "Smic"], smic,
                                             SmicIn(date_courante_in=smic_dot_date_courante_235,
                                                    residence_in=smic_dot_residence_251,
                                                    brut_horaire_in=local_var_268)))
    smic_dot_date_courante_270 = result_267.date_courante_out
    smic_dot_residence_271 = result_267.residence_out
    smic_dot_brut_horaire_272 = result_267.brut_horaire_out
    try:
        try:
            local_var_274 = regime_outre_mer_l751_1_146(Unit())
        except EmptyError:
            try:
                def local_var_275(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=69, start_column=12,
                                                             end_line=69, end_column=35,
                                                             law_headings=["Prologue"]), True)

                def local_var_277(_: Any):
                    def local_var_279(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                 start_line=354, start_column=5,
                                                                 end_line=359, end_column=30,
                                                                 law_headings=["Article L751-1",
                                                                               "Chapitre 1er : Généralités",
                                                                               "Titre 5 : Dispositions particulières à la Guadeloupe, à la Guyane, à la Martinique, à La Réunion, à Saint-Barthélemy et à Saint-Martin",
                                                                               "Livre 7 : Régimes divers - Dispositions diverses",
                                                                               "Partie législative",
                                                                               "Code de la sécurité sociale"]), ((residence_185 ==
                                                                                                                  Collectivite(Collectivite_Code.Guadeloupe,
                                                                                                                               Unit())) or ((residence_185 ==
                                                                                                                                             Collectivite(Collectivite_Code.Guyane,
                                                                                                                                                          Unit())) or ((residence_185 ==
                                                                                                                                                                        Collectivite(Collectivite_Code.Martinique,
                                                                                                                                                                                     Unit())) or ((residence_185 ==
                                                                                                                                                                                                   Collectivite(Collectivite_Code.LaReunion,
                                                                                                                                                                                                                Unit())) or ((residence_185 ==
                                                                                                                                                                                                                              Collectivite(Collectivite_Code.SaintBarthelemy,
                                                                                                                                                                                                                                           Unit())) or (residence_185 ==
                                                                                                                                                                                                                                                        Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                                                                     Unit()))))))))

                    def local_var_281(_: Any):
                        return True
                    return handle_default([], local_var_279, local_var_281)
                local_var_274 = handle_default([], local_var_275,
                                               local_var_277)
            except EmptyError:
                def local_var_283(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), True)

                def local_var_285(_: Any):
                    return False
                local_var_274 = handle_default([], local_var_283,
                                               local_var_285)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=69, start_column=12, end_line=69, end_column=35,
                                             law_headings=["Prologue"]))
    regime_outre_mer_l751_1_273 = log_variable_definition(["PrestationsFamiliales",
                                                           "régime_outre_mer_l751_1"], local_var_274)
    try:
        try:
            local_var_288 = plafond_l512_3_2_144(Unit())
        except EmptyError:
            try:
                try:
                    def local_var_289(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=67, start_column=12,
                                                                 end_line=67, end_column=28,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_291(_: Any):
                        def local_var_293(_: Any):
                            return log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                                     start_line=216, start_column=18,
                                                                     end_line=216, end_column=41,
                                                                     law_headings=["Article R755-0-2",
                                                                                   "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                                   "Titre 5 : Départements d'outre-mer",
                                                                                   "Livre 7 : Régimes divers - Dispositions diverses",
                                                                                   "Partie réglementaire - Décrets en Conseil d'Etat",
                                                                                   "Code de la sécurité sociale"]), regime_outre_mer_l751_1_273)

                        def local_var_295(_: Any):
                            return ((smic_dot_brut_horaire_272 *
                                     decimal_of_string("0.55")) *
                                    decimal_of_string("169."))
                        return handle_default([], local_var_293,
                                              local_var_295)
                    local_var_288 = handle_default([], local_var_289,
                                                   local_var_291)
                except EmptyError:
                    def local_var_297(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                                 start_line=31, start_column=14,
                                                                 end_line=31, end_column=30,
                                                                 law_headings=["Article R512-2",
                                                                               "Chapitre 2 : Champ d'application.",
                                                                               "Titre 1 : Champ d'application - Généralités",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets en Conseil d'Etat",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_299(_: Any):
                        return ((smic_dot_brut_horaire_272 *
                                 decimal_of_string("0.55")) *
                                decimal_of_string("169."))
                    local_var_288 = handle_default([], local_var_297,
                                                   local_var_299)
            except EmptyError:
                def local_var_301(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_303(_: Any):
                    raise EmptyError
                local_var_288 = handle_default([], local_var_301,
                                               local_var_303)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=67, start_column=12, end_line=67, end_column=28,
                                             law_headings=["Prologue"]))
    plafond_l512_3_2_287 = log_variable_definition(["PrestationsFamiliales",
                                                    "plafond_l512_3_2"], local_var_288)
    try:
        try:
            local_var_306 = conditions_hors_age_143(Unit())
        except EmptyError:
            def local_var_306(param_307: Enfant):
                try:
                    try:
                        def local_var_308(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=66, start_column=12,
                                                                     end_line=66, end_column=31,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_310(_: Any):
                            def local_var_312(_: Any):
                                match_arg_2250 = param_307.obligation_scolaire
                                if match_arg_2250.code == SituationObligationScolaire_Code.Avant:
                                    _ = match_arg_2250.value
                                    local_var_314 = True
                                elif match_arg_2250.code == SituationObligationScolaire_Code.Pendant:
                                    _ = match_arg_2250.value
                                    local_var_314 = False
                                elif match_arg_2250.code == SituationObligationScolaire_Code.Apres:
                                    _ = match_arg_2250.value
                                    local_var_314 = False
                                match_arg_2251 = param_307.obligation_scolaire
                                if match_arg_2251.code == SituationObligationScolaire_Code.Avant:
                                    _ = match_arg_2251.value
                                    local_var_322 = False
                                elif match_arg_2251.code == SituationObligationScolaire_Code.Pendant:
                                    _ = match_arg_2251.value
                                    local_var_322 = False
                                elif match_arg_2251.code == SituationObligationScolaire_Code.Apres:
                                    _ = match_arg_2251.value
                                    local_var_322 = True
                                match_arg_2252 = param_307.obligation_scolaire
                                if match_arg_2252.code == SituationObligationScolaire_Code.Avant:
                                    _ = match_arg_2252.value
                                    local_var_318 = False
                                elif match_arg_2252.code == SituationObligationScolaire_Code.Pendant:
                                    _ = match_arg_2252.value
                                    local_var_318 = True
                                elif match_arg_2252.code == SituationObligationScolaire_Code.Apres:
                                    _ = match_arg_2252.value
                                    local_var_318 = False
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=68, start_column=5,
                                                                         end_line=71, end_column=57,
                                                                         law_headings=["Article L512-3",
                                                                                       "Chapitre 2 : Champ d'application",
                                                                                       "Titre 1 : Champ d'application - Généralités",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), ((local_var_314 or
                                                                                                                          (local_var_318 or local_var_322)) and
                                                                                                                         (param_307.remuneration_mensuelle <=
                                                                                                                          plafond_l512_3_2_287)))

                            def local_var_326(_: Any):
                                return True
                            return handle_default([], local_var_312,
                                                  local_var_326)
                        return handle_default([], local_var_308,
                                              local_var_310)
                    except EmptyError:
                        def local_var_328(_: Any):
                            return log_decision_taken(SourcePosition(filename="",
                                                                     start_line=0, start_column=1,
                                                                     end_line=0, end_column=1,
                                                                     law_headings=[]), True)

                        def local_var_330(_: Any):
                            return False
                        return handle_default([], local_var_328,
                                              local_var_330)
                except EmptyError:
                    raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=66, start_column=12, end_line=66,
                                                         end_column=31, law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=66, start_column=12, end_line=66, end_column=31,
                                             law_headings=["Prologue"]))
    conditions_hors_age_305 = log_variable_definition(["PrestationsFamiliales",
                                                       "conditions_hors_âge"], local_var_306)
    try:
        try:
            local_var_333 = droit_ouvert_142(Unit())
        except EmptyError:
            def local_var_333(param_334: Enfant):
                try:
                    def local_var_349(_: Any):
                        def local_var_351(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=65, start_column=12,
                                                                     end_line=65, end_column=24,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_353(_: Any):
                            def local_var_355(_: Any):
                                match_arg_2253 = param_334.obligation_scolaire
                                if match_arg_2253.code == SituationObligationScolaire_Code.Avant:
                                    _ = match_arg_2253.value
                                    local_var_361 = False
                                elif match_arg_2253.code == SituationObligationScolaire_Code.Pendant:
                                    _ = match_arg_2253.value
                                    local_var_361 = True
                                elif match_arg_2253.code == SituationObligationScolaire_Code.Apres:
                                    _ = match_arg_2253.value
                                    local_var_361 = False
                                match_arg_2254 = param_334.obligation_scolaire
                                if match_arg_2254.code == SituationObligationScolaire_Code.Avant:
                                    _ = match_arg_2254.value
                                    local_var_357 = True
                                elif match_arg_2254.code == SituationObligationScolaire_Code.Pendant:
                                    _ = match_arg_2254.value
                                    local_var_357 = False
                                elif match_arg_2254.code == SituationObligationScolaire_Code.Apres:
                                    _ = match_arg_2254.value
                                    local_var_357 = False
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=49, start_column=5,
                                                                         end_line=50, end_column=50,
                                                                         law_headings=["Article L512-3",
                                                                                       "Chapitre 2 : Champ d'application",
                                                                                       "Titre 1 : Champ d'application - Généralités",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), (local_var_357 or
                                                                                                                         local_var_361))

                            def local_var_365(_: Any):
                                return True
                            return handle_default([], local_var_355,
                                                  local_var_365)
                        return handle_default([], local_var_351,
                                              local_var_353)

                    def local_var_335(_: Any):
                        def local_var_337(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=65, start_column=12,
                                                                     end_line=65, end_column=24,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_339(_: Any):
                            def local_var_341(_: Any):
                                match_arg_2255 = param_334.obligation_scolaire
                                if match_arg_2255.code == SituationObligationScolaire_Code.Avant:
                                    _ = match_arg_2255.value
                                    local_var_343 = False
                                elif match_arg_2255.code == SituationObligationScolaire_Code.Pendant:
                                    _ = match_arg_2255.value
                                    local_var_343 = False
                                elif match_arg_2255.code == SituationObligationScolaire_Code.Apres:
                                    _ = match_arg_2255.value
                                    local_var_343 = True
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=60, start_column=5,
                                                                         end_line=62, end_column=32,
                                                                         law_headings=["Article L512-3",
                                                                                       "Chapitre 2 : Champ d'application",
                                                                                       "Titre 1 : Champ d'application - Généralités",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), (local_var_343 and
                                                                                                                         ((param_334.remuneration_mensuelle <=
                                                                                                                           plafond_l512_3_2_287) and
                                                                                                                          (param_334.age < age_l512_3_2_151))))

                            def local_var_347(_: Any):
                                return True
                            return handle_default([], local_var_341,
                                                  local_var_347)
                        return handle_default([], local_var_337,
                                              local_var_339)

                    def local_var_367(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=65, start_column=12,
                                                                 end_line=65, end_column=24,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_369(_: Any):
                        def local_var_371(_: Any):
                            return log_decision_taken(SourcePosition(filename="",
                                                                     start_line=0, start_column=1,
                                                                     end_line=0, end_column=1,
                                                                     law_headings=[]), True)

                        def local_var_373(_: Any):
                            return False
                        return handle_default([], local_var_371,
                                              local_var_373)
                    return handle_default([local_var_335, local_var_349],
                                          local_var_367, local_var_369)
                except EmptyError:
                    raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=65, start_column=12, end_line=65,
                                                         end_column=24, law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=65, start_column=12, end_line=65, end_column=24,
                                             law_headings=["Prologue"]))
    droit_ouvert_332 = log_variable_definition(["PrestationsFamiliales",
                                                "droit_ouvert"], local_var_333)
    return PrestationsFamilialesOut(droit_ouvert_out=droit_ouvert_332,
                                    conditions_hors_age_out=conditions_hors_age_305,
                                    plafond_l512_3_2_out=plafond_l512_3_2_287,
                                    age_l512_3_2_out=age_l512_3_2_151,
                                    regime_outre_mer_l751_1_out=regime_outre_mer_l751_1_273,
                                    date_courante_out=date_courante_165,
                                    prestation_courante_out=prestation_courante_175,
                                    residence_out=residence_185,
                                    base_mensuelle_out=base_mensuelle_195)


def allocations_familiales(allocations_familiales_in_375: AllocationsFamilialesIn):
    personne_charge_effective_permanente_est_parent_376 = allocations_familiales_in_375.personne_charge_effective_permanente_est_parent_in
    personne_charge_effective_permanente_remplit_titre__i_377 = allocations_familiales_in_375.personne_charge_effective_permanente_remplit_titre_I_in
    ressources_menage_378 = allocations_familiales_in_375.ressources_menage_in
    residence_379 = allocations_familiales_in_375.residence_in
    date_courante_380 = allocations_familiales_in_375.date_courante_in
    enfants_a_charge_381 = allocations_familiales_in_375.enfants_a_charge_in
    enfants_a_charge_droit_ouvert_prestation_familiale_382 = allocations_familiales_in_375.enfants_a_charge_droit_ouvert_prestation_familiale_in
    prise_en_compte_383 = allocations_familiales_in_375.prise_en_compte_in
    versement_384 = allocations_familiales_in_375.versement_in
    montant_verse_385 = allocations_familiales_in_375.montant_verse_in
    droit_ouvert_base_386 = allocations_familiales_in_375.droit_ouvert_base_in
    montant_initial_base_387 = allocations_familiales_in_375.montant_initial_base_in
    montant_initial_base_premier_enfant_388 = allocations_familiales_in_375.montant_initial_base_premier_enfant_in
    montant_initial_base_deuxieme_enfant_389 = allocations_familiales_in_375.montant_initial_base_deuxieme_enfant_in
    montant_initial_base_troisieme_enfant_et_plus_390 = allocations_familiales_in_375.montant_initial_base_troisieme_enfant_et_plus_in
    rapport_enfants_total_moyen_391 = allocations_familiales_in_375.rapport_enfants_total_moyen_in
    nombre_moyen_enfants_392 = allocations_familiales_in_375.nombre_moyen_enfants_in
    nombre_total_enfants_393 = allocations_familiales_in_375.nombre_total_enfants_in
    montant_avec_garde_alternee_base_394 = allocations_familiales_in_375.montant_avec_garde_alternee_base_in
    montant_verse_base_395 = allocations_familiales_in_375.montant_verse_base_in
    avait_enfant_a_charge_avant_1er_janvier_2012_396 = allocations_familiales_in_375.avait_enfant_a_charge_avant_1er_janvier_2012_in
    montant_initial_base_premier_enfant_mayotte_397 = allocations_familiales_in_375.montant_initial_base_premier_enfant_mayotte_in
    montant_initial_base_deuxieme_enfant_mayotte_398 = allocations_familiales_in_375.montant_initial_base_deuxieme_enfant_mayotte_in
    montant_initial_base_troisieme_enfant_mayotte_399 = allocations_familiales_in_375.montant_initial_base_troisieme_enfant_mayotte_in
    montant_initial_base_quatrieme_enfant_et_plus_mayotte_400 = allocations_familiales_in_375.montant_initial_base_quatrieme_enfant_et_plus_mayotte_in
    droit_ouvert_forfaitaire_401 = allocations_familiales_in_375.droit_ouvert_forfaitaire_in
    montant_verse_forfaitaire_par_enfant_402 = allocations_familiales_in_375.montant_verse_forfaitaire_par_enfant_in
    montant_verse_forfaitaire_403 = allocations_familiales_in_375.montant_verse_forfaitaire_in
    droit_ouvert_majoration_404 = allocations_familiales_in_375.droit_ouvert_majoration_in
    montant_initial_metropole_majoration_405 = allocations_familiales_in_375.montant_initial_metropole_majoration_in
    montant_initial_majoration_406 = allocations_familiales_in_375.montant_initial_majoration_in
    montant_avec_garde_alternee_majoration_407 = allocations_familiales_in_375.montant_avec_garde_alternee_majoration_in
    montant_verse_majoration_408 = allocations_familiales_in_375.montant_verse_majoration_in
    droit_ouvert_complement_409 = allocations_familiales_in_375.droit_ouvert_complement_in
    montant_base_complement_pour_base_et_majoration_410 = allocations_familiales_in_375.montant_base_complement_pour_base_et_majoration_in
    complement_degressif_411 = allocations_familiales_in_375.complement_degressif_in
    montant_verse_complement_pour_base_et_majoration_412 = allocations_familiales_in_375.montant_verse_complement_pour_base_et_majoration_in
    montant_verse_complement_pour_forfaitaire_413 = allocations_familiales_in_375.montant_verse_complement_pour_forfaitaire_in
    nombre_enfants_l521_1_414 = allocations_familiales_in_375.nombre_enfants_l521_1_in
    age_minimum_alinea_1_l521_3_415 = allocations_familiales_in_375.age_minimum_alinea_1_l521_3_in
    nombre_enfants_alinea_2_l521_3_416 = allocations_familiales_in_375.nombre_enfants_alinea_2_l521_3_in
    est_enfant_le_plus_age_417 = allocations_familiales_in_375.est_enfant_le_plus_age_in
    plafond__i_d521_3_418 = allocations_familiales_in_375.plafond_I_d521_3_in
    plafond__i_i_d521_3_419 = allocations_familiales_in_375.plafond_II_d521_3_in
    try:
        try:
            local_var_421 = personne_charge_effective_permanente_est_parent_376(
                Unit())
        except EmptyError:
            def local_var_422(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=90, start_column=12,
                                                         end_line=90, end_column=59,
                                                         law_headings=["Prologue"]), True)

            def local_var_424(_: Any):
                def local_var_426(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), True)

                def local_var_428(_: Any):
                    return False
                return handle_default([], local_var_426, local_var_428)
            local_var_421 = handle_default([], local_var_422, local_var_424)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=90, start_column=12, end_line=90, end_column=59,
                                             law_headings=["Prologue"]))
    personne_charge_effective_permanente_est_parent_420 = log_variable_definition(["AllocationsFamiliales",
                                                                                   "personne_charge_effective_permanente_est_parent"], local_var_421)
    try:
        try:
            local_var_431 = personne_charge_effective_permanente_remplit_titre__i_377(
                Unit())
        except EmptyError:
            def local_var_432(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=91, start_column=12,
                                                         end_line=91, end_column=64,
                                                         law_headings=["Prologue"]), True)

            def local_var_434(_: Any):
                def local_var_436(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), True)

                def local_var_438(_: Any):
                    return False
                return handle_default([], local_var_436, local_var_438)
            local_var_431 = handle_default([], local_var_432, local_var_434)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=91, start_column=12, end_line=91, end_column=64,
                                             law_headings=["Prologue"]))
    personne_charge_effective_permanente_remplit_titre__i_430 = log_variable_definition(["AllocationsFamiliales",
                                                                                         "personne_charge_effective_permanente_remplit_titre_I"],
                                                                                        local_var_431)
    try:
        try:
            local_var_441 = ressources_menage_378(Unit())
        except EmptyError:
            def local_var_442(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=92, start_column=12,
                                                         end_line=92, end_column=29,
                                                         law_headings=["Prologue"]), True)

            def local_var_444(_: Any):
                def local_var_446(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_448(_: Any):
                    raise EmptyError
                return handle_default([], local_var_446, local_var_448)
            local_var_441 = handle_default([], local_var_442, local_var_444)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=92, start_column=12, end_line=92, end_column=29,
                                             law_headings=["Prologue"]))
    ressources_menage_440 = log_variable_definition(["AllocationsFamiliales",
                                                     "ressources_ménage"], local_var_441)
    try:
        try:
            local_var_451 = residence_379(Unit())
        except EmptyError:
            def local_var_452(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=93, start_column=12,
                                                         end_line=93, end_column=21,
                                                         law_headings=["Prologue"]), True)

            def local_var_454(_: Any):
                def local_var_456(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_458(_: Any):
                    raise EmptyError
                return handle_default([], local_var_456, local_var_458)
            local_var_451 = handle_default([], local_var_452, local_var_454)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=93, start_column=12, end_line=93, end_column=21,
                                             law_headings=["Prologue"]))
    residence_450 = log_variable_definition(["AllocationsFamiliales",
                                             "résidence"], local_var_451)
    try:
        try:
            local_var_461 = date_courante_380(Unit())
        except EmptyError:
            def local_var_462(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=96, start_column=12,
                                                         end_line=96, end_column=25,
                                                         law_headings=["Prologue"]), True)

            def local_var_464(_: Any):
                def local_var_466(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_468(_: Any):
                    raise EmptyError
                return handle_default([], local_var_466, local_var_468)
            local_var_461 = handle_default([], local_var_462, local_var_464)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=96, start_column=12, end_line=96, end_column=25,
                                             law_headings=["Prologue"]))
    date_courante_460 = log_variable_definition(["AllocationsFamiliales",
                                                 "date_courante"], local_var_461)
    try:
        try:
            local_var_471 = enfants_a_charge_381(Unit())
        except EmptyError:
            def local_var_472(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=99, start_column=12,
                                                         end_line=99, end_column=28,
                                                         law_headings=["Prologue"]), True)

            def local_var_474(_: Any):
                def local_var_476(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_478(_: Any):
                    raise EmptyError
                return handle_default([], local_var_476, local_var_478)
            local_var_471 = handle_default([], local_var_472, local_var_474)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=99, start_column=12, end_line=99, end_column=28,
                                             law_headings=["Prologue"]))
    enfants_a_charge_470 = log_variable_definition(["AllocationsFamiliales",
                                                    "enfants_à_charge"], local_var_471)
    try:
        try:
            local_var_481 = prise_en_compte_383(Unit())
        except EmptyError:
            def local_var_481(param_482: Enfant):
                try:
                    def local_var_547(_: Any):
                        def local_var_549(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=102, start_column=12,
                                                                     end_line=102, end_column=27,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_551(_: Any):
                            def local_var_553(_: Any):
                                match_arg_2256 = param_482.prise_en_charge
                                if match_arg_2256.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                                    _ = match_arg_2256.value
                                    local_var_555 = False
                                elif match_arg_2256.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                                    _ = match_arg_2256.value
                                    local_var_555 = False
                                elif match_arg_2256.code == PriseEnCharge_Code.EffectiveEtPermanente:
                                    _ = match_arg_2256.value
                                    local_var_555 = True
                                elif match_arg_2256.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                                    _ = match_arg_2256.value
                                    local_var_555 = False
                                elif match_arg_2256.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                                    _ = match_arg_2256.value
                                    local_var_555 = False
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=184, start_column=5,
                                                                         end_line=184, end_column=60,
                                                                         law_headings=["Article L521-2",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), local_var_555)

                            def local_var_561(_: Any):
                                return PriseEnCompte(PriseEnCompte_Code.Complete,
                                                     Unit())
                            return handle_default([], local_var_553,
                                                  local_var_561)
                        return handle_default([], local_var_549,
                                              local_var_551)

                    def local_var_531(_: Any):
                        def local_var_533(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=102, start_column=12,
                                                                     end_line=102, end_column=27,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_535(_: Any):
                            def local_var_537(_: Any):
                                match_arg_2257 = param_482.prise_en_charge
                                if match_arg_2257.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                                    _ = match_arg_2257.value
                                    local_var_539 = False
                                elif match_arg_2257.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                                    _ = match_arg_2257.value
                                    local_var_539 = True
                                elif match_arg_2257.code == PriseEnCharge_Code.EffectiveEtPermanente:
                                    _ = match_arg_2257.value
                                    local_var_539 = False
                                elif match_arg_2257.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                                    _ = match_arg_2257.value
                                    local_var_539 = False
                                elif match_arg_2257.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                                    _ = match_arg_2257.value
                                    local_var_539 = False
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=204, start_column=5,
                                                                         end_line=204, end_column=69,
                                                                         law_headings=["Article L521-2",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), local_var_539)

                            def local_var_545(_: Any):
                                return PriseEnCompte(PriseEnCompte_Code.Complete,
                                                     Unit())
                            return handle_default([], local_var_537,
                                                  local_var_545)
                        return handle_default([], local_var_533,
                                              local_var_535)

                    def local_var_515(_: Any):
                        def local_var_517(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=102, start_column=12,
                                                                     end_line=102, end_column=27,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_519(_: Any):
                            def local_var_521(_: Any):
                                match_arg_2258 = param_482.prise_en_charge
                                if match_arg_2258.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                                    _ = match_arg_2258.value
                                    local_var_523 = True
                                elif match_arg_2258.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                                    _ = match_arg_2258.value
                                    local_var_523 = False
                                elif match_arg_2258.code == PriseEnCharge_Code.EffectiveEtPermanente:
                                    _ = match_arg_2258.value
                                    local_var_523 = False
                                elif match_arg_2258.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                                    _ = match_arg_2258.value
                                    local_var_523 = False
                                elif match_arg_2258.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                                    _ = match_arg_2258.value
                                    local_var_523 = False
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=214, start_column=5,
                                                                         end_line=214, end_column=70,
                                                                         law_headings=["Article L521-2",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), local_var_523)

                            def local_var_529(_: Any):
                                return PriseEnCompte(PriseEnCompte_Code.Partagee,
                                                     Unit())
                            return handle_default([], local_var_521,
                                                  local_var_529)
                        return handle_default([], local_var_517,
                                              local_var_519)

                    def local_var_499(_: Any):
                        def local_var_501(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=102, start_column=12,
                                                                     end_line=102, end_column=27,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_503(_: Any):
                            def local_var_505(_: Any):
                                match_arg_2259 = param_482.prise_en_charge
                                if match_arg_2259.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                                    _ = match_arg_2259.value
                                    local_var_507 = False
                                elif match_arg_2259.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                                    _ = match_arg_2259.value
                                    local_var_507 = False
                                elif match_arg_2259.code == PriseEnCharge_Code.EffectiveEtPermanente:
                                    _ = match_arg_2259.value
                                    local_var_507 = False
                                elif match_arg_2259.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                                    _ = match_arg_2259.value
                                    local_var_507 = False
                                elif match_arg_2259.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                                    _ = match_arg_2259.value
                                    local_var_507 = True
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=253, start_column=5,
                                                                         end_line=254, end_column=56,
                                                                         law_headings=["Article L521-2",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), local_var_507)

                            def local_var_513(_: Any):
                                return PriseEnCompte(PriseEnCompte_Code.Zero,
                                                     Unit())
                            return handle_default([], local_var_505,
                                                  local_var_513)
                        return handle_default([], local_var_501,
                                              local_var_503)

                    def local_var_483(_: Any):
                        def local_var_485(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=102, start_column=12,
                                                                     end_line=102, end_column=27,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_487(_: Any):
                            def local_var_489(_: Any):
                                match_arg_2260 = param_482.prise_en_charge
                                if match_arg_2260.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                                    _ = match_arg_2260.value
                                    local_var_491 = False
                                elif match_arg_2260.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                                    _ = match_arg_2260.value
                                    local_var_491 = False
                                elif match_arg_2260.code == PriseEnCharge_Code.EffectiveEtPermanente:
                                    _ = match_arg_2260.value
                                    local_var_491 = False
                                elif match_arg_2260.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                                    _ = match_arg_2260.value
                                    local_var_491 = True
                                elif match_arg_2260.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                                    _ = match_arg_2260.value
                                    local_var_491 = False
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=263, start_column=5,
                                                                         end_line=264, end_column=48,
                                                                         law_headings=["Article L521-2",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), local_var_491)

                            def local_var_497(_: Any):
                                return PriseEnCompte(PriseEnCompte_Code.Complete,
                                                     Unit())
                            return handle_default([], local_var_489,
                                                  local_var_497)
                        return handle_default([], local_var_485,
                                              local_var_487)

                    def local_var_563(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=102, start_column=12,
                                                                 end_line=102, end_column=27,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_565(_: Any):
                        def local_var_567(_: Any):
                            return log_decision_taken(SourcePosition(filename="",
                                                                     start_line=0, start_column=1,
                                                                     end_line=0, end_column=1,
                                                                     law_headings=[]), False)

                        def local_var_569(_: Any):
                            raise EmptyError
                        return handle_default([], local_var_567,
                                              local_var_569)
                    return handle_default([local_var_483, local_var_499,
                                           local_var_515, local_var_531, local_var_547],
                                          local_var_563, local_var_565)
                except EmptyError:
                    raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=102, start_column=12, end_line=102,
                                                         end_column=27, law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=102, start_column=12, end_line=102, end_column=27,
                                             law_headings=["Prologue"]))
    prise_en_compte_480 = log_variable_definition(["AllocationsFamiliales",
                                                   "prise_en_compte"], local_var_481)
    try:
        try:
            local_var_572 = versement_384(Unit())
        except EmptyError:
            def local_var_572(param_573: Enfant):
                try:
                    def local_var_638(_: Any):
                        def local_var_640(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=103, start_column=12,
                                                                     end_line=103, end_column=21,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_642(_: Any):
                            def local_var_644(_: Any):
                                match_arg_2261 = param_573.prise_en_charge
                                if match_arg_2261.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                                    _ = match_arg_2261.value
                                    local_var_646 = False
                                elif match_arg_2261.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                                    _ = match_arg_2261.value
                                    local_var_646 = False
                                elif match_arg_2261.code == PriseEnCharge_Code.EffectiveEtPermanente:
                                    _ = match_arg_2261.value
                                    local_var_646 = True
                                elif match_arg_2261.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                                    _ = match_arg_2261.value
                                    local_var_646 = False
                                elif match_arg_2261.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                                    _ = match_arg_2261.value
                                    local_var_646 = False
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=188, start_column=5,
                                                                         end_line=188, end_column=60,
                                                                         law_headings=["Article L521-2",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), local_var_646)

                            def local_var_652(_: Any):
                                return VersementAllocations(VersementAllocations_Code.Normal,
                                                            Unit())
                            return handle_default([], local_var_644,
                                                  local_var_652)
                        return handle_default([], local_var_640,
                                              local_var_642)

                    def local_var_622(_: Any):
                        def local_var_624(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=103, start_column=12,
                                                                     end_line=103, end_column=21,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_626(_: Any):
                            def local_var_628(_: Any):
                                match_arg_2262 = param_573.prise_en_charge
                                if match_arg_2262.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                                    _ = match_arg_2262.value
                                    local_var_630 = False
                                elif match_arg_2262.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                                    _ = match_arg_2262.value
                                    local_var_630 = True
                                elif match_arg_2262.code == PriseEnCharge_Code.EffectiveEtPermanente:
                                    _ = match_arg_2262.value
                                    local_var_630 = False
                                elif match_arg_2262.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                                    _ = match_arg_2262.value
                                    local_var_630 = False
                                elif match_arg_2262.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                                    _ = match_arg_2262.value
                                    local_var_630 = False
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=208, start_column=5,
                                                                         end_line=208, end_column=69,
                                                                         law_headings=["Article L521-2",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), local_var_630)

                            def local_var_636(_: Any):
                                return VersementAllocations(VersementAllocations_Code.Normal,
                                                            Unit())
                            return handle_default([], local_var_628,
                                                  local_var_636)
                        return handle_default([], local_var_624,
                                              local_var_626)

                    def local_var_606(_: Any):
                        def local_var_608(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=103, start_column=12,
                                                                     end_line=103, end_column=21,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_610(_: Any):
                            def local_var_612(_: Any):
                                match_arg_2263 = param_573.prise_en_charge
                                if match_arg_2263.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                                    _ = match_arg_2263.value
                                    local_var_614 = True
                                elif match_arg_2263.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                                    _ = match_arg_2263.value
                                    local_var_614 = False
                                elif match_arg_2263.code == PriseEnCharge_Code.EffectiveEtPermanente:
                                    _ = match_arg_2263.value
                                    local_var_614 = False
                                elif match_arg_2263.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                                    _ = match_arg_2263.value
                                    local_var_614 = False
                                elif match_arg_2263.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                                    _ = match_arg_2263.value
                                    local_var_614 = False
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=218, start_column=5,
                                                                         end_line=218, end_column=70,
                                                                         law_headings=["Article L521-2",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), local_var_614)

                            def local_var_620(_: Any):
                                return VersementAllocations(VersementAllocations_Code.Normal,
                                                            Unit())
                            return handle_default([], local_var_612,
                                                  local_var_620)
                        return handle_default([], local_var_608,
                                              local_var_610)

                    def local_var_590(_: Any):
                        def local_var_592(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=103, start_column=12,
                                                                     end_line=103, end_column=21,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_594(_: Any):
                            def local_var_596(_: Any):
                                match_arg_2264 = param_573.prise_en_charge
                                if match_arg_2264.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                                    _ = match_arg_2264.value
                                    local_var_598 = False
                                elif match_arg_2264.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                                    _ = match_arg_2264.value
                                    local_var_598 = False
                                elif match_arg_2264.code == PriseEnCharge_Code.EffectiveEtPermanente:
                                    _ = match_arg_2264.value
                                    local_var_598 = False
                                elif match_arg_2264.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                                    _ = match_arg_2264.value
                                    local_var_598 = False
                                elif match_arg_2264.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                                    _ = match_arg_2264.value
                                    local_var_598 = True
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=258, start_column=5,
                                                                         end_line=259, end_column=56,
                                                                         law_headings=["Article L521-2",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), local_var_598)

                            def local_var_604(_: Any):
                                return VersementAllocations(VersementAllocations_Code.AllocationVerseeAuxServicesSociaux,
                                                            Unit())
                            return handle_default([], local_var_596,
                                                  local_var_604)
                        return handle_default([], local_var_592,
                                              local_var_594)

                    def local_var_574(_: Any):
                        def local_var_576(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=103, start_column=12,
                                                                     end_line=103, end_column=21,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_578(_: Any):
                            def local_var_580(_: Any):
                                match_arg_2265 = param_573.prise_en_charge
                                if match_arg_2265.code == PriseEnCharge_Code.GardeAlterneePartageAllocations:
                                    _ = match_arg_2265.value
                                    local_var_582 = False
                                elif match_arg_2265.code == PriseEnCharge_Code.GardeAlterneeAllocataireUnique:
                                    _ = match_arg_2265.value
                                    local_var_582 = False
                                elif match_arg_2265.code == PriseEnCharge_Code.EffectiveEtPermanente:
                                    _ = match_arg_2265.value
                                    local_var_582 = False
                                elif match_arg_2265.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeALaFamille:
                                    _ = match_arg_2265.value
                                    local_var_582 = True
                                elif match_arg_2265.code == PriseEnCharge_Code.ServicesSociauxAllocationVerseeAuxServicesSociaux:
                                    _ = match_arg_2265.value
                                    local_var_582 = False
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=269, start_column=5,
                                                                         end_line=270, end_column=48,
                                                                         law_headings=["Article L521-2",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), local_var_582)

                            def local_var_588(_: Any):
                                return VersementAllocations(VersementAllocations_Code.Normal,
                                                            Unit())
                            return handle_default([], local_var_580,
                                                  local_var_588)
                        return handle_default([], local_var_576,
                                              local_var_578)

                    def local_var_654(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=103, start_column=12,
                                                                 end_line=103, end_column=21,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_656(_: Any):
                        def local_var_658(_: Any):
                            return log_decision_taken(SourcePosition(filename="",
                                                                     start_line=0, start_column=1,
                                                                     end_line=0, end_column=1,
                                                                     law_headings=[]), False)

                        def local_var_660(_: Any):
                            raise EmptyError
                        return handle_default([], local_var_658,
                                              local_var_660)
                    return handle_default([local_var_574, local_var_590,
                                           local_var_606, local_var_622, local_var_638],
                                          local_var_654, local_var_656)
                except EmptyError:
                    raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=103, start_column=12, end_line=103,
                                                         end_column=21, law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=103, start_column=12, end_line=103, end_column=21,
                                             law_headings=["Prologue"]))
    versement_571 = log_variable_definition(["AllocationsFamiliales",
                                             "versement"], local_var_572)
    try:
        try:
            local_var_663 = avait_enfant_a_charge_avant_1er_janvier_2012_396(
                Unit())
        except EmptyError:
            def local_var_664(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=120, start_column=12,
                                                         end_line=120, end_column=56,
                                                         law_headings=["Prologue"]), True)

            def local_var_666(_: Any):
                def local_var_668(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), True)

                def local_var_670(_: Any):
                    return False
                return handle_default([], local_var_668, local_var_670)
            local_var_663 = handle_default([], local_var_664, local_var_666)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=120, start_column=12, end_line=120, end_column=56,
                                             law_headings=["Prologue"]))
    avait_enfant_a_charge_avant_1er_janvier_2012_662 = log_variable_definition(["AllocationsFamiliales",
                                                                                "avait_enfant_à_charge_avant_1er_janvier_2012"], local_var_663)
    try:
        try:
            local_var_673 = nombre_enfants_l521_1_414(Unit())
        except EmptyError:
            try:
                def local_var_674(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=151, start_column=12,
                                                             end_line=151, end_column=33,
                                                             law_headings=["Prologue"]), True)

                def local_var_676(_: Any):
                    def local_var_678(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=288, start_column=14,
                                                                 end_line=288, end_column=35,
                                                                 law_headings=["Article D521-2",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_680(_: Any):
                        return integer_of_string("3")
                    return handle_default([], local_var_678, local_var_680)
                local_var_673 = handle_default([], local_var_674,
                                               local_var_676)
            except EmptyError:
                def local_var_682(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_684(_: Any):
                    raise EmptyError
                local_var_673 = handle_default([], local_var_682,
                                               local_var_684)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=151, start_column=12, end_line=151, end_column=33,
                                             law_headings=["Prologue"]))
    nombre_enfants_l521_1_672 = log_variable_definition(["AllocationsFamiliales",
                                                         "nombre_enfants_l521_1"], local_var_673)
    try:
        try:
            local_var_687 = nombre_enfants_alinea_2_l521_3_416(Unit())
        except EmptyError:
            try:
                def local_var_688(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=153, start_column=12,
                                                             end_line=153, end_column=42,
                                                             law_headings=["Prologue"]), True)

                def local_var_690(_: Any):
                    def local_var_692(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                                 start_line=64, start_column=14,
                                                                 end_line=64, end_column=44,
                                                                 law_headings=["Article R521-1",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets en Conseil d'Etat",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_694(_: Any):
                        return integer_of_string("3")
                    return handle_default([], local_var_692, local_var_694)
                local_var_687 = handle_default([], local_var_688,
                                               local_var_690)
            except EmptyError:
                def local_var_696(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_698(_: Any):
                    raise EmptyError
                local_var_687 = handle_default([], local_var_696,
                                               local_var_698)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=153, start_column=12, end_line=153, end_column=42,
                                             law_headings=["Prologue"]))
    nombre_enfants_alinea_2_l521_3_686 = log_variable_definition(["AllocationsFamiliales",
                                                                  "nombre_enfants_alinéa_2_l521_3"], local_var_687)

    def local_var_701(_: Unit):
        raise EmptyError
    result_700 = log_end_call(["AllocationsFamiliales", "version_avril_2008",
                               "AllocationFamilialesAvril2008"],
                              log_begin_call(["AllocationsFamiliales", "version_avril_2008",
                                              "AllocationFamilialesAvril2008"], allocation_familiales_avril2008,
                                             AllocationFamilialesAvril2008In(age_minimum_alinea_1_l521_3_in=local_var_701)))
    version_avril_2008_dot_age_minimum_alinea_1_l521_3_703 = result_700.age_minimum_alinea_1_l521_3_out

    def local_var_705(_: Unit):
        try:
            def local_var_708(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=146, start_column=12,
                                                         end_line=146, end_column=34,
                                                         law_headings=["Prologue"]), True)

            def local_var_710(_: Any):
                def local_var_712(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=161, start_column=14,
                                                             end_line=161, end_column=50,
                                                             law_headings=["Prologue"]), True)

                def local_var_714(_: Any):
                    return date_courante_460
                return handle_default([], local_var_712, local_var_714)
            local_var_707 = handle_default([], local_var_708, local_var_710)
        except EmptyError:
            def local_var_716(_: Any):
                return log_decision_taken(SourcePosition(filename="",
                                                         start_line=0, start_column=1, end_line=0, end_column=1,
                                                         law_headings=[]), False)

            def local_var_718(_: Any):
                raise EmptyError
            local_var_707 = handle_default([], local_var_716, local_var_718)
        return log_variable_definition(["AllocationsFamiliales",
                                        "prestations_familiales.date_courante"], local_var_707)
    prestations_familiales_dot_date_courante_704 = local_var_705

    def local_var_721(_: Unit):
        try:
            def local_var_724(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=146, start_column=12,
                                                         end_line=146, end_column=34,
                                                         law_headings=["Prologue"]), True)

            def local_var_726(_: Any):
                def local_var_728(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=159, start_column=14,
                                                             end_line=159, end_column=56,
                                                             law_headings=["Prologue"]), True)

                def local_var_730(_: Any):
                    return ElementPrestationsFamiliales(ElementPrestationsFamiliales_Code.AllocationsFamiliales,
                                                        Unit())
                return handle_default([], local_var_728, local_var_730)
            local_var_723 = handle_default([], local_var_724, local_var_726)
        except EmptyError:
            def local_var_732(_: Any):
                return log_decision_taken(SourcePosition(filename="",
                                                         start_line=0, start_column=1, end_line=0, end_column=1,
                                                         law_headings=[]), False)

            def local_var_734(_: Any):
                raise EmptyError
            local_var_723 = handle_default([], local_var_732, local_var_734)
        return log_variable_definition(["AllocationsFamiliales",
                                        "prestations_familiales.prestation_courante"], local_var_723)
    prestations_familiales_dot_prestation_courante_720 = local_var_721

    def local_var_737(_: Unit):
        try:
            def local_var_740(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=146, start_column=12,
                                                         end_line=146, end_column=34,
                                                         law_headings=["Prologue"]), True)

            def local_var_742(_: Any):
                def local_var_744(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=163, start_column=14,
                                                             end_line=163, end_column=46,
                                                             law_headings=["Prologue"]), True)

                def local_var_746(_: Any):
                    return residence_450
                return handle_default([], local_var_744, local_var_746)
            local_var_739 = handle_default([], local_var_740, local_var_742)
        except EmptyError:
            def local_var_748(_: Any):
                return log_decision_taken(SourcePosition(filename="",
                                                         start_line=0, start_column=1, end_line=0, end_column=1,
                                                         law_headings=[]), False)

            def local_var_750(_: Any):
                raise EmptyError
            local_var_739 = handle_default([], local_var_748, local_var_750)
        return log_variable_definition(["AllocationsFamiliales",
                                        "prestations_familiales.résidence"], local_var_739)
    prestations_familiales_dot_residence_736 = local_var_737

    def local_var_753(_: Unit):
        raise EmptyError

    def local_var_755(_: Unit):
        raise EmptyError

    def local_var_757(_: Unit):
        raise EmptyError

    def local_var_759(_: Unit):
        raise EmptyError

    def local_var_761(_: Unit):
        raise EmptyError

    def local_var_763(_: Unit):
        raise EmptyError
    result_752 = log_end_call(["AllocationsFamiliales",
                               "prestations_familiales", "PrestationsFamiliales"],
                              log_begin_call(["AllocationsFamiliales", "prestations_familiales",
                                              "PrestationsFamiliales"], prestations_familiales,
                                             PrestationsFamilialesIn(droit_ouvert_in=local_var_753,
                                                                     conditions_hors_age_in=local_var_755,
                                                                     plafond_l512_3_2_in=local_var_757, age_l512_3_2_in=local_var_759,
                                                                     regime_outre_mer_l751_1_in=local_var_761,
                                                                     date_courante_in=prestations_familiales_dot_date_courante_704,
                                                                     prestation_courante_in=prestations_familiales_dot_prestation_courante_720,
                                                                     residence_in=prestations_familiales_dot_residence_736,
                                                                     base_mensuelle_in=local_var_763)))
    prestations_familiales_dot_droit_ouvert_765 = result_752.droit_ouvert_out
    prestations_familiales_dot_conditions_hors_age_766 = result_752.conditions_hors_age_out
    prestations_familiales_dot_plafond_l512_3_2_767 = result_752.plafond_l512_3_2_out
    prestations_familiales_dot_age_l512_3_2_768 = result_752.age_l512_3_2_out
    prestations_familiales_dot_regime_outre_mer_l751_1_769 = result_752.regime_outre_mer_l751_1_out
    prestations_familiales_dot_date_courante_770 = result_752.date_courante_out
    prestations_familiales_dot_prestation_courante_771 = result_752.prestation_courante_out
    prestations_familiales_dot_residence_772 = result_752.residence_out
    prestations_familiales_dot_base_mensuelle_773 = result_752.base_mensuelle_out

    def local_var_775(_: Unit):
        try:
            def local_var_778(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=148, start_column=12,
                                                         end_line=148, end_column=30,
                                                         law_headings=["Prologue"]), True)

            def local_var_780(_: Any):
                def local_var_782(_: Any):
                    return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                             start_line=32, start_column=14,
                                                             end_line=32, end_column=40,
                                                             law_headings=["Règles diverses", "Épilogue",
                                                                           "Décrets divers"]), True)

                def local_var_784(_: Any):
                    return enfants_a_charge_470
                return handle_default([], local_var_782, local_var_784)
            local_var_777 = handle_default([], local_var_778, local_var_780)
        except EmptyError:
            def local_var_786(_: Any):
                return log_decision_taken(SourcePosition(filename="",
                                                         start_line=0, start_column=1, end_line=0, end_column=1,
                                                         law_headings=[]), False)

            def local_var_788(_: Any):
                raise EmptyError
            local_var_777 = handle_default([], local_var_786, local_var_788)
        return log_variable_definition(["AllocationsFamiliales",
                                        "enfant_le_plus_âgé.enfants"], local_var_777)
    enfant_le_plus_age_dot_enfants_774 = local_var_775

    def local_var_791(_: Unit):
        raise EmptyError
    result_790 = log_end_call(["AllocationsFamiliales",
                               "enfant_le_plus_âgé", "EnfantLePlusÂgé"],
                              log_begin_call(["AllocationsFamiliales", "enfant_le_plus_âgé",
                                              "EnfantLePlusÂgé"], enfant_le_plus_age,
                                             EnfantLePlusAgeIn(enfants_in=enfant_le_plus_age_dot_enfants_774,
                                                               le_plus_age_in=local_var_791)))
    enfant_le_plus_age_dot_enfants_793 = result_790.enfants_out
    enfant_le_plus_age_dot_le_plus_age_794 = result_790.le_plus_age_out
    try:
        try:
            local_var_796 = age_minimum_alinea_1_l521_3_415(Unit())
        except EmptyError:
            def local_var_796(param_797: Enfant):
                try:
                    try:
                        try:
                            def local_var_798(_: Any):
                                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                         start_line=152, start_column=12,
                                                                         end_line=152, end_column=39,
                                                                         law_headings=["Prologue"]), True)

                            def local_var_800(_: Any):
                                def local_var_802(_: Any):
                                    return log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                                             start_line=83, start_column=19,
                                                                             end_line=83, end_column=69,
                                                                             law_headings=["Article R521-1",
                                                                                           "Chapitre 1er : Allocations familiales",
                                                                                           "Titre 2 : Prestations générales d'entretien",
                                                                                           "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                           "Partie réglementaire - Décrets en Conseil d'Etat",
                                                                                           "Code de la sécurité sociale"]), ((param_797.date_de_naissance +
                                                                                                                              duration_of_numbers(11, 0, 0)) <=
                                                                                                                             date_of_numbers(2008, 4, 30)))

                                def local_var_804(_: Any):
                                    return version_avril_2008_dot_age_minimum_alinea_1_l521_3_703
                                return handle_default([], local_var_802,
                                                      local_var_804)
                            return handle_default([], local_var_798,
                                                  local_var_800)
                        except EmptyError:
                            def local_var_806(_: Any):
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                                         start_line=56, start_column=14,
                                                                         end_line=56, end_column=41,
                                                                         law_headings=["Article R521-1",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie réglementaire - Décrets en Conseil d'Etat",
                                                                                       "Code de la sécurité sociale"]), True)

                            def local_var_808(_: Any):
                                return integer_of_string("14")
                            return handle_default([], local_var_806,
                                                  local_var_808)
                    except EmptyError:
                        def local_var_810(_: Any):
                            return log_decision_taken(SourcePosition(filename="",
                                                                     start_line=0, start_column=1,
                                                                     end_line=0, end_column=1,
                                                                     law_headings=[]), False)

                        def local_var_812(_: Any):
                            raise EmptyError
                        return handle_default([], local_var_810,
                                              local_var_812)
                except EmptyError:
                    raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=152, start_column=12, end_line=152,
                                                         end_column=39, law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=152, start_column=12, end_line=152, end_column=39,
                                             law_headings=["Prologue"]))
    age_minimum_alinea_1_l521_3_795 = log_variable_definition(["AllocationsFamiliales",
                                                               "âge_minimum_alinéa_1_l521_3"], local_var_796)
    try:
        try:
            local_var_815 = enfants_a_charge_droit_ouvert_prestation_familiale_382(
                Unit())
        except EmptyError:
            try:
                def local_var_816(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=100, start_column=12,
                                                             end_line=100, end_column=62,
                                                             law_headings=["Prologue"]), True)

                def local_var_818(_: Any):
                    def local_var_820(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                 start_line=75, start_column=14,
                                                                 end_line=75, end_column=64,
                                                                 law_headings=["Article L512-3",
                                                                               "Chapitre 2 : Champ d'application",
                                                                               "Titre 1 : Champ d'application - Généralités",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie législative",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_822(_: Any):
                        def local_var_824(enfant_825: Any):
                            return log_end_call(["PrestationsFamiliales",
                                                 "droit_ouvert"],
                                                log_variable_definition(["PrestationsFamiliales",
                                                                         "droit_ouvert", "output"],
                                                                        log_begin_call(["PrestationsFamiliales",
                                                                                        "droit_ouvert"],
                                                                                       prestations_familiales_dot_droit_ouvert_765,
                                                                                       log_variable_definition(["PrestationsFamiliales",
                                                                                                                "droit_ouvert", "input"], enfant_825))))
                        return list_filter(local_var_824,
                                           enfants_a_charge_470)
                    return handle_default([], local_var_820, local_var_822)
                local_var_815 = handle_default([], local_var_816,
                                               local_var_818)
            except EmptyError:
                def local_var_826(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_828(_: Any):
                    raise EmptyError
                local_var_815 = handle_default([], local_var_826,
                                               local_var_828)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=100, start_column=12, end_line=100, end_column=62,
                                             law_headings=["Prologue"]))
    enfants_a_charge_droit_ouvert_prestation_familiale_814 = log_variable_definition(["AllocationsFamiliales",
                                                                                      "enfants_à_charge_droit_ouvert_prestation_familiale"],
                                                                                     local_var_815)
    try:
        try:
            local_var_831 = est_enfant_le_plus_age_417(Unit())
        except EmptyError:
            def local_var_831(param_832: Enfant):
                try:
                    try:
                        def local_var_833(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=154, start_column=12,
                                                                     end_line=154, end_column=34,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_835(_: Any):
                            def local_var_837(_: Any):
                                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                                         start_line=33, start_column=14,
                                                                         end_line=33, end_column=36,
                                                                         law_headings=["Règles diverses",
                                                                                       "Épilogue", "Décrets divers"]), True)

                            def local_var_839(_: Any):
                                return (enfant_le_plus_age_dot_le_plus_age_794 ==
                                        param_832)
                            return handle_default([], local_var_837,
                                                  local_var_839)
                        return handle_default([], local_var_833,
                                              local_var_835)
                    except EmptyError:
                        def local_var_841(_: Any):
                            return log_decision_taken(SourcePosition(filename="",
                                                                     start_line=0, start_column=1,
                                                                     end_line=0, end_column=1,
                                                                     law_headings=[]), False)

                        def local_var_843(_: Any):
                            raise EmptyError
                        return handle_default([], local_var_841,
                                              local_var_843)
                except EmptyError:
                    raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=154, start_column=12, end_line=154,
                                                         end_column=34, law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=154, start_column=12, end_line=154, end_column=34,
                                             law_headings=["Prologue"]))
    est_enfant_le_plus_age_830 = log_variable_definition(["AllocationsFamiliales",
                                                          "est_enfant_le_plus_âgé"], local_var_831)
    try:
        try:
            local_var_846 = plafond__i_i_d521_3_419(Unit())
        except EmptyError:
            try:
                def local_var_877(_: Any):
                    def local_var_879(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=156, start_column=12,
                                                                 end_line=156, end_column=29,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_881(_: Any):
                        def local_var_883(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=94, start_column=5,
                                                                     end_line=94, end_column=69,
                                                                     law_headings=["Circulaire interministérielle N° DSS/SD2B/2017/352 du 22 décembre 2017 relative à la revalorisation au 1er janvier 2018 des plafonds de ressources d’attribution de certaines prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à la Réunion, à Saint-Barthélemy, à Saint-Martin et à Mayotte",
                                                                                   "Montant des plafonds de ressources",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2018, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2018, 12, 31))))

                        def local_var_885(_: Any):
                            return (money_of_cents_string("7877000") +
                                    (money_of_cents_string("562800") *
                                     decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814))))
                        return handle_default([], local_var_883,
                                              local_var_885)
                    return handle_default([], local_var_879, local_var_881)

                def local_var_867(_: Any):
                    def local_var_869(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=156, start_column=12,
                                                                 end_line=156, end_column=29,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_871(_: Any):
                        def local_var_873(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=127, start_column=5,
                                                                     end_line=127, end_column=69,
                                                                     law_headings=["Instruction interministérielle n° DSS/SD2B/2018/279 du 17 décembre 2018 relative à la revalorisation au 1er janvier 2019 des plafonds de ressources d’attribution de certaines prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à la Réunion, à Saint-Barthélemy, à Saint-Martin et à Mayotte",
                                                                                   "Montant des plafonds de ressources",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2019, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2019, 12, 31))))

                        def local_var_875(_: Any):
                            return (money_of_cents_string("7955800") +
                                    (money_of_cents_string("568400") *
                                     decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814))))
                        return handle_default([], local_var_873,
                                              local_var_875)
                    return handle_default([], local_var_869, local_var_871)

                def local_var_857(_: Any):
                    def local_var_859(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=156, start_column=12,
                                                                 end_line=156, end_column=29,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_861(_: Any):
                        def local_var_863(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=160, start_column=5,
                                                                     end_line=160, end_column=69,
                                                                     law_headings=["Instruction interministerielle no DSS/SD2B/2019/261 du 18 décembre 2019 relative à la revalorisation au 1er janvier 2020 des plafonds de ressources d’attribution de certaines prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à La Réunion, à Saint-Barthélemy, à Saint-Martin et à Mayotte",
                                                                                   "Montant des plafonds de ressources",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2020, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2020, 12, 31))))

                        def local_var_865(_: Any):
                            return (money_of_cents_string("8083100") +
                                    (money_of_cents_string("577500") *
                                     decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814))))
                        return handle_default([], local_var_863,
                                              local_var_865)
                    return handle_default([], local_var_859, local_var_861)

                def local_var_847(_: Any):
                    def local_var_849(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=156, start_column=12,
                                                                 end_line=156, end_column=29,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_851(_: Any):
                        def local_var_853(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=196, start_column=5,
                                                                     end_line=196, end_column=69,
                                                                     law_headings=["Article 1",
                                                                                   "Arrêté du 14 décembre 2020 relatif au montant des plafonds de ressources de certaines prestations familiales et aux tranches du barème applicable au recouvrement des indus et à la saisie des prestations",
                                                                                   "Montant des plafonds de ressources",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2021, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2021, 12, 31))))

                        def local_var_855(_: Any):
                            return (money_of_cents_string("8155800") +
                                    (money_of_cents_string("582700") *
                                     decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814))))
                        return handle_default([], local_var_853,
                                              local_var_855)
                    return handle_default([], local_var_849, local_var_851)

                def local_var_887(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=156, start_column=12,
                                                             end_line=156, end_column=29,
                                                             law_headings=["Prologue"]), True)

                def local_var_889(_: Any):
                    def local_var_891(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=308, start_column=14,
                                                                 end_line=308, end_column=31,
                                                                 law_headings=["Article D521-3",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_893(_: Any):
                        return (money_of_cents_string("7830000") +
                                (money_of_cents_string("559500") *
                                 decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814))))
                    return handle_default([], local_var_891, local_var_893)
                local_var_846 = handle_default([local_var_847, local_var_857,
                                                local_var_867, local_var_877], local_var_887,
                                               local_var_889)
            except EmptyError:
                def local_var_895(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_897(_: Any):
                    raise EmptyError
                local_var_846 = handle_default([], local_var_895,
                                               local_var_897)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=156, start_column=12, end_line=156, end_column=29,
                                             law_headings=["Prologue"]))
    plafond__i_i_d521_3_845 = log_variable_definition(["AllocationsFamiliales",
                                                       "plafond_II_d521_3"], local_var_846)
    try:
        try:
            local_var_900 = plafond__i_d521_3_418(Unit())
        except EmptyError:
            try:
                def local_var_931(_: Any):
                    def local_var_933(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=155, start_column=12,
                                                                 end_line=155, end_column=28,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_935(_: Any):
                        def local_var_937(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=87, start_column=5,
                                                                     end_line=87, end_column=69,
                                                                     law_headings=["Circulaire interministérielle N° DSS/SD2B/2017/352 du 22 décembre 2017 relative à la revalorisation au 1er janvier 2018 des plafonds de ressources d’attribution de certaines prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à la Réunion, à Saint-Barthélemy, à Saint-Martin et à Mayotte",
                                                                                   "Montant des plafonds de ressources",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2018, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2018, 12, 31))))

                        def local_var_939(_: Any):
                            return (money_of_cents_string("5628600") +
                                    (money_of_cents_string("562800") *
                                     decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814))))
                        return handle_default([], local_var_937,
                                              local_var_939)
                    return handle_default([], local_var_933, local_var_935)

                def local_var_921(_: Any):
                    def local_var_923(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=155, start_column=12,
                                                                 end_line=155, end_column=28,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_925(_: Any):
                        def local_var_927(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=120, start_column=5,
                                                                     end_line=120, end_column=69,
                                                                     law_headings=["Instruction interministérielle n° DSS/SD2B/2018/279 du 17 décembre 2018 relative à la revalorisation au 1er janvier 2019 des plafonds de ressources d’attribution de certaines prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à la Réunion, à Saint-Barthélemy, à Saint-Martin et à Mayotte",
                                                                                   "Montant des plafonds de ressources",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2019, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2019, 12, 31))))

                        def local_var_929(_: Any):
                            return (money_of_cents_string("5684900") +
                                    (money_of_cents_string("568400") *
                                     decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814))))
                        return handle_default([], local_var_927,
                                              local_var_929)
                    return handle_default([], local_var_923, local_var_925)

                def local_var_911(_: Any):
                    def local_var_913(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=155, start_column=12,
                                                                 end_line=155, end_column=28,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_915(_: Any):
                        def local_var_917(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=153, start_column=5,
                                                                     end_line=153, end_column=69,
                                                                     law_headings=["Instruction interministerielle no DSS/SD2B/2019/261 du 18 décembre 2019 relative à la revalorisation au 1er janvier 2020 des plafonds de ressources d’attribution de certaines prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à La Réunion, à Saint-Barthélemy, à Saint-Martin et à Mayotte",
                                                                                   "Montant des plafonds de ressources",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2020, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2020, 12, 31))))

                        def local_var_919(_: Any):
                            return (money_of_cents_string("5775900") +
                                    (money_of_cents_string("577500") *
                                     decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814))))
                        return handle_default([], local_var_917,
                                              local_var_919)
                    return handle_default([], local_var_913, local_var_915)

                def local_var_901(_: Any):
                    def local_var_903(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=155, start_column=12,
                                                                 end_line=155, end_column=28,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_905(_: Any):
                        def local_var_907(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=180, start_column=5,
                                                                     end_line=180, end_column=69,
                                                                     law_headings=["Article 1",
                                                                                   "Arrêté du 14 décembre 2020 relatif au montant des plafonds de ressources de certaines prestations familiales et aux tranches du barème applicable au recouvrement des indus et à la saisie des prestations",
                                                                                   "Montant des plafonds de ressources",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2021, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2021, 12, 31))))

                        def local_var_909(_: Any):
                            return (money_of_cents_string("5827900") +
                                    (money_of_cents_string("582700") *
                                     decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814))))
                        return handle_default([], local_var_907,
                                              local_var_909)
                    return handle_default([], local_var_903, local_var_905)

                def local_var_941(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=155, start_column=12,
                                                             end_line=155, end_column=28,
                                                             law_headings=["Prologue"]), True)

                def local_var_943(_: Any):
                    def local_var_945(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=298, start_column=14,
                                                                 end_line=298, end_column=30,
                                                                 law_headings=["Article D521-3",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_947(_: Any):
                        return (money_of_cents_string("5595000") +
                                (money_of_cents_string("559500") *
                                 decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814))))
                    return handle_default([], local_var_945, local_var_947)
                local_var_900 = handle_default([local_var_901, local_var_911,
                                                local_var_921, local_var_931], local_var_941,
                                               local_var_943)
            except EmptyError:
                def local_var_949(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_951(_: Any):
                    raise EmptyError
                local_var_900 = handle_default([], local_var_949,
                                               local_var_951)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=155, start_column=12, end_line=155, end_column=28,
                                             law_headings=["Prologue"]))
    plafond__i_d521_3_899 = log_variable_definition(["AllocationsFamiliales",
                                                     "plafond_I_d521_3"], local_var_900)
    try:
        try:
            local_var_954 = droit_ouvert_complement_409(Unit())
        except EmptyError:
            try:
                try:
                    def local_var_955(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=139, start_column=12,
                                                                 end_line=139, end_column=35,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_957(_: Any):
                        def local_var_959(_: Any):
                            return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                     start_line=426, start_column=5,
                                                                     end_line=427, end_column=71,
                                                                     law_headings=["Article L755-12",
                                                                                   "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                                   "Titre 5 : Dispositions particulières à la Guadeloupe, à la Guyane, à la Martinique, à La Réunion, à Saint-Barthélemy et à Saint-Martin",
                                                                                   "Livre 7 : Régimes divers - Dispositions diverses",
                                                                                   "Partie législative",
                                                                                   "Code de la sécurité sociale"]), (prestations_familiales_dot_regime_outre_mer_l751_1_769 and
                                                                                                                     (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) ==
                                                                                                                      integer_of_string("1"))))

                        def local_var_961(_: Any):
                            return False
                        return handle_default([], local_var_959,
                                              local_var_961)
                    local_var_954 = handle_default([], local_var_955,
                                                   local_var_957)
                except EmptyError:
                    def local_var_963(_: Any):
                        return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                                 start_line=30, start_column=9,
                                                                 end_line=30, end_column=32,
                                                                 law_headings=["Règles diverses", "Épilogue",
                                                                               "Décrets divers"]), True)

                    def local_var_965(_: Any):
                        return True
                    local_var_954 = handle_default([], local_var_963,
                                                   local_var_965)
            except EmptyError:
                def local_var_967(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), True)

                def local_var_969(_: Any):
                    return False
                local_var_954 = handle_default([], local_var_967,
                                               local_var_969)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=139, start_column=12, end_line=139, end_column=35,
                                             law_headings=["Prologue"]))
    droit_ouvert_complement_953 = log_variable_definition(["AllocationsFamiliales",
                                                           "droit_ouvert_complément"], local_var_954)
    try:
        try:
            local_var_972 = droit_ouvert_forfaitaire_401(Unit())
        except EmptyError:
            def local_var_972(param_973: Enfant):
                try:
                    try:
                        try:
                            def local_var_974(_: Any):
                                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                         start_line=127, start_column=12,
                                                                         end_line=127, end_column=36,
                                                                         law_headings=["Prologue"]), True)

                            def local_var_976(_: Any):
                                def local_var_978(_: Any):
                                    return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                             start_line=420, start_column=6,
                                                                             end_line=421, end_column=72,
                                                                             law_headings=["Article L755-12",
                                                                                           "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                                           "Titre 5 : Dispositions particulières à la Guadeloupe, à la Guyane, à la Martinique, à La Réunion, à Saint-Barthélemy et à Saint-Martin",
                                                                                           "Livre 7 : Régimes divers - Dispositions diverses",
                                                                                           "Partie législative",
                                                                                           "Code de la sécurité sociale"]), (prestations_familiales_dot_regime_outre_mer_l751_1_769 and
                                                                                                                             (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) ==
                                                                                                                              integer_of_string("1"))))

                                def local_var_980(_: Any):
                                    return False
                                return handle_default([], local_var_978,
                                                      local_var_980)
                            return handle_default([], local_var_974,
                                                  local_var_976)
                        except EmptyError:
                            def local_var_982(_: Any):
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=119, start_column=5,
                                                                         end_line=125, end_column=59,
                                                                         law_headings=["Article L521-1",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), ((list_length(enfants_a_charge_470) >=
                                                                                                                          nombre_enfants_alinea_2_l521_3_686) and
                                                                                                                         ((param_973.age ==
                                                                                                                           prestations_familiales_dot_age_l512_3_2_768) and
                                                                                                                          (param_973.a_deja_ouvert_droit_aux_allocations_familiales and
                                                                                                                           log_end_call(["PrestationsFamiliales",
                                                                                                                                         "conditions_hors_âge"],
                                                                                                                                        log_variable_definition(["PrestationsFamiliales",
                                                                                                                                                                 "conditions_hors_âge", "output"],
                                                                                                                                                                log_begin_call(["PrestationsFamiliales",
                                                                                                                                                                                "conditions_hors_âge"],
                                                                                                                                                                               prestations_familiales_dot_conditions_hors_age_766,
                                                                                                                                                                               log_variable_definition(["PrestationsFamiliales",
                                                                                                                                                                                                        "conditions_hors_âge", "input"],
                                                                                                                                                                                                       param_973))))))))

                            def local_var_984(_: Any):
                                return True
                            return handle_default([], local_var_982,
                                                  local_var_984)
                    except EmptyError:
                        def local_var_986(_: Any):
                            return log_decision_taken(SourcePosition(filename="",
                                                                     start_line=0, start_column=1,
                                                                     end_line=0, end_column=1,
                                                                     law_headings=[]), True)

                        def local_var_988(_: Any):
                            return False
                        return handle_default([], local_var_986,
                                              local_var_988)
                except EmptyError:
                    raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=127, start_column=12, end_line=127,
                                                         end_column=36, law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=127, start_column=12, end_line=127, end_column=36,
                                             law_headings=["Prologue"]))
    droit_ouvert_forfaitaire_971 = log_variable_definition(["AllocationsFamiliales",
                                                            "droit_ouvert_forfaitaire"], local_var_972)
    try:
        try:
            local_var_991 = montant_initial_base_quatrieme_enfant_et_plus_mayotte_400(
                Unit())
        except EmptyError:
            try:
                def local_var_992(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=124, start_column=12,
                                                             end_line=124, end_column=65,
                                                             law_headings=["Prologue"]), True)

                def local_var_994(_: Any):
                    def local_var_996(_: Any):
                        return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                 start_line=385, start_column=14,
                                                                 end_line=385, end_column=67,
                                                                 law_headings=["Article 7",
                                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                               "Dispositions spéciales relatives à Mayotte",
                                                                               "Décrets divers"]), True)

                    def local_var_998(_: Any):
                        if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                integer_of_string("3")):
                            return ((prestations_familiales_dot_base_mensuelle_773 *
                                     decimal_of_string("0.0463")) *
                                    decimal_of_integer((list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) -
                                                        integer_of_string("3"))))
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_996, local_var_998)
                local_var_991 = handle_default([], local_var_992,
                                               local_var_994)
            except EmptyError:
                def local_var_1000(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1002(_: Any):
                    raise EmptyError
                local_var_991 = handle_default([], local_var_1000,
                                               local_var_1002)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=124, start_column=12, end_line=124, end_column=65,
                                             law_headings=["Prologue"]))
    montant_initial_base_quatrieme_enfant_et_plus_mayotte_990 = log_variable_definition(["AllocationsFamiliales",
                                                                                         "montant_initial_base_quatrième_enfant_et_plus_mayotte"],
                                                                                        local_var_991)
    try:
        try:
            local_var_1005 = montant_initial_base_troisieme_enfant_mayotte_399(
                Unit())
        except EmptyError:
            try:
                def local_var_1096(_: Any):
                    def local_var_1098(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=123, start_column=12,
                                                                 end_line=123, end_column=57,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1100(_: Any):
                        def local_var_1102(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=584, start_column=5,
                                                                     end_line=584, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2011, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2011, 12, 31))))

                        def local_var_1104(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("2")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.0463"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1102,
                                              local_var_1104)
                    return handle_default([], local_var_1098, local_var_1100)

                def local_var_1086(_: Any):
                    def local_var_1088(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=123, start_column=12,
                                                                 end_line=123, end_column=57,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1090(_: Any):
                        def local_var_1092(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=591, start_column=5,
                                                                     end_line=591, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2012, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2012, 12, 31))))

                        def local_var_1094(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("2")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.0539"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1092,
                                              local_var_1094)
                    return handle_default([], local_var_1088, local_var_1090)

                def local_var_1076(_: Any):
                    def local_var_1078(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=123, start_column=12,
                                                                 end_line=123, end_column=57,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1080(_: Any):
                        def local_var_1082(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=598, start_column=5,
                                                                     end_line=598, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2013, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2013, 12, 31))))

                        def local_var_1084(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("2")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.075"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1082,
                                              local_var_1084)
                    return handle_default([], local_var_1078, local_var_1080)

                def local_var_1066(_: Any):
                    def local_var_1068(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=123, start_column=12,
                                                                 end_line=123, end_column=57,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1070(_: Any):
                        def local_var_1072(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=605, start_column=5,
                                                                     end_line=605, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2014, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2014, 12, 31))))

                        def local_var_1074(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("2")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.069"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1072,
                                              local_var_1074)
                    return handle_default([], local_var_1068, local_var_1070)

                def local_var_1056(_: Any):
                    def local_var_1058(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=123, start_column=12,
                                                                 end_line=123, end_column=57,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1060(_: Any):
                        def local_var_1062(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=612, start_column=5,
                                                                     end_line=612, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2015, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2015, 12, 31))))

                        def local_var_1064(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("2")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.0766"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1062,
                                              local_var_1064)
                    return handle_default([], local_var_1058, local_var_1060)

                def local_var_1046(_: Any):
                    def local_var_1048(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=123, start_column=12,
                                                                 end_line=123, end_column=57,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1050(_: Any):
                        def local_var_1052(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=619, start_column=5,
                                                                     end_line=619, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2016, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2016, 12, 31))))

                        def local_var_1054(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("2")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.0842"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1052,
                                              local_var_1054)
                    return handle_default([], local_var_1048, local_var_1050)

                def local_var_1036(_: Any):
                    def local_var_1038(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=123, start_column=12,
                                                                 end_line=123, end_column=57,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1040(_: Any):
                        def local_var_1042(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=626, start_column=5,
                                                                     end_line=626, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2017, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2017, 12, 31))))

                        def local_var_1044(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("2")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.0918"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1042,
                                              local_var_1044)
                    return handle_default([], local_var_1038, local_var_1040)

                def local_var_1026(_: Any):
                    def local_var_1028(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=123, start_column=12,
                                                                 end_line=123, end_column=57,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1030(_: Any):
                        def local_var_1032(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=633, start_column=5,
                                                                     end_line=633, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2018, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2018, 12, 31))))

                        def local_var_1034(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("2")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.1089"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1032,
                                              local_var_1034)
                    return handle_default([], local_var_1028, local_var_1030)

                def local_var_1016(_: Any):
                    def local_var_1018(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=123, start_column=12,
                                                                 end_line=123, end_column=57,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1020(_: Any):
                        def local_var_1022(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=640, start_column=5,
                                                                     end_line=640, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2019, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2019, 12, 31))))

                        def local_var_1024(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("2")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.1259"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1022,
                                              local_var_1024)
                    return handle_default([], local_var_1018, local_var_1020)

                def local_var_1006(_: Any):
                    def local_var_1008(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=123, start_column=12,
                                                                 end_line=123, end_column=57,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1010(_: Any):
                        def local_var_1012(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=647, start_column=5,
                                                                     end_line=647, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2020, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2020, 12, 31))))

                        def local_var_1014(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("2")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.143"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1012,
                                              local_var_1014)
                    return handle_default([], local_var_1008, local_var_1010)

                def local_var_1106(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=123, start_column=12,
                                                             end_line=123, end_column=57,
                                                             law_headings=["Prologue"]), True)

                def local_var_1108(_: Any):
                    def local_var_1110(_: Any):
                        return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                 start_line=376, start_column=14,
                                                                 end_line=376, end_column=59,
                                                                 law_headings=["Article 7",
                                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                               "Dispositions spéciales relatives à Mayotte",
                                                                               "Décrets divers"]), True)

                    def local_var_1112(_: Any):
                        if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                integer_of_string("2")):
                            return (prestations_familiales_dot_base_mensuelle_773 *
                                    decimal_of_string("0.16"))
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_1110, local_var_1112)
                local_var_1005 = handle_default([local_var_1006,
                                                 local_var_1016, local_var_1026, local_var_1036,
                                                 local_var_1046, local_var_1056, local_var_1066,
                                                 local_var_1076, local_var_1086, local_var_1096],
                                                local_var_1106, local_var_1108)
            except EmptyError:
                def local_var_1114(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1116(_: Any):
                    raise EmptyError
                local_var_1005 = handle_default([], local_var_1114,
                                                local_var_1116)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=123, start_column=12, end_line=123, end_column=57,
                                             law_headings=["Prologue"]))
    montant_initial_base_troisieme_enfant_mayotte_1004 = log_variable_definition(["AllocationsFamiliales",
                                                                                  "montant_initial_base_troisième_enfant_mayotte"], local_var_1005)
    try:
        try:
            local_var_1119 = montant_initial_base_deuxieme_enfant_mayotte_398(
                Unit())
        except EmptyError:
            try:
                def local_var_1210(_: Any):
                    def local_var_1212(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=122, start_column=12,
                                                                 end_line=122, end_column=56,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1214(_: Any):
                        def local_var_1216(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=513, start_column=5,
                                                                     end_line=513, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2011, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2011, 12, 31))))

                        def local_var_1218(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("1")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.232"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1216,
                                              local_var_1218)
                    return handle_default([], local_var_1212, local_var_1214)

                def local_var_1200(_: Any):
                    def local_var_1202(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=122, start_column=12,
                                                                 end_line=122, end_column=56,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1204(_: Any):
                        def local_var_1206(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=520, start_column=5,
                                                                     end_line=520, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2012, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2012, 12, 31))))

                        def local_var_1208(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("1")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.2379"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1206,
                                              local_var_1208)
                    return handle_default([], local_var_1202, local_var_1204)

                def local_var_1190(_: Any):
                    def local_var_1192(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=122, start_column=12,
                                                                 end_line=122, end_column=56,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1194(_: Any):
                        def local_var_1196(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=527, start_column=5,
                                                                     end_line=527, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2013, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2013, 12, 31))))

                        def local_var_1198(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("1")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.2437"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1196,
                                              local_var_1198)
                    return handle_default([], local_var_1192, local_var_1194)

                def local_var_1180(_: Any):
                    def local_var_1182(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=122, start_column=12,
                                                                 end_line=122, end_column=56,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1184(_: Any):
                        def local_var_1186(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=534, start_column=5,
                                                                     end_line=534, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2014, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2014, 12, 31))))

                        def local_var_1188(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("1")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.2496"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1186,
                                              local_var_1188)
                    return handle_default([], local_var_1182, local_var_1184)

                def local_var_1170(_: Any):
                    def local_var_1172(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=122, start_column=12,
                                                                 end_line=122, end_column=56,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1174(_: Any):
                        def local_var_1176(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=541, start_column=5,
                                                                     end_line=541, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2015, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2015, 12, 31))))

                        def local_var_1178(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("1")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.2555"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1176,
                                              local_var_1178)
                    return handle_default([], local_var_1172, local_var_1174)

                def local_var_1160(_: Any):
                    def local_var_1162(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=122, start_column=12,
                                                                 end_line=122, end_column=56,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1164(_: Any):
                        def local_var_1166(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=548, start_column=5,
                                                                     end_line=548, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2016, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2016, 12, 31))))

                        def local_var_1168(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("1")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.273"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1166,
                                              local_var_1168)
                    return handle_default([], local_var_1162, local_var_1164)

                def local_var_1150(_: Any):
                    def local_var_1152(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=122, start_column=12,
                                                                 end_line=122, end_column=56,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1154(_: Any):
                        def local_var_1156(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=555, start_column=5,
                                                                     end_line=555, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2017, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2017, 12, 31))))

                        def local_var_1158(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("1")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.2672"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1156,
                                              local_var_1158)
                    return handle_default([], local_var_1152, local_var_1154)

                def local_var_1140(_: Any):
                    def local_var_1142(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=122, start_column=12,
                                                                 end_line=122, end_column=56,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1144(_: Any):
                        def local_var_1146(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=562, start_column=5,
                                                                     end_line=562, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2018, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2018, 12, 31))))

                        def local_var_1148(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("1")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.284"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1146,
                                              local_var_1148)
                    return handle_default([], local_var_1142, local_var_1144)

                def local_var_1130(_: Any):
                    def local_var_1132(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=122, start_column=12,
                                                                 end_line=122, end_column=56,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1134(_: Any):
                        def local_var_1136(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=569, start_column=5,
                                                                     end_line=569, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2019, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2019, 12, 31))))

                        def local_var_1138(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("1")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.2936"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1136,
                                              local_var_1138)
                    return handle_default([], local_var_1132, local_var_1134)

                def local_var_1120(_: Any):
                    def local_var_1122(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=122, start_column=12,
                                                                 end_line=122, end_column=56,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1124(_: Any):
                        def local_var_1126(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=576, start_column=5,
                                                                     end_line=576, end_column=69,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2020, 1, 1)) and
                                                                                                        (date_courante_460 <=
                                                                                                         date_of_numbers(2020, 12, 31))))

                        def local_var_1128(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("1")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.3068"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1126,
                                              local_var_1128)
                    return handle_default([], local_var_1122, local_var_1124)

                def local_var_1220(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=122, start_column=12,
                                                             end_line=122, end_column=56,
                                                             law_headings=["Prologue"]), True)

                def local_var_1222(_: Any):
                    def local_var_1224(_: Any):
                        return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                 start_line=367, start_column=14,
                                                                 end_line=367, end_column=58,
                                                                 law_headings=["Article 7",
                                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                               "Dispositions spéciales relatives à Mayotte",
                                                                               "Décrets divers"]), True)

                    def local_var_1226(_: Any):
                        if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                integer_of_string("1")):
                            return (prestations_familiales_dot_base_mensuelle_773 *
                                    decimal_of_string("0.32"))
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_1224, local_var_1226)
                local_var_1119 = handle_default([local_var_1120,
                                                 local_var_1130, local_var_1140, local_var_1150,
                                                 local_var_1160, local_var_1170, local_var_1180,
                                                 local_var_1190, local_var_1200, local_var_1210],
                                                local_var_1220, local_var_1222)
            except EmptyError:
                def local_var_1228(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1230(_: Any):
                    raise EmptyError
                local_var_1119 = handle_default([], local_var_1228,
                                                local_var_1230)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=122, start_column=12, end_line=122, end_column=56,
                                             law_headings=["Prologue"]))
    montant_initial_base_deuxieme_enfant_mayotte_1118 = log_variable_definition(["AllocationsFamiliales",
                                                                                 "montant_initial_base_deuxième_enfant_mayotte"], local_var_1119)
    try:
        try:
            local_var_1233 = montant_initial_base_premier_enfant_mayotte_397(
                Unit())
        except EmptyError:
            try:
                def local_var_1334(_: Any):
                    def local_var_1336(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=121, start_column=12,
                                                                 end_line=121, end_column=55,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1338(_: Any):
                        def local_var_1340(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=425, start_column=5,
                                                                     end_line=426, end_column=53,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2011, 1, 1)) and
                                                                                                        ((date_courante_460 <=
                                                                                                          date_of_numbers(2011, 12, 31)) and
                                                                                                         not avait_enfant_a_charge_avant_1er_janvier_2012_662)))

                        def local_var_1342(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("0")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.145"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1340,
                                              local_var_1342)
                    return handle_default([], local_var_1336, local_var_1338)

                def local_var_1324(_: Any):
                    def local_var_1326(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=121, start_column=12,
                                                                 end_line=121, end_column=55,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1328(_: Any):
                        def local_var_1330(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=433, start_column=5,
                                                                     end_line=434, end_column=53,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2012, 1, 1)) and
                                                                                                        ((date_courante_460 <=
                                                                                                          date_of_numbers(2012, 12, 31)) and
                                                                                                         not avait_enfant_a_charge_avant_1er_janvier_2012_662)))

                        def local_var_1332(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("0")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.1393"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1330,
                                              local_var_1332)
                    return handle_default([], local_var_1326, local_var_1328)

                def local_var_1314(_: Any):
                    def local_var_1316(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=121, start_column=12,
                                                                 end_line=121, end_column=55,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1318(_: Any):
                        def local_var_1320(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=441, start_column=5,
                                                                     end_line=442, end_column=53,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2013, 1, 1)) and
                                                                                                        ((date_courante_460 <=
                                                                                                          date_of_numbers(2013, 12, 31)) and
                                                                                                         not avait_enfant_a_charge_avant_1er_janvier_2012_662)))

                        def local_var_1322(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("0")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.1335"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1320,
                                              local_var_1322)
                    return handle_default([], local_var_1316, local_var_1318)

                def local_var_1304(_: Any):
                    def local_var_1306(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=121, start_column=12,
                                                                 end_line=121, end_column=55,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1308(_: Any):
                        def local_var_1310(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=449, start_column=5,
                                                                     end_line=450, end_column=53,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2014, 1, 1)) and
                                                                                                        ((date_courante_460 <=
                                                                                                          date_of_numbers(2014, 12, 31)) and
                                                                                                         not avait_enfant_a_charge_avant_1er_janvier_2012_662)))

                        def local_var_1312(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("0")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.1278"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1310,
                                              local_var_1312)
                    return handle_default([], local_var_1306, local_var_1308)

                def local_var_1294(_: Any):
                    def local_var_1296(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=121, start_column=12,
                                                                 end_line=121, end_column=55,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1298(_: Any):
                        def local_var_1300(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=457, start_column=5,
                                                                     end_line=458, end_column=53,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2015, 1, 1)) and
                                                                                                        ((date_courante_460 <=
                                                                                                          date_of_numbers(2015, 12, 31)) and
                                                                                                         not avait_enfant_a_charge_avant_1er_janvier_2012_662)))

                        def local_var_1302(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("0")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.122"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1300,
                                              local_var_1302)
                    return handle_default([], local_var_1296, local_var_1298)

                def local_var_1284(_: Any):
                    def local_var_1286(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=121, start_column=12,
                                                                 end_line=121, end_column=55,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1288(_: Any):
                        def local_var_1290(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=465, start_column=5,
                                                                     end_line=466, end_column=53,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2016, 1, 1)) and
                                                                                                        ((date_courante_460 <=
                                                                                                          date_of_numbers(2016, 12, 31)) and
                                                                                                         not avait_enfant_a_charge_avant_1er_janvier_2012_662)))

                        def local_var_1292(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("0")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.1163"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1290,
                                              local_var_1292)
                    return handle_default([], local_var_1286, local_var_1288)

                def local_var_1274(_: Any):
                    def local_var_1276(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=121, start_column=12,
                                                                 end_line=121, end_column=55,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1278(_: Any):
                        def local_var_1280(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=473, start_column=5,
                                                                     end_line=474, end_column=53,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2017, 1, 1)) and
                                                                                                        ((date_courante_460 <=
                                                                                                          date_of_numbers(2017, 12, 31)) and
                                                                                                         not avait_enfant_a_charge_avant_1er_janvier_2012_662)))

                        def local_var_1282(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("0")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.115"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1280,
                                              local_var_1282)
                    return handle_default([], local_var_1276, local_var_1278)

                def local_var_1264(_: Any):
                    def local_var_1266(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=121, start_column=12,
                                                                 end_line=121, end_column=55,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1268(_: Any):
                        def local_var_1270(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=481, start_column=5,
                                                                     end_line=482, end_column=53,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2018, 1, 1)) and
                                                                                                        ((date_courante_460 <=
                                                                                                          date_of_numbers(2018, 12, 31)) and
                                                                                                         not avait_enfant_a_charge_avant_1er_janvier_2012_662)))

                        def local_var_1272(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("0")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.0976"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1270,
                                              local_var_1272)
                    return handle_default([], local_var_1266, local_var_1268)

                def local_var_1254(_: Any):
                    def local_var_1256(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=121, start_column=12,
                                                                 end_line=121, end_column=55,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1258(_: Any):
                        def local_var_1260(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=489, start_column=5,
                                                                     end_line=490, end_column=53,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2019, 1, 1)) and
                                                                                                        ((date_courante_460 <=
                                                                                                          date_of_numbers(2019, 12, 31)) and
                                                                                                         not avait_enfant_a_charge_avant_1er_janvier_2012_662)))

                        def local_var_1262(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("0")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.0847"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1260,
                                              local_var_1262)
                    return handle_default([], local_var_1256, local_var_1258)

                def local_var_1244(_: Any):
                    def local_var_1246(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=121, start_column=12,
                                                                 end_line=121, end_column=55,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1248(_: Any):
                        def local_var_1250(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=497, start_column=5,
                                                                     end_line=498, end_column=53,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((date_courante_460 >=
                                                                                                         date_of_numbers(2020, 1, 1)) and
                                                                                                        ((date_courante_460 <=
                                                                                                          date_of_numbers(2020, 12, 31)) and
                                                                                                         not avait_enfant_a_charge_avant_1er_janvier_2012_662)))

                        def local_var_1252(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("0")):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.0717"))
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1250,
                                              local_var_1252)
                    return handle_default([], local_var_1246, local_var_1248)

                def local_var_1234(_: Any):
                    def local_var_1236(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=121, start_column=12,
                                                                 end_line=121, end_column=55,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1238(_: Any):
                        def local_var_1240(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=505, start_column=5,
                                                                     end_line=505, end_column=49,
                                                                     law_headings=["Annexe",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), avait_enfant_a_charge_avant_1er_janvier_2012_662)

                        def local_var_1242(_: Any):
                            if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                    integer_of_string("0")):
                                return money_of_cents_string("5728")
                            else:
                                return money_of_cents_string("0")
                        return handle_default([], local_var_1240,
                                              local_var_1242)
                    return handle_default([], local_var_1236, local_var_1238)

                def local_var_1344(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=121, start_column=12,
                                                             end_line=121, end_column=55,
                                                             law_headings=["Prologue"]), True)

                def local_var_1346(_: Any):
                    def local_var_1348(_: Any):
                        return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                 start_line=358, start_column=14,
                                                                 end_line=358, end_column=57,
                                                                 law_headings=["Article 7",
                                                                               "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                               "Dispositions spéciales relatives à Mayotte",
                                                                               "Décrets divers"]), True)

                    def local_var_1350(_: Any):
                        if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                integer_of_string("0")):
                            return (prestations_familiales_dot_base_mensuelle_773 *
                                    decimal_of_string("0.0588"))
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_1348, local_var_1350)
                local_var_1233 = handle_default([local_var_1234,
                                                 local_var_1244, local_var_1254, local_var_1264,
                                                 local_var_1274, local_var_1284, local_var_1294,
                                                 local_var_1304, local_var_1314, local_var_1324,
                                                 local_var_1334], local_var_1344, local_var_1346)
            except EmptyError:
                def local_var_1352(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1354(_: Any):
                    raise EmptyError
                local_var_1233 = handle_default([], local_var_1352,
                                                local_var_1354)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=121, start_column=12, end_line=121, end_column=55,
                                             law_headings=["Prologue"]))
    montant_initial_base_premier_enfant_mayotte_1232 = log_variable_definition(["AllocationsFamiliales",
                                                                                "montant_initial_base_premier_enfant_mayotte"], local_var_1233)
    try:
        try:
            local_var_1357 = nombre_total_enfants_393(Unit())
        except EmptyError:
            try:
                def local_var_1358(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=115, start_column=12,
                                                             end_line=115, end_column=32,
                                                             law_headings=["Prologue"]), True)

                def local_var_1360(_: Any):
                    def local_var_1362(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                                 start_line=162, start_column=14,
                                                                 end_line=162, end_column=34,
                                                                 law_headings=["Article R521-3",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets en Conseil d'Etat",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_1364(_: Any):
                        return decimal_of_integer(list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814))
                    return handle_default([], local_var_1362, local_var_1364)
                local_var_1357 = handle_default([], local_var_1358,
                                                local_var_1360)
            except EmptyError:
                def local_var_1366(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1368(_: Any):
                    raise EmptyError
                local_var_1357 = handle_default([], local_var_1366,
                                                local_var_1368)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=115, start_column=12, end_line=115, end_column=32,
                                             law_headings=["Prologue"]))
    nombre_total_enfants_1356 = log_variable_definition(["AllocationsFamiliales",
                                                         "nombre_total_enfants"], local_var_1357)
    try:
        try:
            local_var_1371 = nombre_moyen_enfants_392(Unit())
        except EmptyError:
            try:
                def local_var_1372(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=114, start_column=12,
                                                             end_line=114, end_column=32,
                                                             law_headings=["Prologue"]), True)

                def local_var_1374(_: Any):
                    def local_var_1376(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                                 start_line=142, start_column=14,
                                                                 end_line=142, end_column=34,
                                                                 law_headings=["Article R521-3",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets en Conseil d'Etat",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_1378(_: Any):
                        def local_var_1380(acc_1381: Decimal, enfant_1382: Any):
                            match_arg_2266 = log_end_call(["AllocationsFamiliales",
                                                           "prise_en_compte"],
                                                          log_variable_definition(["AllocationsFamiliales",
                                                                                   "prise_en_compte", "output"],
                                                                                  log_begin_call(["AllocationsFamiliales",
                                                                                                  "prise_en_compte"], prise_en_compte_480,
                                                                                                 log_variable_definition(["AllocationsFamiliales",
                                                                                                                          "prise_en_compte", "input"],
                                                                                                                         enfant_1382))))
                            if match_arg_2266.code == PriseEnCompte_Code.Complete:
                                _ = match_arg_2266.value
                                local_var_1383 = decimal_of_string("1.")
                            elif match_arg_2266.code == PriseEnCompte_Code.Partagee:
                                _ = match_arg_2266.value
                                local_var_1383 = decimal_of_string("0.5")
                            elif match_arg_2266.code == PriseEnCompte_Code.Zero:
                                _ = match_arg_2266.value
                                local_var_1383 = decimal_of_string("0.")
                            return (acc_1381 + local_var_1383)
                        return list_fold_left(local_var_1380,
                                              decimal_of_string("0."),
                                              enfants_a_charge_droit_ouvert_prestation_familiale_814)
                    return handle_default([], local_var_1376, local_var_1378)
                local_var_1371 = handle_default([], local_var_1372,
                                                local_var_1374)
            except EmptyError:
                def local_var_1387(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1389(_: Any):
                    raise EmptyError
                local_var_1371 = handle_default([], local_var_1387,
                                                local_var_1389)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=114, start_column=12, end_line=114, end_column=32,
                                             law_headings=["Prologue"]))
    nombre_moyen_enfants_1370 = log_variable_definition(["AllocationsFamiliales",
                                                         "nombre_moyen_enfants"], local_var_1371)
    try:
        try:
            local_var_1392 = montant_initial_base_premier_enfant_388(Unit())
        except EmptyError:
            try:
                try:
                    def local_var_1393(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=110, start_column=12,
                                                                 end_line=110, end_column=47,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1395(_: Any):
                        def local_var_1397(_: Any):
                            return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                     start_line=359, start_column=5,
                                                                     end_line=360, end_column=71,
                                                                     law_headings=["Article D755-5",
                                                                                   "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                                   "Titre 5 : Départements d'outre-mer",
                                                                                   "Livre 7 : Régimes divers - Dispositions diverses",
                                                                                   "Partie réglementaire - Décrets simples",
                                                                                   "Code de la sécurité sociale"]), (prestations_familiales_dot_regime_outre_mer_l751_1_769 and
                                                                                                                     (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) ==
                                                                                                                      integer_of_string("1"))))

                        def local_var_1399(_: Any):
                            return (prestations_familiales_dot_base_mensuelle_773 *
                                    decimal_of_string("0.0588"))
                        return handle_default([], local_var_1397,
                                              local_var_1399)
                    local_var_1392 = handle_default([], local_var_1393,
                                                    local_var_1395)
                except EmptyError:
                    def local_var_1401(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=356, start_column=14,
                                                                 end_line=356, end_column=49,
                                                                 law_headings=["Article D755-5",
                                                                               "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                               "Titre 5 : Départements d'outre-mer",
                                                                               "Livre 7 : Régimes divers - Dispositions diverses",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_1403(_: Any):
                        return money_of_cents_string("0")
                    local_var_1392 = handle_default([], local_var_1401,
                                                    local_var_1403)
            except EmptyError:
                def local_var_1405(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1407(_: Any):
                    raise EmptyError
                local_var_1392 = handle_default([], local_var_1405,
                                                local_var_1407)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=110, start_column=12, end_line=110, end_column=47,
                                             law_headings=["Prologue"]))
    montant_initial_base_premier_enfant_1391 = log_variable_definition(["AllocationsFamiliales",
                                                                        "montant_initial_base_premier_enfant"], local_var_1392)
    try:
        try:
            local_var_1410 = droit_ouvert_base_386(Unit())
        except EmptyError:
            try:
                def local_var_1421(_: Any):
                    def local_var_1423(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=108, start_column=12,
                                                                 end_line=108, end_column=29,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1425(_: Any):
                        def local_var_1427(_: Any):
                            return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                     start_line=406, start_column=5,
                                                                     end_line=407, end_column=72,
                                                                     law_headings=["Article L755-12",
                                                                                   "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                                   "Titre 5 : Dispositions particulières à la Guadeloupe, à la Guyane, à la Martinique, à La Réunion, à Saint-Barthélemy et à Saint-Martin",
                                                                                   "Livre 7 : Régimes divers - Dispositions diverses",
                                                                                   "Partie législative",
                                                                                   "Code de la sécurité sociale"]), (prestations_familiales_dot_regime_outre_mer_l751_1_769 and
                                                                                                                     (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >=
                                                                                                                      integer_of_string("1"))))

                        def local_var_1429(_: Any):
                            return True
                        return handle_default([], local_var_1427,
                                              local_var_1429)
                    return handle_default([], local_var_1423, local_var_1425)

                def local_var_1411(_: Any):
                    def local_var_1413(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=108, start_column=12,
                                                                 end_line=108, end_column=29,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1415(_: Any):
                        def local_var_1417(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=344, start_column=5,
                                                                     end_line=345, end_column=72,
                                                                     law_headings=["Article 7",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), ((residence_450 ==
                                                                                                         Collectivite(Collectivite_Code.Mayotte,
                                                                                                                      Unit())) and
                                                                                                        (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >=
                                                                                                         integer_of_string("1"))))

                        def local_var_1419(_: Any):
                            return True
                        return handle_default([], local_var_1417,
                                              local_var_1419)
                    return handle_default([], local_var_1413, local_var_1415)

                def local_var_1431(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=108, start_column=12,
                                                             end_line=108, end_column=29,
                                                             law_headings=["Prologue"]), True)

                def local_var_1433(_: Any):
                    def local_var_1435(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                 start_line=101, start_column=5,
                                                                 end_line=101, end_column=70,
                                                                 law_headings=["Article L521-1",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie législative",
                                                                               "Code de la sécurité sociale"]), (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >=
                                                                                                                 integer_of_string("2")))

                    def local_var_1437(_: Any):
                        return True
                    return handle_default([], local_var_1435, local_var_1437)
                local_var_1410 = handle_default([local_var_1411,
                                                 local_var_1421], local_var_1431, local_var_1433)
            except EmptyError:
                def local_var_1439(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), True)

                def local_var_1441(_: Any):
                    return False
                local_var_1410 = handle_default([], local_var_1439,
                                                local_var_1441)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=108, start_column=12, end_line=108, end_column=29,
                                             law_headings=["Prologue"]))
    droit_ouvert_base_1409 = log_variable_definition(["AllocationsFamiliales",
                                                      "droit_ouvert_base"], local_var_1410)
    try:
        try:
            local_var_1444 = droit_ouvert_majoration_404(Unit())
        except EmptyError:
            def local_var_1444(param_1445: Enfant):
                try:
                    try:
                        try:
                            def local_var_1446(_: Any):
                                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                         start_line=132, start_column=12,
                                                                         end_line=132, end_column=35,
                                                                         law_headings=["Prologue"]), True)

                            def local_var_1448(_: Any):
                                def local_var_1450(_: Any):
                                    return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                             start_line=313, start_column=5,
                                                                             end_line=315, end_column=58,
                                                                             law_headings=["Article L521-3",
                                                                                           "Chapitre 1er : Allocations familiales",
                                                                                           "Titre 2 : Prestations générales d'entretien",
                                                                                           "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                           "Partie législative",
                                                                                           "Code de la sécurité sociale"]), ((list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >=
                                                                                                                              nombre_enfants_alinea_2_l521_3_686) and
                                                                                                                             (param_1445.age >=
                                                                                                                              log_end_call(["AllocationsFamiliales",
                                                                                                                                            "âge_minimum_alinéa_1_l521_3"],
                                                                                                                                           log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                    "âge_minimum_alinéa_1_l521_3",
                                                                                                                                                                    "output"],
                                                                                                                                                                   log_begin_call(["AllocationsFamiliales",
                                                                                                                                                                                   "âge_minimum_alinéa_1_l521_3"],
                                                                                                                                                                                  age_minimum_alinea_1_l521_3_795,
                                                                                                                                                                                  log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                                           "âge_minimum_alinéa_1_l521_3",
                                                                                                                                                                                                           "input"], param_1445)))))))

                                def local_var_1452(_: Any):
                                    return True
                                return handle_default([], local_var_1450,
                                                      local_var_1452)
                            return handle_default([], local_var_1446,
                                                  local_var_1448)
                        except EmptyError:
                            def local_var_1454(_: Any):
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_L.catala_fr",
                                                                         start_line=299, start_column=5,
                                                                         end_line=300, end_column=58,
                                                                         law_headings=["Article L521-3",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie législative",
                                                                                       "Code de la sécurité sociale"]), (not log_end_call(["AllocationsFamiliales",
                                                                                                                                           "est_enfant_le_plus_âgé"],
                                                                                                                                          log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                   "est_enfant_le_plus_âgé", "output"],
                                                                                                                                                                  log_begin_call(["AllocationsFamiliales",
                                                                                                                                                                                  "est_enfant_le_plus_âgé"],
                                                                                                                                                                                 est_enfant_le_plus_age_830,
                                                                                                                                                                                 log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                                          "est_enfant_le_plus_âgé", "input"],
                                                                                                                                                                                                         param_1445)))) and (param_1445.age >=
                                                                                                                                                                                                                             log_end_call(["AllocationsFamiliales",
                                                                                                                                                                                                                                           "âge_minimum_alinéa_1_l521_3"],
                                                                                                                                                                                                                                          log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                                                                                                   "âge_minimum_alinéa_1_l521_3",
                                                                                                                                                                                                                                                                   "output"],
                                                                                                                                                                                                                                                                  log_begin_call(["AllocationsFamiliales",
                                                                                                                                                                                                                                                                                  "âge_minimum_alinéa_1_l521_3"],
                                                                                                                                                                                                                                                                                 age_minimum_alinea_1_l521_3_795,
                                                                                                                                                                                                                                                                                 log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                                                                                                                                          "âge_minimum_alinéa_1_l521_3",
                                                                                                                                                                                                                                                                                                          "input"], param_1445)))))))

                            def local_var_1456(_: Any):
                                return True
                            return handle_default([], local_var_1454,
                                                  local_var_1456)
                    except EmptyError:
                        def local_var_1458(_: Any):
                            return log_decision_taken(SourcePosition(filename="",
                                                                     start_line=0, start_column=1,
                                                                     end_line=0, end_column=1,
                                                                     law_headings=[]), True)

                        def local_var_1460(_: Any):
                            return False
                        return handle_default([], local_var_1458,
                                              local_var_1460)
                except EmptyError:
                    raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=132, start_column=12, end_line=132,
                                                         end_column=35, law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=132, start_column=12, end_line=132, end_column=35,
                                             law_headings=["Prologue"]))
    droit_ouvert_majoration_1443 = log_variable_definition(["AllocationsFamiliales",
                                                            "droit_ouvert_majoration"], local_var_1444)
    try:
        try:
            local_var_1463 = complement_degressif_411(Unit())
        except EmptyError:
            def local_var_1463(param_1464: Money):
                try:
                    try:
                        def local_var_1475(_: Any):
                            def local_var_1477(_: Any):
                                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                         start_line=141, start_column=12,
                                                                         end_line=141, end_column=32,
                                                                         law_headings=["Prologue"]), True)

                            def local_var_1479(_: Any):
                                def local_var_1481(_: Any):
                                    return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                             start_line=162, start_column=5,
                                                                             end_line=163, end_column=68,
                                                                             law_headings=["Article D521-1",
                                                                                           "Chapitre 1er : Allocations familiales",
                                                                                           "Titre 2 : Prestations générales d'entretien",
                                                                                           "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                           "Partie réglementaire - Décrets simples",
                                                                                           "Code de la sécurité sociale"]), ((ressources_menage_440 >
                                                                                                                              plafond__i_d521_3_899) and
                                                                                                                             (ressources_menage_440 <=
                                                                                                                              (plafond__i_d521_3_899 +
                                                                                                                               (param_1464 *
                                                                                                                                decimal_of_string("12."))))))

                                def local_var_1483(_: Any):
                                    return ((plafond__i_d521_3_899 +
                                             ((param_1464 *
                                               decimal_of_string("12.")) -
                                              ressources_menage_440)) *
                                            (decimal_of_string("1.") /
                                             decimal_of_string("12.")))
                                return handle_default([], local_var_1481,
                                                      local_var_1483)
                            return handle_default([], local_var_1477,
                                                  local_var_1479)

                        def local_var_1465(_: Any):
                            def local_var_1467(_: Any):
                                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                         start_line=141, start_column=12,
                                                                         end_line=141, end_column=32,
                                                                         law_headings=["Prologue"]), True)

                            def local_var_1469(_: Any):
                                def local_var_1471(_: Any):
                                    return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                             start_line=170, start_column=5,
                                                                             end_line=171, end_column=68,
                                                                             law_headings=["Article D521-1",
                                                                                           "Chapitre 1er : Allocations familiales",
                                                                                           "Titre 2 : Prestations générales d'entretien",
                                                                                           "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                           "Partie réglementaire - Décrets simples",
                                                                                           "Code de la sécurité sociale"]), ((ressources_menage_440 >
                                                                                                                              plafond__i_i_d521_3_845) and
                                                                                                                             (ressources_menage_440 <=
                                                                                                                              (plafond__i_i_d521_3_845 +
                                                                                                                               (param_1464 *
                                                                                                                                decimal_of_string("12."))))))

                                def local_var_1473(_: Any):
                                    return ((plafond__i_i_d521_3_845 +
                                             ((param_1464 *
                                               decimal_of_string("12.")) -
                                              ressources_menage_440)) *
                                            (decimal_of_string("1.") /
                                             decimal_of_string("12.")))
                                return handle_default([], local_var_1471,
                                                      local_var_1473)
                            return handle_default([], local_var_1467,
                                                  local_var_1469)

                        def local_var_1485(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=141, start_column=12,
                                                                     end_line=141, end_column=32,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_1487(_: Any):
                            def local_var_1489(_: Any):
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                         start_line=176, start_column=14,
                                                                         end_line=176, end_column=34,
                                                                         law_headings=["Article D521-1",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie réglementaire - Décrets simples",
                                                                                       "Code de la sécurité sociale"]), True)

                            def local_var_1491(_: Any):
                                return money_of_cents_string("0")
                            return handle_default([], local_var_1489,
                                                  local_var_1491)
                        return handle_default([local_var_1465,
                                               local_var_1475], local_var_1485, local_var_1487)
                    except EmptyError:
                        def local_var_1493(_: Any):
                            return log_decision_taken(SourcePosition(filename="",
                                                                     start_line=0, start_column=1,
                                                                     end_line=0, end_column=1,
                                                                     law_headings=[]), False)

                        def local_var_1495(_: Any):
                            raise EmptyError
                        return handle_default([], local_var_1493,
                                              local_var_1495)
                except EmptyError:
                    raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=141, start_column=12, end_line=141,
                                                         end_column=32, law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=141, start_column=12, end_line=141, end_column=32,
                                             law_headings=["Prologue"]))
    complement_degressif_1462 = log_variable_definition(["AllocationsFamiliales",
                                                         "complément_dégressif"], local_var_1463)
    try:
        try:
            local_var_1498 = montant_verse_forfaitaire_par_enfant_402(Unit())
        except EmptyError:
            def local_var_1519(_: Any):
                def local_var_1521(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=128, start_column=12,
                                                             end_line=128, end_column=48,
                                                             law_headings=["Prologue"]), True)

                def local_var_1523(_: Any):
                    def local_var_1525(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=215, start_column=5,
                                                                 end_line=215, end_column=43,
                                                                 law_headings=["Article D521-2",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), (ressources_menage_440 <=
                                                                                                                 plafond__i_d521_3_899))

                    def local_var_1527(_: Any):
                        return (prestations_familiales_dot_base_mensuelle_773 *
                                decimal_of_string("0.20234"))
                    return handle_default([], local_var_1525, local_var_1527)
                return handle_default([], local_var_1521, local_var_1523)

            def local_var_1509(_: Any):
                def local_var_1511(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=128, start_column=12,
                                                             end_line=128, end_column=48,
                                                             law_headings=["Prologue"]), True)

                def local_var_1513(_: Any):
                    def local_var_1515(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=229, start_column=5,
                                                                 end_line=230, end_column=46,
                                                                 law_headings=["Article D521-2",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), ((ressources_menage_440 >
                                                                                                                  plafond__i_d521_3_899) and
                                                                                                                 (ressources_menage_440 <=
                                                                                                                  plafond__i_i_d521_3_845)))

                    def local_var_1517(_: Any):
                        return (prestations_familiales_dot_base_mensuelle_773 *
                                decimal_of_string("0.1117"))
                    return handle_default([], local_var_1515, local_var_1517)
                return handle_default([], local_var_1511, local_var_1513)

            def local_var_1499(_: Any):
                def local_var_1501(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=128, start_column=12,
                                                             end_line=128, end_column=48,
                                                             law_headings=["Prologue"]), True)

                def local_var_1503(_: Any):
                    def local_var_1505(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=243, start_column=5,
                                                                 end_line=243, end_column=43,
                                                                 law_headings=["Article D521-2",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), (ressources_menage_440 >
                                                                                                                 plafond__i_i_d521_3_845))

                    def local_var_1507(_: Any):
                        return (prestations_familiales_dot_base_mensuelle_773 *
                                decimal_of_string("0.0559"))
                    return handle_default([], local_var_1505, local_var_1507)
                return handle_default([], local_var_1501, local_var_1503)

            def local_var_1529(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=128, start_column=12,
                                                         end_line=128, end_column=48,
                                                         law_headings=["Prologue"]), True)

            def local_var_1531(_: Any):
                def local_var_1533(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1535(_: Any):
                    raise EmptyError
                return handle_default([], local_var_1533, local_var_1535)
            local_var_1498 = handle_default([local_var_1499, local_var_1509,
                                             local_var_1519], local_var_1529, local_var_1531)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=128, start_column=12, end_line=128, end_column=48,
                                             law_headings=["Prologue"]))
    montant_verse_forfaitaire_par_enfant_1497 = log_variable_definition(["AllocationsFamiliales",
                                                                         "montant_versé_forfaitaire_par_enfant"], local_var_1498)
    try:
        try:
            local_var_1538 = montant_initial_base_troisieme_enfant_et_plus_390(
                Unit())
        except EmptyError:
            def local_var_1559(_: Any):
                def local_var_1561(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=112, start_column=12,
                                                             end_line=112, end_column=57,
                                                             law_headings=["Prologue"]), True)

                def local_var_1563(_: Any):
                    def local_var_1565(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=35, start_column=3,
                                                                 end_line=35, end_column=41,
                                                                 law_headings=["Article D521-1",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), (ressources_menage_440 <=
                                                                                                                 plafond__i_d521_3_899))

                    def local_var_1567(_: Any):
                        if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                integer_of_string("2")):
                            return ((prestations_familiales_dot_base_mensuelle_773 *
                                     decimal_of_string("0.41")) *
                                    decimal_of_integer((list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) -
                                                        integer_of_string("2"))))
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_1565, local_var_1567)
                return handle_default([], local_var_1561, local_var_1563)

            def local_var_1549(_: Any):
                def local_var_1551(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=112, start_column=12,
                                                             end_line=112, end_column=57,
                                                             law_headings=["Prologue"]), True)

                def local_var_1553(_: Any):
                    def local_var_1555(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=74, start_column=3,
                                                                 end_line=75, end_column=44,
                                                                 law_headings=["Article D521-1",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), ((ressources_menage_440 >
                                                                                                                  plafond__i_d521_3_899) and
                                                                                                                 (ressources_menage_440 <=
                                                                                                                  plafond__i_i_d521_3_845)))

                    def local_var_1557(_: Any):
                        if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                integer_of_string("2")):
                            return ((prestations_familiales_dot_base_mensuelle_773 *
                                     decimal_of_string("0.205")) *
                                    decimal_of_integer((list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) -
                                                        integer_of_string("2"))))
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_1555, local_var_1557)
                return handle_default([], local_var_1551, local_var_1553)

            def local_var_1539(_: Any):
                def local_var_1541(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=112, start_column=12,
                                                             end_line=112, end_column=57,
                                                             law_headings=["Prologue"]), True)

                def local_var_1543(_: Any):
                    def local_var_1545(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=113, start_column=3,
                                                                 end_line=113, end_column=41,
                                                                 law_headings=["Article D521-1",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), (ressources_menage_440 >
                                                                                                                 plafond__i_i_d521_3_845))

                    def local_var_1547(_: Any):
                        if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                integer_of_string("2")):
                            return ((prestations_familiales_dot_base_mensuelle_773 *
                                     decimal_of_string("0.1025")) *
                                    decimal_of_integer((list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) -
                                                        integer_of_string("2"))))
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_1545, local_var_1547)
                return handle_default([], local_var_1541, local_var_1543)

            def local_var_1569(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=112, start_column=12,
                                                         end_line=112, end_column=57,
                                                         law_headings=["Prologue"]), True)

            def local_var_1571(_: Any):
                def local_var_1573(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1575(_: Any):
                    raise EmptyError
                return handle_default([], local_var_1573, local_var_1575)
            local_var_1538 = handle_default([local_var_1539, local_var_1549,
                                             local_var_1559], local_var_1569, local_var_1571)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=112, start_column=12, end_line=112, end_column=57,
                                             law_headings=["Prologue"]))
    montant_initial_base_troisieme_enfant_et_plus_1537 = log_variable_definition(["AllocationsFamiliales",
                                                                                  "montant_initial_base_troisième_enfant_et_plus"], local_var_1538)
    try:
        try:
            local_var_1578 = montant_initial_base_deuxieme_enfant_389(Unit())
        except EmptyError:
            def local_var_1599(_: Any):
                def local_var_1601(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=111, start_column=12,
                                                             end_line=111, end_column=48,
                                                             law_headings=["Prologue"]), True)

                def local_var_1603(_: Any):
                    def local_var_1605(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=35, start_column=3,
                                                                 end_line=35, end_column=41,
                                                                 law_headings=["Article D521-1",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), (ressources_menage_440 <=
                                                                                                                 plafond__i_d521_3_899))

                    def local_var_1607(_: Any):
                        if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                integer_of_string("1")):
                            return (prestations_familiales_dot_base_mensuelle_773 *
                                    decimal_of_string("0.32"))
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_1605, local_var_1607)
                return handle_default([], local_var_1601, local_var_1603)

            def local_var_1589(_: Any):
                def local_var_1591(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=111, start_column=12,
                                                             end_line=111, end_column=48,
                                                             law_headings=["Prologue"]), True)

                def local_var_1593(_: Any):
                    def local_var_1595(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=74, start_column=3,
                                                                 end_line=75, end_column=44,
                                                                 law_headings=["Article D521-1",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), ((ressources_menage_440 >
                                                                                                                  plafond__i_d521_3_899) and
                                                                                                                 (ressources_menage_440 <=
                                                                                                                  plafond__i_i_d521_3_845)))

                    def local_var_1597(_: Any):
                        if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                integer_of_string("1")):
                            return (prestations_familiales_dot_base_mensuelle_773 *
                                    decimal_of_string("0.16"))
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_1595, local_var_1597)
                return handle_default([], local_var_1591, local_var_1593)

            def local_var_1579(_: Any):
                def local_var_1581(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=111, start_column=12,
                                                             end_line=111, end_column=48,
                                                             law_headings=["Prologue"]), True)

                def local_var_1583(_: Any):
                    def local_var_1585(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=113, start_column=3,
                                                                 end_line=113, end_column=41,
                                                                 law_headings=["Article D521-1",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), (ressources_menage_440 >
                                                                                                                 plafond__i_i_d521_3_845))

                    def local_var_1587(_: Any):
                        if (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) >
                                integer_of_string("1")):
                            return (prestations_familiales_dot_base_mensuelle_773 *
                                    decimal_of_string("0.08"))
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_1585, local_var_1587)
                return handle_default([], local_var_1581, local_var_1583)

            def local_var_1609(_: Any):
                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=111, start_column=12,
                                                         end_line=111, end_column=48,
                                                         law_headings=["Prologue"]), True)

            def local_var_1611(_: Any):
                def local_var_1613(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1615(_: Any):
                    raise EmptyError
                return handle_default([], local_var_1613, local_var_1615)
            local_var_1578 = handle_default([local_var_1579, local_var_1589,
                                             local_var_1599], local_var_1609, local_var_1611)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=111, start_column=12, end_line=111, end_column=48,
                                             law_headings=["Prologue"]))
    montant_initial_base_deuxieme_enfant_1577 = log_variable_definition(["AllocationsFamiliales",
                                                                         "montant_initial_base_deuxième_enfant"], local_var_1578)
    try:
        try:
            local_var_1618 = rapport_enfants_total_moyen_391(Unit())
        except EmptyError:
            try:
                def local_var_1619(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=113, start_column=12,
                                                             end_line=113, end_column=39,
                                                             law_headings=["Prologue"]), True)

                def local_var_1621(_: Any):
                    def local_var_1623(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                                 start_line=128, start_column=14,
                                                                 end_line=128, end_column=41,
                                                                 law_headings=["Article R521-3",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets en Conseil d'Etat",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_1625(_: Any):
                        if (nombre_total_enfants_1356 ==
                                decimal_of_string("0.")):
                            return decimal_of_string("0.")
                        else:
                            return (nombre_moyen_enfants_1370 /
                                    nombre_total_enfants_1356)
                    return handle_default([], local_var_1623, local_var_1625)
                local_var_1618 = handle_default([], local_var_1619,
                                                local_var_1621)
            except EmptyError:
                def local_var_1627(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1629(_: Any):
                    raise EmptyError
                local_var_1618 = handle_default([], local_var_1627,
                                                local_var_1629)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=113, start_column=12, end_line=113, end_column=39,
                                             law_headings=["Prologue"]))
    rapport_enfants_total_moyen_1617 = log_variable_definition(["AllocationsFamiliales",
                                                                "rapport_enfants_total_moyen"], local_var_1618)
    try:
        try:
            local_var_1632 = montant_initial_metropole_majoration_405(Unit())
        except EmptyError:
            def local_var_1632(param_1633: Enfant):
                try:
                    def local_var_1664(_: Any):
                        def local_var_1666(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=133, start_column=12,
                                                                     end_line=133, end_column=48,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_1668(_: Any):
                            def local_var_1670(_: Any):
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                         start_line=55, start_column=3,
                                                                         end_line=55, end_column=41,
                                                                         law_headings=["Article D521-1",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie réglementaire - Décrets simples",
                                                                                       "Code de la sécurité sociale"]), ((ressources_menage_440 <=
                                                                                                                          plafond__i_d521_3_899) and
                                                                                                                         log_end_call(["AllocationsFamiliales",
                                                                                                                                       "droit_ouvert_majoration"],
                                                                                                                                      log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                               "droit_ouvert_majoration", "output"],
                                                                                                                                                              log_begin_call(["AllocationsFamiliales",
                                                                                                                                                                              "droit_ouvert_majoration"],
                                                                                                                                                                             droit_ouvert_majoration_1443,
                                                                                                                                                                             log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                                      "droit_ouvert_majoration", "input"],
                                                                                                                                                                                                     param_1633))))))

                            def local_var_1672(_: Any):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.16"))
                            return handle_default([], local_var_1670,
                                                  local_var_1672)
                        return handle_default([], local_var_1666,
                                              local_var_1668)

                    def local_var_1654(_: Any):
                        def local_var_1656(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=133, start_column=12,
                                                                     end_line=133, end_column=48,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_1658(_: Any):
                            def local_var_1660(_: Any):
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                         start_line=95, start_column=3,
                                                                         end_line=96, end_column=44,
                                                                         law_headings=["Article D521-1",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie réglementaire - Décrets simples",
                                                                                       "Code de la sécurité sociale"]), (((ressources_menage_440 >
                                                                                                                           plafond__i_d521_3_899) and
                                                                                                                          (ressources_menage_440 <=
                                                                                                                           plafond__i_i_d521_3_845)) and
                                                                                                                         log_end_call(["AllocationsFamiliales",
                                                                                                                                       "droit_ouvert_majoration"],
                                                                                                                                      log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                               "droit_ouvert_majoration", "output"],
                                                                                                                                                              log_begin_call(["AllocationsFamiliales",
                                                                                                                                                                              "droit_ouvert_majoration"],
                                                                                                                                                                             droit_ouvert_majoration_1443,
                                                                                                                                                                             log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                                      "droit_ouvert_majoration", "input"],
                                                                                                                                                                                                     param_1633))))))

                            def local_var_1662(_: Any):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.08"))
                            return handle_default([], local_var_1660,
                                                  local_var_1662)
                        return handle_default([], local_var_1656,
                                              local_var_1658)

                    def local_var_1644(_: Any):
                        def local_var_1646(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=133, start_column=12,
                                                                     end_line=133, end_column=48,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_1648(_: Any):
                            def local_var_1650(_: Any):
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                         start_line=132, start_column=3,
                                                                         end_line=132, end_column=41,
                                                                         law_headings=["Article D521-1",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie réglementaire - Décrets simples",
                                                                                       "Code de la sécurité sociale"]), ((ressources_menage_440 >
                                                                                                                          plafond__i_i_d521_3_845) and
                                                                                                                         log_end_call(["AllocationsFamiliales",
                                                                                                                                       "droit_ouvert_majoration"],
                                                                                                                                      log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                               "droit_ouvert_majoration", "output"],
                                                                                                                                                              log_begin_call(["AllocationsFamiliales",
                                                                                                                                                                              "droit_ouvert_majoration"],
                                                                                                                                                                             droit_ouvert_majoration_1443,
                                                                                                                                                                             log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                                      "droit_ouvert_majoration", "input"],
                                                                                                                                                                                                     param_1633))))))

                            def local_var_1652(_: Any):
                                return (prestations_familiales_dot_base_mensuelle_773 *
                                        decimal_of_string("0.04"))
                            return handle_default([], local_var_1650,
                                                  local_var_1652)
                        return handle_default([], local_var_1646,
                                              local_var_1648)

                    def local_var_1634(_: Any):
                        def local_var_1636(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=133, start_column=12,
                                                                     end_line=133, end_column=48,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_1638(_: Any):
                            def local_var_1640(_: Any):
                                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                                         start_line=27, start_column=5,
                                                                         end_line=27, end_column=44,
                                                                         law_headings=["Règles diverses",
                                                                                       "Épilogue",
                                                                                       "Décrets divers"]), not log_end_call(["AllocationsFamiliales",
                                                                                                                             "droit_ouvert_majoration"],
                                                                                                                            log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                     "droit_ouvert_majoration", "output"],
                                                                                                                                                    log_begin_call(["AllocationsFamiliales",
                                                                                                                                                                    "droit_ouvert_majoration"],
                                                                                                                                                                   droit_ouvert_majoration_1443,
                                                                                                                                                                   log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                                            "droit_ouvert_majoration", "input"],
                                                                                                                                                                                           param_1633)))))

                            def local_var_1642(_: Any):
                                return money_of_cents_string("0")
                            return handle_default([], local_var_1640,
                                                  local_var_1642)
                        return handle_default([], local_var_1636,
                                              local_var_1638)

                    def local_var_1674(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=133, start_column=12,
                                                                 end_line=133, end_column=48,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1676(_: Any):
                        def local_var_1678(_: Any):
                            return log_decision_taken(SourcePosition(filename="",
                                                                     start_line=0, start_column=1,
                                                                     end_line=0, end_column=1,
                                                                     law_headings=[]), False)

                        def local_var_1680(_: Any):
                            raise EmptyError
                        return handle_default([], local_var_1678,
                                              local_var_1680)
                    return handle_default([local_var_1634, local_var_1644,
                                           local_var_1654, local_var_1664], local_var_1674,
                                          local_var_1676)
                except EmptyError:
                    raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=133, start_column=12, end_line=133,
                                                         end_column=48, law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=133, start_column=12, end_line=133, end_column=48,
                                             law_headings=["Prologue"]))
    montant_initial_metropole_majoration_1631 = log_variable_definition(["AllocationsFamiliales",
                                                                         "montant_initial_métropole_majoration"], local_var_1632)
    try:
        try:
            local_var_1683 = montant_verse_forfaitaire_403(Unit())
        except EmptyError:
            try:
                def local_var_1684(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=129, start_column=12,
                                                             end_line=129, end_column=37,
                                                             law_headings=["Prologue"]), True)

                def local_var_1686(_: Any):
                    def local_var_1688(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=194, start_column=14,
                                                                 end_line=194, end_column=39,
                                                                 law_headings=["Article D521-2",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_1690(_: Any):
                        def local_var_1692(acc_1693: Integer, enfant_1694: Any):
                            if log_end_call(["AllocationsFamiliales",
                                             "droit_ouvert_forfaitaire"],
                                            log_variable_definition(["AllocationsFamiliales",
                                                                     "droit_ouvert_forfaitaire", "output"],
                                                                    log_begin_call(["AllocationsFamiliales",
                                                                                    "droit_ouvert_forfaitaire"],
                                                                                   droit_ouvert_forfaitaire_971,
                                                                                   log_variable_definition(["AllocationsFamiliales",
                                                                                                            "droit_ouvert_forfaitaire", "input"],
                                                                                                           enfant_1694)))):
                                return (acc_1693 + integer_of_string("1"))
                            else:
                                return acc_1693
                        return (montant_verse_forfaitaire_par_enfant_1497 *
                                decimal_of_integer(list_fold_left(local_var_1692,
                                                                  integer_of_string("0"), enfants_a_charge_470)))
                    return handle_default([], local_var_1688, local_var_1690)
                local_var_1683 = handle_default([], local_var_1684,
                                                local_var_1686)
            except EmptyError:
                def local_var_1695(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1697(_: Any):
                    raise EmptyError
                local_var_1683 = handle_default([], local_var_1695,
                                                local_var_1697)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=129, start_column=12, end_line=129, end_column=37,
                                             law_headings=["Prologue"]))
    montant_verse_forfaitaire_1682 = log_variable_definition(["AllocationsFamiliales",
                                                              "montant_versé_forfaitaire"], local_var_1683)
    try:
        try:
            local_var_1700 = montant_initial_base_387(Unit())
        except EmptyError:
            try:
                def local_var_1711(_: Any):
                    def local_var_1713(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=109, start_column=12,
                                                                 end_line=109, end_column=32,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1715(_: Any):
                        def local_var_1717(_: Any):
                            return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                     start_line=350, start_column=5,
                                                                     end_line=351, end_column=69,
                                                                     law_headings=["Article D755-5",
                                                                                   "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                                   "Titre 5 : Départements d'outre-mer",
                                                                                   "Livre 7 : Régimes divers - Dispositions diverses",
                                                                                   "Partie réglementaire - Décrets simples",
                                                                                   "Code de la sécurité sociale"]), (prestations_familiales_dot_regime_outre_mer_l751_1_769 and
                                                                                                                     (list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) ==
                                                                                                                      integer_of_string("1"))))

                        def local_var_1719(_: Any):
                            return montant_initial_base_premier_enfant_1391
                        return handle_default([], local_var_1717,
                                              local_var_1719)
                    return handle_default([], local_var_1713, local_var_1715)

                def local_var_1701(_: Any):
                    def local_var_1703(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=109, start_column=12,
                                                                 end_line=109, end_column=32,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1705(_: Any):
                        def local_var_1707(_: Any):
                            return log_decision_taken(SourcePosition(filename="./decrets_divers.catala_fr",
                                                                     start_line=335, start_column=5,
                                                                     end_line=335, end_column=24,
                                                                     law_headings=["Article 7",
                                                                                   "Décret n°2002-423 du 29 mars 2002 relatif aux prestations familiales à Mayotte",
                                                                                   "Dispositions spéciales relatives à Mayotte",
                                                                                   "Décrets divers"]), (residence_450 ==
                                                                                                        Collectivite(Collectivite_Code.Mayotte,
                                                                                                                     Unit())))

                        def local_var_1709(_: Any):
                            return (montant_initial_base_premier_enfant_mayotte_1232 +
                                    (montant_initial_base_deuxieme_enfant_mayotte_1118 +
                                     (montant_initial_base_troisieme_enfant_mayotte_1004 +
                                      montant_initial_base_quatrieme_enfant_et_plus_mayotte_990)))
                        return handle_default([], local_var_1707,
                                              local_var_1709)
                    return handle_default([], local_var_1703, local_var_1705)

                def local_var_1721(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=109, start_column=12,
                                                             end_line=109, end_column=32,
                                                             law_headings=["Prologue"]), True)

                def local_var_1723(_: Any):
                    def local_var_1725(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=18, start_column=14,
                                                                 end_line=18, end_column=34,
                                                                 law_headings=["Article D521-1",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_1727(_: Any):
                        return (montant_initial_base_deuxieme_enfant_1577 +
                                montant_initial_base_troisieme_enfant_et_plus_1537)
                    return handle_default([], local_var_1725, local_var_1727)
                local_var_1700 = handle_default([local_var_1701,
                                                 local_var_1711], local_var_1721, local_var_1723)
            except EmptyError:
                def local_var_1729(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1731(_: Any):
                    raise EmptyError
                local_var_1700 = handle_default([], local_var_1729,
                                                local_var_1731)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=109, start_column=12, end_line=109, end_column=32,
                                             law_headings=["Prologue"]))
    montant_initial_base_1699 = log_variable_definition(["AllocationsFamiliales",
                                                         "montant_initial_base"], local_var_1700)
    try:
        try:
            local_var_1734 = montant_initial_majoration_406(Unit())
        except EmptyError:
            def local_var_1734(param_1735: Enfant):
                try:
                    try:
                        def local_var_1746(_: Any):
                            def local_var_1748(_: Any):
                                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                         start_line=134, start_column=12,
                                                                         end_line=134, end_column=38,
                                                                         law_headings=["Prologue"]), True)

                            def local_var_1750(_: Any):
                                def local_var_1752(_: Any):
                                    return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                             start_line=373, start_column=5,
                                                                             end_line=376, end_column=42,
                                                                             law_headings=["Article D755-5",
                                                                                           "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                                           "Titre 5 : Départements d'outre-mer",
                                                                                           "Livre 7 : Régimes divers - Dispositions diverses",
                                                                                           "Partie réglementaire - Décrets simples",
                                                                                           "Code de la sécurité sociale"]), (log_end_call(["AllocationsFamiliales",
                                                                                                                                           "droit_ouvert_majoration"],
                                                                                                                                          log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                   "droit_ouvert_majoration", "output"],
                                                                                                                             log_begin_call(["AllocationsFamiliales",
                                                                                                                                             "droit_ouvert_majoration"],
                                                                                                                                            droit_ouvert_majoration_1443,
                                                                                                                                            log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                     "droit_ouvert_majoration", "input"],
                                                                                                                                                                    param_1735)))) and
                                                                                                                             (prestations_familiales_dot_regime_outre_mer_l751_1_769 and
                                                                                                                              ((list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) ==
                                                                                                                                integer_of_string("1")) and
                                                                                                                                  ((param_1735.age >=
                                                                                                                                    integer_of_string("11")) and
                                                                                                                                   (param_1735.age <
                                                                                                                                   integer_of_string("16")))))))

                                def local_var_1754(_: Any):
                                    return (prestations_familiales_dot_base_mensuelle_773 *
                                            decimal_of_string("0.0369"))
                                return handle_default([], local_var_1752,
                                                      local_var_1754)
                            return handle_default([], local_var_1748,
                                                  local_var_1750)

                        def local_var_1736(_: Any):
                            def local_var_1738(_: Any):
                                return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                         start_line=134, start_column=12,
                                                                         end_line=134, end_column=38,
                                                                         law_headings=["Prologue"]), True)

                            def local_var_1740(_: Any):
                                def local_var_1742(_: Any):
                                    return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                             start_line=382, start_column=5,
                                                                             end_line=385, end_column=23,
                                                                             law_headings=["Article D755-5",
                                                                                           "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                                                           "Titre 5 : Départements d'outre-mer",
                                                                                           "Livre 7 : Régimes divers - Dispositions diverses",
                                                                                           "Partie réglementaire - Décrets simples",
                                                                                           "Code de la sécurité sociale"]), (log_end_call(["AllocationsFamiliales",
                                                                                                                                           "droit_ouvert_majoration"],
                                                                                                                                          log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                   "droit_ouvert_majoration", "output"],
                                                                                                                             log_begin_call(["AllocationsFamiliales",
                                                                                                                                             "droit_ouvert_majoration"],
                                                                                                                                            droit_ouvert_majoration_1443,
                                                                                                                                            log_variable_definition(["AllocationsFamiliales",
                                                                                                                                                                     "droit_ouvert_majoration", "input"],
                                                                                                                                                                    param_1735)))) and
                                                                                                                             (prestations_familiales_dot_regime_outre_mer_l751_1_769 and
                                                                                                                              ((list_length(enfants_a_charge_droit_ouvert_prestation_familiale_814) ==
                                                                                                                                integer_of_string("1")) and
                                                                                                                                  (param_1735.age >=
                                                                                                                                   integer_of_string("16"))))))

                                def local_var_1744(_: Any):
                                    return (prestations_familiales_dot_base_mensuelle_773 *
                                            decimal_of_string("0.0567"))
                                return handle_default([], local_var_1742,
                                                      local_var_1744)
                            return handle_default([], local_var_1738,
                                                  local_var_1740)

                        def local_var_1756(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=134, start_column=12,
                                                                     end_line=134, end_column=38,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_1758(_: Any):
                            def local_var_1760(_: Any):
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                         start_line=22, start_column=14,
                                                                         end_line=22, end_column=40,
                                                                         law_headings=["Article D521-1",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie réglementaire - Décrets simples",
                                                                                       "Code de la sécurité sociale"]), True)

                            def local_var_1762(_: Any):
                                return log_end_call(["AllocationsFamiliales",
                                                     "montant_initial_métropole_majoration"],
                                                    log_variable_definition(["AllocationsFamiliales",
                                                                             "montant_initial_métropole_majoration",
                                                                             "output"],
                                                                            log_begin_call(["AllocationsFamiliales",
                                                                                            "montant_initial_métropole_majoration"],
                                                                                           montant_initial_metropole_majoration_1631,
                                                                                           log_variable_definition(["AllocationsFamiliales",
                                                                                                                    "montant_initial_métropole_majoration",
                                                                                                                    "input"], param_1735))))
                            return handle_default([], local_var_1760,
                                                  local_var_1762)
                        return handle_default([local_var_1736,
                                               local_var_1746], local_var_1756, local_var_1758)
                    except EmptyError:
                        def local_var_1764(_: Any):
                            return log_decision_taken(SourcePosition(filename="",
                                                                     start_line=0, start_column=1,
                                                                     end_line=0, end_column=1,
                                                                     law_headings=[]), False)

                        def local_var_1766(_: Any):
                            raise EmptyError
                        return handle_default([], local_var_1764,
                                              local_var_1766)
                except EmptyError:
                    raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=134, start_column=12, end_line=134,
                                                         end_column=38, law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=134, start_column=12, end_line=134, end_column=38,
                                             law_headings=["Prologue"]))
    montant_initial_majoration_1733 = log_variable_definition(["AllocationsFamiliales",
                                                               "montant_initial_majoration"], local_var_1734)
    try:
        try:
            local_var_1769 = montant_verse_complement_pour_forfaitaire_413(
                Unit())
        except EmptyError:
            try:
                def local_var_1780(_: Any):
                    def local_var_1782(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=143, start_column=12,
                                                                 end_line=143, end_column=53,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1784(_: Any):
                        def local_var_1786(_: Any):
                            return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                     start_line=262, start_column=5,
                                                                     end_line=264, end_column=42,
                                                                     law_headings=["Article D521-2",
                                                                                   "Chapitre 1er : Allocations familiales",
                                                                                   "Titre 2 : Prestations générales d'entretien",
                                                                                   "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                   "Partie réglementaire - Décrets simples",
                                                                                   "Code de la sécurité sociale"]), ((ressources_menage_440 >
                                                                                                                      plafond__i_d521_3_899) and
                                                                                                                     (ressources_menage_440 <=
                                                                                                                      (plafond__i_d521_3_899 +
                                                                                                                       (montant_verse_forfaitaire_1682 *
                                                                                                                        decimal_of_string("12."))))))

                        def local_var_1788(_: Any):
                            return ((plafond__i_d521_3_899 +
                                     ((montant_verse_forfaitaire_1682 *
                                       decimal_of_string("12.")) -
                                      ressources_menage_440)) *
                                    (decimal_of_string("1.") /
                                     decimal_of_string("12.")))
                        return handle_default([], local_var_1786,
                                              local_var_1788)
                    return handle_default([], local_var_1782, local_var_1784)

                def local_var_1770(_: Any):
                    def local_var_1772(_: Any):
                        return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                 start_line=143, start_column=12,
                                                                 end_line=143, end_column=53,
                                                                 law_headings=["Prologue"]), True)

                    def local_var_1774(_: Any):
                        def local_var_1776(_: Any):
                            return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                     start_line=272, start_column=5,
                                                                     end_line=274, end_column=41,
                                                                     law_headings=["Article D521-2",
                                                                                   "Chapitre 1er : Allocations familiales",
                                                                                   "Titre 2 : Prestations générales d'entretien",
                                                                                   "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                   "Partie réglementaire - Décrets simples",
                                                                                   "Code de la sécurité sociale"]), ((ressources_menage_440 >
                                                                                                                      plafond__i_i_d521_3_845) and
                                                                                                                     (ressources_menage_440 <=
                                                                                                                      (plafond__i_i_d521_3_845 +
                                                                                                                       (montant_verse_forfaitaire_1682 *
                                                                                                                        decimal_of_string("12."))))))

                        def local_var_1778(_: Any):
                            return ((plafond__i_i_d521_3_845 +
                                     ((montant_verse_forfaitaire_1682 *
                                       decimal_of_string("12.")) -
                                      ressources_menage_440)) *
                                    (decimal_of_string("1.") /
                                     decimal_of_string("12.")))
                        return handle_default([], local_var_1776,
                                              local_var_1778)
                    return handle_default([], local_var_1772, local_var_1774)

                def local_var_1790(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=143, start_column=12,
                                                             end_line=143, end_column=53,
                                                             law_headings=["Prologue"]), True)

                def local_var_1792(_: Any):
                    def local_var_1794(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=280, start_column=14,
                                                                 end_line=280, end_column=55,
                                                                 law_headings=["Article D521-2",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_1796(_: Any):
                        return money_of_cents_string("0")
                    return handle_default([], local_var_1794, local_var_1796)
                local_var_1769 = handle_default([local_var_1770,
                                                 local_var_1780], local_var_1790, local_var_1792)
            except EmptyError:
                def local_var_1798(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1800(_: Any):
                    raise EmptyError
                local_var_1769 = handle_default([], local_var_1798,
                                                local_var_1800)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=143, start_column=12, end_line=143, end_column=53,
                                             law_headings=["Prologue"]))
    montant_verse_complement_pour_forfaitaire_1768 = log_variable_definition(["AllocationsFamiliales",
                                                                              "montant_versé_complément_pour_forfaitaire"], local_var_1769)
    try:
        try:
            local_var_1803 = montant_avec_garde_alternee_base_394(Unit())
        except EmptyError:
            try:
                def local_var_1804(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=116, start_column=12,
                                                             end_line=116, end_column=44,
                                                             law_headings=["Prologue"]), True)

                def local_var_1806(_: Any):
                    def local_var_1808(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                                 start_line=125, start_column=14,
                                                                 end_line=125, end_column=46,
                                                                 law_headings=["Article R521-3",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets en Conseil d'Etat",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_1810(_: Any):
                        return (montant_initial_base_1699 *
                                rapport_enfants_total_moyen_1617)
                    return handle_default([], local_var_1808, local_var_1810)
                local_var_1803 = handle_default([], local_var_1804,
                                                local_var_1806)
            except EmptyError:
                def local_var_1812(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1814(_: Any):
                    raise EmptyError
                local_var_1803 = handle_default([], local_var_1812,
                                                local_var_1814)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=116, start_column=12, end_line=116, end_column=44,
                                             law_headings=["Prologue"]))
    montant_avec_garde_alternee_base_1802 = log_variable_definition(["AllocationsFamiliales",
                                                                     "montant_avec_garde_alternée_base"], local_var_1803)
    try:
        try:
            local_var_1817 = montant_avec_garde_alternee_majoration_407(Unit())
        except EmptyError:
            def local_var_1817(param_1818: Enfant):
                try:
                    try:
                        def local_var_1819(_: Any):
                            return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                                     start_line=135, start_column=12,
                                                                     end_line=135, end_column=50,
                                                                     law_headings=["Prologue"]), True)

                        def local_var_1821(_: Any):
                            def local_var_1823(_: Any):
                                return log_decision_taken(SourcePosition(filename="./securite_sociale_R.catala_fr",
                                                                         start_line=187, start_column=5,
                                                                         end_line=187, end_column=43,
                                                                         law_headings=["Article R521-4",
                                                                                       "Chapitre 1er : Allocations familiales",
                                                                                       "Titre 2 : Prestations générales d'entretien",
                                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                                       "Partie réglementaire - Décrets en Conseil d'Etat",
                                                                                       "Code de la sécurité sociale"]), True)

                            def local_var_1825(_: Any):
                                match_arg_2267 = log_end_call(["AllocationsFamiliales",
                                                               "prise_en_compte"],
                                                              log_variable_definition(["AllocationsFamiliales",
                                                                                       "prise_en_compte", "output"],
                                                                                      log_begin_call(["AllocationsFamiliales",
                                                                                                      "prise_en_compte"], prise_en_compte_480,
                                                                                                     log_variable_definition(["AllocationsFamiliales",
                                                                                                                              "prise_en_compte", "input"],
                                                                                                                             param_1818))))
                                if match_arg_2267.code == PriseEnCompte_Code.Complete:
                                    _ = match_arg_2267.value
                                    local_var_1827 = decimal_of_string("1.")
                                elif match_arg_2267.code == PriseEnCompte_Code.Partagee:
                                    _ = match_arg_2267.value
                                    local_var_1827 = decimal_of_string("0.5")
                                elif match_arg_2267.code == PriseEnCompte_Code.Zero:
                                    _ = match_arg_2267.value
                                    local_var_1827 = decimal_of_string("0.")
                                return (log_end_call(["AllocationsFamiliales",
                                                      "montant_initial_majoration"],
                                                     log_variable_definition(["AllocationsFamiliales",
                                                                              "montant_initial_majoration", "output"],
                                                                             log_begin_call(["AllocationsFamiliales",
                                                                                             "montant_initial_majoration"],
                                                                                            montant_initial_majoration_1733,
                                                                                            log_variable_definition(["AllocationsFamiliales",
                                                                                                                     "montant_initial_majoration", "input"],
                                                                                                                    param_1818)))) * local_var_1827)
                            return handle_default([], local_var_1823,
                                                  local_var_1825)
                        return handle_default([], local_var_1819,
                                              local_var_1821)
                    except EmptyError:
                        def local_var_1831(_: Any):
                            return log_decision_taken(SourcePosition(filename="",
                                                                     start_line=0, start_column=1,
                                                                     end_line=0, end_column=1,
                                                                     law_headings=[]), False)

                        def local_var_1833(_: Any):
                            raise EmptyError
                        return handle_default([], local_var_1831,
                                              local_var_1833)
                except EmptyError:
                    raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                                         start_line=135, start_column=12, end_line=135,
                                                         end_column=50, law_headings=["Prologue"]))
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=135, start_column=12, end_line=135, end_column=50,
                                             law_headings=["Prologue"]))
    montant_avec_garde_alternee_majoration_1816 = log_variable_definition(["AllocationsFamiliales",
                                                                           "montant_avec_garde_alternée_majoration"], local_var_1817)
    try:
        try:
            local_var_1836 = montant_verse_base_395(Unit())
        except EmptyError:
            try:
                def local_var_1837(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=117, start_column=12,
                                                             end_line=117, end_column=30,
                                                             law_headings=["Prologue"]), True)

                def local_var_1839(_: Any):
                    def local_var_1841(_: Any):
                        return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                                 start_line=36, start_column=14,
                                                                 end_line=36, end_column=32,
                                                                 law_headings=["Règles diverses", "Épilogue",
                                                                               "Décrets divers"]), True)

                    def local_var_1843(_: Any):
                        if droit_ouvert_base_1409:
                            return montant_avec_garde_alternee_base_1802
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_1841, local_var_1843)
                local_var_1836 = handle_default([], local_var_1837,
                                                local_var_1839)
            except EmptyError:
                def local_var_1845(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1847(_: Any):
                    raise EmptyError
                local_var_1836 = handle_default([], local_var_1845,
                                                local_var_1847)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=117, start_column=12, end_line=117, end_column=30,
                                             law_headings=["Prologue"]))
    montant_verse_base_1835 = log_variable_definition(["AllocationsFamiliales",
                                                       "montant_versé_base"], local_var_1836)
    try:
        try:
            local_var_1850 = montant_verse_majoration_408(Unit())
        except EmptyError:
            try:
                def local_var_1851(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=136, start_column=12,
                                                             end_line=136, end_column=36,
                                                             law_headings=["Prologue"]), True)

                def local_var_1853(_: Any):
                    def local_var_1855(_: Any):
                        return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                                 start_line=38, start_column=14,
                                                                 end_line=38, end_column=38,
                                                                 law_headings=["Règles diverses", "Épilogue",
                                                                               "Décrets divers"]), True)

                    def local_var_1857(_: Any):
                        if droit_ouvert_base_1409:
                            def local_var_1859(acc_1860: Money, enfant_1861: Any):
                                return (acc_1860 +
                                        log_end_call(["AllocationsFamiliales",
                                                      "montant_avec_garde_alternée_majoration"],
                                                     log_variable_definition(["AllocationsFamiliales",
                                                                              "montant_avec_garde_alternée_majoration",
                                                                              "output"],
                                                                             log_begin_call(["AllocationsFamiliales",
                                                                                             "montant_avec_garde_alternée_majoration"],
                                                                                            montant_avec_garde_alternee_majoration_1816,
                                                                                            log_variable_definition(["AllocationsFamiliales",
                                                                                                                     "montant_avec_garde_alternée_majoration",
                                                                                                                     "input"], enfant_1861)))))
                            return list_fold_left(local_var_1859,
                                                  money_of_cents_string("0"),
                                                  enfants_a_charge_470)
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_1855, local_var_1857)
                local_var_1850 = handle_default([], local_var_1851,
                                                local_var_1853)
            except EmptyError:
                def local_var_1862(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1864(_: Any):
                    raise EmptyError
                local_var_1850 = handle_default([], local_var_1862,
                                                local_var_1864)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=136, start_column=12, end_line=136, end_column=36,
                                             law_headings=["Prologue"]))
    montant_verse_majoration_1849 = log_variable_definition(["AllocationsFamiliales",
                                                             "montant_versé_majoration"], local_var_1850)
    try:
        try:
            local_var_1867 = montant_base_complement_pour_base_et_majoration_410(
                Unit())
        except EmptyError:
            try:
                def local_var_1868(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=140, start_column=12,
                                                             end_line=140, end_column=59,
                                                             law_headings=["Prologue"]), True)

                def local_var_1870(_: Any):
                    def local_var_1872(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=184, start_column=14,
                                                                 end_line=184, end_column=61,
                                                                 law_headings=["Article D521-1",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_1874(_: Any):
                        return (montant_verse_base_1835 +
                                montant_verse_majoration_1849)
                    return handle_default([], local_var_1872, local_var_1874)
                local_var_1867 = handle_default([], local_var_1868,
                                                local_var_1870)
            except EmptyError:
                def local_var_1876(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1878(_: Any):
                    raise EmptyError
                local_var_1867 = handle_default([], local_var_1876,
                                                local_var_1878)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=140, start_column=12, end_line=140, end_column=59,
                                             law_headings=["Prologue"]))
    montant_base_complement_pour_base_et_majoration_1866 = log_variable_definition(["AllocationsFamiliales",
                                                                                    "montant_base_complément_pour_base_et_majoration"], local_var_1867)
    try:
        try:
            local_var_1881 = montant_verse_complement_pour_base_et_majoration_412(
                Unit())
        except EmptyError:
            try:
                def local_var_1882(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=142, start_column=12,
                                                             end_line=142, end_column=60,
                                                             law_headings=["Prologue"]), True)

                def local_var_1884(_: Any):
                    def local_var_1886(_: Any):
                        return log_decision_taken(SourcePosition(filename="./securite_sociale_D.catala_fr",
                                                                 start_line=178, start_column=14,
                                                                 end_line=178, end_column=62,
                                                                 law_headings=["Article D521-1",
                                                                               "Chapitre 1er : Allocations familiales",
                                                                               "Titre 2 : Prestations générales d'entretien",
                                                                               "Livre 5 : Prestations familiales et prestations assimilées",
                                                                               "Partie réglementaire - Décrets simples",
                                                                               "Code de la sécurité sociale"]), True)

                    def local_var_1888(_: Any):
                        if droit_ouvert_complement_953:
                            return log_end_call(["AllocationsFamiliales",
                                                 "complément_dégressif"],
                                                log_variable_definition(["AllocationsFamiliales",
                                                                         "complément_dégressif", "output"],
                                                                        log_begin_call(["AllocationsFamiliales",
                                                                                        "complément_dégressif"],
                                                                                       complement_degressif_1462,
                                                                                       log_variable_definition(["AllocationsFamiliales",
                                                                                                                "complément_dégressif", "input"],
                                                                                                               montant_base_complement_pour_base_et_majoration_1866))))
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_1886, local_var_1888)
                local_var_1881 = handle_default([], local_var_1882,
                                                local_var_1884)
            except EmptyError:
                def local_var_1890(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1892(_: Any):
                    raise EmptyError
                local_var_1881 = handle_default([], local_var_1890,
                                                local_var_1892)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=142, start_column=12, end_line=142, end_column=60,
                                             law_headings=["Prologue"]))
    montant_verse_complement_pour_base_et_majoration_1880 = log_variable_definition(["AllocationsFamiliales",
                                                                                     "montant_versé_complément_pour_base_et_majoration"],
                                                                                    local_var_1881)
    try:
        try:
            local_var_1895 = montant_verse_385(Unit())
        except EmptyError:
            try:
                def local_var_1896(_: Any):
                    return log_decision_taken(SourcePosition(filename="./prologue.catala_fr",
                                                             start_line=105, start_column=12,
                                                             end_line=105, end_column=25,
                                                             law_headings=["Prologue"]), True)

                def local_var_1898(_: Any):
                    def local_var_1900(_: Any):
                        return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                                 start_line=44, start_column=14,
                                                                 end_line=44, end_column=27,
                                                                 law_headings=["Règles diverses", "Épilogue",
                                                                               "Décrets divers"]), True)

                    def local_var_1902(_: Any):
                        if droit_ouvert_base_1409:
                            return (montant_verse_base_1835 +
                                    (montant_verse_majoration_1849 +
                                     (montant_verse_forfaitaire_1682 +
                                      (montant_verse_complement_pour_base_et_majoration_1880 +
                                       montant_verse_complement_pour_forfaitaire_1768))))
                        else:
                            return money_of_cents_string("0")
                    return handle_default([], local_var_1900, local_var_1902)
                local_var_1895 = handle_default([], local_var_1896,
                                                local_var_1898)
            except EmptyError:
                def local_var_1904(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1906(_: Any):
                    raise EmptyError
                local_var_1895 = handle_default([], local_var_1904,
                                                local_var_1906)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./prologue.catala_fr",
                                             start_line=105, start_column=12, end_line=105, end_column=25,
                                             law_headings=["Prologue"]))
    montant_verse_1894 = log_variable_definition(["AllocationsFamiliales",
                                                  "montant_versé"], local_var_1895)
    assert (personne_charge_effective_permanente_est_parent_420 or
            (not personne_charge_effective_permanente_est_parent_420 and
             personne_charge_effective_permanente_remplit_titre__i_430))
    return AllocationsFamilialesOut(personne_charge_effective_permanente_est_parent_out=personne_charge_effective_permanente_est_parent_420,
                                    personne_charge_effective_permanente_remplit_titre_I_out=personne_charge_effective_permanente_remplit_titre__i_430,
                                    ressources_menage_out=ressources_menage_440,
                                    residence_out=residence_450, date_courante_out=date_courante_460,
                                    enfants_a_charge_out=enfants_a_charge_470,
                                    enfants_a_charge_droit_ouvert_prestation_familiale_out=enfants_a_charge_droit_ouvert_prestation_familiale_814,
                                    prise_en_compte_out=prise_en_compte_480,
                                    versement_out=versement_571,
                                    montant_verse_out=montant_verse_1894,
                                    droit_ouvert_base_out=droit_ouvert_base_1409,
                                    montant_initial_base_out=montant_initial_base_1699,
                                    montant_initial_base_premier_enfant_out=montant_initial_base_premier_enfant_1391,
                                    montant_initial_base_deuxieme_enfant_out=montant_initial_base_deuxieme_enfant_1577,
                                    montant_initial_base_troisieme_enfant_et_plus_out=montant_initial_base_troisieme_enfant_et_plus_1537,
                                    rapport_enfants_total_moyen_out=rapport_enfants_total_moyen_1617,
                                    nombre_moyen_enfants_out=nombre_moyen_enfants_1370,
                                    nombre_total_enfants_out=nombre_total_enfants_1356,
                                    montant_avec_garde_alternee_base_out=montant_avec_garde_alternee_base_1802,
                                    montant_verse_base_out=montant_verse_base_1835,
                                    avait_enfant_a_charge_avant_1er_janvier_2012_out=avait_enfant_a_charge_avant_1er_janvier_2012_662,
                                    montant_initial_base_premier_enfant_mayotte_out=montant_initial_base_premier_enfant_mayotte_1232,
                                    montant_initial_base_deuxieme_enfant_mayotte_out=montant_initial_base_deuxieme_enfant_mayotte_1118,
                                    montant_initial_base_troisieme_enfant_mayotte_out=montant_initial_base_troisieme_enfant_mayotte_1004,
                                    montant_initial_base_quatrieme_enfant_et_plus_mayotte_out=montant_initial_base_quatrieme_enfant_et_plus_mayotte_990,
                                    droit_ouvert_forfaitaire_out=droit_ouvert_forfaitaire_971,
                                    montant_verse_forfaitaire_par_enfant_out=montant_verse_forfaitaire_par_enfant_1497,
                                    montant_verse_forfaitaire_out=montant_verse_forfaitaire_1682,
                                    droit_ouvert_majoration_out=droit_ouvert_majoration_1443,
                                    montant_initial_metropole_majoration_out=montant_initial_metropole_majoration_1631,
                                    montant_initial_majoration_out=montant_initial_majoration_1733,
                                    montant_avec_garde_alternee_majoration_out=montant_avec_garde_alternee_majoration_1816,
                                    montant_verse_majoration_out=montant_verse_majoration_1849,
                                    droit_ouvert_complement_out=droit_ouvert_complement_953,
                                    montant_base_complement_pour_base_et_majoration_out=montant_base_complement_pour_base_et_majoration_1866,
                                    complement_degressif_out=complement_degressif_1462,
                                    montant_verse_complement_pour_base_et_majoration_out=montant_verse_complement_pour_base_et_majoration_1880,
                                    montant_verse_complement_pour_forfaitaire_out=montant_verse_complement_pour_forfaitaire_1768,
                                    nombre_enfants_l521_1_out=nombre_enfants_l521_1_672,
                                    age_minimum_alinea_1_l521_3_out=age_minimum_alinea_1_l521_3_795,
                                    nombre_enfants_alinea_2_l521_3_out=nombre_enfants_alinea_2_l521_3_686,
                                    est_enfant_le_plus_age_out=est_enfant_le_plus_age_830,
                                    plafond_I_d521_3_out=plafond__i_d521_3_899,
                                    plafond_II_d521_3_out=plafond__i_i_d521_3_845)


def interface_allocations_familiales(interface_allocations_familiales_in_1908: InterfaceAllocationsFamilialesIn):
    date_courante_1909 = interface_allocations_familiales_in_1908.date_courante_in
    enfants_1910 = interface_allocations_familiales_in_1908.enfants_in
    enfants_a_charge_1911 = interface_allocations_familiales_in_1908.enfants_a_charge_in
    ressources_menage_1912 = interface_allocations_familiales_in_1908.ressources_menage_in
    residence_1913 = interface_allocations_familiales_in_1908.residence_in
    montant_verse_1914 = interface_allocations_familiales_in_1908.montant_verse_in
    personne_charge_effective_permanente_est_parent_1915 = interface_allocations_familiales_in_1908.personne_charge_effective_permanente_est_parent_in
    personne_charge_effective_permanente_remplit_titre__i_1916 = interface_allocations_familiales_in_1908.personne_charge_effective_permanente_remplit_titre_I_in
    avait_enfant_a_charge_avant_1er_janvier_2012_1917 = interface_allocations_familiales_in_1908.avait_enfant_a_charge_avant_1er_janvier_2012_in
    try:
        try:
            local_var_1919 = date_courante_1909(Unit())
        except EmptyError:
            def local_var_1920(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=72, start_column=12,
                                                         end_line=72, end_column=25,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_1922(_: Any):
                def local_var_1924(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1926(_: Any):
                    raise EmptyError
                return handle_default([], local_var_1924, local_var_1926)
            local_var_1919 = handle_default([], local_var_1920,
                                            local_var_1922)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./epilogue.catala_fr",
                                             start_line=72, start_column=12, end_line=72, end_column=25,
                                             law_headings=["Interface du programme", "Épilogue",
                                                           "Décrets divers"]))
    date_courante_1918 = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                  "date_courante"], local_var_1919)
    try:
        try:
            local_var_1929 = enfants_1910(Unit())
        except EmptyError:
            def local_var_1930(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=73, start_column=12,
                                                         end_line=73, end_column=19,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_1932(_: Any):
                def local_var_1934(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1936(_: Any):
                    raise EmptyError
                return handle_default([], local_var_1934, local_var_1936)
            local_var_1929 = handle_default([], local_var_1930,
                                            local_var_1932)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./epilogue.catala_fr",
                                             start_line=73, start_column=12, end_line=73, end_column=19,
                                             law_headings=["Interface du programme", "Épilogue",
                                                           "Décrets divers"]))
    enfants_1928 = log_variable_definition(["InterfaceAllocationsFamiliales",
                                            "enfants"], local_var_1929)
    try:
        try:
            local_var_1939 = ressources_menage_1912(Unit())
        except EmptyError:
            def local_var_1940(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=76, start_column=12,
                                                         end_line=76, end_column=29,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_1942(_: Any):
                def local_var_1944(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1946(_: Any):
                    raise EmptyError
                return handle_default([], local_var_1944, local_var_1946)
            local_var_1939 = handle_default([], local_var_1940,
                                            local_var_1942)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./epilogue.catala_fr",
                                             start_line=76, start_column=12, end_line=76, end_column=29,
                                             law_headings=["Interface du programme", "Épilogue",
                                                           "Décrets divers"]))
    ressources_menage_1938 = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                      "ressources_ménage"], local_var_1939)
    try:
        try:
            local_var_1949 = residence_1913(Unit())
        except EmptyError:
            def local_var_1950(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=77, start_column=12,
                                                         end_line=77, end_column=21,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_1952(_: Any):
                def local_var_1954(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_1956(_: Any):
                    raise EmptyError
                return handle_default([], local_var_1954, local_var_1956)
            local_var_1949 = handle_default([], local_var_1950,
                                            local_var_1952)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./epilogue.catala_fr",
                                             start_line=77, start_column=12, end_line=77, end_column=21,
                                             law_headings=["Interface du programme", "Épilogue",
                                                           "Décrets divers"]))
    residence_1948 = log_variable_definition(["InterfaceAllocationsFamiliales",
                                              "résidence"], local_var_1949)
    try:
        try:
            local_var_1959 = personne_charge_effective_permanente_est_parent_1915(
                Unit())
        except EmptyError:
            def local_var_1960(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=79, start_column=12,
                                                         end_line=79, end_column=59,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_1962(_: Any):
                def local_var_1964(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), True)

                def local_var_1966(_: Any):
                    return False
                return handle_default([], local_var_1964, local_var_1966)
            local_var_1959 = handle_default([], local_var_1960,
                                            local_var_1962)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./epilogue.catala_fr",
                                             start_line=79, start_column=12, end_line=79, end_column=59,
                                             law_headings=["Interface du programme", "Épilogue",
                                                           "Décrets divers"]))
    personne_charge_effective_permanente_est_parent_1958 = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                                                    "personne_charge_effective_permanente_est_parent"], local_var_1959)
    try:
        try:
            local_var_1969 = personne_charge_effective_permanente_remplit_titre__i_1916(
                Unit())
        except EmptyError:
            def local_var_1970(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=80, start_column=12,
                                                         end_line=80, end_column=64,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_1972(_: Any):
                def local_var_1974(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), True)

                def local_var_1976(_: Any):
                    return False
                return handle_default([], local_var_1974, local_var_1976)
            local_var_1969 = handle_default([], local_var_1970,
                                            local_var_1972)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./epilogue.catala_fr",
                                             start_line=80, start_column=12, end_line=80, end_column=64,
                                             law_headings=["Interface du programme", "Épilogue",
                                                           "Décrets divers"]))
    personne_charge_effective_permanente_remplit_titre__i_1968 = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                                                          "personne_charge_effective_permanente_remplit_titre_I"],
                                                                                         local_var_1969)
    try:
        try:
            local_var_1979 = avait_enfant_a_charge_avant_1er_janvier_2012_1917(
                Unit())
        except EmptyError:
            def local_var_1980(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=81, start_column=12,
                                                         end_line=81, end_column=56,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_1982(_: Any):
                def local_var_1984(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), True)

                def local_var_1986(_: Any):
                    return False
                return handle_default([], local_var_1984, local_var_1986)
            local_var_1979 = handle_default([], local_var_1980,
                                            local_var_1982)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./epilogue.catala_fr",
                                             start_line=81, start_column=12, end_line=81, end_column=56,
                                             law_headings=["Interface du programme", "Épilogue",
                                                           "Décrets divers"]))
    avait_enfant_a_charge_avant_1er_janvier_2012_1978 = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                                                 "avait_enfant_à_charge_avant_1er_janvier_2012"], local_var_1979)
    try:
        try:
            local_var_1989 = enfants_a_charge_1911(Unit())
        except EmptyError:
            try:
                def local_var_1990(_: Any):
                    return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                             start_line=74, start_column=12,
                                                             end_line=74, end_column=28,
                                                             law_headings=["Interface du programme", "Épilogue",
                                                                           "Décrets divers"]), True)

                def local_var_1992(_: Any):
                    def local_var_1994(_: Any):
                        return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                                 start_line=112, start_column=14,
                                                                 end_line=112, end_column=30,
                                                                 law_headings=["Article L131-1",
                                                                               "Interface du programme", "Épilogue",
                                                                               "Décrets divers"]), True)

                    def local_var_1996(_: Any):
                        def local_var_1998(enfant_1999: Any):
                            if ((enfant_1999.d_date_de_naissance +
                                duration_of_numbers(3, 0, 0)) >=
                                    date_courante_1918):
                                local_var_2000 = SituationObligationScolaire(SituationObligationScolaire_Code.Avant,
                                                                             Unit())
                            else:
                                if ((enfant_1999.d_date_de_naissance +
                                    duration_of_numbers(16, 0, 0)) >=
                                        date_courante_1918):
                                    local_var_2000 = SituationObligationScolaire(SituationObligationScolaire_Code.Pendant,
                                                                                 Unit())
                                else:
                                    local_var_2000 = SituationObligationScolaire(SituationObligationScolaire_Code.Apres,
                                                                                 Unit())
                            return Enfant(identifiant=enfant_1999.d_identifiant,
                                          obligation_scolaire=local_var_2000,
                                          remuneration_mensuelle=enfant_1999.d_remuneration_mensuelle,
                                          date_de_naissance=enfant_1999.d_date_de_naissance,
                                          age=year_of_date((date_of_numbers(0, 1, 1) +
                                                            (date_courante_1918 -
                                                             enfant_1999.d_date_de_naissance))),
                                          prise_en_charge=enfant_1999.d_prise_en_charge,
                                          a_deja_ouvert_droit_aux_allocations_familiales=enfant_1999.d_a_deja_ouvert_droit_aux_allocations_familiales)
                        return list_map(local_var_1998, enfants_1928)
                    return handle_default([], local_var_1994, local_var_1996)
                local_var_1989 = handle_default([], local_var_1990,
                                                local_var_1992)
            except EmptyError:
                def local_var_2001(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_2003(_: Any):
                    raise EmptyError
                local_var_1989 = handle_default([], local_var_2001,
                                                local_var_2003)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./epilogue.catala_fr",
                                             start_line=74, start_column=12, end_line=74, end_column=28,
                                             law_headings=["Interface du programme", "Épilogue",
                                                           "Décrets divers"]))
    enfants_a_charge_1988 = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                     "enfants_à_charge"], local_var_1989)

    def local_var_2006(_: Unit):
        try:
            def local_var_2009(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=75, start_column=12,
                                                         end_line=75, end_column=34,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_2011(_: Any):
                def local_var_2013(_: Any):
                    return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                             start_line=90, start_column=20,
                                                             end_line=90, end_column=67,
                                                             law_headings=["Interface du programme", "Épilogue",
                                                                           "Décrets divers"]), personne_charge_effective_permanente_est_parent_1958)

                def local_var_2015(_: Any):
                    return True
                return handle_default([], local_var_2013, local_var_2015)
            local_var_2008 = handle_default([], local_var_2009,
                                            local_var_2011)
        except EmptyError:
            def local_var_2017(_: Any):
                return log_decision_taken(SourcePosition(filename="",
                                                         start_line=0, start_column=1, end_line=0, end_column=1,
                                                         law_headings=[]), True)

            def local_var_2019(_: Any):
                return False
            local_var_2008 = handle_default([], local_var_2017,
                                            local_var_2019)
        return log_variable_definition(["InterfaceAllocationsFamiliales",
                                        "allocations_familiales.personne_charge_effective_permanente_est_parent"],
                                       local_var_2008)
    allocations_familiales_dot_personne_charge_effective_permanente_est_parent_2005 = local_var_2006

    def local_var_2022(_: Unit):
        try:
            def local_var_2025(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=75, start_column=12,
                                                         end_line=75, end_column=34,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_2027(_: Any):
                def local_var_2029(_: Any):
                    return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                             start_line=93, start_column=20,
                                                             end_line=93, end_column=72,
                                                             law_headings=["Interface du programme", "Épilogue",
                                                                           "Décrets divers"]), personne_charge_effective_permanente_remplit_titre__i_1968)

                def local_var_2031(_: Any):
                    return True
                return handle_default([], local_var_2029, local_var_2031)
            local_var_2024 = handle_default([], local_var_2025,
                                            local_var_2027)
        except EmptyError:
            def local_var_2033(_: Any):
                return log_decision_taken(SourcePosition(filename="",
                                                         start_line=0, start_column=1, end_line=0, end_column=1,
                                                         law_headings=[]), True)

            def local_var_2035(_: Any):
                return False
            local_var_2024 = handle_default([], local_var_2033,
                                            local_var_2035)
        return log_variable_definition(["InterfaceAllocationsFamiliales",
                                        "allocations_familiales.personne_charge_effective_permanente_remplit_titre_I"],
                                       local_var_2024)
    allocations_familiales_dot_personne_charge_effective_permanente_remplit_titre__i_2021 = local_var_2022

    def local_var_2038(_: Unit):
        try:
            def local_var_2041(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=75, start_column=12,
                                                         end_line=75, end_column=34,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_2043(_: Any):
                def local_var_2045(_: Any):
                    return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                             start_line=86, start_column=14,
                                                             end_line=86, end_column=54,
                                                             law_headings=["Interface du programme", "Épilogue",
                                                                           "Décrets divers"]), True)

                def local_var_2047(_: Any):
                    return ressources_menage_1938
                return handle_default([], local_var_2045, local_var_2047)
            local_var_2040 = handle_default([], local_var_2041,
                                            local_var_2043)
        except EmptyError:
            def local_var_2049(_: Any):
                return log_decision_taken(SourcePosition(filename="",
                                                         start_line=0, start_column=1, end_line=0, end_column=1,
                                                         law_headings=[]), False)

            def local_var_2051(_: Any):
                raise EmptyError
            local_var_2040 = handle_default([], local_var_2049,
                                            local_var_2051)
        return log_variable_definition(["InterfaceAllocationsFamiliales",
                                        "allocations_familiales.ressources_ménage"], local_var_2040)
    allocations_familiales_dot_ressources_menage_2037 = local_var_2038

    def local_var_2054(_: Unit):
        try:
            def local_var_2057(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=75, start_column=12,
                                                         end_line=75, end_column=34,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_2059(_: Any):
                def local_var_2061(_: Any):
                    return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                             start_line=87, start_column=14,
                                                             end_line=87, end_column=46,
                                                             law_headings=["Interface du programme", "Épilogue",
                                                                           "Décrets divers"]), True)

                def local_var_2063(_: Any):
                    return residence_1948
                return handle_default([], local_var_2061, local_var_2063)
            local_var_2056 = handle_default([], local_var_2057,
                                            local_var_2059)
        except EmptyError:
            def local_var_2065(_: Any):
                return log_decision_taken(SourcePosition(filename="",
                                                         start_line=0, start_column=1, end_line=0, end_column=1,
                                                         law_headings=[]), False)

            def local_var_2067(_: Any):
                raise EmptyError
            local_var_2056 = handle_default([], local_var_2065,
                                            local_var_2067)
        return log_variable_definition(["InterfaceAllocationsFamiliales",
                                        "allocations_familiales.résidence"], local_var_2056)
    allocations_familiales_dot_residence_2053 = local_var_2054

    def local_var_2070(_: Unit):
        try:
            def local_var_2073(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=75, start_column=12,
                                                         end_line=75, end_column=34,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_2075(_: Any):
                def local_var_2077(_: Any):
                    return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                             start_line=84, start_column=14,
                                                             end_line=84, end_column=50,
                                                             law_headings=["Interface du programme", "Épilogue",
                                                                           "Décrets divers"]), True)

                def local_var_2079(_: Any):
                    return date_courante_1918
                return handle_default([], local_var_2077, local_var_2079)
            local_var_2072 = handle_default([], local_var_2073,
                                            local_var_2075)
        except EmptyError:
            def local_var_2081(_: Any):
                return log_decision_taken(SourcePosition(filename="",
                                                         start_line=0, start_column=1, end_line=0, end_column=1,
                                                         law_headings=[]), False)

            def local_var_2083(_: Any):
                raise EmptyError
            local_var_2072 = handle_default([], local_var_2081,
                                            local_var_2083)
        return log_variable_definition(["InterfaceAllocationsFamiliales",
                                        "allocations_familiales.date_courante"], local_var_2072)
    allocations_familiales_dot_date_courante_2069 = local_var_2070

    def local_var_2086(_: Unit):
        try:
            def local_var_2089(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=75, start_column=12,
                                                         end_line=75, end_column=34,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_2091(_: Any):
                def local_var_2093(_: Any):
                    return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                             start_line=85, start_column=14,
                                                             end_line=85, end_column=53,
                                                             law_headings=["Interface du programme", "Épilogue",
                                                                           "Décrets divers"]), True)

                def local_var_2095(_: Any):
                    return enfants_a_charge_1988
                return handle_default([], local_var_2093, local_var_2095)
            local_var_2088 = handle_default([], local_var_2089,
                                            local_var_2091)
        except EmptyError:
            def local_var_2097(_: Any):
                return log_decision_taken(SourcePosition(filename="",
                                                         start_line=0, start_column=1, end_line=0, end_column=1,
                                                         law_headings=[]), False)

            def local_var_2099(_: Any):
                raise EmptyError
            local_var_2088 = handle_default([], local_var_2097,
                                            local_var_2099)
        return log_variable_definition(["InterfaceAllocationsFamiliales",
                                        "allocations_familiales.enfants_à_charge"], local_var_2088)
    allocations_familiales_dot_enfants_a_charge_2085 = local_var_2086

    def local_var_2102(_: Unit):
        try:
            def local_var_2105(_: Any):
                return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                         start_line=75, start_column=12,
                                                         end_line=75, end_column=34,
                                                         law_headings=["Interface du programme", "Épilogue",
                                                                       "Décrets divers"]), True)

            def local_var_2107(_: Any):
                def local_var_2109(_: Any):
                    return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                             start_line=96, start_column=20,
                                                             end_line=96, end_column=64,
                                                             law_headings=["Interface du programme", "Épilogue",
                                                                           "Décrets divers"]), avait_enfant_a_charge_avant_1er_janvier_2012_1978)

                def local_var_2111(_: Any):
                    return True
                return handle_default([], local_var_2109, local_var_2111)
            local_var_2104 = handle_default([], local_var_2105,
                                            local_var_2107)
        except EmptyError:
            def local_var_2113(_: Any):
                return log_decision_taken(SourcePosition(filename="",
                                                         start_line=0, start_column=1, end_line=0, end_column=1,
                                                         law_headings=[]), True)

            def local_var_2115(_: Any):
                return False
            local_var_2104 = handle_default([], local_var_2113,
                                            local_var_2115)
        return log_variable_definition(["InterfaceAllocationsFamiliales",
                                        "allocations_familiales.avait_enfant_à_charge_avant_1er_janvier_2012"],
                                       local_var_2104)
    allocations_familiales_dot_avait_enfant_a_charge_avant_1er_janvier_2012_2101 = local_var_2102

    def local_var_2118(_: Unit):
        raise EmptyError

    def local_var_2120(_: Unit):
        raise EmptyError

    def local_var_2122(_: Unit):
        raise EmptyError

    def local_var_2124(_: Unit):
        raise EmptyError

    def local_var_2126(_: Unit):
        raise EmptyError

    def local_var_2128(_: Unit):
        raise EmptyError

    def local_var_2130(_: Unit):
        raise EmptyError

    def local_var_2132(_: Unit):
        raise EmptyError

    def local_var_2134(_: Unit):
        raise EmptyError

    def local_var_2136(_: Unit):
        raise EmptyError

    def local_var_2138(_: Unit):
        raise EmptyError

    def local_var_2140(_: Unit):
        raise EmptyError

    def local_var_2142(_: Unit):
        raise EmptyError

    def local_var_2144(_: Unit):
        raise EmptyError

    def local_var_2146(_: Unit):
        raise EmptyError

    def local_var_2148(_: Unit):
        raise EmptyError

    def local_var_2150(_: Unit):
        raise EmptyError

    def local_var_2152(_: Unit):
        raise EmptyError

    def local_var_2154(_: Unit):
        raise EmptyError

    def local_var_2156(_: Unit):
        raise EmptyError

    def local_var_2158(_: Unit):
        raise EmptyError

    def local_var_2160(_: Unit):
        raise EmptyError

    def local_var_2162(_: Unit):
        raise EmptyError

    def local_var_2164(_: Unit):
        raise EmptyError

    def local_var_2166(_: Unit):
        raise EmptyError

    def local_var_2168(_: Unit):
        raise EmptyError

    def local_var_2170(_: Unit):
        raise EmptyError

    def local_var_2172(_: Unit):
        raise EmptyError

    def local_var_2174(_: Unit):
        raise EmptyError

    def local_var_2176(_: Unit):
        raise EmptyError

    def local_var_2178(_: Unit):
        raise EmptyError

    def local_var_2180(_: Unit):
        raise EmptyError

    def local_var_2182(_: Unit):
        raise EmptyError

    def local_var_2184(_: Unit):
        raise EmptyError

    def local_var_2186(_: Unit):
        raise EmptyError

    def local_var_2188(_: Unit):
        raise EmptyError

    def local_var_2190(_: Unit):
        raise EmptyError
    result_2117 = log_end_call(["InterfaceAllocationsFamiliales",
                                "allocations_familiales", "AllocationsFamiliales"],
                               log_begin_call(["InterfaceAllocationsFamiliales",
                                               "allocations_familiales", "AllocationsFamiliales"],
                                              allocations_familiales,
                                              AllocationsFamilialesIn(personne_charge_effective_permanente_est_parent_in=allocations_familiales_dot_personne_charge_effective_permanente_est_parent_2005,
                                                                      personne_charge_effective_permanente_remplit_titre_I_in=allocations_familiales_dot_personne_charge_effective_permanente_remplit_titre__i_2021,
                                                                      ressources_menage_in=allocations_familiales_dot_ressources_menage_2037,
                                                                      residence_in=allocations_familiales_dot_residence_2053,
                                                                      date_courante_in=allocations_familiales_dot_date_courante_2069,
                                                                      enfants_a_charge_in=allocations_familiales_dot_enfants_a_charge_2085,
                                                                      enfants_a_charge_droit_ouvert_prestation_familiale_in=local_var_2118,
                                                                      prise_en_compte_in=local_var_2120, versement_in=local_var_2122,
                                                                      montant_verse_in=local_var_2124,
                                                                      droit_ouvert_base_in=local_var_2126,
                                                                      montant_initial_base_in=local_var_2128,
                                                                      montant_initial_base_premier_enfant_in=local_var_2130,
                                                                      montant_initial_base_deuxieme_enfant_in=local_var_2132,
                                                                      montant_initial_base_troisieme_enfant_et_plus_in=local_var_2134,
                                                                      rapport_enfants_total_moyen_in=local_var_2136,
                                                                      nombre_moyen_enfants_in=local_var_2138,
                                                                      nombre_total_enfants_in=local_var_2140,
                                                                      montant_avec_garde_alternee_base_in=local_var_2142,
                                                                      montant_verse_base_in=local_var_2144,
                                                                      avait_enfant_a_charge_avant_1er_janvier_2012_in=allocations_familiales_dot_avait_enfant_a_charge_avant_1er_janvier_2012_2101,
                                                                      montant_initial_base_premier_enfant_mayotte_in=local_var_2146,
                                                                      montant_initial_base_deuxieme_enfant_mayotte_in=local_var_2148,
                                                                      montant_initial_base_troisieme_enfant_mayotte_in=local_var_2150,
                                                                      montant_initial_base_quatrieme_enfant_et_plus_mayotte_in=local_var_2152,
                                                                      droit_ouvert_forfaitaire_in=local_var_2154,
                                                                      montant_verse_forfaitaire_par_enfant_in=local_var_2156,
                                                                      montant_verse_forfaitaire_in=local_var_2158,
                                                                      droit_ouvert_majoration_in=local_var_2160,
                                                                      montant_initial_metropole_majoration_in=local_var_2162,
                                                                      montant_initial_majoration_in=local_var_2164,
                                                                      montant_avec_garde_alternee_majoration_in=local_var_2166,
                                                                      montant_verse_majoration_in=local_var_2168,
                                                                      droit_ouvert_complement_in=local_var_2170,
                                                                      montant_base_complement_pour_base_et_majoration_in=local_var_2172,
                                                                      complement_degressif_in=local_var_2174,
                                                                      montant_verse_complement_pour_base_et_majoration_in=local_var_2176,
                                                                      montant_verse_complement_pour_forfaitaire_in=local_var_2178,
                                                                      nombre_enfants_l521_1_in=local_var_2180,
                                                                      age_minimum_alinea_1_l521_3_in=local_var_2182,
                                                                      nombre_enfants_alinea_2_l521_3_in=local_var_2184,
                                                                      est_enfant_le_plus_age_in=local_var_2186,
                                                                      plafond_I_d521_3_in=local_var_2188,
                                                                      plafond_II_d521_3_in=local_var_2190)))
    allocations_familiales_dot_personne_charge_effective_permanente_est_parent_2192 = result_2117.personne_charge_effective_permanente_est_parent_out
    allocations_familiales_dot_personne_charge_effective_permanente_remplit_titre__i_2193 = result_2117.personne_charge_effective_permanente_remplit_titre_I_out
    allocations_familiales_dot_ressources_menage_2194 = result_2117.ressources_menage_out
    allocations_familiales_dot_residence_2195 = result_2117.residence_out
    allocations_familiales_dot_date_courante_2196 = result_2117.date_courante_out
    allocations_familiales_dot_enfants_a_charge_2197 = result_2117.enfants_a_charge_out
    allocations_familiales_dot_enfants_a_charge_droit_ouvert_prestation_familiale_2198 = result_2117.enfants_a_charge_droit_ouvert_prestation_familiale_out
    allocations_familiales_dot_prise_en_compte_2199 = result_2117.prise_en_compte_out
    allocations_familiales_dot_versement_2200 = result_2117.versement_out
    allocations_familiales_dot_montant_verse_2201 = result_2117.montant_verse_out
    allocations_familiales_dot_droit_ouvert_base_2202 = result_2117.droit_ouvert_base_out
    allocations_familiales_dot_montant_initial_base_2203 = result_2117.montant_initial_base_out
    allocations_familiales_dot_montant_initial_base_premier_enfant_2204 = result_2117.montant_initial_base_premier_enfant_out
    allocations_familiales_dot_montant_initial_base_deuxieme_enfant_2205 = result_2117.montant_initial_base_deuxieme_enfant_out
    allocations_familiales_dot_montant_initial_base_troisieme_enfant_et_plus_2206 = result_2117.montant_initial_base_troisieme_enfant_et_plus_out
    allocations_familiales_dot_rapport_enfants_total_moyen_2207 = result_2117.rapport_enfants_total_moyen_out
    allocations_familiales_dot_nombre_moyen_enfants_2208 = result_2117.nombre_moyen_enfants_out
    allocations_familiales_dot_nombre_total_enfants_2209 = result_2117.nombre_total_enfants_out
    allocations_familiales_dot_montant_avec_garde_alternee_base_2210 = result_2117.montant_avec_garde_alternee_base_out
    allocations_familiales_dot_montant_verse_base_2211 = result_2117.montant_verse_base_out
    allocations_familiales_dot_avait_enfant_a_charge_avant_1er_janvier_2012_2212 = result_2117.avait_enfant_a_charge_avant_1er_janvier_2012_out
    allocations_familiales_dot_montant_initial_base_premier_enfant_mayotte_2213 = result_2117.montant_initial_base_premier_enfant_mayotte_out
    allocations_familiales_dot_montant_initial_base_deuxieme_enfant_mayotte_2214 = result_2117.montant_initial_base_deuxieme_enfant_mayotte_out
    allocations_familiales_dot_montant_initial_base_troisieme_enfant_mayotte_2215 = result_2117.montant_initial_base_troisieme_enfant_mayotte_out
    allocations_familiales_dot_montant_initial_base_quatrieme_enfant_et_plus_mayotte_2216 = result_2117.montant_initial_base_quatrieme_enfant_et_plus_mayotte_out
    allocations_familiales_dot_droit_ouvert_forfaitaire_2217 = result_2117.droit_ouvert_forfaitaire_out
    allocations_familiales_dot_montant_verse_forfaitaire_par_enfant_2218 = result_2117.montant_verse_forfaitaire_par_enfant_out
    allocations_familiales_dot_montant_verse_forfaitaire_2219 = result_2117.montant_verse_forfaitaire_out
    allocations_familiales_dot_droit_ouvert_majoration_2220 = result_2117.droit_ouvert_majoration_out
    allocations_familiales_dot_montant_initial_metropole_majoration_2221 = result_2117.montant_initial_metropole_majoration_out
    allocations_familiales_dot_montant_initial_majoration_2222 = result_2117.montant_initial_majoration_out
    allocations_familiales_dot_montant_avec_garde_alternee_majoration_2223 = result_2117.montant_avec_garde_alternee_majoration_out
    allocations_familiales_dot_montant_verse_majoration_2224 = result_2117.montant_verse_majoration_out
    allocations_familiales_dot_droit_ouvert_complement_2225 = result_2117.droit_ouvert_complement_out
    allocations_familiales_dot_montant_base_complement_pour_base_et_majoration_2226 = result_2117.montant_base_complement_pour_base_et_majoration_out
    allocations_familiales_dot_complement_degressif_2227 = result_2117.complement_degressif_out
    allocations_familiales_dot_montant_verse_complement_pour_base_et_majoration_2228 = result_2117.montant_verse_complement_pour_base_et_majoration_out
    allocations_familiales_dot_montant_verse_complement_pour_forfaitaire_2229 = result_2117.montant_verse_complement_pour_forfaitaire_out
    allocations_familiales_dot_nombre_enfants_l521_1_2230 = result_2117.nombre_enfants_l521_1_out
    allocations_familiales_dot_age_minimum_alinea_1_l521_3_2231 = result_2117.age_minimum_alinea_1_l521_3_out
    allocations_familiales_dot_nombre_enfants_alinea_2_l521_3_2232 = result_2117.nombre_enfants_alinea_2_l521_3_out
    allocations_familiales_dot_est_enfant_le_plus_age_2233 = result_2117.est_enfant_le_plus_age_out
    allocations_familiales_dot_plafond__i_d521_3_2234 = result_2117.plafond_I_d521_3_out
    allocations_familiales_dot_plafond__i_i_d521_3_2235 = result_2117.plafond_II_d521_3_out
    try:
        try:
            local_var_2237 = montant_verse_1914(Unit())
        except EmptyError:
            try:
                def local_var_2238(_: Any):
                    return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                             start_line=78, start_column=12,
                                                             end_line=78, end_column=25,
                                                             law_headings=["Interface du programme", "Épilogue",
                                                                           "Décrets divers"]), True)

                def local_var_2240(_: Any):
                    def local_var_2242(_: Any):
                        return log_decision_taken(SourcePosition(filename="./epilogue.catala_fr",
                                                                 start_line=88, start_column=14,
                                                                 end_line=88, end_column=27,
                                                                 law_headings=["Interface du programme",
                                                                               "Épilogue", "Décrets divers"]), True)

                    def local_var_2244(_: Any):
                        return allocations_familiales_dot_montant_verse_2201
                    return handle_default([], local_var_2242, local_var_2244)
                local_var_2237 = handle_default([], local_var_2238,
                                                local_var_2240)
            except EmptyError:
                def local_var_2246(_: Any):
                    return log_decision_taken(SourcePosition(filename="",
                                                             start_line=0, start_column=1,
                                                             end_line=0, end_column=1, law_headings=[]), False)

                def local_var_2248(_: Any):
                    raise EmptyError
                local_var_2237 = handle_default([], local_var_2246,
                                                local_var_2248)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="./epilogue.catala_fr",
                                             start_line=78, start_column=12, end_line=78, end_column=25,
                                             law_headings=["Interface du programme", "Épilogue",
                                                           "Décrets divers"]))
    montant_verse_2236 = log_variable_definition(["InterfaceAllocationsFamiliales",
                                                  "montant_versé"], local_var_2237)
    return InterfaceAllocationsFamilialesOut(date_courante_out=date_courante_1918,
                                             enfants_out=enfants_1928,
                                             enfants_a_charge_out=enfants_a_charge_1988,
                                             ressources_menage_out=ressources_menage_1938,
                                             residence_out=residence_1948,
                                             montant_verse_out=montant_verse_2236,
                                             personne_charge_effective_permanente_est_parent_out=personne_charge_effective_permanente_est_parent_1958,
                                             personne_charge_effective_permanente_remplit_titre_I_out=personne_charge_effective_permanente_remplit_titre__i_1968,
                                             avait_enfant_a_charge_avant_1er_janvier_2012_out=avait_enfant_a_charge_avant_1er_janvier_2012_1978)

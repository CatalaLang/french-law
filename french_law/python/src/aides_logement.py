# This file has been generated by the Catala compiler, do not edit!

from catala.runtime import *
from typing import Any, List, Callable, Tuple
from enum import Enum

class TypePret_Code(Enum):
    D331_32 = 0
    D331_63_64 = 1
    D331_59_8 = 2
    D331_76_1 = 3
    Autre = 4

class TypePret:
    def __init__(self, code: TypePret_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypePret):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class TitulairePret_Code(Enum):
    Demandeur = 0
    VendeurQuandDemandeurAContratLocationAccession = 1

class TitulairePret:
    def __init__(self, code: TitulairePret_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, TitulairePret):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class TypeTravauxLogementD83215_Code(Enum):
    TravauxPourAcquisitionD832_15_1 = 0
    TravauxSurLogementDejaAcquisD832_15_2 = 1
    PasDeTravaux = 2

class TypeTravauxLogementD83215:
    def __init__(self, code: TypeTravauxLogementD83215_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypeTravauxLogementD83215):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class TypeTravauxLogementR8425_Code(Enum):
    ObjectifDecenceLogement = 0
    PrevuDansListeR321_15 = 1
    AgrandirOuRendreHabitableD331_63 = 2
    PasDeTravaux = 3

class TypeTravauxLogementR8425:
    def __init__(self, code: TypeTravauxLogementR8425_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypeTravauxLogementR8425):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class AmelioreParOccupant_Code(Enum):
    Oui = 0
    Non = 1

class AmelioreParOccupant:
    def __init__(self, code: AmelioreParOccupant_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, AmelioreParOccupant):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class LimiteTranche_Code(Enum):
    Revenu = 0
    Infini = 1

class LimiteTranche:
    def __init__(self, code: LimiteTranche_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, LimiteTranche):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class LimiteTrancheDecimal_Code(Enum):
    Revenu = 0
    Infini = 1

class LimiteTrancheDecimal:
    def __init__(self, code: LimiteTrancheDecimal_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, LimiteTrancheDecimal):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class PrestationRecue_Code(Enum):
    AllocationsFamiliales = 0
    ComplementFamilial = 1
    AllocationSoutienFamilial = 2
    AllocationSoutienEnfantHandicape = 3

class PrestationRecue:
    def __init__(self, code: PrestationRecue_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, PrestationRecue):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class ParentOuAutre_Code(Enum):
    DemandeurOuConjointOuParentOuViaPartsSocietes = 0
    Autre = 1

class ParentOuAutre:
    def __init__(self, code: ParentOuAutre_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, ParentOuAutre):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class SituationGardeAlternee_Code(Enum):
    PasDeGardeAlternee = 0
    GardeAlterneeCoefficientPriseEnCharge = 1

class SituationGardeAlternee:
    def __init__(self, code: SituationGardeAlternee_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, SituationGardeAlternee):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class Parente_Code(Enum):
    Ascendant = 0
    Descendant = 1
    CollateralDeuxiemeTroisiemeDegre = 2

class Parente:
    def __init__(self, code: Parente_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, Parente):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class DateDeNaissanceOuMoisDeGrossesse_Code(Enum):
    DateDeNaissance = 0
    AvantPremierJourMoisCivilTroisiemeMoisDeGrossesse = 1
    ApresPremierJourMoisCivilTroisiemeMoisDeGrossesse = 2

class DateDeNaissanceOuMoisDeGrossesse:
    def __init__(self, code: DateDeNaissanceOuMoisDeGrossesse_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, DateDeNaissanceOuMoisDeGrossesse):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class ZoneDHabitation_Code(Enum):
    Zone1 = 0
    Zone2 = 1
    Zone3 = 2

class ZoneDHabitation:
    def __init__(self, code: ZoneDHabitation_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, ZoneDHabitation):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class VersementA_Code(Enum):
    Bailleur = 0
    Beneficiaire = 1
    EtablissementHabilite = 2

class VersementA:
    def __init__(self, code: VersementA_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, VersementA):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class DepenseLogement_Code(Enum):
    TotalAnnuelEcheances = 0
    Mensualite = 1
    Loyer = 2

class DepenseLogement:
    def __init__(self, code: DepenseLogement_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, DepenseLogement):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class ModeOccupationImpaye_Code(Enum):
    ImpayeLoyer = 0
    ImpayePret = 1

class ModeOccupationImpaye:
    def __init__(self, code: ModeOccupationImpaye_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, ModeOccupationImpaye):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class TypeEligibiliteAllocationLogement_Code(Enum):
    PasEligible = 0
    AllocationLogementFamiliale = 1
    AllocationLogementSociale = 2

class TypeEligibiliteAllocationLogement:
    def __init__(self, code: TypeEligibiliteAllocationLogement_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypeEligibiliteAllocationLogement):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class AccordFinancementRepresentantEtatOutreMer_Code(Enum):
    Accord = 0
    PasdAccord = 1

class AccordFinancementRepresentantEtatOutreMer:
    def __init__(self, code: AccordFinancementRepresentantEtatOutreMer_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, AccordFinancementRepresentantEtatOutreMer):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class TypeAidesPersonnelleLogement_Code(Enum):
    AidePersonnaliseeLogement = 0
    AllocationLogementFamiliale = 1
    AllocationLogementSociale = 2

class TypeAidesPersonnelleLogement:
    def __init__(self, code: TypeAidesPersonnelleLogement_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypeAidesPersonnelleLogement):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class SituationFamiliale_Code(Enum):
    Celibataire = 0
    Maries = 1
    Pacses = 2
    Concubins = 3
    CelibataireSepareDeFait = 4
    ConcubinageDontSepareDeFait = 5

class SituationFamiliale:
    def __init__(self, code: SituationFamiliale_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, SituationFamiliale):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class TypeLogementFoyer_Code(Enum):
    LogementPersonnesAgeesOuHandicapees = 0
    ResidenceSociale = 1
    FoyerJeunesTravailleursOuMigrantsConventionneL353_2Avant1995 = 2
    Autre = 3

class TypeLogementFoyer:
    def __init__(self, code: TypeLogementFoyer_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypeLogementFoyer):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class CategorieEquivalenceLoyerAllocationLogementFoyer_Code(Enum):
    EtudiantLogeEnChambreCROUS = 0
    EtudiantLogeEnChambreCROUSRehabilitee = 1
    PersonnesAgeesSelon3DeD842_16 = 2
    AutresPersonnes = 3

class CategorieEquivalenceLoyerAllocationLogementFoyer:
    def __init__(self, code: CategorieEquivalenceLoyerAllocationLogementFoyer_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, CategorieEquivalenceLoyerAllocationLogementFoyer):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class SituationFamilialeCalculAPL_Code(Enum):
    PersonneSeule = 0
    Couple = 1

class SituationFamilialeCalculAPL:
    def __init__(self, code: SituationFamilialeCalculAPL_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, SituationFamilialeCalculAPL):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class Collectivite_Code(Enum):
    Guadeloupe = 0
    Guyane = 1
    Martinique = 2
    LaReunion = 3
    SaintBarthelemy = 4
    SaintMartin = 5
    Metropole = 6
    SaintPierreEtMiquelon = 7
    Mayotte = 8

class Collectivite:
    def __init__(self, code: Collectivite_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, Collectivite):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class SituationObligationScolaire_Code(Enum):
    Avant = 0
    Pendant = 1
    Apres = 2

class SituationObligationScolaire:
    def __init__(self, code: SituationObligationScolaire_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, SituationObligationScolaire):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class ConventionBailleurSocial:
    def __init__(self, conventionne_livre_III_titre_V_chap_III: bool, reduction_loyer_solidarite_percue: Money) -> None:
        self.conventionne_livre_III_titre_V_chap_III = conventionne_livre_III_titre_V_chap_III
        self.reduction_loyer_solidarite_percue = reduction_loyer_solidarite_percue

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ConventionBailleurSocial):
            return (self.conventionne_livre_III_titre_V_chap_III == other.conventionne_livre_III_titre_V_chap_III and
                   self.reduction_loyer_solidarite_percue == other.reduction_loyer_solidarite_percue)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "ConventionBailleurSocial(conventionne_livre_III_titre_V_chap_III={},reduction_loyer_solidarite_percue={})".format(self.conventionne_livre_III_titre_V_chap_III,
            self.reduction_loyer_solidarite_percue)

class ConventionANHA:
    def __init__(self, conventionne_livre_III_titre_II_chap_I_sec_3: bool) -> None:
        self.conventionne_livre_III_titre_II_chap_I_sec_3 = conventionne_livre_III_titre_II_chap_I_sec_3

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ConventionANHA):
            return (self.conventionne_livre_III_titre_II_chap_I_sec_3 == other.conventionne_livre_III_titre_II_chap_I_sec_3)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "ConventionANHA(conventionne_livre_III_titre_II_chap_I_sec_3={})".format(self.conventionne_livre_III_titre_II_chap_I_sec_3)

class PersonneSousLocation:
    def __init__(self, date_naissance_personne_sous_location: Date, conforme_article_l442_1: bool) -> None:
        self.date_naissance_personne_sous_location = date_naissance_personne_sous_location
        self.conforme_article_l442_1 = conforme_article_l442_1

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PersonneSousLocation):
            return (self.date_naissance_personne_sous_location == other.date_naissance_personne_sous_location and
                   self.conforme_article_l442_1 == other.conforme_article_l442_1)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "PersonneSousLocation(date_naissance_personne_sous_location={},conforme_article_l442_1={})".format(self.date_naissance_personne_sous_location,
            self.conforme_article_l442_1)

class ConditionsEtrangers:
    def __init__(self, satisfait_conditions_l512_2_code_securite_sociale: bool, satisfait_art_4_ordonnance_2002_mayotte: bool) -> None:
        self.satisfait_conditions_l512_2_code_securite_sociale = satisfait_conditions_l512_2_code_securite_sociale
        self.satisfait_art_4_ordonnance_2002_mayotte = satisfait_art_4_ordonnance_2002_mayotte

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ConditionsEtrangers):
            return (self.satisfait_conditions_l512_2_code_securite_sociale == other.satisfait_conditions_l512_2_code_securite_sociale and
                   self.satisfait_art_4_ordonnance_2002_mayotte == other.satisfait_art_4_ordonnance_2002_mayotte)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "ConditionsEtrangers(satisfait_conditions_l512_2_code_securite_sociale={},satisfait_art_4_ordonnance_2002_mayotte={})".format(self.satisfait_conditions_l512_2_code_securite_sociale,
            self.satisfait_art_4_ordonnance_2002_mayotte)

class EligibiliteAidePersonnaliseeLogement:
    def __init__(self, date_courante: Date, eligibilite: bool, nombre_personnes_a_charge_prises_en_compte: Integer, coefficents_enfants_garde_alternee_pris_en_compte: List[Decimal]) -> None:
        self.date_courante = date_courante
        self.eligibilite = eligibilite
        self.nombre_personnes_a_charge_prises_en_compte = nombre_personnes_a_charge_prises_en_compte
        self.coefficents_enfants_garde_alternee_pris_en_compte = coefficents_enfants_garde_alternee_pris_en_compte

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibiliteAidePersonnaliseeLogement):
            return (self.date_courante == other.date_courante and
                   self.eligibilite == other.eligibilite and
                   self.nombre_personnes_a_charge_prises_en_compte == other.nombre_personnes_a_charge_prises_en_compte and
                   self.coefficents_enfants_garde_alternee_pris_en_compte == other.coefficents_enfants_garde_alternee_pris_en_compte)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibiliteAidePersonnaliseeLogement(date_courante={},eligibilite={},nombre_personnes_a_charge_prises_en_compte={},coefficents_enfants_garde_alternee_pris_en_compte={})".format(self.date_courante,
            self.eligibilite,
            self.nombre_personnes_a_charge_prises_en_compte,
            self.coefficents_enfants_garde_alternee_pris_en_compte)

class EligibilitePrimeDeDemenagement:
    def __init__(self, eligibilite: bool, montant_prime_demenagement: Money) -> None:
        self.eligibilite = eligibilite
        self.montant_prime_demenagement = montant_prime_demenagement

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibilitePrimeDeDemenagement):
            return (self.eligibilite == other.eligibilite and
                   self.montant_prime_demenagement == other.montant_prime_demenagement)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibilitePrimeDeDemenagement(eligibilite={},montant_prime_demenagement={})".format(self.eligibilite,
            self.montant_prime_demenagement)

class ContributionsSocialesAidesPersonnelleLogement:
    def __init__(self, montant: Callable[[Money], Money]) -> None:
        self.montant = montant

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ContributionsSocialesAidesPersonnelleLogement):
            return (self.montant == other.montant)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "ContributionsSocialesAidesPersonnelleLogement(montant={})".format(self.montant)

class CalculAidePersonnaliseeLogementLocatif:
    def __init__(self, montant_forfaitaire_charges_d823_16: Money, plafond_loyer_d823_16_2: Money, participation_minimale: Money, taux_composition_familiale: Decimal, participation_personnelle: Money, aide_finale_formule: Money, traitement_aide_finale: Callable[[Money], Money]) -> None:
        self.montant_forfaitaire_charges_d823_16 = montant_forfaitaire_charges_d823_16
        self.plafond_loyer_d823_16_2 = plafond_loyer_d823_16_2
        self.participation_minimale = participation_minimale
        self.taux_composition_familiale = taux_composition_familiale
        self.participation_personnelle = participation_personnelle
        self.aide_finale_formule = aide_finale_formule
        self.traitement_aide_finale = traitement_aide_finale

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementLocatif):
            return (self.montant_forfaitaire_charges_d823_16 == other.montant_forfaitaire_charges_d823_16 and
                   self.plafond_loyer_d823_16_2 == other.plafond_loyer_d823_16_2 and
                   self.participation_minimale == other.participation_minimale and
                   self.taux_composition_familiale == other.taux_composition_familiale and
                   self.participation_personnelle == other.participation_personnelle and
                   self.aide_finale_formule == other.aide_finale_formule and
                   self.traitement_aide_finale == other.traitement_aide_finale)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementLocatif(montant_forfaitaire_charges_d823_16={},plafond_loyer_d823_16_2={},participation_minimale={},taux_composition_familiale={},participation_personnelle={},aide_finale_formule={},traitement_aide_finale={})".format(self.montant_forfaitaire_charges_d823_16,
            self.plafond_loyer_d823_16_2, self.participation_minimale,
            self.taux_composition_familiale, self.participation_personnelle,
            self.aide_finale_formule, self.traitement_aide_finale)

class CalculEquivalenceLoyerMinimale:
    def __init__(self, montant: Money) -> None:
        self.montant = montant

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculEquivalenceLoyerMinimale):
            return (self.montant == other.montant)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculEquivalenceLoyerMinimale(montant={})".format(self.montant)

class CalculNombrePartLogementFoyer:
    def __init__(self, n_nombre_parts_d832_25: Decimal) -> None:
        self.n_nombre_parts_d832_25 = n_nombre_parts_d832_25

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculNombrePartLogementFoyer):
            return (self.n_nombre_parts_d832_25 == other.n_nombre_parts_d832_25)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculNombrePartLogementFoyer(n_nombre_parts_d832_25={})".format(self.n_nombre_parts_d832_25)

class CalculAidePersonnaliseeLogementFoyer:
    def __init__(self, coefficient_multiplicateur_d832_25: Money, coefficient_r_d832_25: Money, n_nombre_parts_d832_25: Decimal, equivalence_loyer_eligible: Money, plafond_equivalence_loyer_eligible: Money, equivalence_loyer_minimale: Money, coefficient_prise_en_charge_d832_25: Decimal, aide_finale_formule: Money, traitement_aide_finale: Callable[[Money], Money]) -> None:
        self.coefficient_multiplicateur_d832_25 = coefficient_multiplicateur_d832_25
        self.coefficient_r_d832_25 = coefficient_r_d832_25
        self.n_nombre_parts_d832_25 = n_nombre_parts_d832_25
        self.equivalence_loyer_eligible = equivalence_loyer_eligible
        self.plafond_equivalence_loyer_eligible = plafond_equivalence_loyer_eligible
        self.equivalence_loyer_minimale = equivalence_loyer_minimale
        self.coefficient_prise_en_charge_d832_25 = coefficient_prise_en_charge_d832_25
        self.aide_finale_formule = aide_finale_formule
        self.traitement_aide_finale = traitement_aide_finale

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementFoyer):
            return (self.coefficient_multiplicateur_d832_25 == other.coefficient_multiplicateur_d832_25 and
                   self.coefficient_r_d832_25 == other.coefficient_r_d832_25 and
                   self.n_nombre_parts_d832_25 == other.n_nombre_parts_d832_25 and
                   self.equivalence_loyer_eligible == other.equivalence_loyer_eligible and
                   self.plafond_equivalence_loyer_eligible == other.plafond_equivalence_loyer_eligible and
                   self.equivalence_loyer_minimale == other.equivalence_loyer_minimale and
                   self.coefficient_prise_en_charge_d832_25 == other.coefficient_prise_en_charge_d832_25 and
                   self.aide_finale_formule == other.aide_finale_formule and
                   self.traitement_aide_finale == other.traitement_aide_finale)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementFoyer(coefficient_multiplicateur_d832_25={},coefficient_r_d832_25={},n_nombre_parts_d832_25={},equivalence_loyer_eligible={},plafond_equivalence_loyer_eligible={},equivalence_loyer_minimale={},coefficient_prise_en_charge_d832_25={},aide_finale_formule={},traitement_aide_finale={})".format(self.coefficient_multiplicateur_d832_25,
            self.coefficient_r_d832_25, self.n_nombre_parts_d832_25,
            self.equivalence_loyer_eligible,
            self.plafond_equivalence_loyer_eligible,
            self.equivalence_loyer_minimale,
            self.coefficient_prise_en_charge_d832_25,
            self.aide_finale_formule, self.traitement_aide_finale)

class CalculNombrePartsAccessionPropriete:
    def __init__(self, n_nombre_parts_d832_11: Decimal) -> None:
        self.n_nombre_parts_d832_11 = n_nombre_parts_d832_11

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculNombrePartsAccessionPropriete):
            return (self.n_nombre_parts_d832_11 == other.n_nombre_parts_d832_11)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculNombrePartsAccessionPropriete(n_nombre_parts_d832_11={})".format(self.n_nombre_parts_d832_11)

class CalculAidePersonnaliseeLogementAccessionPropriete:
    def __init__(self, mensualite_eligible: Money, mensualite_minimale: Money, coefficient_prise_en_charge_d832_10: Decimal, aide_finale_formule: Money, traitement_aide_finale: Callable[[Money], Money]) -> None:
        self.mensualite_eligible = mensualite_eligible
        self.mensualite_minimale = mensualite_minimale
        self.coefficient_prise_en_charge_d832_10 = coefficient_prise_en_charge_d832_10
        self.aide_finale_formule = aide_finale_formule
        self.traitement_aide_finale = traitement_aide_finale

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementAccessionPropriete):
            return (self.mensualite_eligible == other.mensualite_eligible and
                   self.mensualite_minimale == other.mensualite_minimale and
                   self.coefficient_prise_en_charge_d832_10 == other.coefficient_prise_en_charge_d832_10 and
                   self.aide_finale_formule == other.aide_finale_formule and
                   self.traitement_aide_finale == other.traitement_aide_finale)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementAccessionPropriete(mensualite_eligible={},mensualite_minimale={},coefficient_prise_en_charge_d832_10={},aide_finale_formule={},traitement_aide_finale={})".format(self.mensualite_eligible,
            self.mensualite_minimale,
            self.coefficient_prise_en_charge_d832_10,
            self.aide_finale_formule, self.traitement_aide_finale)

class TraitementFormuleAideFinale:
    def __init__(self, aide_finale_formule: Money, traitement_aide_finale: Callable[[Money], Money]) -> None:
        self.aide_finale_formule = aide_finale_formule
        self.traitement_aide_finale = traitement_aide_finale

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TraitementFormuleAideFinale):
            return (self.aide_finale_formule == other.aide_finale_formule and
                   self.traitement_aide_finale == other.traitement_aide_finale)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "TraitementFormuleAideFinale(aide_finale_formule={},traitement_aide_finale={})".format(self.aide_finale_formule,
            self.traitement_aide_finale)

class CalculAidePersonnaliseeLogement:
    def __init__(self, aide_finale_formule: Money, traitement_aide_finale: Callable[[Money], Money]) -> None:
        self.aide_finale_formule = aide_finale_formule
        self.traitement_aide_finale = traitement_aide_finale

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogement):
            return (self.aide_finale_formule == other.aide_finale_formule and
                   self.traitement_aide_finale == other.traitement_aide_finale)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogement(aide_finale_formule={},traitement_aide_finale={})".format(self.aide_finale_formule,
            self.traitement_aide_finale)

class InfosChangementLogementD8424:
    def __init__(self, ancien_loyer_principal: Money, ancienne_allocation_logement: Money) -> None:
        self.ancien_loyer_principal = ancien_loyer_principal
        self.ancienne_allocation_logement = ancienne_allocation_logement

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InfosChangementLogementD8424):
            return (self.ancien_loyer_principal == other.ancien_loyer_principal and
                   self.ancienne_allocation_logement == other.ancienne_allocation_logement)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "InfosChangementLogementD8424(ancien_loyer_principal={},ancienne_allocation_logement={})".format(self.ancien_loyer_principal,
            self.ancienne_allocation_logement)

class CalculAllocationLogementLocatif:
    def __init__(self, aide_finale_formule: Money, traitement_aide_finale: Callable[[Money], Money], montant_forfaitaire_charges_d823_16: Money, plafond_loyer_d823_16_2: Money, participation_minimale: Money, taux_composition_familiale: Decimal, participation_personnelle: Money) -> None:
        self.aide_finale_formule = aide_finale_formule
        self.traitement_aide_finale = traitement_aide_finale
        self.montant_forfaitaire_charges_d823_16 = montant_forfaitaire_charges_d823_16
        self.plafond_loyer_d823_16_2 = plafond_loyer_d823_16_2
        self.participation_minimale = participation_minimale
        self.taux_composition_familiale = taux_composition_familiale
        self.participation_personnelle = participation_personnelle

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementLocatif):
            return (self.aide_finale_formule == other.aide_finale_formule and
                   self.traitement_aide_finale == other.traitement_aide_finale and
                   self.montant_forfaitaire_charges_d823_16 == other.montant_forfaitaire_charges_d823_16 and
                   self.plafond_loyer_d823_16_2 == other.plafond_loyer_d823_16_2 and
                   self.participation_minimale == other.participation_minimale and
                   self.taux_composition_familiale == other.taux_composition_familiale and
                   self.participation_personnelle == other.participation_personnelle)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementLocatif(aide_finale_formule={},traitement_aide_finale={},montant_forfaitaire_charges_d823_16={},plafond_loyer_d823_16_2={},participation_minimale={},taux_composition_familiale={},participation_personnelle={})".format(self.aide_finale_formule,
            self.traitement_aide_finale,
            self.montant_forfaitaire_charges_d823_16,
            self.plafond_loyer_d823_16_2, self.participation_minimale,
            self.taux_composition_familiale, self.participation_personnelle)

class CalculAllocationLogementAccessionPropriete:
    def __init__(self, mensualite_eligible: Money, mensualite_minimale: Money, coefficient_prise_en_charge: Decimal, aide_finale_formule: Money, traitement_aide_finale: Callable[[Money], Money]) -> None:
        self.mensualite_eligible = mensualite_eligible
        self.mensualite_minimale = mensualite_minimale
        self.coefficient_prise_en_charge = coefficient_prise_en_charge
        self.aide_finale_formule = aide_finale_formule
        self.traitement_aide_finale = traitement_aide_finale

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementAccessionPropriete):
            return (self.mensualite_eligible == other.mensualite_eligible and
                   self.mensualite_minimale == other.mensualite_minimale and
                   self.coefficient_prise_en_charge == other.coefficient_prise_en_charge and
                   self.aide_finale_formule == other.aide_finale_formule and
                   self.traitement_aide_finale == other.traitement_aide_finale)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementAccessionPropriete(mensualite_eligible={},mensualite_minimale={},coefficient_prise_en_charge={},aide_finale_formule={},traitement_aide_finale={})".format(self.mensualite_eligible,
            self.mensualite_minimale, self.coefficient_prise_en_charge,
            self.aide_finale_formule, self.traitement_aide_finale)

class CalculAllocationLogementFoyer:
    def __init__(self, coefficient_prise_en_charge: Decimal, equivalence_loyer: Money, montant_forfaitaire_charges: Money, loyer_minimal: Money, aide_finale_formule: Money, traitement_aide_finale: Callable[[Money], Money]) -> None:
        self.coefficient_prise_en_charge = coefficient_prise_en_charge
        self.equivalence_loyer = equivalence_loyer
        self.montant_forfaitaire_charges = montant_forfaitaire_charges
        self.loyer_minimal = loyer_minimal
        self.aide_finale_formule = aide_finale_formule
        self.traitement_aide_finale = traitement_aide_finale

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementFoyer):
            return (self.coefficient_prise_en_charge == other.coefficient_prise_en_charge and
                   self.equivalence_loyer == other.equivalence_loyer and
                   self.montant_forfaitaire_charges == other.montant_forfaitaire_charges and
                   self.loyer_minimal == other.loyer_minimal and
                   self.aide_finale_formule == other.aide_finale_formule and
                   self.traitement_aide_finale == other.traitement_aide_finale)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementFoyer(coefficient_prise_en_charge={},equivalence_loyer={},montant_forfaitaire_charges={},loyer_minimal={},aide_finale_formule={},traitement_aide_finale={})".format(self.coefficient_prise_en_charge,
            self.equivalence_loyer, self.montant_forfaitaire_charges,
            self.loyer_minimal, self.aide_finale_formule,
            self.traitement_aide_finale)

class CalculAllocationLogement:
    def __init__(self, aide_finale_formule: Money, traitement_aide_finale: Callable[[Money], Money]) -> None:
        self.aide_finale_formule = aide_finale_formule
        self.traitement_aide_finale = traitement_aide_finale

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogement):
            return (self.aide_finale_formule == other.aide_finale_formule and
                   self.traitement_aide_finale == other.traitement_aide_finale)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogement(aide_finale_formule={},traitement_aide_finale={})".format(self.aide_finale_formule,
            self.traitement_aide_finale)

class OuvertureDroitsRetraite:
    def __init__(self, age_ouverture_droit: Duration) -> None:
        self.age_ouverture_droit = age_ouverture_droit

    def __eq__(self, other: object) -> bool:
        if isinstance(other, OuvertureDroitsRetraite):
            return (self.age_ouverture_droit == other.age_ouverture_droit)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "OuvertureDroitsRetraite(age_ouverture_droit={})".format(self.age_ouverture_droit)

class ImpayeDepenseLogement:
    def __init__(self, montant_impaye: Money) -> None:
        self.montant_impaye = montant_impaye

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ImpayeDepenseLogement):
            return (self.montant_impaye == other.montant_impaye)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "ImpayeDepenseLogement(montant_impaye={})".format(self.montant_impaye)

class CalculetteAidesAuLogement:
    def __init__(self, eligibilite: bool, aide_finale_formule: Money, traitement_aide_finale: Callable[[Money], Money], coefficents_enfants_garde_alternee_pris_en_compte: List[Decimal]) -> None:
        self.eligibilite = eligibilite
        self.aide_finale_formule = aide_finale_formule
        self.traitement_aide_finale = traitement_aide_finale
        self.coefficents_enfants_garde_alternee_pris_en_compte = coefficents_enfants_garde_alternee_pris_en_compte

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculetteAidesAuLogement):
            return (self.eligibilite == other.eligibilite and
                   self.aide_finale_formule == other.aide_finale_formule and
                   self.traitement_aide_finale == other.traitement_aide_finale and
                   self.coefficents_enfants_garde_alternee_pris_en_compte == other.coefficents_enfants_garde_alternee_pris_en_compte)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculetteAidesAuLogement(eligibilite={},aide_finale_formule={},traitement_aide_finale={},coefficents_enfants_garde_alternee_pris_en_compte={})".format(self.eligibilite,
            self.aide_finale_formule, self.traitement_aide_finale,
            self.coefficents_enfants_garde_alternee_pris_en_compte)

class CalculetteAidesAuLogementGardeAlternee:
    def __init__(self, eligibilite: bool, aide_finale: Money) -> None:
        self.eligibilite = eligibilite
        self.aide_finale = aide_finale

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculetteAidesAuLogementGardeAlternee):
            return (self.eligibilite == other.eligibilite and
                   self.aide_finale == other.aide_finale)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculetteAidesAuLogementGardeAlternee(eligibilite={},aide_finale={})".format(self.eligibilite,
            self.aide_finale)

class BaseMensuelleAllocationsFamiliales:
    def __init__(self, montant: Money) -> None:
        self.montant = montant

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BaseMensuelleAllocationsFamiliales):
            return (self.montant == other.montant)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "BaseMensuelleAllocationsFamiliales(montant={})".format(self.montant)

class VerificationAgeInferieurOuEgalA:
    def __init__(self, est_inferieur_ou_egal: bool) -> None:
        self.est_inferieur_ou_egal = est_inferieur_ou_egal

    def __eq__(self, other: object) -> bool:
        if isinstance(other, VerificationAgeInferieurOuEgalA):
            return (self.est_inferieur_ou_egal == other.est_inferieur_ou_egal)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "VerificationAgeInferieurOuEgalA(est_inferieur_ou_egal={})".format(self.est_inferieur_ou_egal)

class VerificationAgeSuperieurA:
    def __init__(self, est_superieur: bool) -> None:
        self.est_superieur = est_superieur

    def __eq__(self, other: object) -> bool:
        if isinstance(other, VerificationAgeSuperieurA):
            return (self.est_superieur == other.est_superieur)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "VerificationAgeSuperieurA(est_superieur={})".format(self.est_superieur)

class Smic:
    def __init__(self, brut_horaire: Money) -> None:
        self.brut_horaire = brut_horaire

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Smic):
            return (self.brut_horaire == other.brut_horaire)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Smic(brut_horaire={})".format(self.brut_horaire)

class NeufOuAncien_Code(Enum):
    Neuf = 0
    Ancien = 1

class NeufOuAncien:
    def __init__(self, code: NeufOuAncien_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, NeufOuAncien):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class TrancheRevenu:
    def __init__(self, haut: LimiteTranche, bas: Money, taux: Decimal) -> None:
        self.haut = haut
        self.bas = bas
        self.taux = taux

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TrancheRevenu):
            return (self.haut == other.haut and self.bas == other.bas and
                   self.taux == other.taux)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "TrancheRevenu(haut={},bas={},taux={})".format(self.haut,
            self.bas, self.taux)

class TrancheRevenuDecimal:
    def __init__(self, haut: LimiteTrancheDecimal, bas: Decimal, taux: Decimal) -> None:
        self.haut = haut
        self.bas = bas
        self.taux = taux

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TrancheRevenuDecimal):
            return (self.haut == other.haut and self.bas == other.bas and
                   self.taux == other.taux)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "TrancheRevenuDecimal(haut={},bas={},taux={})".format(self.haut,
            self.bas, self.taux)

class AutrePersonneACharge:
    def __init__(self, date_naissance: Date, ressources: Money, ascendant_descendant_collateral_deuxieme_troisieme_degre: bool, parente: Parente, incapacite_80_pourcent_ou_restriction_emploi: bool, beneficiaire_l161_19_l351_8_l643_3_secu: bool, titulaire_allocation_personne_agee: bool) -> None:
        self.date_naissance = date_naissance
        self.ressources = ressources
        self.ascendant_descendant_collateral_deuxieme_troisieme_degre = ascendant_descendant_collateral_deuxieme_troisieme_degre
        self.parente = parente
        self.incapacite_80_pourcent_ou_restriction_emploi = incapacite_80_pourcent_ou_restriction_emploi
        self.beneficiaire_l161_19_l351_8_l643_3_secu = beneficiaire_l161_19_l351_8_l643_3_secu
        self.titulaire_allocation_personne_agee = titulaire_allocation_personne_agee

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AutrePersonneACharge):
            return (self.date_naissance == other.date_naissance and
                   self.ressources == other.ressources and
                   self.ascendant_descendant_collateral_deuxieme_troisieme_degre == other.ascendant_descendant_collateral_deuxieme_troisieme_degre and
                   self.parente == other.parente and
                   self.incapacite_80_pourcent_ou_restriction_emploi == other.incapacite_80_pourcent_ou_restriction_emploi and
                   self.beneficiaire_l161_19_l351_8_l643_3_secu == other.beneficiaire_l161_19_l351_8_l643_3_secu and
                   self.titulaire_allocation_personne_agee == other.titulaire_allocation_personne_agee)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "AutrePersonneACharge(date_naissance={},ressources={},ascendant_descendant_collateral_deuxieme_troisieme_degre={},parente={},incapacite_80_pourcent_ou_restriction_emploi={},beneficiaire_l161_19_l351_8_l643_3_secu={},titulaire_allocation_personne_agee={})".format(self.date_naissance,
            self.ressources,
            self.ascendant_descendant_collateral_deuxieme_troisieme_degre,
            self.parente, self.incapacite_80_pourcent_ou_restriction_emploi,
            self.beneficiaire_l161_19_l351_8_l643_3_secu,
            self.titulaire_allocation_personne_agee)

class DateNaissanceTroisiemeOuDernierPlusEnfant_Code(Enum):
    MoinsDeTroisEnfants = 0
    PlusDeTroisEnfants = 1

class DateNaissanceTroisiemeOuDernierPlusEnfant:
    def __init__(self, code: DateNaissanceTroisiemeOuDernierPlusEnfant_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, DateNaissanceTroisiemeOuDernierPlusEnfant):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class EligibiliteAllocationLogement:
    def __init__(self, eligibilite: TypeEligibiliteAllocationLogement, nombre_personnes_a_charge_prises_en_compte: Integer, coefficents_enfants_garde_alternee_pris_en_compte: List[Decimal]) -> None:
        self.eligibilite = eligibilite
        self.nombre_personnes_a_charge_prises_en_compte = nombre_personnes_a_charge_prises_en_compte
        self.coefficents_enfants_garde_alternee_pris_en_compte = coefficents_enfants_garde_alternee_pris_en_compte

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibiliteAllocationLogement):
            return (self.eligibilite == other.eligibilite and
                   self.nombre_personnes_a_charge_prises_en_compte == other.nombre_personnes_a_charge_prises_en_compte and
                   self.coefficents_enfants_garde_alternee_pris_en_compte == other.coefficents_enfants_garde_alternee_pris_en_compte)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibiliteAllocationLogement(eligibilite={},nombre_personnes_a_charge_prises_en_compte={},coefficents_enfants_garde_alternee_pris_en_compte={})".format(self.eligibilite,
            self.nombre_personnes_a_charge_prises_en_compte,
            self.coefficents_enfants_garde_alternee_pris_en_compte)

class Pret:
    def __init__(self, type_pret: TypePret, date_signature: Date, titulaire_pret: TitulairePret, accord_financement_representant_Etat_outre_mer: AccordFinancementRepresentantEtatOutreMer) -> None:
        self.type_pret = type_pret
        self.date_signature = date_signature
        self.titulaire_pret = titulaire_pret
        self.accord_financement_representant_Etat_outre_mer = accord_financement_representant_Etat_outre_mer

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Pret):
            return (self.type_pret == other.type_pret and
                   self.date_signature == other.date_signature and
                   self.titulaire_pret == other.titulaire_pret and
                   self.accord_financement_representant_Etat_outre_mer == other.accord_financement_representant_Etat_outre_mer)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Pret(type_pret={},date_signature={},titulaire_pret={},accord_financement_representant_Etat_outre_mer={})".format(self.type_pret,
            self.date_signature, self.titulaire_pret,
            self.accord_financement_representant_Etat_outre_mer)

class LogementFoyer:
    def __init__(self, type: TypeLogementFoyer, logement_foyer_jeunes_travailleurs: bool, remplit_conditions_r832_21: bool, conventionne_livre_III_titre_V_chap_III: bool, conventionne_selon_regles_drom: bool, date_conventionnement: Date, construit_application_loi_1957_12_III: bool, redevance: Money, categorie_equivalence_loyer_d842_16: CategorieEquivalenceLoyerAllocationLogementFoyer, beneficiaire_aide_adulte_ou_enfant_handicapes: bool, logement_meuble_d842_2: bool, logement_est_chambre: bool, colocation: bool) -> None:
        self.type = type
        self.logement_foyer_jeunes_travailleurs = logement_foyer_jeunes_travailleurs
        self.remplit_conditions_r832_21 = remplit_conditions_r832_21
        self.conventionne_livre_III_titre_V_chap_III = conventionne_livre_III_titre_V_chap_III
        self.conventionne_selon_regles_drom = conventionne_selon_regles_drom
        self.date_conventionnement = date_conventionnement
        self.construit_application_loi_1957_12_III = construit_application_loi_1957_12_III
        self.redevance = redevance
        self.categorie_equivalence_loyer_d842_16 = categorie_equivalence_loyer_d842_16
        self.beneficiaire_aide_adulte_ou_enfant_handicapes = beneficiaire_aide_adulte_ou_enfant_handicapes
        self.logement_meuble_d842_2 = logement_meuble_d842_2
        self.logement_est_chambre = logement_est_chambre
        self.colocation = colocation

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LogementFoyer):
            return (self.type == other.type and
                   self.logement_foyer_jeunes_travailleurs == other.logement_foyer_jeunes_travailleurs and
                   self.remplit_conditions_r832_21 == other.remplit_conditions_r832_21 and
                   self.conventionne_livre_III_titre_V_chap_III == other.conventionne_livre_III_titre_V_chap_III and
                   self.conventionne_selon_regles_drom == other.conventionne_selon_regles_drom and
                   self.date_conventionnement == other.date_conventionnement and
                   self.construit_application_loi_1957_12_III == other.construit_application_loi_1957_12_III and
                   self.redevance == other.redevance and
                   self.categorie_equivalence_loyer_d842_16 == other.categorie_equivalence_loyer_d842_16 and
                   self.beneficiaire_aide_adulte_ou_enfant_handicapes == other.beneficiaire_aide_adulte_ou_enfant_handicapes and
                   self.logement_meuble_d842_2 == other.logement_meuble_d842_2 and
                   self.logement_est_chambre == other.logement_est_chambre and
                   self.colocation == other.colocation)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "LogementFoyer(type={},logement_foyer_jeunes_travailleurs={},remplit_conditions_r832_21={},conventionne_livre_III_titre_V_chap_III={},conventionne_selon_regles_drom={},date_conventionnement={},construit_application_loi_1957_12_III={},redevance={},categorie_equivalence_loyer_d842_16={},beneficiaire_aide_adulte_ou_enfant_handicapes={},logement_meuble_d842_2={},logement_est_chambre={},colocation={})".format(self.type,
            self.logement_foyer_jeunes_travailleurs,
            self.remplit_conditions_r832_21,
            self.conventionne_livre_III_titre_V_chap_III,
            self.conventionne_selon_regles_drom, self.date_conventionnement,
            self.construit_application_loi_1957_12_III, self.redevance,
            self.categorie_equivalence_loyer_d842_16,
            self.beneficiaire_aide_adulte_ou_enfant_handicapes,
            self.logement_meuble_d842_2, self.logement_est_chambre,
            self.colocation)

class EnfantPrestationsFamiliales:
    def __init__(self, identifiant: Integer, obligation_scolaire: SituationObligationScolaire, remuneration_mensuelle: Money, date_de_naissance: Date, a_deja_ouvert_droit_aux_allocations_familiales: bool) -> None:
        self.identifiant = identifiant
        self.obligation_scolaire = obligation_scolaire
        self.remuneration_mensuelle = remuneration_mensuelle
        self.date_de_naissance = date_de_naissance
        self.a_deja_ouvert_droit_aux_allocations_familiales = a_deja_ouvert_droit_aux_allocations_familiales

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EnfantPrestationsFamiliales):
            return (self.identifiant == other.identifiant and
                   self.obligation_scolaire == other.obligation_scolaire and
                   self.remuneration_mensuelle == other.remuneration_mensuelle and
                   self.date_de_naissance == other.date_de_naissance and
                   self.a_deja_ouvert_droit_aux_allocations_familiales == other.a_deja_ouvert_droit_aux_allocations_familiales)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EnfantPrestationsFamiliales(identifiant={},obligation_scolaire={},remuneration_mensuelle={},date_de_naissance={},a_deja_ouvert_droit_aux_allocations_familiales={})".format(self.identifiant,
            self.obligation_scolaire, self.remuneration_mensuelle,
            self.date_de_naissance,
            self.a_deja_ouvert_droit_aux_allocations_familiales)

class TypeBailleur_Code(Enum):
    BailleurSocial = 0
    BailleurPriveAvecConventionnementSocial = 1
    BailleurPrive = 2

class TypeBailleur:
    def __init__(self, code: TypeBailleur_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypeBailleur):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class LoueOuSousLoueADesTiers_Code(Enum):
    Non = 0
    Oui = 1

class LoueOuSousLoueADesTiers:
    def __init__(self, code: LoueOuSousLoueADesTiers_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, LoueOuSousLoueADesTiers):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class Nationalite_Code(Enum):
    Francaise = 0
    Etrangere = 1

class Nationalite:
    def __init__(self, code: Nationalite_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, Nationalite):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class ChangementLogementD8424_Code(Enum):
    Changement = 0
    PasDeChangement = 1

class ChangementLogementD8424:
    def __init__(self, code: ChangementLogementD8424_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, ChangementLogementD8424):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class InformationsPrimeDeDemenagement:
    def __init__(self, nombre_enfants_a_naitre_apres_troisieme_mois_grossesse: Integer, date_naissance_troisieme_enfant_ou_dernier_si_plus: DateNaissanceTroisiemeOuDernierPlusEnfant) -> None:
        self.nombre_enfants_a_naitre_apres_troisieme_mois_grossesse = nombre_enfants_a_naitre_apres_troisieme_mois_grossesse
        self.date_naissance_troisieme_enfant_ou_dernier_si_plus = date_naissance_troisieme_enfant_ou_dernier_si_plus

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InformationsPrimeDeDemenagement):
            return (self.nombre_enfants_a_naitre_apres_troisieme_mois_grossesse == other.nombre_enfants_a_naitre_apres_troisieme_mois_grossesse and
                   self.date_naissance_troisieme_enfant_ou_dernier_si_plus == other.date_naissance_troisieme_enfant_ou_dernier_si_plus)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "InformationsPrimeDeDemenagement(nombre_enfants_a_naitre_apres_troisieme_mois_grossesse={},date_naissance_troisieme_enfant_ou_dernier_si_plus={})".format(self.nombre_enfants_a_naitre_apres_troisieme_mois_grossesse,
            self.date_naissance_troisieme_enfant_ou_dernier_si_plus)

class Proprietaire:
    def __init__(self, mensualite_principale: Money, charges_mensuelles_pret: Money, date_entree_logement: Date, type_travaux_logement_d832_15: TypeTravauxLogementD83215, type_travaux_logement_r842_5: TypeTravauxLogementR8425, local_habite_premiere_fois_beneficiaire: bool, copropriete: bool, situation_r822_11_13_17: bool, anciennete_logement: NeufOuAncien, pret: Pret, operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat: bool) -> None:
        self.mensualite_principale = mensualite_principale
        self.charges_mensuelles_pret = charges_mensuelles_pret
        self.date_entree_logement = date_entree_logement
        self.type_travaux_logement_d832_15 = type_travaux_logement_d832_15
        self.type_travaux_logement_r842_5 = type_travaux_logement_r842_5
        self.local_habite_premiere_fois_beneficiaire = local_habite_premiere_fois_beneficiaire
        self.copropriete = copropriete
        self.situation_r822_11_13_17 = situation_r822_11_13_17
        self.anciennete_logement = anciennete_logement
        self.pret = pret
        self.operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat = operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Proprietaire):
            return (self.mensualite_principale == other.mensualite_principale and
                   self.charges_mensuelles_pret == other.charges_mensuelles_pret and
                   self.date_entree_logement == other.date_entree_logement and
                   self.type_travaux_logement_d832_15 == other.type_travaux_logement_d832_15 and
                   self.type_travaux_logement_r842_5 == other.type_travaux_logement_r842_5 and
                   self.local_habite_premiere_fois_beneficiaire == other.local_habite_premiere_fois_beneficiaire and
                   self.copropriete == other.copropriete and
                   self.situation_r822_11_13_17 == other.situation_r822_11_13_17 and
                   self.anciennete_logement == other.anciennete_logement and
                   self.pret == other.pret and
                   self.operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat == other.operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Proprietaire(mensualite_principale={},charges_mensuelles_pret={},date_entree_logement={},type_travaux_logement_d832_15={},type_travaux_logement_r842_5={},local_habite_premiere_fois_beneficiaire={},copropriete={},situation_r822_11_13_17={},anciennete_logement={},pret={},operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat={})".format(self.mensualite_principale,
            self.charges_mensuelles_pret, self.date_entree_logement,
            self.type_travaux_logement_d832_15,
            self.type_travaux_logement_r842_5,
            self.local_habite_premiere_fois_beneficiaire, self.copropriete,
            self.situation_r822_11_13_17, self.anciennete_logement,
            self.pret,
            self.operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat)

class EligibilitePrestationsFamiliales:
    def __init__(self, age_l512_3_2: Duration, droit_ouvert: Callable[[EnfantPrestationsFamiliales], bool], conditions_hors_age: Callable[[EnfantPrestationsFamiliales], bool], regime_outre_mer_l751_1: bool) -> None:
        self.age_l512_3_2 = age_l512_3_2
        self.droit_ouvert = droit_ouvert
        self.conditions_hors_age = conditions_hors_age
        self.regime_outre_mer_l751_1 = regime_outre_mer_l751_1

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibilitePrestationsFamiliales):
            return (self.age_l512_3_2 == other.age_l512_3_2 and
                   self.droit_ouvert == other.droit_ouvert and
                   self.conditions_hors_age == other.conditions_hors_age and
                   self.regime_outre_mer_l751_1 == other.regime_outre_mer_l751_1)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibilitePrestationsFamiliales(age_l512_3_2={},droit_ouvert={},conditions_hors_age={},regime_outre_mer_l751_1={})".format(self.age_l512_3_2,
            self.droit_ouvert, self.conditions_hors_age,
            self.regime_outre_mer_l751_1)

class Demandeur:
    def __init__(self, date_naissance: Date, nationalite: Nationalite, personne_hebergee_centre_soin_l_L162_22_3_securite_sociale: bool, est_non_salarie_agricole_l781_8_l_781_46_code_rural: bool, magistrat_fonctionnaire_centre_interets_materiels_familiaux_hors_mayotte: bool) -> None:
        self.date_naissance = date_naissance
        self.nationalite = nationalite
        self.personne_hebergee_centre_soin_l_L162_22_3_securite_sociale = personne_hebergee_centre_soin_l_L162_22_3_securite_sociale
        self.est_non_salarie_agricole_l781_8_l_781_46_code_rural = est_non_salarie_agricole_l781_8_l_781_46_code_rural
        self.magistrat_fonctionnaire_centre_interets_materiels_familiaux_hors_mayotte = magistrat_fonctionnaire_centre_interets_materiels_familiaux_hors_mayotte

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Demandeur):
            return (self.date_naissance == other.date_naissance and
                   self.nationalite == other.nationalite and
                   self.personne_hebergee_centre_soin_l_L162_22_3_securite_sociale == other.personne_hebergee_centre_soin_l_L162_22_3_securite_sociale and
                   self.est_non_salarie_agricole_l781_8_l_781_46_code_rural == other.est_non_salarie_agricole_l781_8_l_781_46_code_rural and
                   self.magistrat_fonctionnaire_centre_interets_materiels_familiaux_hors_mayotte == other.magistrat_fonctionnaire_centre_interets_materiels_familiaux_hors_mayotte)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Demandeur(date_naissance={},nationalite={},personne_hebergee_centre_soin_l_L162_22_3_securite_sociale={},est_non_salarie_agricole_l781_8_l_781_46_code_rural={},magistrat_fonctionnaire_centre_interets_materiels_familiaux_hors_mayotte={})".format(self.date_naissance,
            self.nationalite,
            self.personne_hebergee_centre_soin_l_L162_22_3_securite_sociale,
            self.est_non_salarie_agricole_l781_8_l_781_46_code_rural,
            self.magistrat_fonctionnaire_centre_interets_materiels_familiaux_hors_mayotte)

class EnfantACharge:
    def __init__(self, identifiant: Integer, nationalite: Nationalite, a_deja_ouvert_droit_aux_allocations_familiales: bool, date_de_naissance: Date, remuneration_mensuelle: Money, obligation_scolaire: SituationObligationScolaire, situation_garde_alternee: SituationGardeAlternee, etudes_apprentissage_stage_formation_pro_impossibilite_travail: bool) -> None:
        self.identifiant = identifiant
        self.nationalite = nationalite
        self.a_deja_ouvert_droit_aux_allocations_familiales = a_deja_ouvert_droit_aux_allocations_familiales
        self.date_de_naissance = date_de_naissance
        self.remuneration_mensuelle = remuneration_mensuelle
        self.obligation_scolaire = obligation_scolaire
        self.situation_garde_alternee = situation_garde_alternee
        self.etudes_apprentissage_stage_formation_pro_impossibilite_travail = etudes_apprentissage_stage_formation_pro_impossibilite_travail

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EnfantACharge):
            return (self.identifiant == other.identifiant and
                   self.nationalite == other.nationalite and
                   self.a_deja_ouvert_droit_aux_allocations_familiales == other.a_deja_ouvert_droit_aux_allocations_familiales and
                   self.date_de_naissance == other.date_de_naissance and
                   self.remuneration_mensuelle == other.remuneration_mensuelle and
                   self.obligation_scolaire == other.obligation_scolaire and
                   self.situation_garde_alternee == other.situation_garde_alternee and
                   self.etudes_apprentissage_stage_formation_pro_impossibilite_travail == other.etudes_apprentissage_stage_formation_pro_impossibilite_travail)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EnfantACharge(identifiant={},nationalite={},a_deja_ouvert_droit_aux_allocations_familiales={},date_de_naissance={},remuneration_mensuelle={},obligation_scolaire={},situation_garde_alternee={},etudes_apprentissage_stage_formation_pro_impossibilite_travail={})".format(self.identifiant,
            self.nationalite,
            self.a_deja_ouvert_droit_aux_allocations_familiales,
            self.date_de_naissance, self.remuneration_mensuelle,
            self.obligation_scolaire, self.situation_garde_alternee,
            self.etudes_apprentissage_stage_formation_pro_impossibilite_travail)

class Location:
    def __init__(self, bailleur: TypeBailleur, loyer_principal: Money, beneficiaire_aide_adulte_ou_enfant_handicapes: bool, logement_est_chambre: bool, colocation: bool, agees_ou_handicap_adultes_hebergees_onereux_particuliers: bool, logement_meuble_d842_2: bool, changement_logement_d842_4: ChangementLogementD8424) -> None:
        self.bailleur = bailleur
        self.loyer_principal = loyer_principal
        self.beneficiaire_aide_adulte_ou_enfant_handicapes = beneficiaire_aide_adulte_ou_enfant_handicapes
        self.logement_est_chambre = logement_est_chambre
        self.colocation = colocation
        self.agees_ou_handicap_adultes_hebergees_onereux_particuliers = agees_ou_handicap_adultes_hebergees_onereux_particuliers
        self.logement_meuble_d842_2 = logement_meuble_d842_2
        self.changement_logement_d842_4 = changement_logement_d842_4

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Location):
            return (self.bailleur == other.bailleur and
                   self.loyer_principal == other.loyer_principal and
                   self.beneficiaire_aide_adulte_ou_enfant_handicapes == other.beneficiaire_aide_adulte_ou_enfant_handicapes and
                   self.logement_est_chambre == other.logement_est_chambre and
                   self.colocation == other.colocation and
                   self.agees_ou_handicap_adultes_hebergees_onereux_particuliers == other.agees_ou_handicap_adultes_hebergees_onereux_particuliers and
                   self.logement_meuble_d842_2 == other.logement_meuble_d842_2 and
                   self.changement_logement_d842_4 == other.changement_logement_d842_4)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Location(bailleur={},loyer_principal={},beneficiaire_aide_adulte_ou_enfant_handicapes={},logement_est_chambre={},colocation={},agees_ou_handicap_adultes_hebergees_onereux_particuliers={},logement_meuble_d842_2={},changement_logement_d842_4={})".format(self.bailleur,
            self.loyer_principal,
            self.beneficiaire_aide_adulte_ou_enfant_handicapes,
            self.logement_est_chambre, self.colocation,
            self.agees_ou_handicap_adultes_hebergees_onereux_particuliers,
            self.logement_meuble_d842_2, self.changement_logement_d842_4)

class PersonneACharge_Code(Enum):
    EnfantACharge = 0
    AutrePersonneACharge = 1

class PersonneACharge:
    def __init__(self, code: PersonneACharge_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, PersonneACharge):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class CategorieCalculAPL_Code(Enum):
    Location = 0
    AccessionPropriete = 1
    LogementFoyer = 2

class CategorieCalculAPL:
    def __init__(self, code: CategorieCalculAPL_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, CategorieCalculAPL):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class ModeOccupation_Code(Enum):
    Locataire = 0
    ResidentLogementFoyer = 1
    AccessionProprieteLocalUsageExclusifHabitation = 2
    SousLocataire = 3
    LocationAccession = 4

class ModeOccupation:
    def __init__(self, code: ModeOccupation_Code, value: Any) -> None:
        self.code = code
        self.value = value


    def __eq__(self, other: object) -> bool:
        if isinstance(other, ModeOccupation):
            return self.code == other.code and self.value == other.value
        else:
            return False


    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)

class EligibiliteAidesPersonnelleLogement:
    def __init__(self, date_courante: Date, eligibilite: bool, nombre_personnes_a_charge_prises_en_compte: Integer, coefficents_enfants_garde_alternee_pris_en_compte: List[Decimal], condition_2_r823_4: Callable[[PersonneACharge], bool]) -> None:
        self.date_courante = date_courante
        self.eligibilite = eligibilite
        self.nombre_personnes_a_charge_prises_en_compte = nombre_personnes_a_charge_prises_en_compte
        self.coefficents_enfants_garde_alternee_pris_en_compte = coefficents_enfants_garde_alternee_pris_en_compte
        self.condition_2_r823_4 = condition_2_r823_4

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibiliteAidesPersonnelleLogement):
            return (self.date_courante == other.date_courante and
                   self.eligibilite == other.eligibilite and
                   self.nombre_personnes_a_charge_prises_en_compte == other.nombre_personnes_a_charge_prises_en_compte and
                   self.coefficents_enfants_garde_alternee_pris_en_compte == other.coefficents_enfants_garde_alternee_pris_en_compte and
                   self.condition_2_r823_4 == other.condition_2_r823_4)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibiliteAidesPersonnelleLogement(date_courante={},eligibilite={},nombre_personnes_a_charge_prises_en_compte={},coefficents_enfants_garde_alternee_pris_en_compte={},condition_2_r823_4={})".format(self.date_courante,
            self.eligibilite,
            self.nombre_personnes_a_charge_prises_en_compte,
            self.coefficents_enfants_garde_alternee_pris_en_compte,
            self.condition_2_r823_4)

class Logement:
    def __init__(self, residence_principale: bool, mode_occupation: ModeOccupation, proprietaire: ParentOuAutre, loue_ou_sous_loue_a_des_tiers: LoueOuSousLoueADesTiers, usufruit: ParentOuAutre, logement_decent_l89_462: bool, surface_m_carres: Integer, zone: ZoneDHabitation) -> None:
        self.residence_principale = residence_principale
        self.mode_occupation = mode_occupation
        self.proprietaire = proprietaire
        self.loue_ou_sous_loue_a_des_tiers = loue_ou_sous_loue_a_des_tiers
        self.usufruit = usufruit
        self.logement_decent_l89_462 = logement_decent_l89_462
        self.surface_m_carres = surface_m_carres
        self.zone = zone

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Logement):
            return (self.residence_principale == other.residence_principale and
                   self.mode_occupation == other.mode_occupation and
                   self.proprietaire == other.proprietaire and
                   self.loue_ou_sous_loue_a_des_tiers == other.loue_ou_sous_loue_a_des_tiers and
                   self.usufruit == other.usufruit and
                   self.logement_decent_l89_462 == other.logement_decent_l89_462 and
                   self.surface_m_carres == other.surface_m_carres and
                   self.zone == other.zone)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Logement(residence_principale={},mode_occupation={},proprietaire={},loue_ou_sous_loue_a_des_tiers={},usufruit={},logement_decent_l89_462={},surface_m_carres={},zone={})".format(self.residence_principale,
            self.mode_occupation, self.proprietaire,
            self.loue_ou_sous_loue_a_des_tiers, self.usufruit,
            self.logement_decent_l89_462, self.surface_m_carres, self.zone)

class Menage:
    def __init__(self, prestations_recues: List[PrestationRecue], logement: Logement, personnes_a_charge: List[PersonneACharge], nombre_autres_occupants_logement: Integer, situation_familiale: SituationFamiliale, condition_rattache_foyer_fiscal_parent_ifi: bool, enfant_a_naitre_apres_quatrieme_mois_grossesse: bool, personnes_agees_handicapees_foyer_r844_4: bool, residence: Collectivite) -> None:
        self.prestations_recues = prestations_recues
        self.logement = logement
        self.personnes_a_charge = personnes_a_charge
        self.nombre_autres_occupants_logement = nombre_autres_occupants_logement
        self.situation_familiale = situation_familiale
        self.condition_rattache_foyer_fiscal_parent_ifi = condition_rattache_foyer_fiscal_parent_ifi
        self.enfant_a_naitre_apres_quatrieme_mois_grossesse = enfant_a_naitre_apres_quatrieme_mois_grossesse
        self.personnes_agees_handicapees_foyer_r844_4 = personnes_agees_handicapees_foyer_r844_4
        self.residence = residence

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Menage):
            return (self.prestations_recues == other.prestations_recues and
                   self.logement == other.logement and
                   self.personnes_a_charge == other.personnes_a_charge and
                   self.nombre_autres_occupants_logement == other.nombre_autres_occupants_logement and
                   self.situation_familiale == other.situation_familiale and
                   self.condition_rattache_foyer_fiscal_parent_ifi == other.condition_rattache_foyer_fiscal_parent_ifi and
                   self.enfant_a_naitre_apres_quatrieme_mois_grossesse == other.enfant_a_naitre_apres_quatrieme_mois_grossesse and
                   self.personnes_agees_handicapees_foyer_r844_4 == other.personnes_agees_handicapees_foyer_r844_4 and
                   self.residence == other.residence)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Menage(prestations_recues={},logement={},personnes_a_charge={},nombre_autres_occupants_logement={},situation_familiale={},condition_rattache_foyer_fiscal_parent_ifi={},enfant_a_naitre_apres_quatrieme_mois_grossesse={},personnes_agees_handicapees_foyer_r844_4={},residence={})".format(self.prestations_recues,
            self.logement, self.personnes_a_charge,
            self.nombre_autres_occupants_logement, self.situation_familiale,
            self.condition_rattache_foyer_fiscal_parent_ifi,
            self.enfant_a_naitre_apres_quatrieme_mois_grossesse,
            self.personnes_agees_handicapees_foyer_r844_4, self.residence)

class EligibiliteAidesPersonnelleLogementIn:
    def __init__(self, menage_in: Menage, demandeur_in: Demandeur, date_courante_in: Date, condition_logement_residence_principale_in: Callable[[Unit], bool], condition_logement_surface_in: Callable[[Unit], bool], date_entree_vigueur_differee_cch_in: Callable[[Unit], Date]) -> None:
        self.menage_in = menage_in
        self.demandeur_in = demandeur_in
        self.date_courante_in = date_courante_in
        self.condition_logement_residence_principale_in = condition_logement_residence_principale_in
        self.condition_logement_surface_in = condition_logement_surface_in
        self.date_entree_vigueur_differee_cch_in = date_entree_vigueur_differee_cch_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibiliteAidesPersonnelleLogementIn):
            return (self.menage_in == other.menage_in and
                   self.demandeur_in == other.demandeur_in and
                   self.date_courante_in == other.date_courante_in and
                   self.condition_logement_residence_principale_in == other.condition_logement_residence_principale_in and
                   self.condition_logement_surface_in == other.condition_logement_surface_in and
                   self.date_entree_vigueur_differee_cch_in == other.date_entree_vigueur_differee_cch_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibiliteAidesPersonnelleLogementIn(menage_in={},demandeur_in={},date_courante_in={},condition_logement_residence_principale_in={},condition_logement_surface_in={},date_entree_vigueur_differee_cch_in={})".format(self.menage_in,
            self.demandeur_in, self.date_courante_in,
            self.condition_logement_residence_principale_in,
            self.condition_logement_surface_in,
            self.date_entree_vigueur_differee_cch_in)

class EligibiliteAidePersonnaliseeLogementIn:
    def __init__(self, menage_in: Menage, demandeur_in: Demandeur, date_courante_in: Date) -> None:
        self.menage_in = menage_in
        self.demandeur_in = demandeur_in
        self.date_courante_in = date_courante_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibiliteAidePersonnaliseeLogementIn):
            return (self.menage_in == other.menage_in and
                   self.demandeur_in == other.demandeur_in and
                   self.date_courante_in == other.date_courante_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibiliteAidePersonnaliseeLogementIn(menage_in={},demandeur_in={},date_courante_in={})".format(self.menage_in,
            self.demandeur_in, self.date_courante_in)

class EligibiliteAllocationLogementIn:
    def __init__(self, date_courante_in: Date, menage_in: Menage, demandeur_in: Demandeur, beneficie_aide_personnalisee_logement_in: bool) -> None:
        self.date_courante_in = date_courante_in
        self.menage_in = menage_in
        self.demandeur_in = demandeur_in
        self.beneficie_aide_personnalisee_logement_in = beneficie_aide_personnalisee_logement_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibiliteAllocationLogementIn):
            return (self.date_courante_in == other.date_courante_in and
                   self.menage_in == other.menage_in and
                   self.demandeur_in == other.demandeur_in and
                   self.beneficie_aide_personnalisee_logement_in == other.beneficie_aide_personnalisee_logement_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibiliteAllocationLogementIn(date_courante_in={},menage_in={},demandeur_in={},beneficie_aide_personnalisee_logement_in={})".format(self.date_courante_in,
            self.menage_in, self.demandeur_in,
            self.beneficie_aide_personnalisee_logement_in)

class EligibilitePrimeDeDemenagementIn:
    def __init__(self, informations_in: InformationsPrimeDeDemenagement, date_emmenagement_in: Date, menage_in: Menage, demandeur_in: Demandeur, date_courante_in: Date, depenses_justifiees_reellement_engagees_in: Money) -> None:
        self.informations_in = informations_in
        self.date_emmenagement_in = date_emmenagement_in
        self.menage_in = menage_in
        self.demandeur_in = demandeur_in
        self.date_courante_in = date_courante_in
        self.depenses_justifiees_reellement_engagees_in = depenses_justifiees_reellement_engagees_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibilitePrimeDeDemenagementIn):
            return (self.informations_in == other.informations_in and
                   self.date_emmenagement_in == other.date_emmenagement_in and
                   self.menage_in == other.menage_in and
                   self.demandeur_in == other.demandeur_in and
                   self.date_courante_in == other.date_courante_in and
                   self.depenses_justifiees_reellement_engagees_in == other.depenses_justifiees_reellement_engagees_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibilitePrimeDeDemenagementIn(informations_in={},date_emmenagement_in={},menage_in={},demandeur_in={},date_courante_in={},depenses_justifiees_reellement_engagees_in={})".format(self.informations_in,
            self.date_emmenagement_in, self.menage_in, self.demandeur_in,
            self.date_courante_in,
            self.depenses_justifiees_reellement_engagees_in)

class ContributionsSocialesAidesPersonnelleLogementIn:
    def __init__(self, date_courante_in: Date, lieu_in: Collectivite) -> None:
        self.date_courante_in = date_courante_in
        self.lieu_in = lieu_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ContributionsSocialesAidesPersonnelleLogementIn):
            return (self.date_courante_in == other.date_courante_in and
                   self.lieu_in == other.lieu_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "ContributionsSocialesAidesPersonnelleLogementIn(date_courante_in={},lieu_in={})".format(self.date_courante_in,
            self.lieu_in)

class CalculAidePersonnaliseeLogementLocatifIn:
    def __init__(self, loyer_principal_base_in: Money, ressources_menage_arrondies_in: Money, beneficiaire_aide_adulte_ou_enfant_handicapes_in: bool, date_courante_in: Date, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL, zone_in: ZoneDHabitation, logement_est_chambre_in: bool, agees_ou_handicap_adultes_hebergees_onereux_particuliers_in: bool, type_aide_in: TypeAidesPersonnelleLogement, colocation_in: bool, reduction_loyer_solidarite_in: Money, logement_meuble_d842_2_in: bool, residence_in: Collectivite) -> None:
        self.loyer_principal_base_in = loyer_principal_base_in
        self.ressources_menage_arrondies_in = ressources_menage_arrondies_in
        self.beneficiaire_aide_adulte_ou_enfant_handicapes_in = beneficiaire_aide_adulte_ou_enfant_handicapes_in
        self.date_courante_in = date_courante_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in
        self.zone_in = zone_in
        self.logement_est_chambre_in = logement_est_chambre_in
        self.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in = agees_ou_handicap_adultes_hebergees_onereux_particuliers_in
        self.type_aide_in = type_aide_in
        self.colocation_in = colocation_in
        self.reduction_loyer_solidarite_in = reduction_loyer_solidarite_in
        self.logement_meuble_d842_2_in = logement_meuble_d842_2_in
        self.residence_in = residence_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementLocatifIn):
            return (self.loyer_principal_base_in == other.loyer_principal_base_in and
                   self.ressources_menage_arrondies_in == other.ressources_menage_arrondies_in and
                   self.beneficiaire_aide_adulte_ou_enfant_handicapes_in == other.beneficiaire_aide_adulte_ou_enfant_handicapes_in and
                   self.date_courante_in == other.date_courante_in and
                   self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                   self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in and
                   self.zone_in == other.zone_in and
                   self.logement_est_chambre_in == other.logement_est_chambre_in and
                   self.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in == other.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in and
                   self.type_aide_in == other.type_aide_in and
                   self.colocation_in == other.colocation_in and
                   self.reduction_loyer_solidarite_in == other.reduction_loyer_solidarite_in and
                   self.logement_meuble_d842_2_in == other.logement_meuble_d842_2_in and
                   self.residence_in == other.residence_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementLocatifIn(loyer_principal_base_in={},ressources_menage_arrondies_in={},beneficiaire_aide_adulte_ou_enfant_handicapes_in={},date_courante_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={},zone_in={},logement_est_chambre_in={},agees_ou_handicap_adultes_hebergees_onereux_particuliers_in={},type_aide_in={},colocation_in={},reduction_loyer_solidarite_in={},logement_meuble_d842_2_in={},residence_in={})".format(self.loyer_principal_base_in,
            self.ressources_menage_arrondies_in,
            self.beneficiaire_aide_adulte_ou_enfant_handicapes_in,
            self.date_courante_in, self.nombre_personnes_a_charge_in,
            self.situation_familiale_calcul_apl_in, self.zone_in,
            self.logement_est_chambre_in,
            self.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in,
            self.type_aide_in, self.colocation_in,
            self.reduction_loyer_solidarite_in,
            self.logement_meuble_d842_2_in, self.residence_in)

class CalculEquivalenceLoyerMinimaleIn:
    def __init__(self, date_courante_in: Date, ressources_menage_arrondies_in: Money, condition_2_du_832_25_in: bool, n_nombre_parts_d832_25_in: Decimal) -> None:
        self.date_courante_in = date_courante_in
        self.ressources_menage_arrondies_in = ressources_menage_arrondies_in
        self.condition_2_du_832_25_in = condition_2_du_832_25_in
        self.n_nombre_parts_d832_25_in = n_nombre_parts_d832_25_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculEquivalenceLoyerMinimaleIn):
            return (self.date_courante_in == other.date_courante_in and
                   self.ressources_menage_arrondies_in == other.ressources_menage_arrondies_in and
                   self.condition_2_du_832_25_in == other.condition_2_du_832_25_in and
                   self.n_nombre_parts_d832_25_in == other.n_nombre_parts_d832_25_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculEquivalenceLoyerMinimaleIn(date_courante_in={},ressources_menage_arrondies_in={},condition_2_du_832_25_in={},n_nombre_parts_d832_25_in={})".format(self.date_courante_in,
            self.ressources_menage_arrondies_in,
            self.condition_2_du_832_25_in, self.n_nombre_parts_d832_25_in)

class CalculNombrePartLogementFoyerIn:
    def __init__(self, date_courante_in: Date, condition_2_du_832_25_in: bool, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL, limitation_majoration_personnes_a_charge_in: Callable[[Unit], bool]) -> None:
        self.date_courante_in = date_courante_in
        self.condition_2_du_832_25_in = condition_2_du_832_25_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in
        self.limitation_majoration_personnes_a_charge_in = limitation_majoration_personnes_a_charge_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculNombrePartLogementFoyerIn):
            return (self.date_courante_in == other.date_courante_in and
                   self.condition_2_du_832_25_in == other.condition_2_du_832_25_in and
                   self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                   self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in and
                   self.limitation_majoration_personnes_a_charge_in == other.limitation_majoration_personnes_a_charge_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculNombrePartLogementFoyerIn(date_courante_in={},condition_2_du_832_25_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={},limitation_majoration_personnes_a_charge_in={})".format(self.date_courante_in,
            self.condition_2_du_832_25_in, self.nombre_personnes_a_charge_in,
            self.situation_familiale_calcul_apl_in,
            self.limitation_majoration_personnes_a_charge_in)

class CalculAidePersonnaliseeLogementFoyerIn:
    def __init__(self, residence_in: Collectivite, logement_foyer_jeunes_travailleurs_in: bool, type_logement_foyer_in: TypeLogementFoyer, date_conventionnement_in: Date, ressources_menage_arrondies_in: Money, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL, zone_in: ZoneDHabitation, date_courante_in: Date, redevance_in: Money, condition_2_du_832_25_in: Callable[[Unit], bool], limitation_majoration_personnes_a_charge_in: Callable[[Unit], bool], n_nombre_parts_d832_25_in: Callable[[Unit], Decimal]) -> None:
        self.residence_in = residence_in
        self.logement_foyer_jeunes_travailleurs_in = logement_foyer_jeunes_travailleurs_in
        self.type_logement_foyer_in = type_logement_foyer_in
        self.date_conventionnement_in = date_conventionnement_in
        self.ressources_menage_arrondies_in = ressources_menage_arrondies_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in
        self.zone_in = zone_in
        self.date_courante_in = date_courante_in
        self.redevance_in = redevance_in
        self.condition_2_du_832_25_in = condition_2_du_832_25_in
        self.limitation_majoration_personnes_a_charge_in = limitation_majoration_personnes_a_charge_in
        self.n_nombre_parts_d832_25_in = n_nombre_parts_d832_25_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementFoyerIn):
            return (self.residence_in == other.residence_in and
                   self.logement_foyer_jeunes_travailleurs_in == other.logement_foyer_jeunes_travailleurs_in and
                   self.type_logement_foyer_in == other.type_logement_foyer_in and
                   self.date_conventionnement_in == other.date_conventionnement_in and
                   self.ressources_menage_arrondies_in == other.ressources_menage_arrondies_in and
                   self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                   self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in and
                   self.zone_in == other.zone_in and
                   self.date_courante_in == other.date_courante_in and
                   self.redevance_in == other.redevance_in and
                   self.condition_2_du_832_25_in == other.condition_2_du_832_25_in and
                   self.limitation_majoration_personnes_a_charge_in == other.limitation_majoration_personnes_a_charge_in and
                   self.n_nombre_parts_d832_25_in == other.n_nombre_parts_d832_25_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementFoyerIn(residence_in={},logement_foyer_jeunes_travailleurs_in={},type_logement_foyer_in={},date_conventionnement_in={},ressources_menage_arrondies_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={},zone_in={},date_courante_in={},redevance_in={},condition_2_du_832_25_in={},limitation_majoration_personnes_a_charge_in={},n_nombre_parts_d832_25_in={})".format(self.residence_in,
            self.logement_foyer_jeunes_travailleurs_in,
            self.type_logement_foyer_in, self.date_conventionnement_in,
            self.ressources_menage_arrondies_in,
            self.nombre_personnes_a_charge_in,
            self.situation_familiale_calcul_apl_in, self.zone_in,
            self.date_courante_in, self.redevance_in,
            self.condition_2_du_832_25_in,
            self.limitation_majoration_personnes_a_charge_in,
            self.n_nombre_parts_d832_25_in)

class CalculNombrePartsAccessionProprieteIn:
    def __init__(self, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL) -> None:
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculNombrePartsAccessionProprieteIn):
            return (self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                   self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculNombrePartsAccessionProprieteIn(nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={})".format(self.nombre_personnes_a_charge_in,
            self.situation_familiale_calcul_apl_in)

class CalculAidePersonnaliseeLogementAccessionProprieteIn:
    def __init__(self, mensualite_principale_in: Money, ressources_menage_arrondies_in: Money, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL, type_travaux_logement_in: TypeTravauxLogementD83215, date_signature_pret_in: Date, local_habite_premiere_fois_beneficiaire_in: bool, date_entree_logement_in: Date, copropriete_in: bool, situation_r822_11_13_17_in: bool, zone_in: ZoneDHabitation, type_pret_in: TypePret, anciennete_logement_in: NeufOuAncien, date_courante_in: Date, residence_in: Collectivite) -> None:
        self.mensualite_principale_in = mensualite_principale_in
        self.ressources_menage_arrondies_in = ressources_menage_arrondies_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in
        self.type_travaux_logement_in = type_travaux_logement_in
        self.date_signature_pret_in = date_signature_pret_in
        self.local_habite_premiere_fois_beneficiaire_in = local_habite_premiere_fois_beneficiaire_in
        self.date_entree_logement_in = date_entree_logement_in
        self.copropriete_in = copropriete_in
        self.situation_r822_11_13_17_in = situation_r822_11_13_17_in
        self.zone_in = zone_in
        self.type_pret_in = type_pret_in
        self.anciennete_logement_in = anciennete_logement_in
        self.date_courante_in = date_courante_in
        self.residence_in = residence_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementAccessionProprieteIn):
            return (self.mensualite_principale_in == other.mensualite_principale_in and
                   self.ressources_menage_arrondies_in == other.ressources_menage_arrondies_in and
                   self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                   self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in and
                   self.type_travaux_logement_in == other.type_travaux_logement_in and
                   self.date_signature_pret_in == other.date_signature_pret_in and
                   self.local_habite_premiere_fois_beneficiaire_in == other.local_habite_premiere_fois_beneficiaire_in and
                   self.date_entree_logement_in == other.date_entree_logement_in and
                   self.copropriete_in == other.copropriete_in and
                   self.situation_r822_11_13_17_in == other.situation_r822_11_13_17_in and
                   self.zone_in == other.zone_in and
                   self.type_pret_in == other.type_pret_in and
                   self.anciennete_logement_in == other.anciennete_logement_in and
                   self.date_courante_in == other.date_courante_in and
                   self.residence_in == other.residence_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementAccessionProprieteIn(mensualite_principale_in={},ressources_menage_arrondies_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={},type_travaux_logement_in={},date_signature_pret_in={},local_habite_premiere_fois_beneficiaire_in={},date_entree_logement_in={},copropriete_in={},situation_r822_11_13_17_in={},zone_in={},type_pret_in={},anciennete_logement_in={},date_courante_in={},residence_in={})".format(self.mensualite_principale_in,
            self.ressources_menage_arrondies_in,
            self.nombre_personnes_a_charge_in,
            self.situation_familiale_calcul_apl_in,
            self.type_travaux_logement_in, self.date_signature_pret_in,
            self.local_habite_premiere_fois_beneficiaire_in,
            self.date_entree_logement_in, self.copropriete_in,
            self.situation_r822_11_13_17_in, self.zone_in, self.type_pret_in,
            self.anciennete_logement_in, self.date_courante_in,
            self.residence_in)

class CalculAidePersonnaliseeLogementIn:
    def __init__(self, mode_occupation_in: ModeOccupation, type_aide_in: TypeAidesPersonnelleLogement, ressources_menage_sans_arrondi_in: Money, situation_familiale_in: SituationFamiliale, nombre_personnes_a_charge_in: Integer, zone_in: ZoneDHabitation, date_courante_in: Date, residence_in: Collectivite) -> None:
        self.mode_occupation_in = mode_occupation_in
        self.type_aide_in = type_aide_in
        self.ressources_menage_sans_arrondi_in = ressources_menage_sans_arrondi_in
        self.situation_familiale_in = situation_familiale_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.zone_in = zone_in
        self.date_courante_in = date_courante_in
        self.residence_in = residence_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementIn):
            return (self.mode_occupation_in == other.mode_occupation_in and
                   self.type_aide_in == other.type_aide_in and
                   self.ressources_menage_sans_arrondi_in == other.ressources_menage_sans_arrondi_in and
                   self.situation_familiale_in == other.situation_familiale_in and
                   self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                   self.zone_in == other.zone_in and
                   self.date_courante_in == other.date_courante_in and
                   self.residence_in == other.residence_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementIn(mode_occupation_in={},type_aide_in={},ressources_menage_sans_arrondi_in={},situation_familiale_in={},nombre_personnes_a_charge_in={},zone_in={},date_courante_in={},residence_in={})".format(self.mode_occupation_in,
            self.type_aide_in, self.ressources_menage_sans_arrondi_in,
            self.situation_familiale_in, self.nombre_personnes_a_charge_in,
            self.zone_in, self.date_courante_in, self.residence_in)

class CalculAllocationLogementLocatifIn:
    def __init__(self, loyer_principal_in: Money, ressources_menage_arrondies_in: Money, beneficiaire_aide_adulte_ou_enfant_handicapes_in: bool, date_courante_in: Date, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL, zone_in: ZoneDHabitation, logement_est_chambre_in: bool, agees_ou_handicap_adultes_hebergees_onereux_particuliers_in: bool, type_aide_in: TypeAidesPersonnelleLogement, colocation_in: bool, reduction_loyer_solidarite_in: Money, logement_meuble_d842_2_in: bool, residence_in: Collectivite, changement_logement_d842_4_in: ChangementLogementD8424) -> None:
        self.loyer_principal_in = loyer_principal_in
        self.ressources_menage_arrondies_in = ressources_menage_arrondies_in
        self.beneficiaire_aide_adulte_ou_enfant_handicapes_in = beneficiaire_aide_adulte_ou_enfant_handicapes_in
        self.date_courante_in = date_courante_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in
        self.zone_in = zone_in
        self.logement_est_chambre_in = logement_est_chambre_in
        self.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in = agees_ou_handicap_adultes_hebergees_onereux_particuliers_in
        self.type_aide_in = type_aide_in
        self.colocation_in = colocation_in
        self.reduction_loyer_solidarite_in = reduction_loyer_solidarite_in
        self.logement_meuble_d842_2_in = logement_meuble_d842_2_in
        self.residence_in = residence_in
        self.changement_logement_d842_4_in = changement_logement_d842_4_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementLocatifIn):
            return (self.loyer_principal_in == other.loyer_principal_in and
                   self.ressources_menage_arrondies_in == other.ressources_menage_arrondies_in and
                   self.beneficiaire_aide_adulte_ou_enfant_handicapes_in == other.beneficiaire_aide_adulte_ou_enfant_handicapes_in and
                   self.date_courante_in == other.date_courante_in and
                   self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                   self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in and
                   self.zone_in == other.zone_in and
                   self.logement_est_chambre_in == other.logement_est_chambre_in and
                   self.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in == other.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in and
                   self.type_aide_in == other.type_aide_in and
                   self.colocation_in == other.colocation_in and
                   self.reduction_loyer_solidarite_in == other.reduction_loyer_solidarite_in and
                   self.logement_meuble_d842_2_in == other.logement_meuble_d842_2_in and
                   self.residence_in == other.residence_in and
                   self.changement_logement_d842_4_in == other.changement_logement_d842_4_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementLocatifIn(loyer_principal_in={},ressources_menage_arrondies_in={},beneficiaire_aide_adulte_ou_enfant_handicapes_in={},date_courante_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={},zone_in={},logement_est_chambre_in={},agees_ou_handicap_adultes_hebergees_onereux_particuliers_in={},type_aide_in={},colocation_in={},reduction_loyer_solidarite_in={},logement_meuble_d842_2_in={},residence_in={},changement_logement_d842_4_in={})".format(self.loyer_principal_in,
            self.ressources_menage_arrondies_in,
            self.beneficiaire_aide_adulte_ou_enfant_handicapes_in,
            self.date_courante_in, self.nombre_personnes_a_charge_in,
            self.situation_familiale_calcul_apl_in, self.zone_in,
            self.logement_est_chambre_in,
            self.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in,
            self.type_aide_in, self.colocation_in,
            self.reduction_loyer_solidarite_in,
            self.logement_meuble_d842_2_in, self.residence_in,
            self.changement_logement_d842_4_in)

class CalculAllocationLogementAccessionProprieteIn:
    def __init__(self, ressources_menage_arrondies_base_in: Money, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL, zone_in: ZoneDHabitation, residence_in: Collectivite, date_courante_in: Date, mensualite_principale_in: Money, situation_r822_11_13_17_in: bool, date_signature_pret_in: Date, type_travaux_logement_in: TypeTravauxLogementR8425, local_habite_premiere_fois_beneficiaire_in: bool, date_entree_logement_in: Date, charges_mensuelles_pret_in: Money, copropriete_in: bool, operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat_in: bool) -> None:
        self.ressources_menage_arrondies_base_in = ressources_menage_arrondies_base_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in
        self.zone_in = zone_in
        self.residence_in = residence_in
        self.date_courante_in = date_courante_in
        self.mensualite_principale_in = mensualite_principale_in
        self.situation_r822_11_13_17_in = situation_r822_11_13_17_in
        self.date_signature_pret_in = date_signature_pret_in
        self.type_travaux_logement_in = type_travaux_logement_in
        self.local_habite_premiere_fois_beneficiaire_in = local_habite_premiere_fois_beneficiaire_in
        self.date_entree_logement_in = date_entree_logement_in
        self.charges_mensuelles_pret_in = charges_mensuelles_pret_in
        self.copropriete_in = copropriete_in
        self.operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat_in = operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementAccessionProprieteIn):
            return (self.ressources_menage_arrondies_base_in == other.ressources_menage_arrondies_base_in and
                   self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                   self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in and
                   self.zone_in == other.zone_in and
                   self.residence_in == other.residence_in and
                   self.date_courante_in == other.date_courante_in and
                   self.mensualite_principale_in == other.mensualite_principale_in and
                   self.situation_r822_11_13_17_in == other.situation_r822_11_13_17_in and
                   self.date_signature_pret_in == other.date_signature_pret_in and
                   self.type_travaux_logement_in == other.type_travaux_logement_in and
                   self.local_habite_premiere_fois_beneficiaire_in == other.local_habite_premiere_fois_beneficiaire_in and
                   self.date_entree_logement_in == other.date_entree_logement_in and
                   self.charges_mensuelles_pret_in == other.charges_mensuelles_pret_in and
                   self.copropriete_in == other.copropriete_in and
                   self.operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat_in == other.operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementAccessionProprieteIn(ressources_menage_arrondies_base_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={},zone_in={},residence_in={},date_courante_in={},mensualite_principale_in={},situation_r822_11_13_17_in={},date_signature_pret_in={},type_travaux_logement_in={},local_habite_premiere_fois_beneficiaire_in={},date_entree_logement_in={},charges_mensuelles_pret_in={},copropriete_in={},operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat_in={})".format(self.ressources_menage_arrondies_base_in,
            self.nombre_personnes_a_charge_in,
            self.situation_familiale_calcul_apl_in, self.zone_in,
            self.residence_in, self.date_courante_in,
            self.mensualite_principale_in, self.situation_r822_11_13_17_in,
            self.date_signature_pret_in, self.type_travaux_logement_in,
            self.local_habite_premiere_fois_beneficiaire_in,
            self.date_entree_logement_in, self.charges_mensuelles_pret_in,
            self.copropriete_in,
            self.operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat_in)

class CalculAllocationLogementFoyerIn:
    def __init__(self, type_logement_foyer_in: TypeLogementFoyer, logement_foyer_jeunes_travailleurs_in: bool, date_conventionnement_in: Date, residence_in: Collectivite, redevance_in: Money, ressources_menage_arrondies_in: Money, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL, zone_in: ZoneDHabitation, date_courante_in: Date, categorie_equivalence_loyer_d842_16_in: CategorieEquivalenceLoyerAllocationLogementFoyer) -> None:
        self.type_logement_foyer_in = type_logement_foyer_in
        self.logement_foyer_jeunes_travailleurs_in = logement_foyer_jeunes_travailleurs_in
        self.date_conventionnement_in = date_conventionnement_in
        self.residence_in = residence_in
        self.redevance_in = redevance_in
        self.ressources_menage_arrondies_in = ressources_menage_arrondies_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in
        self.zone_in = zone_in
        self.date_courante_in = date_courante_in
        self.categorie_equivalence_loyer_d842_16_in = categorie_equivalence_loyer_d842_16_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementFoyerIn):
            return (self.type_logement_foyer_in == other.type_logement_foyer_in and
                   self.logement_foyer_jeunes_travailleurs_in == other.logement_foyer_jeunes_travailleurs_in and
                   self.date_conventionnement_in == other.date_conventionnement_in and
                   self.residence_in == other.residence_in and
                   self.redevance_in == other.redevance_in and
                   self.ressources_menage_arrondies_in == other.ressources_menage_arrondies_in and
                   self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                   self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in and
                   self.zone_in == other.zone_in and
                   self.date_courante_in == other.date_courante_in and
                   self.categorie_equivalence_loyer_d842_16_in == other.categorie_equivalence_loyer_d842_16_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementFoyerIn(type_logement_foyer_in={},logement_foyer_jeunes_travailleurs_in={},date_conventionnement_in={},residence_in={},redevance_in={},ressources_menage_arrondies_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={},zone_in={},date_courante_in={},categorie_equivalence_loyer_d842_16_in={})".format(self.type_logement_foyer_in,
            self.logement_foyer_jeunes_travailleurs_in,
            self.date_conventionnement_in, self.residence_in,
            self.redevance_in, self.ressources_menage_arrondies_in,
            self.nombre_personnes_a_charge_in,
            self.situation_familiale_calcul_apl_in, self.zone_in,
            self.date_courante_in,
            self.categorie_equivalence_loyer_d842_16_in)

class CalculAllocationLogementIn:
    def __init__(self, mode_occupation_in: ModeOccupation, ressources_menage_sans_arrondi_in: Money, situation_familiale_in: SituationFamiliale, nombre_personnes_a_charge_in: Integer, zone_in: ZoneDHabitation, date_courante_in: Date, type_aide_in: TypeAidesPersonnelleLogement, residence_in: Collectivite) -> None:
        self.mode_occupation_in = mode_occupation_in
        self.ressources_menage_sans_arrondi_in = ressources_menage_sans_arrondi_in
        self.situation_familiale_in = situation_familiale_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.zone_in = zone_in
        self.date_courante_in = date_courante_in
        self.type_aide_in = type_aide_in
        self.residence_in = residence_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementIn):
            return (self.mode_occupation_in == other.mode_occupation_in and
                   self.ressources_menage_sans_arrondi_in == other.ressources_menage_sans_arrondi_in and
                   self.situation_familiale_in == other.situation_familiale_in and
                   self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                   self.zone_in == other.zone_in and
                   self.date_courante_in == other.date_courante_in and
                   self.type_aide_in == other.type_aide_in and
                   self.residence_in == other.residence_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementIn(mode_occupation_in={},ressources_menage_sans_arrondi_in={},situation_familiale_in={},nombre_personnes_a_charge_in={},zone_in={},date_courante_in={},type_aide_in={},residence_in={})".format(self.mode_occupation_in,
            self.ressources_menage_sans_arrondi_in,
            self.situation_familiale_in, self.nombre_personnes_a_charge_in,
            self.zone_in, self.date_courante_in, self.type_aide_in,
            self.residence_in)

class OuvertureDroitsRetraiteIn:
    def __init__(self, date_naissance_assure_in: Date) -> None:
        self.date_naissance_assure_in = date_naissance_assure_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, OuvertureDroitsRetraiteIn):
            return (self.date_naissance_assure_in == other.date_naissance_assure_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "OuvertureDroitsRetraiteIn(date_naissance_assure_in={})".format(self.date_naissance_assure_in)

class ImpayeDepenseLogementIn:
    def __init__(self, mode_occupation_in: ModeOccupation, aide_versee_in: VersementA, montant_apl_in: Money, montant_charges_in: Money, depense_logement_in: DepenseLogement, montant_dette_in: Money) -> None:
        self.mode_occupation_in = mode_occupation_in
        self.aide_versee_in = aide_versee_in
        self.montant_apl_in = montant_apl_in
        self.montant_charges_in = montant_charges_in
        self.depense_logement_in = depense_logement_in
        self.montant_dette_in = montant_dette_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ImpayeDepenseLogementIn):
            return (self.mode_occupation_in == other.mode_occupation_in and
                   self.aide_versee_in == other.aide_versee_in and
                   self.montant_apl_in == other.montant_apl_in and
                   self.montant_charges_in == other.montant_charges_in and
                   self.depense_logement_in == other.depense_logement_in and
                   self.montant_dette_in == other.montant_dette_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "ImpayeDepenseLogementIn(mode_occupation_in={},aide_versee_in={},montant_apl_in={},montant_charges_in={},depense_logement_in={},montant_dette_in={})".format(self.mode_occupation_in,
            self.aide_versee_in, self.montant_apl_in,
            self.montant_charges_in, self.depense_logement_in,
            self.montant_dette_in)

class CalculetteAidesAuLogementIn:
    def __init__(self, menage_in: Menage, demandeur_in: Demandeur, date_courante_in: Date, ressources_menage_prises_en_compte_in: Money) -> None:
        self.menage_in = menage_in
        self.demandeur_in = demandeur_in
        self.date_courante_in = date_courante_in
        self.ressources_menage_prises_en_compte_in = ressources_menage_prises_en_compte_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculetteAidesAuLogementIn):
            return (self.menage_in == other.menage_in and
                   self.demandeur_in == other.demandeur_in and
                   self.date_courante_in == other.date_courante_in and
                   self.ressources_menage_prises_en_compte_in == other.ressources_menage_prises_en_compte_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculetteAidesAuLogementIn(menage_in={},demandeur_in={},date_courante_in={},ressources_menage_prises_en_compte_in={})".format(self.menage_in,
            self.demandeur_in, self.date_courante_in,
            self.ressources_menage_prises_en_compte_in)

class CalculetteAidesAuLogementGardeAlterneeIn:
    def __init__(self, menage_in: Menage, demandeur_in: Demandeur, date_courante_in: Date, ressources_menage_prises_en_compte_in: Money) -> None:
        self.menage_in = menage_in
        self.demandeur_in = demandeur_in
        self.date_courante_in = date_courante_in
        self.ressources_menage_prises_en_compte_in = ressources_menage_prises_en_compte_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculetteAidesAuLogementGardeAlterneeIn):
            return (self.menage_in == other.menage_in and
                   self.demandeur_in == other.demandeur_in and
                   self.date_courante_in == other.date_courante_in and
                   self.ressources_menage_prises_en_compte_in == other.ressources_menage_prises_en_compte_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculetteAidesAuLogementGardeAlterneeIn(menage_in={},demandeur_in={},date_courante_in={},ressources_menage_prises_en_compte_in={})".format(self.menage_in,
            self.demandeur_in, self.date_courante_in,
            self.ressources_menage_prises_en_compte_in)

class BaseMensuelleAllocationsFamilialesIn:
    def __init__(self, date_courante_in: Date) -> None:
        self.date_courante_in = date_courante_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BaseMensuelleAllocationsFamilialesIn):
            return (self.date_courante_in == other.date_courante_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "BaseMensuelleAllocationsFamilialesIn(date_courante_in={})".format(self.date_courante_in)

class VerificationAgeInferieurOuEgalAIn:
    def __init__(self, date_naissance_in: Date, date_courante_in: Date, annees_in: Duration) -> None:
        self.date_naissance_in = date_naissance_in
        self.date_courante_in = date_courante_in
        self.annees_in = annees_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, VerificationAgeInferieurOuEgalAIn):
            return (self.date_naissance_in == other.date_naissance_in and
                   self.date_courante_in == other.date_courante_in and
                   self.annees_in == other.annees_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "VerificationAgeInferieurOuEgalAIn(date_naissance_in={},date_courante_in={},annees_in={})".format(self.date_naissance_in,
            self.date_courante_in, self.annees_in)

class VerificationAgeSuperieurAIn:
    def __init__(self, date_naissance_in: Date, date_courante_in: Date, annees_in: Duration) -> None:
        self.date_naissance_in = date_naissance_in
        self.date_courante_in = date_courante_in
        self.annees_in = annees_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, VerificationAgeSuperieurAIn):
            return (self.date_naissance_in == other.date_naissance_in and
                   self.date_courante_in == other.date_courante_in and
                   self.annees_in == other.annees_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "VerificationAgeSuperieurAIn(date_naissance_in={},date_courante_in={},annees_in={})".format(self.date_naissance_in,
            self.date_courante_in, self.annees_in)

class SmicIn:
    def __init__(self, date_courante_in: Date, residence_in: Collectivite) -> None:
        self.date_courante_in = date_courante_in
        self.residence_in = residence_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmicIn):
            return (self.date_courante_in == other.date_courante_in and
                   self.residence_in == other.residence_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SmicIn(date_courante_in={},residence_in={})".format(self.date_courante_in,
            self.residence_in)

class EligibilitePrestationsFamilialesIn:
    def __init__(self, date_courante_in: Date, residence_in: Collectivite, age_l512_3_2_in: Callable[[Unit], Duration]) -> None:
        self.date_courante_in = date_courante_in
        self.residence_in = residence_in
        self.age_l512_3_2_in = age_l512_3_2_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibilitePrestationsFamilialesIn):
            return (self.date_courante_in == other.date_courante_in and
                   self.residence_in == other.residence_in and
                   self.age_l512_3_2_in == other.age_l512_3_2_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibilitePrestationsFamilialesIn(date_courante_in={},residence_in={},age_l512_3_2_in={})".format(self.date_courante_in,
            self.residence_in, self.age_l512_3_2_in)



def contributions_sociales_aides_personnelle_logement(contributions_sociales_aides_personnelle_logement_in:ContributionsSocialesAidesPersonnelleLogementIn):
    date_courante = contributions_sociales_aides_personnelle_logement_in.date_courante_in
    lieu = contributions_sociales_aides_personnelle_logement_in.lieu_in
    try:
        temp_exonere_csg = True
    except EmptyError:
        temp_exonere_csg = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=507, start_column=11,
                                             end_line=507, end_column=22,
                                             law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    exonere_csg = temp_exonere_csg
    try:
        temp__ = (date_courante >= date_of_numbers(2020,1,1))
    except EmptyError:
        temp__ = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=514, start_column=13,
                                             end_line=514, end_column=42,
                                             law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    if not (temp__):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                              start_line=514,
                                              start_column=13, end_line=514,
                                              end_column=42,
                                              law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    try:
        def temp_taux_crds(_:Unit):
            return decimal_of_string("0.005")
        def temp_taux_crds_1(_:Unit):
            return (date_courante >= date_of_numbers(2020,1,1))
        temp_taux_crds_2 = handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_taux_crds_1, temp_taux_crds)
    except EmptyError:
        temp_taux_crds_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=506, start_column=11,
                                             end_line=506, end_column=20,
                                             law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    taux_crds = temp_taux_crds_2
    try:
        temp___1 = exonere_csg
    except EmptyError:
        temp___1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/autres_sources.catala_fr",
                                             start_line=156, start_column=13,
                                             end_line=156, end_column=24,
                                             law_headings=["Article 14",
                                             "Chapitre II : Des contributions pour le remboursement de la dette sociale.",
                                             "Ordonnance n° 96-50 du 24 janvier 1996 relative au remboursement de la dette sociale"]))
    if not (temp___1):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/autres_sources.catala_fr",
                                              start_line=156,
                                              start_column=13, end_line=156,
                                              end_column=24,
                                              law_headings=["Article 14",
                                                           "Chapitre II : Des contributions pour le remboursement de la dette sociale.",
                                                           "Ordonnance n° 96-50 du 24 janvier 1996 relative au remboursement de la dette sociale"]))
    def temp_montant(aide_finale:Money):
        try:
            try:
                def temp_montant_1(_:Unit):
                    return money_of_cents_string("0")
                def temp_montant_2(_:Unit):
                    match_arg = lieu
                    if match_arg.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg.value
                        temp_montant_3 = False
                    elif match_arg.code == Collectivite_Code.Guyane:
                        _ = match_arg.value
                        temp_montant_3 = False
                    elif match_arg.code == Collectivite_Code.Martinique:
                        _ = match_arg.value
                        temp_montant_3 = False
                    elif match_arg.code == Collectivite_Code.LaReunion:
                        _ = match_arg.value
                        temp_montant_3 = False
                    elif match_arg.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg.value
                        temp_montant_3 = False
                    elif match_arg.code == Collectivite_Code.SaintMartin:
                        _ = match_arg.value
                        temp_montant_3 = False
                    elif match_arg.code == Collectivite_Code.Metropole:
                        _ = match_arg.value
                        temp_montant_3 = False
                    elif match_arg.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg.value
                        temp_montant_3 = True
                    elif match_arg.code == Collectivite_Code.Mayotte:
                        _ = match_arg.value
                        temp_montant_3 = False
                    return ((date_courante >= date_of_numbers(2007,2,22)) and
                        temp_montant_3)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [], temp_montant_2,
                                      temp_montant_1)
            except EmptyError:
                if (date_courante >=
                    date_of_numbers(2018,9,1)):
                    return (aide_finale * taux_crds)
                else:
                    raise EmptyError
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=509,
                                                 start_column=12,
                                                 end_line=509, end_column=19,
                                                 law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    montant = temp_montant
    return ContributionsSocialesAidesPersonnelleLogement(montant = montant)

def calcul_equivalence_loyer_minimale(calcul_equivalence_loyer_minimale_in:CalculEquivalenceLoyerMinimaleIn):
    date_courante_1 = calcul_equivalence_loyer_minimale_in.date_courante_in
    ressources_menage_arrondies = calcul_equivalence_loyer_minimale_in.ressources_menage_arrondies_in
    condition_2_du_832_25 = calcul_equivalence_loyer_minimale_in.condition_2_du_832_25_in
    n_nombre_parts_d832_25 = calcul_equivalence_loyer_minimale_in.n_nombre_parts_d832_25_in
    try:
        def temp_montant_forfaitaire_d832_26(_:Unit):
            if condition_2_du_832_25:
                return money_of_cents_string("7632")
            else:
                return money_of_cents_string("4557")
        def temp_montant_forfaitaire_d832_26_1(_:Unit):
            return (date_courante_1 > date_of_numbers(2019,10,1))
        temp_montant_forfaitaire_d832_26_2 = handle_default(SourcePosition(filename="",
                                                            start_line=0,
                                                            start_column=1,
                                                            end_line=0, end_column=1,
                                                            law_headings=[]), [],
                                                            temp_montant_forfaitaire_d832_26_1,
                                                            temp_montant_forfaitaire_d832_26)
    except EmptyError:
        temp_montant_forfaitaire_d832_26_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=614, start_column=11,
                                             end_line=614, end_column=38,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_d832_26 = temp_montant_forfaitaire_d832_26_2
    try:
        try:
            def temp_tranches_revenus_d832_26(_:Unit):
                return [TrancheRevenu(haut = LimiteTranche(LimiteTranche_Code.Revenu,
                    money_of_cents_string("142303")),
                    bas = money_of_cents_string("0"),
                    taux = decimal_of_string("0.")),
                    TrancheRevenu(haut = LimiteTranche(LimiteTranche_Code.Revenu,
                    money_of_cents_string("204761")),
                    bas = money_of_cents_string("142303"),
                    taux = decimal_of_string("0.024")),
                    TrancheRevenu(haut = LimiteTranche(LimiteTranche_Code.Revenu,
                    money_of_cents_string("262985")),
                    bas = money_of_cents_string("204761"),
                    taux = decimal_of_string("0.208")),
                    TrancheRevenu(haut = LimiteTranche(LimiteTranche_Code.Revenu,
                    money_of_cents_string("409505")),
                    bas = money_of_cents_string("262985"),
                    taux = decimal_of_string("0.232")),
                    TrancheRevenu(haut = LimiteTranche(LimiteTranche_Code.Infini,
                    Unit()), bas = money_of_cents_string("409505"),
                    taux = decimal_of_string("0.328"))]
            def temp_tranches_revenus_d832_26_1(_:Unit):
                return ((date_courante_1 > date_of_numbers(2019,10,1)) and
                    condition_2_du_832_25)
            temp_tranches_revenus_d832_26_2 = handle_default(SourcePosition(filename="",
                                                             start_line=0,
                                                             start_column=1,
                                                             end_line=0, end_column=1,
                                                             law_headings=[]), [],
                                                             temp_tranches_revenus_d832_26_1,
                                                             temp_tranches_revenus_d832_26)
        except EmptyError:
            if (date_courante_1 >
                date_of_numbers(2019,10,1)):
                temp_tranches_revenus_d832_26_2 = [TrancheRevenu(haut = LimiteTranche(LimiteTranche_Code.Revenu,
                    money_of_cents_string("194810")),
                    bas = money_of_cents_string("0"),
                    taux = decimal_of_string("0.04")),
                    TrancheRevenu(haut = LimiteTranche(LimiteTranche_Code.Revenu,
                    money_of_cents_string("267871")),
                    bas = money_of_cents_string("194810"),
                    taux = decimal_of_string("0.104")),
                    TrancheRevenu(haut = LimiteTranche(LimiteTranche_Code.Revenu,
                    money_of_cents_string("389618")),
                    bas = money_of_cents_string("267871"),
                    taux = decimal_of_string("0.216")),
                    TrancheRevenu(haut = LimiteTranche(LimiteTranche_Code.Revenu,
                    money_of_cents_string("535744")),
                    bas = money_of_cents_string("389618"),
                    taux = decimal_of_string("0.264")),
                    TrancheRevenu(haut = LimiteTranche(LimiteTranche_Code.Revenu,
                    money_of_cents_string("633129")),
                    bas = money_of_cents_string("535744"),
                    taux = decimal_of_string("0.32")),
                    TrancheRevenu(haut = LimiteTranche(LimiteTranche_Code.Infini,
                    Unit()), bas = money_of_cents_string("633129"),
                    taux = decimal_of_string("0.48"))]
            else:
                temp_tranches_revenus_d832_26_2 = dead_value
                raise EmptyError
    except EmptyError:
        temp_tranches_revenus_d832_26_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=611, start_column=11,
                                             end_line=611, end_column=35,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    tranches_revenus_d832_26 = temp_tranches_revenus_d832_26_2
    try:
        def temp_tranches_revenus_d832_26_multipliees(tranche:TrancheRevenu):
            match_arg_1 = tranche.haut
            if match_arg_1.code == LimiteTranche_Code.Revenu:
                tranche_haut = match_arg_1.value
                temp_tranches_revenus_d832_26_multipliees_1 = LimiteTrancheDecimal(LimiteTrancheDecimal_Code.Revenu,
                    (decimal_of_money(tranche_haut) *
                    n_nombre_parts_d832_25))
            elif match_arg_1.code == LimiteTranche_Code.Infini:
                _ = match_arg_1.value
                temp_tranches_revenus_d832_26_multipliees_1 = LimiteTrancheDecimal(LimiteTrancheDecimal_Code.Infini,
                    Unit())
            return TrancheRevenuDecimal(haut = temp_tranches_revenus_d832_26_multipliees_1,
                bas = (decimal_of_money(tranche.bas) *
                n_nombre_parts_d832_25), taux = tranche.taux)
        temp_tranches_revenus_d832_26_multipliees_2 = list_map(temp_tranches_revenus_d832_26_multipliees,
            tranches_revenus_d832_26)
    except EmptyError:
        temp_tranches_revenus_d832_26_multipliees_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=612, start_column=11,
                                             end_line=612, end_column=47,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    tranches_revenus_d832_26_multipliees = temp_tranches_revenus_d832_26_multipliees_2
    try:
        try:
            def temp_montant_4(_:Unit):
                def temp_montant_5(tranche_1:TrancheRevenuDecimal):
                    if (decimal_of_money(ressources_menage_arrondies) <=
                        tranche_1.bas):
                        return decimal_of_string("0.")
                    else:
                        match_arg_2 = tranche_1.haut
                        if match_arg_2.code == LimiteTrancheDecimal_Code.Revenu:
                            tranche_haut_1 = match_arg_2.value
                            if (decimal_of_money(ressources_menage_arrondies) >=
                                tranche_haut_1):
                                return ((tranche_haut_1 - tranche_1.bas) *
                                    tranche_1.taux)
                            else:
                                return ((decimal_of_money(ressources_menage_arrondies) -
                                    tranche_1.bas) * tranche_1.taux)
                        elif match_arg_2.code == LimiteTrancheDecimal_Code.Infini:
                            _ = match_arg_2.value
                            return ((decimal_of_money(ressources_menage_arrondies) -
                                tranche_1.bas) * tranche_1.taux)
                def temp_montant_6(sum1:Decimal, sum2:Decimal):
                    return (sum1 + sum2)
                return money_of_decimal(((list_reduce(temp_montant_6,
                                                      decimal_of_string("0."),
                                                      list_map(temp_montant_5,
                                                      tranches_revenus_d832_26_multipliees)) +
                    decimal_of_money(montant_forfaitaire_d832_26)) /
                    decimal_of_string("12.")))
            def temp_montant_7(_:Unit):
                return condition_2_du_832_25
            temp_montant_8 = handle_default(SourcePosition(filename="",
                                            start_line=0, start_column=1,
                                            end_line=0, end_column=1,
                                            law_headings=[]), [],
                                            temp_montant_7, temp_montant_4)
        except EmptyError:
            def temp_montant_9(tranche_2:TrancheRevenuDecimal):
                if (decimal_of_money(ressources_menage_arrondies) <=
                    tranche_2.bas):
                    return decimal_of_string("0.")
                else:
                    match_arg_3 = tranche_2.haut
                    if match_arg_3.code == LimiteTrancheDecimal_Code.Revenu:
                        tranche_haut_2 = match_arg_3.value
                        if (decimal_of_money(ressources_menage_arrondies) >=
                            tranche_haut_2):
                            return ((tranche_haut_2 - tranche_2.bas) *
                                tranche_2.taux)
                        else:
                            return ((decimal_of_money(ressources_menage_arrondies) -
                                tranche_2.bas) * tranche_2.taux)
                    elif match_arg_3.code == LimiteTrancheDecimal_Code.Infini:
                        _ = match_arg_3.value
                        return ((decimal_of_money(ressources_menage_arrondies) -
                            tranche_2.bas) * tranche_2.taux)
            def temp_montant_10(sum1_1:Decimal, sum2_1:Decimal):
                return (sum1_1 + sum2_1)
            temp_montant_8 = money_of_decimal(((list_reduce(temp_montant_10,
                                                            decimal_of_string("0."),
                                                            list_map(temp_montant_9,
                                                            tranches_revenus_d832_26_multipliees)) +
                (decimal_of_money(montant_forfaitaire_d832_26) *
                n_nombre_parts_d832_25)) / decimal_of_string("12.")))
    except EmptyError:
        temp_montant_8 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=616, start_column=12,
                                             end_line=616, end_column=19,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    montant_1 = temp_montant_8
    return CalculEquivalenceLoyerMinimale(montant = montant_1)

def calcul_nombre_part_logement_foyer(calcul_nombre_part_logement_foyer_in:CalculNombrePartLogementFoyerIn):
    date_courante_2 = calcul_nombre_part_logement_foyer_in.date_courante_in
    condition_2_du_832_25_1 = calcul_nombre_part_logement_foyer_in.condition_2_du_832_25_in
    nombre_personnes_a_charge = calcul_nombre_part_logement_foyer_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl = calcul_nombre_part_logement_foyer_in.situation_familiale_calcul_apl_in
    limitation_majoration_personnes_a_charge = calcul_nombre_part_logement_foyer_in.limitation_majoration_personnes_a_charge_in
    try:
        try:
            temp_limitation_majoration_personnes_a_charge = limitation_majoration_personnes_a_charge(
                Unit())
        except EmptyError:
            temp_limitation_majoration_personnes_a_charge = False
    except EmptyError:
        temp_limitation_majoration_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=624, start_column=12,
                                             end_line=624, end_column=52,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    limitation_majoration_personnes_a_charge_1 = temp_limitation_majoration_personnes_a_charge
    try:
        try:
            def temp_n_nombre_parts_d832_25_base(_:Unit):
                if (nombre_personnes_a_charge ==
                    integer_of_string("0")):
                    match_arg_4 = situation_familiale_calcul_apl
                    if match_arg_4.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_4.value
                        return decimal_of_string("1.2")
                    elif match_arg_4.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_4.value
                        return decimal_of_string("1.5")
                else:
                    if (nombre_personnes_a_charge ==
                        integer_of_string("1")):
                        return decimal_of_string("2.5")
                    else:
                        if (nombre_personnes_a_charge ==
                            integer_of_string("2")):
                            return decimal_of_string("3.")
                        else:
                            if (nombre_personnes_a_charge ==
                                integer_of_string("3")):
                                return decimal_of_string("3.7")
                            else:
                                return decimal_of_string("4.3")
            def temp_n_nombre_parts_d832_25_base_1(_:Unit):
                return condition_2_du_832_25_1
            temp_n_nombre_parts_d832_25_base_2 = handle_default(SourcePosition(filename="",
                                                                start_line=0,
                                                                start_column=1,
                                                                end_line=0, end_column=1,
                                                                law_headings=[]), [],
                                                                temp_n_nombre_parts_d832_25_base_1,
                                                                temp_n_nombre_parts_d832_25_base)
        except EmptyError:
            if (nombre_personnes_a_charge ==
                integer_of_string("0")):
                match_arg_5 = situation_familiale_calcul_apl
                if match_arg_5.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_5.value
                    temp_n_nombre_parts_d832_25_base_2 = decimal_of_string("1.4")
                elif match_arg_5.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_5.value
                    temp_n_nombre_parts_d832_25_base_2 = decimal_of_string("1.8")
            else:
                if (nombre_personnes_a_charge ==
                    integer_of_string("1")):
                    temp_n_nombre_parts_d832_25_base_2 = decimal_of_string("2.5")
                else:
                    if (nombre_personnes_a_charge ==
                        integer_of_string("2")):
                        temp_n_nombre_parts_d832_25_base_2 = decimal_of_string("3.")
                    else:
                        if (nombre_personnes_a_charge ==
                            integer_of_string("3")):
                            temp_n_nombre_parts_d832_25_base_2 = decimal_of_string("3.7")
                        else:
                            temp_n_nombre_parts_d832_25_base_2 = decimal_of_string("4.3")
    except EmptyError:
        temp_n_nombre_parts_d832_25_base_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=626, start_column=11,
                                             end_line=626, end_column=38,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    n_nombre_parts_d832_25_base = temp_n_nombre_parts_d832_25_base_2
    try:
        try:
            try:
                def temp_n_nombre_parts_d832_25_majoration(_:Unit):
                    return decimal_of_string("1.")
                def temp_n_nombre_parts_d832_25_majoration_1(_:Unit):
                    return (((date_courante_2 >=
                        date_of_numbers(2019,9,1)) and (date_courante_2 <
                        date_of_numbers(2023,4,5))) and
                        (limitation_majoration_personnes_a_charge_1 and
                        (nombre_personnes_a_charge >
                        integer_of_string("6"))))
                temp_n_nombre_parts_d832_25_majoration_2 = handle_default(
                    SourcePosition(filename="", start_line=0, start_column=1,
                    end_line=0, end_column=1, law_headings=[]), [],
                    temp_n_nombre_parts_d832_25_majoration_1,
                    temp_n_nombre_parts_d832_25_majoration)
            except EmptyError:
                if condition_2_du_832_25_1:
                    if (nombre_personnes_a_charge >
                        integer_of_string("4")):
                        temp_n_nombre_parts_d832_25_majoration_2 = (decimal_of_string("0.5") *
                            decimal_of_integer((nombre_personnes_a_charge -
                            integer_of_string("4"))))
                    else:
                        temp_n_nombre_parts_d832_25_majoration_2 = decimal_of_string("0.")
                else:
                    temp_n_nombre_parts_d832_25_majoration_2 = dead_value
                    raise EmptyError
        except EmptyError:
            if (nombre_personnes_a_charge >
                integer_of_string("4")):
                temp_n_nombre_parts_d832_25_majoration_2 = (decimal_of_string("0.5") *
                    decimal_of_integer((nombre_personnes_a_charge -
                    integer_of_string("4"))))
            else:
                temp_n_nombre_parts_d832_25_majoration_2 = decimal_of_string("0.")
    except EmptyError:
        temp_n_nombre_parts_d832_25_majoration_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=627, start_column=11,
                                             end_line=627, end_column=44,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    n_nombre_parts_d832_25_majoration = temp_n_nombre_parts_d832_25_majoration_2
    try:
        temp_n_nombre_parts_d832_25 = (n_nombre_parts_d832_25_base +
            n_nombre_parts_d832_25_majoration)
    except EmptyError:
        temp_n_nombre_parts_d832_25 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=629, start_column=12,
                                             end_line=629, end_column=34,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    n_nombre_parts_d832_25_1 = temp_n_nombre_parts_d832_25
    return CalculNombrePartLogementFoyer(n_nombre_parts_d832_25 = n_nombre_parts_d832_25_1)

def calcul_nombre_parts_accession_propriete(calcul_nombre_parts_accession_propriete_in:CalculNombrePartsAccessionProprieteIn):
    nombre_personnes_a_charge_1 = calcul_nombre_parts_accession_propriete_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_1 = calcul_nombre_parts_accession_propriete_in.situation_familiale_calcul_apl_in
    try:
        if (nombre_personnes_a_charge_1 ==
            integer_of_string("0")):
            match_arg_6 = situation_familiale_calcul_apl_1
            if match_arg_6.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                _ = match_arg_6.value
                temp_n_nombre_parts_d832_11 = decimal_of_string("1.4")
            elif match_arg_6.code == SituationFamilialeCalculAPL_Code.Couple:
                _ = match_arg_6.value
                temp_n_nombre_parts_d832_11 = decimal_of_string("1.8")
        else:
            if (nombre_personnes_a_charge_1 ==
                integer_of_string("1")):
                temp_n_nombre_parts_d832_11 = decimal_of_string("2.5")
            else:
                if (nombre_personnes_a_charge_1 ==
                    integer_of_string("2")):
                    temp_n_nombre_parts_d832_11 = decimal_of_string("3.")
                else:
                    if (nombre_personnes_a_charge_1 ==
                        integer_of_string("3")):
                        temp_n_nombre_parts_d832_11 = decimal_of_string("3.7")
                    else:
                        if (nombre_personnes_a_charge_1 ==
                            integer_of_string("4")):
                            temp_n_nombre_parts_d832_11 = decimal_of_string("4.3")
                        else:
                            temp_n_nombre_parts_d832_11 = (decimal_of_string("4.3") +
                                (decimal_of_string("0.5") *
                                decimal_of_integer((nombre_personnes_a_charge_1 -
                                integer_of_string("4")))))
    except EmptyError:
        temp_n_nombre_parts_d832_11 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=696, start_column=12,
                                             end_line=696, end_column=34,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    n_nombre_parts_d832_11 = temp_n_nombre_parts_d832_11
    return CalculNombrePartsAccessionPropriete(n_nombre_parts_d832_11 = n_nombre_parts_d832_11)

def ouverture_droits_retraite(ouverture_droits_retraite_in:OuvertureDroitsRetraiteIn):
    date_naissance_assure = ouverture_droits_retraite_in.date_naissance_assure_in
    try:
        def temp_age_ouverture_droit(_:Unit):
            raise EmptyError
        def temp_age_ouverture_droit_1(_:Unit):
            return False
        def temp_age_ouverture_droit_2(_:Unit):
            def temp_age_ouverture_droit_3(_:Unit):
                return (duration_of_numbers(61,0,0) +
                    duration_of_numbers(0,7,0))
            def temp_age_ouverture_droit_4(_:Unit):
                return (year_of_date(date_naissance_assure) ==
                    integer_of_string("1954"))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_age_ouverture_droit_4,
                                  temp_age_ouverture_droit_3)
        def temp_age_ouverture_droit_5(_:Unit):
            def temp_age_ouverture_droit_6(_:Unit):
                return (duration_of_numbers(61,0,0) +
                    duration_of_numbers(0,2,0))
            def temp_age_ouverture_droit_7(_:Unit):
                return (year_of_date(date_naissance_assure) ==
                    integer_of_string("1953"))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_age_ouverture_droit_7,
                                  temp_age_ouverture_droit_6)
        def temp_age_ouverture_droit_8(_:Unit):
            def temp_age_ouverture_droit_9(_:Unit):
                return (duration_of_numbers(60,0,0) +
                    duration_of_numbers(0,9,0))
            def temp_age_ouverture_droit_10(_:Unit):
                return (year_of_date(date_naissance_assure) ==
                    integer_of_string("1952"))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_age_ouverture_droit_10,
                                  temp_age_ouverture_droit_9)
        def temp_age_ouverture_droit_11(_:Unit):
            def temp_age_ouverture_droit_12(_:Unit):
                return (duration_of_numbers(60,0,0) +
                    duration_of_numbers(0,4,0))
            def temp_age_ouverture_droit_13(_:Unit):
                return ((date_naissance_assure >=
                    date_of_numbers(1951,7,1)) and (date_naissance_assure <=
                    date_of_numbers(1951,12,31)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_age_ouverture_droit_13,
                                  temp_age_ouverture_droit_12)
        def temp_age_ouverture_droit_14(_:Unit):
            def temp_age_ouverture_droit_15(_:Unit):
                return duration_of_numbers(60,0,0)
            def temp_age_ouverture_droit_16(_:Unit):
                return (date_naissance_assure < date_of_numbers(1951,7,1))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_age_ouverture_droit_16,
                                  temp_age_ouverture_droit_15)
        def temp_age_ouverture_droit_17(_:Unit):
            def temp_age_ouverture_droit_18(_:Unit):
                return duration_of_numbers(62,0,0)
            def temp_age_ouverture_droit_19(_:Unit):
                return (date_naissance_assure >= date_of_numbers(1955,1,1))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_age_ouverture_droit_19,
                                  temp_age_ouverture_droit_18)
        temp_age_ouverture_droit_20 = handle_default(SourcePosition(filename="",
                                                     start_line=0,
                                                     start_column=1,
                                                     end_line=0, end_column=1,
                                                     law_headings=[]), [temp_age_ouverture_droit_17,
                                                     temp_age_ouverture_droit_14,
                                                     temp_age_ouverture_droit_11,
                                                     temp_age_ouverture_droit_8,
                                                     temp_age_ouverture_droit_5,
                                                     temp_age_ouverture_droit_2],
                                                     temp_age_ouverture_droit_1,
                                                     temp_age_ouverture_droit)
    except EmptyError:
        temp_age_ouverture_droit_20 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1081,
                                             start_column=12, end_line=1081,
                                             end_column=31,
                                             law_headings=["Date d'ouverture des droits à la retraite",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    age_ouverture_droit = temp_age_ouverture_droit_20
    return OuvertureDroitsRetraite(age_ouverture_droit = age_ouverture_droit)

def impaye_depense_logement(impaye_depense_logement_in:ImpayeDepenseLogementIn):
    mode_occupation = impaye_depense_logement_in.mode_occupation_in
    aide_versee = impaye_depense_logement_in.aide_versee_in
    montant_apl = impaye_depense_logement_in.montant_apl_in
    montant_charges = impaye_depense_logement_in.montant_charges_in
    depense_logement = impaye_depense_logement_in.depense_logement_in
    montant_dette = impaye_depense_logement_in.montant_dette_in
    try:
        match_arg_7 = mode_occupation
        if match_arg_7.code == ModeOccupation_Code.Locataire:
            _ = match_arg_7.value
            temp_mode_occupation_impaye = ModeOccupationImpaye(ModeOccupationImpaye_Code.ImpayeLoyer,
                Unit())
        elif match_arg_7.code == ModeOccupation_Code.ResidentLogementFoyer:
            _ = match_arg_7.value
            temp_mode_occupation_impaye = ModeOccupationImpaye(ModeOccupationImpaye_Code.ImpayePret,
                Unit())
        elif match_arg_7.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
            _ = match_arg_7.value
            temp_mode_occupation_impaye = ModeOccupationImpaye(ModeOccupationImpaye_Code.ImpayePret,
                Unit())
        elif match_arg_7.code == ModeOccupation_Code.SousLocataire:
            _ = match_arg_7.value
            temp_mode_occupation_impaye = ModeOccupationImpaye(ModeOccupationImpaye_Code.ImpayeLoyer,
                Unit())
        elif match_arg_7.code == ModeOccupation_Code.LocationAccession:
            _ = match_arg_7.value
            temp_mode_occupation_impaye = ModeOccupationImpaye(ModeOccupationImpaye_Code.ImpayeLoyer,
                Unit())
    except EmptyError:
        temp_mode_occupation_impaye = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1097,
                                             start_column=11, end_line=1097,
                                             end_column=33,
                                             law_headings=["Quantification des impayés de dépense de logement",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    mode_occupation_impaye = temp_mode_occupation_impaye
    try:
        try:
            def temp_depense_logement_brute(_:Unit):
                return depense_logement
            def temp_depense_logement_brute_1(_:Unit):
                match_arg_8 = mode_occupation_impaye
                if match_arg_8.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                    _ = match_arg_8.value
                    return False
                elif match_arg_8.code == ModeOccupationImpaye_Code.ImpayePret:
                    _ = match_arg_8.value
                    return True
            temp_depense_logement_brute_2 = handle_default(SourcePosition(filename="",
                                                           start_line=0,
                                                           start_column=1,
                                                           end_line=0, end_column=1,
                                                           law_headings=[]), [],
                                                           temp_depense_logement_brute_1,
                                                           temp_depense_logement_brute)
        except EmptyError:
            match_arg_9 = mode_occupation_impaye
            if match_arg_9.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                _ = match_arg_9.value
                temp_depense_logement_brute_3 = True
            elif match_arg_9.code == ModeOccupationImpaye_Code.ImpayePret:
                _ = match_arg_9.value
                temp_depense_logement_brute_3 = False
            if temp_depense_logement_brute_3:
                temp_depense_logement_brute_2 = depense_logement
            else:
                temp_depense_logement_brute_2 = dead_value
                raise EmptyError
    except EmptyError:
        temp_depense_logement_brute_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1098,
                                             start_column=11, end_line=1098,
                                             end_column=33,
                                             law_headings=["Quantification des impayés de dépense de logement",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    depense_logement_brute = temp_depense_logement_brute_2
    try:
        def temp_depense_logement_nette(_:Unit):
            raise EmptyError
        def temp_depense_logement_nette_1(_:Unit):
            return False
        def temp_depense_logement_nette_2(_:Unit):
            def temp_depense_logement_nette_3(_:Unit):
                match_arg_10 = depense_logement
                if match_arg_10.code == DepenseLogement_Code.TotalAnnuelEcheances:
                    total_echeances = match_arg_10.value
                    return DepenseLogement(DepenseLogement_Code.TotalAnnuelEcheances,
                        (total_echeances - (montant_apl *
                        decimal_of_string("12."))))
                elif match_arg_10.code == DepenseLogement_Code.Mensualite:
                    mensualite = match_arg_10.value
                    return DepenseLogement(DepenseLogement_Code.Mensualite,
                        (mensualite - montant_apl))
                elif match_arg_10.code == DepenseLogement_Code.Loyer:
                    loyer = match_arg_10.value
                    return DepenseLogement(DepenseLogement_Code.Loyer, loyer)
            def temp_depense_logement_nette_4(_:Unit):
                match_arg_11 = mode_occupation_impaye
                if match_arg_11.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                    _ = match_arg_11.value
                    return False
                elif match_arg_11.code == ModeOccupationImpaye_Code.ImpayePret:
                    _ = match_arg_11.value
                    return True
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_depense_logement_nette_4,
                                  temp_depense_logement_nette_3)
        def temp_depense_logement_nette_5(_:Unit):
            def temp_depense_logement_nette_6(_:Unit):
                match_arg_12 = depense_logement_brute
                if match_arg_12.code == DepenseLogement_Code.TotalAnnuelEcheances:
                    total = match_arg_12.value
                    return DepenseLogement(DepenseLogement_Code.TotalAnnuelEcheances,
                        total)
                elif match_arg_12.code == DepenseLogement_Code.Mensualite:
                    mensualite_1 = match_arg_12.value
                    return DepenseLogement(DepenseLogement_Code.Mensualite,
                        mensualite_1)
                elif match_arg_12.code == DepenseLogement_Code.Loyer:
                    montant_loyer = match_arg_12.value
                    return DepenseLogement(DepenseLogement_Code.Loyer,
                        (montant_loyer - montant_apl))
            def temp_depense_logement_nette_7(_:Unit):
                match_arg_13 = mode_occupation_impaye
                if match_arg_13.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                    _ = match_arg_13.value
                    return True
                elif match_arg_13.code == ModeOccupationImpaye_Code.ImpayePret:
                    _ = match_arg_13.value
                    return False
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_depense_logement_nette_7,
                                  temp_depense_logement_nette_6)
        temp_depense_logement_nette_8 = handle_default(SourcePosition(filename="",
                                                       start_line=0,
                                                       start_column=1,
                                                       end_line=0, end_column=1,
                                                       law_headings=[]), [temp_depense_logement_nette_5,
                                                       temp_depense_logement_nette_2],
                                                       temp_depense_logement_nette_1,
                                                       temp_depense_logement_nette)
    except EmptyError:
        temp_depense_logement_nette_8 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1099,
                                             start_column=11, end_line=1099,
                                             end_column=33,
                                             law_headings=["Quantification des impayés de dépense de logement",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    depense_logement_nette = temp_depense_logement_nette_8
    try:
        def temp_seuil_impaye_depense_de_logement(_:Unit):
            raise EmptyError
        def temp_seuil_impaye_depense_de_logement_1(_:Unit):
            return False
        def temp_seuil_impaye_depense_de_logement_2(_:Unit):
            def temp_seuil_impaye_depense_de_logement_3(_:Unit):
                match_arg_14 = depense_logement_nette
                if match_arg_14.code == DepenseLogement_Code.TotalAnnuelEcheances:
                    echeance_pret_nette = match_arg_14.value
                    return (echeance_pret_nette * (decimal_of_string("1.") /
                        decimal_of_string("6.")))
                elif match_arg_14.code == DepenseLogement_Code.Mensualite:
                    mensualite_nette = match_arg_14.value
                    return (mensualite_nette * decimal_of_string("2."))
                elif match_arg_14.code == DepenseLogement_Code.Loyer:
                    _ = match_arg_14.value
                    return money_of_cents_string("0")
            def temp_seuil_impaye_depense_de_logement_4(_:Unit):
                match_arg_15 = aide_versee
                if match_arg_15.code == VersementA_Code.Bailleur:
                    _ = match_arg_15.value
                    temp_seuil_impaye_depense_de_logement_5 = False
                elif match_arg_15.code == VersementA_Code.Beneficiaire:
                    _ = match_arg_15.value
                    temp_seuil_impaye_depense_de_logement_5 = False
                elif match_arg_15.code == VersementA_Code.EtablissementHabilite:
                    _ = match_arg_15.value
                    temp_seuil_impaye_depense_de_logement_5 = True
                match_arg_16 = mode_occupation_impaye
                if match_arg_16.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                    _ = match_arg_16.value
                    temp_seuil_impaye_depense_de_logement_6 = False
                elif match_arg_16.code == ModeOccupationImpaye_Code.ImpayePret:
                    _ = match_arg_16.value
                    temp_seuil_impaye_depense_de_logement_6 = True
                return (temp_seuil_impaye_depense_de_logement_6 and
                    temp_seuil_impaye_depense_de_logement_5)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_seuil_impaye_depense_de_logement_4,
                                  temp_seuil_impaye_depense_de_logement_3)
        def temp_seuil_impaye_depense_de_logement_7(_:Unit):
            def temp_seuil_impaye_depense_de_logement_8(_:Unit):
                match_arg_17 = depense_logement_brute
                if match_arg_17.code == DepenseLogement_Code.TotalAnnuelEcheances:
                    echeance_pret_brute = match_arg_17.value
                    return (echeance_pret_brute * (decimal_of_string("1.") /
                        decimal_of_string("6.")))
                elif match_arg_17.code == DepenseLogement_Code.Mensualite:
                    mensualite_brute = match_arg_17.value
                    return (mensualite_brute * decimal_of_string("2."))
                elif match_arg_17.code == DepenseLogement_Code.Loyer:
                    _ = match_arg_17.value
                    return money_of_cents_string("0")
            def temp_seuil_impaye_depense_de_logement_9(_:Unit):
                match_arg_18 = aide_versee
                if match_arg_18.code == VersementA_Code.Bailleur:
                    _ = match_arg_18.value
                    temp_seuil_impaye_depense_de_logement_10 = False
                elif match_arg_18.code == VersementA_Code.Beneficiaire:
                    _ = match_arg_18.value
                    temp_seuil_impaye_depense_de_logement_10 = True
                elif match_arg_18.code == VersementA_Code.EtablissementHabilite:
                    _ = match_arg_18.value
                    temp_seuil_impaye_depense_de_logement_10 = False
                match_arg_19 = mode_occupation_impaye
                if match_arg_19.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                    _ = match_arg_19.value
                    temp_seuil_impaye_depense_de_logement_11 = False
                elif match_arg_19.code == ModeOccupationImpaye_Code.ImpayePret:
                    _ = match_arg_19.value
                    temp_seuil_impaye_depense_de_logement_11 = True
                return (temp_seuil_impaye_depense_de_logement_11 and
                    temp_seuil_impaye_depense_de_logement_10)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_seuil_impaye_depense_de_logement_9,
                                  temp_seuil_impaye_depense_de_logement_8)
        def temp_seuil_impaye_depense_de_logement_12(_:Unit):
            def temp_seuil_impaye_depense_de_logement_13(_:Unit):
                match_arg_20 = depense_logement_nette
                if match_arg_20.code == DepenseLogement_Code.TotalAnnuelEcheances:
                    _ = match_arg_20.value
                    return money_of_cents_string("0")
                elif match_arg_20.code == DepenseLogement_Code.Mensualite:
                    _ = match_arg_20.value
                    return money_of_cents_string("0")
                elif match_arg_20.code == DepenseLogement_Code.Loyer:
                    loyer_net = match_arg_20.value
                    return ((loyer_net + montant_charges) *
                        decimal_of_string("2."))
            def temp_seuil_impaye_depense_de_logement_14(_:Unit):
                match_arg_21 = aide_versee
                if match_arg_21.code == VersementA_Code.Bailleur:
                    _ = match_arg_21.value
                    temp_seuil_impaye_depense_de_logement_15 = True
                elif match_arg_21.code == VersementA_Code.Beneficiaire:
                    _ = match_arg_21.value
                    temp_seuil_impaye_depense_de_logement_15 = False
                elif match_arg_21.code == VersementA_Code.EtablissementHabilite:
                    _ = match_arg_21.value
                    temp_seuil_impaye_depense_de_logement_15 = False
                match_arg_22 = mode_occupation_impaye
                if match_arg_22.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                    _ = match_arg_22.value
                    temp_seuil_impaye_depense_de_logement_16 = True
                elif match_arg_22.code == ModeOccupationImpaye_Code.ImpayePret:
                    _ = match_arg_22.value
                    temp_seuil_impaye_depense_de_logement_16 = False
                return (temp_seuil_impaye_depense_de_logement_16 and
                    temp_seuil_impaye_depense_de_logement_15)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_seuil_impaye_depense_de_logement_14,
                                  temp_seuil_impaye_depense_de_logement_13)
        def temp_seuil_impaye_depense_de_logement_17(_:Unit):
            def temp_seuil_impaye_depense_de_logement_18(_:Unit):
                match_arg_23 = depense_logement_brute
                if match_arg_23.code == DepenseLogement_Code.TotalAnnuelEcheances:
                    _ = match_arg_23.value
                    return money_of_cents_string("0")
                elif match_arg_23.code == DepenseLogement_Code.Mensualite:
                    _ = match_arg_23.value
                    return money_of_cents_string("0")
                elif match_arg_23.code == DepenseLogement_Code.Loyer:
                    loyer_brut = match_arg_23.value
                    return ((loyer_brut + montant_charges) *
                        decimal_of_string("2."))
            def temp_seuil_impaye_depense_de_logement_19(_:Unit):
                match_arg_24 = aide_versee
                if match_arg_24.code == VersementA_Code.Bailleur:
                    _ = match_arg_24.value
                    temp_seuil_impaye_depense_de_logement_20 = False
                elif match_arg_24.code == VersementA_Code.Beneficiaire:
                    _ = match_arg_24.value
                    temp_seuil_impaye_depense_de_logement_20 = True
                elif match_arg_24.code == VersementA_Code.EtablissementHabilite:
                    _ = match_arg_24.value
                    temp_seuil_impaye_depense_de_logement_20 = False
                match_arg_25 = mode_occupation_impaye
                if match_arg_25.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                    _ = match_arg_25.value
                    temp_seuil_impaye_depense_de_logement_21 = True
                elif match_arg_25.code == ModeOccupationImpaye_Code.ImpayePret:
                    _ = match_arg_25.value
                    temp_seuil_impaye_depense_de_logement_21 = False
                return (temp_seuil_impaye_depense_de_logement_21 and
                    temp_seuil_impaye_depense_de_logement_20)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_seuil_impaye_depense_de_logement_19,
                                  temp_seuil_impaye_depense_de_logement_18)
        temp_seuil_impaye_depense_de_logement_22 = handle_default(SourcePosition(filename="",
                                                                  start_line=0,
                                                                  start_column=1,
                                                                  end_line=0, end_column=1,
                                                                  law_headings=[]), [temp_seuil_impaye_depense_de_logement_17,
                                                                  temp_seuil_impaye_depense_de_logement_12,
                                                                  temp_seuil_impaye_depense_de_logement_7,
                                                                  temp_seuil_impaye_depense_de_logement_2],
                                                                  temp_seuil_impaye_depense_de_logement_1,
                                                                  temp_seuil_impaye_depense_de_logement)
    except EmptyError:
        temp_seuil_impaye_depense_de_logement_22 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1096,
                                             start_column=11, end_line=1096,
                                             end_column=43,
                                             law_headings=["Quantification des impayés de dépense de logement",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    seuil_impaye_depense_de_logement = temp_seuil_impaye_depense_de_logement_22
    try:
        try:
            def temp_montant_impaye(_:Unit):
                if (montant_dette >=
                    seuil_impaye_depense_de_logement):
                    return montant_dette
                else:
                    return money_of_cents_string("0")
            def temp_montant_impaye_1(_:Unit):
                match_arg_26 = mode_occupation_impaye
                if match_arg_26.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                    _ = match_arg_26.value
                    return False
                elif match_arg_26.code == ModeOccupationImpaye_Code.ImpayePret:
                    _ = match_arg_26.value
                    return True
            temp_montant_impaye_2 = handle_default(SourcePosition(filename="",
                                                   start_line=0,
                                                   start_column=1,
                                                   end_line=0, end_column=1,
                                                   law_headings=[]), [],
                                                   temp_montant_impaye_1,
                                                   temp_montant_impaye)
        except EmptyError:
            match_arg_27 = mode_occupation_impaye
            if match_arg_27.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                _ = match_arg_27.value
                temp_montant_impaye_3 = True
            elif match_arg_27.code == ModeOccupationImpaye_Code.ImpayePret:
                _ = match_arg_27.value
                temp_montant_impaye_3 = False
            if temp_montant_impaye_3:
                if (montant_dette >=
                    seuil_impaye_depense_de_logement):
                    temp_montant_impaye_2 = montant_dette
                else:
                    temp_montant_impaye_2 = money_of_cents_string("0")
            else:
                temp_montant_impaye_2 = dead_value
                raise EmptyError
    except EmptyError:
        temp_montant_impaye_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1101,
                                             start_column=12, end_line=1101,
                                             end_column=26,
                                             law_headings=["Quantification des impayés de dépense de logement",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    montant_impaye = temp_montant_impaye_2
    return ImpayeDepenseLogement(montant_impaye = montant_impaye)

def base_mensuelle_allocations_familiales(base_mensuelle_allocations_familiales_in:BaseMensuelleAllocationsFamilialesIn):
    date_courante_3 = base_mensuelle_allocations_familiales_in.date_courante_in
    try:
        temp___2 = (date_courante_3 >= date_of_numbers(2019,4,1))
    except EmptyError:
        temp___2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../base_mensuelle_allocations_familiales/bmaf.catala_fr",
                                             start_line=10, start_column=13,
                                             end_line=10, end_column=42,
                                             law_headings=["Montant de la base mensuelle des allocations familiales"]))
    if not (temp___2):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/../base_mensuelle_allocations_familiales/bmaf.catala_fr",
                                              start_line=10, start_column=13,
                                              end_line=10, end_column=42,
                                              law_headings=["Montant de la base mensuelle des allocations familiales"]))
    try:
        def temp_montant_11(_:Unit):
            raise EmptyError
        def temp_montant_12(_:Unit):
            return False
        def temp_montant_13(_:Unit):
            def temp_montant_14(_:Unit):
                return money_of_cents_string("44593")
            def temp_montant_15(_:Unit):
                return (date_courante_3 >= date_of_numbers(2023,4,1))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_montant_15,
                                  temp_montant_14)
        def temp_montant_16(_:Unit):
            def temp_montant_17(_:Unit):
                return money_of_cents_string("42228")
            def temp_montant_18(_:Unit):
                return ((date_courante_3 >= date_of_numbers(2022,4,1)) and
                    (date_courante_3 < date_of_numbers(2023,4,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_montant_18,
                                  temp_montant_17)
        def temp_montant_19(_:Unit):
            def temp_montant_20(_:Unit):
                return money_of_cents_string("41481")
            def temp_montant_21(_:Unit):
                return ((date_courante_3 >= date_of_numbers(2021,4,1)) and
                    (date_courante_3 < date_of_numbers(2022,4,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_montant_21,
                                  temp_montant_20)
        def temp_montant_22(_:Unit):
            def temp_montant_23(_:Unit):
                return money_of_cents_string("41440")
            def temp_montant_24(_:Unit):
                return ((date_courante_3 >= date_of_numbers(2020,4,1)) and
                    (date_courante_3 < date_of_numbers(2021,4,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_montant_24,
                                  temp_montant_23)
        def temp_montant_25(_:Unit):
            def temp_montant_26(_:Unit):
                return money_of_cents_string("41316")
            def temp_montant_27(_:Unit):
                return ((date_courante_3 >= date_of_numbers(2019,4,1)) and
                    (date_courante_3 < date_of_numbers(2020,4,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_montant_27,
                                  temp_montant_26)
        temp_montant_28 = handle_default(SourcePosition(filename="",
                                         start_line=0, start_column=1,
                                         end_line=0, end_column=1,
                                         law_headings=[]), [temp_montant_25,
                                         temp_montant_22, temp_montant_19,
                                         temp_montant_16, temp_montant_13],
                                         temp_montant_12, temp_montant_11)
    except EmptyError:
        temp_montant_28 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../base_mensuelle_allocations_familiales/bmaf.catala_fr",
                                             start_line=6, start_column=12,
                                             end_line=6, end_column=19,
                                             law_headings=["Montant de la base mensuelle des allocations familiales"]))
    montant_2 = temp_montant_28
    return BaseMensuelleAllocationsFamiliales(montant = montant_2)

def verification_age_inferieur_ou_egal_a(verification_age_inferieur_ou_egal_a_in:VerificationAgeInferieurOuEgalAIn):
    date_naissance = verification_age_inferieur_ou_egal_a_in.date_naissance_in
    date_courante_4 = verification_age_inferieur_ou_egal_a_in.date_courante_in
    annees = verification_age_inferieur_ou_egal_a_in.annees_in
    try:
        temp_est_inferieur_ou_egal = ((date_naissance + annees) <=
            date_courante_4)
    except EmptyError:
        temp_est_inferieur_ou_egal = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/../prologue_france/prologue.catala_fr",
                                             start_line=22, start_column=12,
                                             end_line=22, end_column=33,
                                             law_headings=["Prologue",
                                             "Montant du salaire minimum de croissance"]))
    est_inferieur_ou_egal = temp_est_inferieur_ou_egal
    return VerificationAgeInferieurOuEgalA(est_inferieur_ou_egal = est_inferieur_ou_egal)

def verification_age_superieur_a(verification_age_superieur_a_in:VerificationAgeSuperieurAIn):
    date_naissance_1 = verification_age_superieur_a_in.date_naissance_in
    date_courante_5 = verification_age_superieur_a_in.date_courante_in
    annees_1 = verification_age_superieur_a_in.annees_in
    try:
        temp_est_superieur = ((date_naissance_1 + annees_1) >
            date_courante_5)
    except EmptyError:
        temp_est_superieur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/../prologue_france/prologue.catala_fr",
                                             start_line=33, start_column=12,
                                             end_line=33, end_column=25,
                                             law_headings=["Prologue",
                                             "Montant du salaire minimum de croissance"]))
    est_superieur = temp_est_superieur
    return VerificationAgeSuperieurA(est_superieur = est_superieur)

def smic(smic_in:SmicIn):
    date_courante_6 = smic_in.date_courante_in
    residence = smic_in.residence_in
    try:
        temp___3 = (date_courante_6 >= date_of_numbers(2019,1,1))
    except EmptyError:
        temp___3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                             start_line=16, start_column=13,
                                             end_line=16, end_column=42,
                                             law_headings=["Prologue",
                                             "Montant du salaire minimum de croissance"]))
    if not (temp___3):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                              start_line=16, start_column=13,
                                              end_line=16, end_column=42,
                                              law_headings=["Prologue",
                                                           "Montant du salaire minimum de croissance"]))
    try:
        def temp_brut_horaire(_:Unit):
            raise EmptyError
        def temp_brut_horaire_1(_:Unit):
            return False
        def temp_brut_horaire_2(_:Unit):
            def temp_brut_horaire_3(_:Unit):
                return money_of_cents_string("851")
            def temp_brut_horaire_4(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2023,1,1)) and
                    (residence == Collectivite(Collectivite_Code.Mayotte,
                    Unit())))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_4,
                                  temp_brut_horaire_3)
        def temp_brut_horaire_5(_:Unit):
            def temp_brut_horaire_6(_:Unit):
                return money_of_cents_string("1127")
            def temp_brut_horaire_7(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2023,1,1)) and
                    ((residence == Collectivite(Collectivite_Code.Metropole,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Guadeloupe, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.Guyane,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Martinique, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.LaReunion,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintBarthelemy,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintMartin, Unit())) or
                    (residence ==
                    Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                    Unit()))))))))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_7,
                                  temp_brut_horaire_6)
        def temp_brut_horaire_8(_:Unit):
            def temp_brut_horaire_9(_:Unit):
                return money_of_cents_string("835")
            def temp_brut_horaire_10(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2022,8,1)) and
                    ((date_courante_6 <= date_of_numbers(2022,12,31)) and
                    (residence == Collectivite(Collectivite_Code.Mayotte,
                    Unit()))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_10,
                                  temp_brut_horaire_9)
        def temp_brut_horaire_11(_:Unit):
            def temp_brut_horaire_12(_:Unit):
                return money_of_cents_string("1107")
            def temp_brut_horaire_13(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2022,8,1)) and
                    ((date_courante_6 <= date_of_numbers(2022,12,31)) and
                    ((residence == Collectivite(Collectivite_Code.Metropole,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Guadeloupe, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.Guyane,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Martinique, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.LaReunion,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintBarthelemy,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintMartin, Unit())) or
                    (residence ==
                    Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                    Unit())))))))))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_13,
                                  temp_brut_horaire_12)
        def temp_brut_horaire_14(_:Unit):
            def temp_brut_horaire_15(_:Unit):
                return money_of_cents_string("819")
            def temp_brut_horaire_16(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2022,5,1)) and
                    ((date_courante_6 <= date_of_numbers(2022,7,31)) and
                    (residence == Collectivite(Collectivite_Code.Mayotte,
                    Unit()))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_16,
                                  temp_brut_horaire_15)
        def temp_brut_horaire_17(_:Unit):
            def temp_brut_horaire_18(_:Unit):
                return money_of_cents_string("1085")
            def temp_brut_horaire_19(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2022,5,1)) and
                    ((date_courante_6 <= date_of_numbers(2022,7,31)) and
                    ((residence == Collectivite(Collectivite_Code.Metropole,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Guadeloupe, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.Guyane,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Martinique, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.LaReunion,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintBarthelemy,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintMartin, Unit())) or
                    (residence ==
                    Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                    Unit())))))))))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_19,
                                  temp_brut_horaire_18)
        def temp_brut_horaire_20(_:Unit):
            def temp_brut_horaire_21(_:Unit):
                return money_of_cents_string("798")
            def temp_brut_horaire_22(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2022,1,1)) and
                    ((date_courante_6 <= date_of_numbers(2022,4,30)) and
                    (residence == Collectivite(Collectivite_Code.Mayotte,
                    Unit()))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_22,
                                  temp_brut_horaire_21)
        def temp_brut_horaire_23(_:Unit):
            def temp_brut_horaire_24(_:Unit):
                return money_of_cents_string("1057")
            def temp_brut_horaire_25(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2022,1,1)) and
                    ((date_courante_6 <= date_of_numbers(2022,4,30)) and
                    ((residence == Collectivite(Collectivite_Code.Metropole,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Guadeloupe, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.Guyane,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Martinique, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.LaReunion,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintBarthelemy,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintMartin, Unit())) or
                    (residence ==
                    Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                    Unit())))))))))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_25,
                                  temp_brut_horaire_24)
        def temp_brut_horaire_26(_:Unit):
            def temp_brut_horaire_27(_:Unit):
                return money_of_cents_string("774")
            def temp_brut_horaire_28(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2021,1,1)) and
                    ((date_courante_6 <= date_of_numbers(2021,12,31)) and
                    (residence == Collectivite(Collectivite_Code.Mayotte,
                    Unit()))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_28,
                                  temp_brut_horaire_27)
        def temp_brut_horaire_29(_:Unit):
            def temp_brut_horaire_30(_:Unit):
                return money_of_cents_string("1025")
            def temp_brut_horaire_31(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2021,1,1)) and
                    ((date_courante_6 <= date_of_numbers(2021,12,31)) and
                    ((residence == Collectivite(Collectivite_Code.Metropole,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Guadeloupe, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.Guyane,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Martinique, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.LaReunion,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintBarthelemy,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintMartin, Unit())) or
                    (residence ==
                    Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                    Unit())))))))))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_31,
                                  temp_brut_horaire_30)
        def temp_brut_horaire_32(_:Unit):
            def temp_brut_horaire_33(_:Unit):
                return money_of_cents_string("766")
            def temp_brut_horaire_34(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2020,1,1)) and
                    ((date_courante_6 <= date_of_numbers(2020,12,31)) and
                    (residence == Collectivite(Collectivite_Code.Mayotte,
                    Unit()))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_34,
                                  temp_brut_horaire_33)
        def temp_brut_horaire_35(_:Unit):
            def temp_brut_horaire_36(_:Unit):
                return money_of_cents_string("1015")
            def temp_brut_horaire_37(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2020,1,1)) and
                    ((date_courante_6 <= date_of_numbers(2020,12,31)) and
                    ((residence == Collectivite(Collectivite_Code.Metropole,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Guadeloupe, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.Guyane,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Martinique, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.LaReunion,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintBarthelemy,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintMartin, Unit())) or
                    (residence ==
                    Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                    Unit())))))))))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_37,
                                  temp_brut_horaire_36)
        def temp_brut_horaire_38(_:Unit):
            def temp_brut_horaire_39(_:Unit):
                return money_of_cents_string("757")
            def temp_brut_horaire_40(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2019,1,1)) and
                    ((date_courante_6 <= date_of_numbers(2019,12,31)) and
                    (residence == Collectivite(Collectivite_Code.Mayotte,
                    Unit()))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_40,
                                  temp_brut_horaire_39)
        def temp_brut_horaire_41(_:Unit):
            def temp_brut_horaire_42(_:Unit):
                return money_of_cents_string("1003")
            def temp_brut_horaire_43(_:Unit):
                return ((date_courante_6 >= date_of_numbers(2019,1,1)) and
                    ((date_courante_6 <= date_of_numbers(2019,12,31)) and
                    ((residence == Collectivite(Collectivite_Code.Metropole,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Guadeloupe, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.Guyane,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.Martinique, Unit())) or
                    ((residence == Collectivite(Collectivite_Code.LaReunion,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintBarthelemy,
                    Unit())) or ((residence ==
                    Collectivite(Collectivite_Code.SaintMartin, Unit())) or
                    (residence ==
                    Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                    Unit())))))))))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_brut_horaire_43,
                                  temp_brut_horaire_42)
        temp_brut_horaire_44 = handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [temp_brut_horaire_41,
                                              temp_brut_horaire_38,
                                              temp_brut_horaire_35,
                                              temp_brut_horaire_32,
                                              temp_brut_horaire_29,
                                              temp_brut_horaire_26,
                                              temp_brut_horaire_23,
                                              temp_brut_horaire_20,
                                              temp_brut_horaire_17,
                                              temp_brut_horaire_14,
                                              temp_brut_horaire_11,
                                              temp_brut_horaire_8,
                                              temp_brut_horaire_5,
                                              temp_brut_horaire_2],
                                              temp_brut_horaire_1,
                                              temp_brut_horaire)
    except EmptyError:
        temp_brut_horaire_44 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                             start_line=11, start_column=12,
                                             end_line=11, end_column=24,
                                             law_headings=["Prologue",
                                             "Montant du salaire minimum de croissance"]))
    brut_horaire = temp_brut_horaire_44
    return Smic(brut_horaire = brut_horaire)

def arrondi_centaine_superieure(ressources_menage:Money):
    return (money_round(((ressources_menage * decimal_of_string("0.01")) +
        money_of_cents_string("49"))) * decimal_of_string("100."))

def traitement_nul_tout_le_temps(aide_finale_1:Money):
    return money_of_cents_string("0")

def montee_en_charge_saint_pierre_miquelon(aide_finale_2:Money, residence_1:Collectivite, date_courante_7:Date):
    match_arg_28 = residence_1
    if match_arg_28.code == Collectivite_Code.Guadeloupe:
        _ = match_arg_28.value
        temp_montee_en_charge_saint_pierre_miquelon = False
    elif match_arg_28.code == Collectivite_Code.Guyane:
        _ = match_arg_28.value
        temp_montee_en_charge_saint_pierre_miquelon = False
    elif match_arg_28.code == Collectivite_Code.Martinique:
        _ = match_arg_28.value
        temp_montee_en_charge_saint_pierre_miquelon = False
    elif match_arg_28.code == Collectivite_Code.LaReunion:
        _ = match_arg_28.value
        temp_montee_en_charge_saint_pierre_miquelon = False
    elif match_arg_28.code == Collectivite_Code.SaintBarthelemy:
        _ = match_arg_28.value
        temp_montee_en_charge_saint_pierre_miquelon = False
    elif match_arg_28.code == Collectivite_Code.SaintMartin:
        _ = match_arg_28.value
        temp_montee_en_charge_saint_pierre_miquelon = False
    elif match_arg_28.code == Collectivite_Code.Metropole:
        _ = match_arg_28.value
        temp_montee_en_charge_saint_pierre_miquelon = False
    elif match_arg_28.code == Collectivite_Code.SaintPierreEtMiquelon:
        _ = match_arg_28.value
        temp_montee_en_charge_saint_pierre_miquelon = True
    elif match_arg_28.code == Collectivite_Code.Mayotte:
        _ = match_arg_28.value
        temp_montee_en_charge_saint_pierre_miquelon = False
    if (temp_montee_en_charge_saint_pierre_miquelon and ((date_courante_7 >=
        date_of_numbers(2022,1,1)) and (date_courante_7 <=
        date_of_numbers(2025,12,31)))):
        montee_en_charge_saint_pierre_miquelon = (aide_finale_2 *
            (decimal_of_string("1.") -
            (decimal_of_integer((integer_of_string("2026") -
            year_of_date(date_courante_7))) / decimal_of_string("8."))))
    else:
        montee_en_charge_saint_pierre_miquelon = aide_finale_2
    return montee_en_charge_saint_pierre_miquelon

def calcul_aide_personnalisee_logement_foyer(calcul_aide_personnalisee_logement_foyer_in:CalculAidePersonnaliseeLogementFoyerIn):
    residence_2 = calcul_aide_personnalisee_logement_foyer_in.residence_in
    logement_foyer_jeunes_travailleurs = calcul_aide_personnalisee_logement_foyer_in.logement_foyer_jeunes_travailleurs_in
    type_logement_foyer = calcul_aide_personnalisee_logement_foyer_in.type_logement_foyer_in
    date_conventionnement = calcul_aide_personnalisee_logement_foyer_in.date_conventionnement_in
    ressources_menage_arrondies_1 = calcul_aide_personnalisee_logement_foyer_in.ressources_menage_arrondies_in
    nombre_personnes_a_charge_2 = calcul_aide_personnalisee_logement_foyer_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_2 = calcul_aide_personnalisee_logement_foyer_in.situation_familiale_calcul_apl_in
    zone = calcul_aide_personnalisee_logement_foyer_in.zone_in
    date_courante_8 = calcul_aide_personnalisee_logement_foyer_in.date_courante_in
    redevance = calcul_aide_personnalisee_logement_foyer_in.redevance_in
    condition_2_du_832_25_2 = calcul_aide_personnalisee_logement_foyer_in.condition_2_du_832_25_in
    limitation_majoration_personnes_a_charge_2 = calcul_aide_personnalisee_logement_foyer_in.limitation_majoration_personnes_a_charge_in
    n_nombre_parts_d832_25_2 = calcul_aide_personnalisee_logement_foyer_in.n_nombre_parts_d832_25_in
    try:
        try:
            temp_limitation_majoration_personnes_a_charge_1 = limitation_majoration_personnes_a_charge_2(
                Unit())
        except EmptyError:
            temp_limitation_majoration_personnes_a_charge_1 = False
    except EmptyError:
        temp_limitation_majoration_personnes_a_charge_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=644, start_column=12,
                                             end_line=644, end_column=52,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    limitation_majoration_personnes_a_charge_3 = temp_limitation_majoration_personnes_a_charge_1
    try:
        temp___4 = (date_courante_8 >= date_of_numbers(2020,10,1))
    except EmptyError:
        temp___4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=686, start_column=13,
                                             end_line=686, end_column=42,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    if not (temp___4):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                              start_line=686,
                                              start_column=13, end_line=686,
                                              end_column=42,
                                              law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    try:
        temp_contributions_sociales_dot_date_courante = date_courante_8
    except EmptyError:
        temp_contributions_sociales_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=680, start_column=14,
                                             end_line=680, end_column=50,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    contributions_sociales_dot_date_courante = temp_contributions_sociales_dot_date_courante
    try:
        temp_contributions_sociales_dot_lieu = residence_2
    except EmptyError:
        temp_contributions_sociales_dot_lieu = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=681, start_column=14,
                                             end_line=681, end_column=41,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    contributions_sociales_dot_lieu = temp_contributions_sociales_dot_lieu
    result = contributions_sociales_aides_personnelle_logement(ContributionsSocialesAidesPersonnelleLogementIn(date_courante_in = contributions_sociales_dot_date_courante,
                                                               lieu_in = contributions_sociales_dot_lieu))
    contributions_sociales_dot_montant = result.montant
    try:
        def temp_montant_minimal_aide_d823_24(_:Unit):
            return money_of_cents_string("1000")
        def temp_montant_minimal_aide_d823_24_1(_:Unit):
            return (date_courante_8 >= date_of_numbers(2019,10,1))
        temp_montant_minimal_aide_d823_24_2 = handle_default(SourcePosition(filename="",
                                                             start_line=0,
                                                             start_column=1,
                                                             end_line=0, end_column=1,
                                                             law_headings=[]), [],
                                                             temp_montant_minimal_aide_d823_24_1,
                                                             temp_montant_minimal_aide_d823_24)
    except EmptyError:
        temp_montant_minimal_aide_d823_24_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=657, start_column=11,
                                             end_line=657, end_column=39,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    montant_minimal_aide_d823_24 = temp_montant_minimal_aide_d823_24_2
    try:
        def temp_montant_forfaitaire_d832_24(_:Unit):
            return money_of_cents_string("500")
        def temp_montant_forfaitaire_d832_24_1(_:Unit):
            return (date_courante_8 >= date_of_numbers(2019,10,1))
        temp_montant_forfaitaire_d832_24_2 = handle_default(SourcePosition(filename="",
                                                            start_line=0,
                                                            start_column=1,
                                                            end_line=0, end_column=1,
                                                            law_headings=[]), [],
                                                            temp_montant_forfaitaire_d832_24_1,
                                                            temp_montant_forfaitaire_d832_24)
    except EmptyError:
        temp_montant_forfaitaire_d832_24_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=655, start_column=11,
                                             end_line=655, end_column=38,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_d832_24 = temp_montant_forfaitaire_d832_24_2
    try:
        def temp_plafond_equivalence_loyer_eligible(_:Unit):
            raise EmptyError
        def temp_plafond_equivalence_loyer_eligible_1(_:Unit):
            return False
        def temp_plafond_equivalence_loyer_eligible_2(_:Unit):
            def temp_plafond_equivalence_loyer_eligible_3(_:Unit):
                match_arg_29 = zone
                if match_arg_29.code == ZoneDHabitation_Code.Zone1:
                    _ = match_arg_29.value
                    if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                        match_arg_30 = situation_familiale_calcul_apl_2
                        if match_arg_30.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_30.value
                            return money_of_cents_string("44443")
                        elif match_arg_30.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_30.value
                            return money_of_cents_string("52101")
                    else:
                        if (nombre_personnes_a_charge_2 ==
                            integer_of_string("1")):
                            return money_of_cents_string("55555")
                        else:
                            if (nombre_personnes_a_charge_2 ==
                                integer_of_string("2")):
                                return money_of_cents_string("59454")
                            else:
                                if (nombre_personnes_a_charge_2 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("63369")
                                else:
                                    return (money_of_cents_string("68350") +
                                        (money_of_cents_string("7089") *
                                        decimal_of_integer((nombre_personnes_a_charge_2 -
                                        integer_of_string("4")))))
                elif match_arg_29.code == ZoneDHabitation_Code.Zone2:
                    _ = match_arg_29.value
                    if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                        match_arg_31 = situation_familiale_calcul_apl_2
                        if match_arg_31.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_31.value
                            return money_of_cents_string("40643")
                        elif match_arg_31.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_31.value
                            return money_of_cents_string("47433")
                    else:
                        if (nombre_personnes_a_charge_2 ==
                            integer_of_string("1")):
                            return money_of_cents_string("50575")
                        else:
                            if (nombre_personnes_a_charge_2 ==
                                integer_of_string("2")):
                                return money_of_cents_string("54138")
                            else:
                                if (nombre_personnes_a_charge_2 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("57687")
                                else:
                                    return (money_of_cents_string("61469") +
                                        (money_of_cents_string("6407") *
                                        decimal_of_integer((nombre_personnes_a_charge_2 -
                                        integer_of_string("4")))))
                elif match_arg_29.code == ZoneDHabitation_Code.Zone3:
                    _ = match_arg_29.value
                    if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                        match_arg_32 = situation_familiale_calcul_apl_2
                        if match_arg_32.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_32.value
                            return money_of_cents_string("38578")
                        elif match_arg_32.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_32.value
                            return money_of_cents_string("44869")
                    else:
                        if (nombre_personnes_a_charge_2 ==
                            integer_of_string("1")):
                            return money_of_cents_string("47602")
                        else:
                            if (nombre_personnes_a_charge_2 ==
                                integer_of_string("2")):
                                return money_of_cents_string("50744")
                            else:
                                if (nombre_personnes_a_charge_2 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("53884")
                                else:
                                    return (money_of_cents_string("57416") +
                                        (money_of_cents_string("5946") *
                                        decimal_of_integer((nombre_personnes_a_charge_2 -
                                        integer_of_string("4")))))
            def temp_plafond_equivalence_loyer_eligible_4(_:Unit):
                return ((date_courante_8 < date_of_numbers(2021,10,1)) and
                    (date_courante_8 >= date_of_numbers(2020,10,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_plafond_equivalence_loyer_eligible_4,
                                  temp_plafond_equivalence_loyer_eligible_3)
        def temp_plafond_equivalence_loyer_eligible_5(_:Unit):
            def temp_plafond_equivalence_loyer_eligible_6(_:Unit):
                match_arg_33 = zone
                if match_arg_33.code == ZoneDHabitation_Code.Zone1:
                    _ = match_arg_33.value
                    if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                        match_arg_34 = situation_familiale_calcul_apl_2
                        if match_arg_34.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_34.value
                            return money_of_cents_string("44630")
                        elif match_arg_34.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_34.value
                            return money_of_cents_string("52321")
                    else:
                        if (nombre_personnes_a_charge_2 ==
                            integer_of_string("1")):
                            return money_of_cents_string("55788")
                        else:
                            if (nombre_personnes_a_charge_2 ==
                                integer_of_string("2")):
                                return money_of_cents_string("59704")
                            else:
                                if (nombre_personnes_a_charge_2 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("63635")
                                else:
                                    return (money_of_cents_string("68637") +
                                        (money_of_cents_string("7119") *
                                        decimal_of_integer((nombre_personnes_a_charge_2 -
                                        integer_of_string("4")))))
                elif match_arg_33.code == ZoneDHabitation_Code.Zone2:
                    _ = match_arg_33.value
                    if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                        match_arg_35 = situation_familiale_calcul_apl_2
                        if match_arg_35.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_35.value
                            return money_of_cents_string("40814")
                        elif match_arg_35.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_35.value
                            return money_of_cents_string("47632")
                    else:
                        if (nombre_personnes_a_charge_2 ==
                            integer_of_string("1")):
                            return money_of_cents_string("50787")
                        else:
                            if (nombre_personnes_a_charge_2 ==
                                integer_of_string("2")):
                                return money_of_cents_string("54365")
                            else:
                                if (nombre_personnes_a_charge_2 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("57929")
                                else:
                                    return (money_of_cents_string("61727") +
                                        (money_of_cents_string("6434") *
                                        decimal_of_integer((nombre_personnes_a_charge_2 -
                                        integer_of_string("4")))))
                elif match_arg_33.code == ZoneDHabitation_Code.Zone3:
                    _ = match_arg_33.value
                    if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                        match_arg_36 = situation_familiale_calcul_apl_2
                        if match_arg_36.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_36.value
                            return money_of_cents_string("38740")
                        elif match_arg_36.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_36.value
                            return money_of_cents_string("45057")
                    else:
                        if (nombre_personnes_a_charge_2 ==
                            integer_of_string("1")):
                            return money_of_cents_string("47802")
                        else:
                            if (nombre_personnes_a_charge_2 ==
                                integer_of_string("2")):
                                return money_of_cents_string("50957")
                            else:
                                if (nombre_personnes_a_charge_2 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("54110")
                                else:
                                    return (money_of_cents_string("57657") +
                                        (money_of_cents_string("5971") *
                                        decimal_of_integer((nombre_personnes_a_charge_2 -
                                        integer_of_string("4")))))
            def temp_plafond_equivalence_loyer_eligible_7(_:Unit):
                return ((date_courante_8 >= date_of_numbers(2021,10,1)) and
                    (date_courante_8 < date_of_numbers(2022,7,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_plafond_equivalence_loyer_eligible_7,
                                  temp_plafond_equivalence_loyer_eligible_6)
        def temp_plafond_equivalence_loyer_eligible_8(_:Unit):
            def temp_plafond_equivalence_loyer_eligible_9(_:Unit):
                match_arg_37 = zone
                if match_arg_37.code == ZoneDHabitation_Code.Zone1:
                    _ = match_arg_37.value
                    if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                        match_arg_38 = situation_familiale_calcul_apl_2
                        if match_arg_38.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_38.value
                            return money_of_cents_string("46192")
                        elif match_arg_38.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_38.value
                            return money_of_cents_string("54152")
                    else:
                        if (nombre_personnes_a_charge_2 ==
                            integer_of_string("1")):
                            return money_of_cents_string("57741")
                        else:
                            if (nombre_personnes_a_charge_2 ==
                                integer_of_string("2")):
                                return money_of_cents_string("61794")
                            else:
                                if (nombre_personnes_a_charge_2 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("65862")
                                else:
                                    return (money_of_cents_string("71039") +
                                        (money_of_cents_string("7368") *
                                        decimal_of_integer((nombre_personnes_a_charge_2 -
                                        integer_of_string("4")))))
                elif match_arg_37.code == ZoneDHabitation_Code.Zone2:
                    _ = match_arg_37.value
                    if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                        match_arg_39 = situation_familiale_calcul_apl_2
                        if match_arg_39.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_39.value
                            return money_of_cents_string("42242")
                        elif match_arg_39.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_39.value
                            return money_of_cents_string("49299")
                    else:
                        if (nombre_personnes_a_charge_2 ==
                            integer_of_string("1")):
                            return money_of_cents_string("52565")
                        else:
                            if (nombre_personnes_a_charge_2 ==
                                integer_of_string("2")):
                                return money_of_cents_string("56268")
                            else:
                                if (nombre_personnes_a_charge_2 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("59957")
                                else:
                                    return (money_of_cents_string("63887") +
                                        (money_of_cents_string("6659") *
                                        decimal_of_integer((nombre_personnes_a_charge_2 -
                                        integer_of_string("4")))))
                elif match_arg_37.code == ZoneDHabitation_Code.Zone3:
                    _ = match_arg_37.value
                    if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                        match_arg_40 = situation_familiale_calcul_apl_2
                        if match_arg_40.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_40.value
                            return money_of_cents_string("40096")
                        elif match_arg_40.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_40.value
                            return money_of_cents_string("46634")
                    else:
                        if (nombre_personnes_a_charge_2 ==
                            integer_of_string("1")):
                            return money_of_cents_string("49475")
                        else:
                            if (nombre_personnes_a_charge_2 ==
                                integer_of_string("2")):
                                return money_of_cents_string("52740")
                            else:
                                if (nombre_personnes_a_charge_2 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("56004")
                                else:
                                    return (money_of_cents_string("59675") +
                                        (money_of_cents_string("6180") *
                                        decimal_of_integer((nombre_personnes_a_charge_2 -
                                        integer_of_string("4")))))
            def temp_plafond_equivalence_loyer_eligible_10(_:Unit):
                return (date_courante_8 >= date_of_numbers(2022,7,1))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_plafond_equivalence_loyer_eligible_10,
                                  temp_plafond_equivalence_loyer_eligible_9)
        temp_plafond_equivalence_loyer_eligible_11 = handle_default(SourcePosition(filename="",
                                                                    start_line=0,
                                                                    start_column=1,
                                                                    end_line=0, end_column=1,
                                                                    law_headings=[]), [temp_plafond_equivalence_loyer_eligible_8,
                                                                    temp_plafond_equivalence_loyer_eligible_5,
                                                                    temp_plafond_equivalence_loyer_eligible_2],
                                                                    temp_plafond_equivalence_loyer_eligible_1,
                                                                    temp_plafond_equivalence_loyer_eligible)
    except EmptyError:
        temp_plafond_equivalence_loyer_eligible_11 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=650, start_column=12,
                                             end_line=650, end_column=46,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    plafond_equivalence_loyer_eligible = temp_plafond_equivalence_loyer_eligible_11
    try:
        def temp_coefficient_r_d832_25(_:Unit):
            return money_of_cents_string("121726")
        def temp_coefficient_r_d832_25_1(_:Unit):
            return (date_courante_8 >= date_of_numbers(2019,10,1))
        temp_coefficient_r_d832_25_2 = handle_default(SourcePosition(filename="",
                                                      start_line=0,
                                                      start_column=1,
                                                      end_line=0, end_column=1,
                                                      law_headings=[]), [],
                                                      temp_coefficient_r_d832_25_1,
                                                      temp_coefficient_r_d832_25)
    except EmptyError:
        temp_coefficient_r_d832_25_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=647, start_column=12,
                                             end_line=647, end_column=33,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficient_r_d832_25 = temp_coefficient_r_d832_25_2
    try:
        try:
            temp_condition_2_du_832_25 = condition_2_du_832_25_2(Unit())
        except EmptyError:
            try:
                def temp_condition_2_du_832_25_1(_:Unit):
                    return False
                def temp_condition_2_du_832_25_2(_:Unit):
                    match_arg_41 = residence_2
                    if match_arg_41.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_41.value
                        temp_condition_2_du_832_25_3 = True
                    elif match_arg_41.code == Collectivite_Code.Guyane:
                        _ = match_arg_41.value
                        temp_condition_2_du_832_25_3 = True
                    elif match_arg_41.code == Collectivite_Code.Martinique:
                        _ = match_arg_41.value
                        temp_condition_2_du_832_25_3 = True
                    elif match_arg_41.code == Collectivite_Code.LaReunion:
                        _ = match_arg_41.value
                        temp_condition_2_du_832_25_3 = True
                    elif match_arg_41.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_41.value
                        temp_condition_2_du_832_25_3 = False
                    elif match_arg_41.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_41.value
                        temp_condition_2_du_832_25_3 = False
                    elif match_arg_41.code == Collectivite_Code.Metropole:
                        _ = match_arg_41.value
                        temp_condition_2_du_832_25_3 = False
                    elif match_arg_41.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_41.value
                        temp_condition_2_du_832_25_3 = False
                    elif match_arg_41.code == Collectivite_Code.Mayotte:
                        _ = match_arg_41.value
                        temp_condition_2_du_832_25_3 = True
                    return ((date_courante_8 >=
                        date_of_numbers(2023,4,5)) and
                        temp_condition_2_du_832_25_3)
                temp_condition_2_du_832_25 = handle_default(SourcePosition(filename="",
                                                            start_line=0,
                                                            start_column=1,
                                                            end_line=0, end_column=1,
                                                            law_headings=[]), [],
                                                            temp_condition_2_du_832_25_2,
                                                            temp_condition_2_du_832_25_1)
            except EmptyError:
                match_arg_42 = type_logement_foyer
                if match_arg_42.code == TypeLogementFoyer_Code.LogementPersonnesAgeesOuHandicapees:
                    _ = match_arg_42.value
                    temp_condition_2_du_832_25_4 = False
                elif match_arg_42.code == TypeLogementFoyer_Code.ResidenceSociale:
                    _ = match_arg_42.value
                    temp_condition_2_du_832_25_4 = (date_conventionnement >=
                        date_of_numbers(1994,12,31))
                elif match_arg_42.code == TypeLogementFoyer_Code.FoyerJeunesTravailleursOuMigrantsConventionneL353_2Avant1995:
                    _ = match_arg_42.value
                    temp_condition_2_du_832_25_4 = False
                elif match_arg_42.code == TypeLogementFoyer_Code.Autre:
                    _ = match_arg_42.value
                    temp_condition_2_du_832_25_4 = False
                temp_condition_2_du_832_25 = ((logement_foyer_jeunes_travailleurs and
                    (date_conventionnement >= date_of_numbers(1990,9,30))) or
                    temp_condition_2_du_832_25_4)
    except EmptyError:
        temp_condition_2_du_832_25 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=643, start_column=12,
                                             end_line=643, end_column=33,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_2_du_832_25_3 = temp_condition_2_du_832_25
    def temp_traitement_aide_finale_minoration_forfaitaire(aide_finale_3:Money):
        try:
            if ((aide_finale_3 - montant_forfaitaire_d832_24) >=
                money_of_cents_string("0")):
                return (aide_finale_3 - montant_forfaitaire_d832_24)
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=674,
                                                 start_column=10,
                                                 end_line=674, end_column=32,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_minoration_forfaitaire = temp_traitement_aide_finale_minoration_forfaitaire
    try:
        if (redevance >=
            plafond_equivalence_loyer_eligible):
            temp_equivalence_loyer_eligible = plafond_equivalence_loyer_eligible
        else:
            temp_equivalence_loyer_eligible = redevance
    except EmptyError:
        temp_equivalence_loyer_eligible = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=649, start_column=12,
                                             end_line=649, end_column=38,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    equivalence_loyer_eligible = temp_equivalence_loyer_eligible
    try:
        temp_calcul_nombre_parts_dot_date_courante = date_courante_8
    except EmptyError:
        temp_calcul_nombre_parts_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=3882,
                                             start_column=14, end_line=3882,
                                             end_column=47,
                                             law_headings=["Article D832-25",
                                             "Sous-Section 2 : Conditions d'octroi de l'aide personnalisée au logement aux personnes résidant dans un logement-foyer",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                             "Titre III : Aide personnalisée au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_nombre_parts_dot_date_courante = temp_calcul_nombre_parts_dot_date_courante
    try:
        temp_calcul_nombre_parts_dot_condition_2_du_832_25 = condition_2_du_832_25_3
    except EmptyError:
        temp_calcul_nombre_parts_dot_condition_2_du_832_25 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=3880,
                                             start_column=14, end_line=3880,
                                             end_column=55,
                                             law_headings=["Article D832-25",
                                             "Sous-Section 2 : Conditions d'octroi de l'aide personnalisée au logement aux personnes résidant dans un logement-foyer",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                             "Titre III : Aide personnalisée au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_nombre_parts_dot_condition_2_du_832_25 = temp_calcul_nombre_parts_dot_condition_2_du_832_25
    try:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge = nombre_personnes_a_charge_2
    except EmptyError:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=3876,
                                             start_column=14, end_line=3876,
                                             end_column=59,
                                             law_headings=["Article D832-25",
                                             "Sous-Section 2 : Conditions d'octroi de l'aide personnalisée au logement aux personnes résidant dans un logement-foyer",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                             "Titre III : Aide personnalisée au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_nombre_parts_dot_nombre_personnes_a_charge = temp_calcul_nombre_parts_dot_nombre_personnes_a_charge
    try:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl = situation_familiale_calcul_apl_2
    except EmptyError:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=3878,
                                             start_column=14, end_line=3878,
                                             end_column=64,
                                             law_headings=["Article D832-25",
                                             "Sous-Section 2 : Conditions d'octroi de l'aide personnalisée au logement aux personnes résidant dans un logement-foyer",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                             "Titre III : Aide personnalisée au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_nombre_parts_dot_situation_familiale_calcul_apl = temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl
    def temp_calcul_nombre_parts_dot_limitation_majoration_personnes_a_charge(_:Unit):
        def temp_calcul_nombre_parts_dot_limitation_majoration_personnes_a_charge_1(_:Unit):
            return True
        def temp_calcul_nombre_parts_dot_limitation_majoration_personnes_a_charge_2(_:Unit):
            return (((date_courante_8 >= date_of_numbers(2019,9,1)) and
                (date_courante_8 < date_of_numbers(2023,4,5))) and
                limitation_majoration_personnes_a_charge_3)
        return handle_default(SourcePosition(filename="", start_line=0,
                              start_column=1, end_line=0, end_column=1,
                              law_headings=[]), [],
                              temp_calcul_nombre_parts_dot_limitation_majoration_personnes_a_charge_2,
                              temp_calcul_nombre_parts_dot_limitation_majoration_personnes_a_charge_1)
    calcul_nombre_parts_dot_limitation_majoration_personnes_a_charge = temp_calcul_nombre_parts_dot_limitation_majoration_personnes_a_charge
    result_1 = calcul_nombre_part_logement_foyer(CalculNombrePartLogementFoyerIn(date_courante_in = calcul_nombre_parts_dot_date_courante,
                                                 condition_2_du_832_25_in = calcul_nombre_parts_dot_condition_2_du_832_25,
                                                 nombre_personnes_a_charge_in = calcul_nombre_parts_dot_nombre_personnes_a_charge,
                                                 situation_familiale_calcul_apl_in = calcul_nombre_parts_dot_situation_familiale_calcul_apl,
                                                 limitation_majoration_personnes_a_charge_in = calcul_nombre_parts_dot_limitation_majoration_personnes_a_charge))
    calcul_nombre_parts_dot_n_nombre_parts_d832_25 = result_1.n_nombre_parts_d832_25
    try:
        def temp_montant_forfaitaire_d832_27(_:Unit):
            if condition_2_du_832_25_3:
                return money_of_cents_string("1500")
            else:
                return money_of_cents_string("2668")
        def temp_montant_forfaitaire_d832_27_1(_:Unit):
            return (date_courante_8 >= date_of_numbers(2019,10,1))
        temp_montant_forfaitaire_d832_27_2 = handle_default(SourcePosition(filename="",
                                                            start_line=0,
                                                            start_column=1,
                                                            end_line=0, end_column=1,
                                                            law_headings=[]), [],
                                                            temp_montant_forfaitaire_d832_27_1,
                                                            temp_montant_forfaitaire_d832_27)
    except EmptyError:
        temp_montant_forfaitaire_d832_27_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=656, start_column=11,
                                             end_line=656, end_column=38,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_d832_27 = temp_montant_forfaitaire_d832_27_2
    try:
        def temp_coefficient_multiplicateur_d832_25(_:Unit):
            if condition_2_du_832_25_3:
                return money_of_cents_string("2142091")
            else:
                return money_of_cents_string("1339340")
        def temp_coefficient_multiplicateur_d832_25_1(_:Unit):
            return (date_courante_8 >= date_of_numbers(2019,10,1))
        temp_coefficient_multiplicateur_d832_25_2 = handle_default(SourcePosition(filename="",
                                                                   start_line=0,
                                                                   start_column=1,
                                                                   end_line=0, end_column=1,
                                                                   law_headings=[]), [],
                                                                   temp_coefficient_multiplicateur_d832_25_1,
                                                                   temp_coefficient_multiplicateur_d832_25)
    except EmptyError:
        temp_coefficient_multiplicateur_d832_25_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=646, start_column=12,
                                             end_line=646, end_column=46,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficient_multiplicateur_d832_25 = temp_coefficient_multiplicateur_d832_25_2
    def temp_depense_nette_minimale_d832_27(allocation_mensuelle:Money):
        try:
            return (equivalence_loyer_eligible - allocation_mensuelle)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=653,
                                                 start_column=11,
                                                 end_line=653, end_column=41,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    depense_nette_minimale_d832_27 = temp_depense_nette_minimale_d832_27
    try:
        try:
            temp_n_nombre_parts_d832_25_1 = n_nombre_parts_d832_25_2(Unit())
        except EmptyError:
            temp_n_nombre_parts_d832_25_1 = calcul_nombre_parts_dot_n_nombre_parts_d832_25
    except EmptyError:
        temp_n_nombre_parts_d832_25_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=648, start_column=21,
                                             end_line=648, end_column=43,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    n_nombre_parts_d832_25_3 = temp_n_nombre_parts_d832_25_1
    def temp_abattement_depense_nette_minimale_d832_27(allocation_mensuelle_1:Money):
        try:
            if (depense_nette_minimale_d832_27(allocation_mensuelle_1) <=
                montant_forfaitaire_d832_27):
                return (montant_forfaitaire_d832_27 -
                    depense_nette_minimale_d832_27(allocation_mensuelle_1))
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=651,
                                                 start_column=11,
                                                 end_line=651, end_column=52,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    abattement_depense_nette_minimale_d832_27 = temp_abattement_depense_nette_minimale_d832_27
    try:
        temp_calcul_equivalence_loyer_minimale_dot_date_courante = date_courante_8
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=682, start_column=14,
                                             end_line=682, end_column=61,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_date_courante = temp_calcul_equivalence_loyer_minimale_dot_date_courante
    try:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies = ressources_menage_arrondies_1
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=3709,
                                             start_column=14, end_line=3709,
                                             end_column=75,
                                             law_headings=["Article D832-24",
                                             "Sous-Section 2 : Conditions d'octroi de l'aide personnalisée au logement aux personnes résidant dans un logement-foyer",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                             "Titre III : Aide personnalisée au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies = temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies
    try:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25 = condition_2_du_832_25_3
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=3707,
                                             start_column=14, end_line=3707,
                                             end_column=69,
                                             law_headings=["Article D832-24",
                                             "Sous-Section 2 : Conditions d'octroi de l'aide personnalisée au logement aux personnes résidant dans un logement-foyer",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                             "Titre III : Aide personnalisée au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25 = temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25
    try:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25 = n_nombre_parts_d832_25_3
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=3711,
                                             start_column=14, end_line=3711,
                                             end_column=70,
                                             law_headings=["Article D832-24",
                                             "Sous-Section 2 : Conditions d'octroi de l'aide personnalisée au logement aux personnes résidant dans un logement-foyer",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                             "Titre III : Aide personnalisée au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25 = temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25
    result_2 = calcul_equivalence_loyer_minimale(CalculEquivalenceLoyerMinimaleIn(date_courante_in = calcul_equivalence_loyer_minimale_dot_date_courante,
                                                 ressources_menage_arrondies_in = calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies,
                                                 condition_2_du_832_25_in = calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25,
                                                 n_nombre_parts_d832_25_in = calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25))
    calcul_equivalence_loyer_minimale_dot_montant = result_2.montant
    try:
        try:
            def temp_coefficient_prise_en_charge_d832_25_formule(_:Unit):
                return (decimal_of_string("0.9") -
                    (ressources_menage_arrondies_1 /
                    (coefficient_multiplicateur_d832_25 *
                    n_nombre_parts_d832_25_3)))
            def temp_coefficient_prise_en_charge_d832_25_formule_1(_:Unit):
                return condition_2_du_832_25_3
            temp_coefficient_prise_en_charge_d832_25_formule_2 = handle_default(
                SourcePosition(filename="", start_line=0, start_column=1,
                end_line=0, end_column=1, law_headings=[]), [],
                temp_coefficient_prise_en_charge_d832_25_formule_1,
                temp_coefficient_prise_en_charge_d832_25_formule)
        except EmptyError:
            if ((ressources_menage_arrondies_1 - (coefficient_r_d832_25 *
                n_nombre_parts_d832_25_3)) <
                money_of_cents_string("0")):
                temp_coefficient_prise_en_charge_d832_25_formule_3 = money_of_cents_string("0")
            else:
                temp_coefficient_prise_en_charge_d832_25_formule_3 = (ressources_menage_arrondies_1 -
                    (coefficient_r_d832_25 * n_nombre_parts_d832_25_3))
            temp_coefficient_prise_en_charge_d832_25_formule_2 = (decimal_of_string("0.95") -
                (temp_coefficient_prise_en_charge_d832_25_formule_3 /
                (coefficient_multiplicateur_d832_25 *
                n_nombre_parts_d832_25_3)))
    except EmptyError:
        temp_coefficient_prise_en_charge_d832_25_formule_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=667, start_column=10,
                                             end_line=667, end_column=17,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficient_prise_en_charge_d832_25_formule = temp_coefficient_prise_en_charge_d832_25_formule_2
    def temp_traitement_aide_finale_abattement(aide_finale_4:Money):
        try:
            if ((traitement_aide_finale_minoration_forfaitaire(aide_finale_4) -
                abattement_depense_nette_minimale_d832_27(traitement_aide_finale_minoration_forfaitaire(
                                                          aide_finale_4))) >=
                money_of_cents_string("0")):
                return (traitement_aide_finale_minoration_forfaitaire(
                    aide_finale_4) -
                    abattement_depense_nette_minimale_d832_27(traitement_aide_finale_minoration_forfaitaire(
                                                              aide_finale_4)))
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=675,
                                                 start_column=10,
                                                 end_line=675, end_column=20,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_abattement = temp_traitement_aide_finale_abattement
    try:
        temp_equivalence_loyer_minimale = calcul_equivalence_loyer_minimale_dot_montant
    except EmptyError:
        temp_equivalence_loyer_minimale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=658, start_column=12,
                                             end_line=658, end_column=38,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    equivalence_loyer_minimale = temp_equivalence_loyer_minimale
    try:
        try:
            def temp_coefficient_prise_en_charge_d832_25_coeff_arrondi(_:Unit):
                return (decimal_round(((coefficient_prise_en_charge_d832_25_formule -
                    decimal_of_string("0.005")) *
                    decimal_of_string("100."))) / decimal_of_string("100."))
            def temp_coefficient_prise_en_charge_d832_25_coeff_arrondi_1(_:Unit):
                return condition_2_du_832_25_3
            temp_coefficient_prise_en_charge_d832_25_coeff_arrondi_2 = handle_default(
                SourcePosition(filename="", start_line=0, start_column=1,
                end_line=0, end_column=1, law_headings=[]), [],
                temp_coefficient_prise_en_charge_d832_25_coeff_arrondi_1,
                temp_coefficient_prise_en_charge_d832_25_coeff_arrondi)
        except EmptyError:
            temp_coefficient_prise_en_charge_d832_25_coeff_arrondi_2 = (decimal_round(((coefficient_prise_en_charge_d832_25_formule -
                decimal_of_string("0.005")) * decimal_of_string("100."))) /
                decimal_of_string("100."))
    except EmptyError:
        temp_coefficient_prise_en_charge_d832_25_coeff_arrondi_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=668, start_column=10,
                                             end_line=668, end_column=23,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficient_prise_en_charge_d832_25_coeff_arrondi = temp_coefficient_prise_en_charge_d832_25_coeff_arrondi_2
    def temp_traitement_aide_finale_contributions_sociales_arrondi(aide_finale_5:Money):
        try:
            if ((money_round(((traitement_aide_finale_abattement(aide_finale_5) -
                contributions_sociales_dot_montant(traitement_aide_finale_abattement(
                                                   aide_finale_5))) -
                money_of_cents_string("50"))) +
                contributions_sociales_dot_montant(traitement_aide_finale_abattement(
                                                   aide_finale_5))) >=
                money_of_cents_string("0")):
                return (money_round(((traitement_aide_finale_abattement(
                    aide_finale_5) -
                    contributions_sociales_dot_montant(traitement_aide_finale_abattement(
                                                       aide_finale_5))) -
                    money_of_cents_string("50"))) +
                    contributions_sociales_dot_montant(traitement_aide_finale_abattement(
                                                       aide_finale_5)))
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=676,
                                                 start_column=10,
                                                 end_line=676, end_column=40,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_contributions_sociales_arrondi = temp_traitement_aide_finale_contributions_sociales_arrondi
    try:
        try:
            def temp_coefficient_prise_en_charge_d832_25_seuil(_:Unit):
                if (coefficient_prise_en_charge_d832_25_coeff_arrondi >=
                    decimal_of_string("0.9")):
                    return decimal_of_string("0.9")
                else:
                    return coefficient_prise_en_charge_d832_25_coeff_arrondi
            def temp_coefficient_prise_en_charge_d832_25_seuil_1(_:Unit):
                return condition_2_du_832_25_3
            temp_coefficient_prise_en_charge_d832_25_seuil_2 = handle_default(
                SourcePosition(filename="", start_line=0, start_column=1,
                end_line=0, end_column=1, law_headings=[]), [],
                temp_coefficient_prise_en_charge_d832_25_seuil_1,
                temp_coefficient_prise_en_charge_d832_25_seuil)
        except EmptyError:
            if (coefficient_prise_en_charge_d832_25_coeff_arrondi >=
                decimal_of_string("0.95")):
                temp_coefficient_prise_en_charge_d832_25_seuil_2 = decimal_of_string("0.95")
            else:
                temp_coefficient_prise_en_charge_d832_25_seuil_2 = coefficient_prise_en_charge_d832_25_coeff_arrondi
    except EmptyError:
        temp_coefficient_prise_en_charge_d832_25_seuil_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=669, start_column=10,
                                             end_line=669, end_column=15,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficient_prise_en_charge_d832_25_seuil = temp_coefficient_prise_en_charge_d832_25_seuil_2
    def temp_traitement_aide_finale_montant_minimal(aide_finale_6:Money):
        try:
            if (traitement_aide_finale_contributions_sociales_arrondi(
                aide_finale_6) <
                montant_minimal_aide_d823_24):
                return money_of_cents_string("0")
            else:
                return traitement_aide_finale_contributions_sociales_arrondi(
                    aide_finale_6)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=677,
                                                 start_column=10,
                                                 end_line=677, end_column=25,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_montant_minimal = temp_traitement_aide_finale_montant_minimal
    try:
        if (((equivalence_loyer_eligible - equivalence_loyer_minimale) *
            coefficient_prise_en_charge_d832_25_seuil) <
            money_of_cents_string("0")):
            temp_aide_finale_formule = money_of_cents_string("0")
        else:
            temp_aide_finale_formule = ((equivalence_loyer_eligible -
                equivalence_loyer_minimale) *
                coefficient_prise_en_charge_d832_25_seuil)
    except EmptyError:
        temp_aide_finale_formule = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=671, start_column=12,
                                             end_line=671, end_column=31,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    aide_finale_formule = temp_aide_finale_formule
    return CalculAidePersonnaliseeLogementFoyer(coefficient_multiplicateur_d832_25 = coefficient_multiplicateur_d832_25,
        coefficient_r_d832_25 = coefficient_r_d832_25,
        n_nombre_parts_d832_25 = n_nombre_parts_d832_25_3,
        equivalence_loyer_eligible = equivalence_loyer_eligible,
        plafond_equivalence_loyer_eligible = plafond_equivalence_loyer_eligible,
        equivalence_loyer_minimale = equivalence_loyer_minimale,
        coefficient_prise_en_charge_d832_25 = coefficient_prise_en_charge_d832_25_seuil,
        aide_finale_formule = aide_finale_formule,
        traitement_aide_finale = traitement_aide_finale_montant_minimal)

def calcul_aide_personnalisee_logement_accession_propriete(calcul_aide_personnalisee_logement_accession_propriete_in:CalculAidePersonnaliseeLogementAccessionProprieteIn):
    mensualite_principale = calcul_aide_personnalisee_logement_accession_propriete_in.mensualite_principale_in
    ressources_menage_arrondies_2 = calcul_aide_personnalisee_logement_accession_propriete_in.ressources_menage_arrondies_in
    nombre_personnes_a_charge_3 = calcul_aide_personnalisee_logement_accession_propriete_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_3 = calcul_aide_personnalisee_logement_accession_propriete_in.situation_familiale_calcul_apl_in
    type_travaux_logement = calcul_aide_personnalisee_logement_accession_propriete_in.type_travaux_logement_in
    date_signature_pret = calcul_aide_personnalisee_logement_accession_propriete_in.date_signature_pret_in
    local_habite_premiere_fois_beneficiaire = calcul_aide_personnalisee_logement_accession_propriete_in.local_habite_premiere_fois_beneficiaire_in
    date_entree_logement = calcul_aide_personnalisee_logement_accession_propriete_in.date_entree_logement_in
    copropriete = calcul_aide_personnalisee_logement_accession_propriete_in.copropriete_in
    situation_r822_11_13_17 = calcul_aide_personnalisee_logement_accession_propriete_in.situation_r822_11_13_17_in
    zone_1 = calcul_aide_personnalisee_logement_accession_propriete_in.zone_in
    type_pret = calcul_aide_personnalisee_logement_accession_propriete_in.type_pret_in
    anciennete_logement = calcul_aide_personnalisee_logement_accession_propriete_in.anciennete_logement_in
    date_courante_9 = calcul_aide_personnalisee_logement_accession_propriete_in.date_courante_in
    residence_3 = calcul_aide_personnalisee_logement_accession_propriete_in.residence_in
    try:
        temp_taux_francs_vers_euros = (decimal_of_string("1.") /
            decimal_of_string("6.55957"))
    except EmptyError:
        temp_taux_francs_vers_euros = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=743, start_column=11,
                                             end_line=743, end_column=33,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    taux_francs_vers_euros = temp_taux_francs_vers_euros
    try:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_1 = nombre_personnes_a_charge_3
    except EmptyError:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=3234,
                                             start_column=14, end_line=3234,
                                             end_column=59,
                                             law_headings=["Article D832-11",
                                             "Section 2 : Accession à la propriété",
                                             "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                             "Titre III : Aide personnalisée au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_nombre_parts_dot_nombre_personnes_a_charge_1 = temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_1
    try:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_1 = situation_familiale_calcul_apl_3
    except EmptyError:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=3236,
                                             start_column=14, end_line=3236,
                                             end_column=64,
                                             law_headings=["Article D832-11",
                                             "Section 2 : Accession à la propriété",
                                             "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                             "Titre III : Aide personnalisée au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_nombre_parts_dot_situation_familiale_calcul_apl_1 = temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_1
    result_3 = calcul_nombre_parts_accession_propriete(CalculNombrePartsAccessionProprieteIn(nombre_personnes_a_charge_in = calcul_nombre_parts_dot_nombre_personnes_a_charge_1,
                                                       situation_familiale_calcul_apl_in = calcul_nombre_parts_dot_situation_familiale_calcul_apl_1))
    calcul_nombre_parts_dot_n_nombre_parts_d832_11 = result_3.n_nombre_parts_d832_11
    try:
        temp___5 = (date_courante_9 >= date_of_numbers(2020,10,1))
    except EmptyError:
        temp___5 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=766, start_column=13,
                                             end_line=766, end_column=42,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    if not (temp___5):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                              start_line=766,
                                              start_column=13, end_line=766,
                                              end_column=42,
                                              law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    try:
        def temp_taux_tranche_superieure_d832_15_1(_:Unit):
            return decimal_of_string("0.416")
        def temp_taux_tranche_superieure_d832_15_1_1(_:Unit):
            return (date_courante_9 >= date_of_numbers(2019,10,1))
        temp_taux_tranche_superieure_d832_15_1_2 = handle_default(SourcePosition(filename="",
                                                                  start_line=0,
                                                                  start_column=1,
                                                                  end_line=0, end_column=1,
                                                                  law_headings=[]), [],
                                                                  temp_taux_tranche_superieure_d832_15_1_1,
                                                                  temp_taux_tranche_superieure_d832_15_1)
    except EmptyError:
        temp_taux_tranche_superieure_d832_15_1_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=742, start_column=11,
                                             end_line=742, end_column=44,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    taux_tranche_superieure_d832_15_1 = temp_taux_tranche_superieure_d832_15_1_2
    try:
        def temp_taux_tranche_inferieure_d832_15_1(_:Unit):
            return decimal_of_string("0.208")
        def temp_taux_tranche_inferieure_d832_15_1_1(_:Unit):
            return (date_courante_9 >= date_of_numbers(2019,10,1))
        temp_taux_tranche_inferieure_d832_15_1_2 = handle_default(SourcePosition(filename="",
                                                                  start_line=0,
                                                                  start_column=1,
                                                                  end_line=0, end_column=1,
                                                                  law_headings=[]), [],
                                                                  temp_taux_tranche_inferieure_d832_15_1_1,
                                                                  temp_taux_tranche_inferieure_d832_15_1)
    except EmptyError:
        temp_taux_tranche_inferieure_d832_15_1_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=741, start_column=11,
                                             end_line=741, end_column=44,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    taux_tranche_inferieure_d832_15_1 = temp_taux_tranche_inferieure_d832_15_1_2
    try:
        def temp_montant_limite_tranches_d832_15_1(_:Unit):
            return money_of_cents_string("560085")
        def temp_montant_limite_tranches_d832_15_1_1(_:Unit):
            return (date_courante_9 >= date_of_numbers(2019,10,1))
        temp_montant_limite_tranches_d832_15_1_2 = handle_default(SourcePosition(filename="",
                                                                  start_line=0,
                                                                  start_column=1,
                                                                  end_line=0, end_column=1,
                                                                  law_headings=[]), [],
                                                                  temp_montant_limite_tranches_d832_15_1_1,
                                                                  temp_montant_limite_tranches_d832_15_1)
    except EmptyError:
        temp_montant_limite_tranches_d832_15_1_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=740, start_column=11,
                                             end_line=740, end_column=44,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    montant_limite_tranches_d832_15_1 = temp_montant_limite_tranches_d832_15_1_2
    try:
        def temp_coefficient_multiplicateur_d832_18(_:Unit):
            return decimal_of_string("16.25")
        def temp_coefficient_multiplicateur_d832_18_1(_:Unit):
            return (date_courante_9 >= date_of_numbers(2019,10,1))
        temp_coefficient_multiplicateur_d832_18_2 = handle_default(SourcePosition(filename="",
                                                                   start_line=0,
                                                                   start_column=1,
                                                                   end_line=0, end_column=1,
                                                                   law_headings=[]), [],
                                                                   temp_coefficient_multiplicateur_d832_18_1,
                                                                   temp_coefficient_multiplicateur_d832_18)
    except EmptyError:
        temp_coefficient_multiplicateur_d832_18_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=739, start_column=11,
                                             end_line=739, end_column=45,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficient_multiplicateur_d832_18 = temp_coefficient_multiplicateur_d832_18_2
    try:
        def temp_coefficient_multiplicateur_d832_11(_:Unit):
            return money_of_cents_string("2211133")
        def temp_coefficient_multiplicateur_d832_11_1(_:Unit):
            return (date_courante_9 >= date_of_numbers(2019,10,1))
        temp_coefficient_multiplicateur_d832_11_2 = handle_default(SourcePosition(filename="",
                                                                   start_line=0,
                                                                   start_column=1,
                                                                   end_line=0, end_column=1,
                                                                   law_headings=[]), [],
                                                                   temp_coefficient_multiplicateur_d832_11_1,
                                                                   temp_coefficient_multiplicateur_d832_11)
    except EmptyError:
        temp_coefficient_multiplicateur_d832_11_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=738, start_column=11,
                                             end_line=738, end_column=45,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficient_multiplicateur_d832_11 = temp_coefficient_multiplicateur_d832_11_2
    try:
        def temp_coefficient_multiplicateur_d832_17_3(_:Unit):
            match_arg_43 = anciennete_logement
            if match_arg_43.code == NeufOuAncien_Code.Neuf:
                _ = match_arg_43.value
                if (date_signature_pret <=
                    date_of_numbers(1998,10,1)):
                    return decimal_of_string("0.0226")
                else:
                    return decimal_of_string("0.0234")
            elif match_arg_43.code == NeufOuAncien_Code.Ancien:
                ameliore_par_occupant = match_arg_43.value
                match_arg_44 = ameliore_par_occupant
                if match_arg_44.code == AmelioreParOccupant_Code.Oui:
                    _ = match_arg_44.value
                    return decimal_of_string("0.0172")
                elif match_arg_44.code == AmelioreParOccupant_Code.Non:
                    _ = match_arg_44.value
                    if (date_signature_pret <=
                        date_of_numbers(1998,10,1)):
                        return decimal_of_string("0.0226")
                    else:
                        return decimal_of_string("0.0234")
        def temp_coefficient_multiplicateur_d832_17_3_1(_:Unit):
            return (date_courante_9 >= date_of_numbers(2019,10,1))
        temp_coefficient_multiplicateur_d832_17_3_2 = handle_default(
            SourcePosition(filename="", start_line=0, start_column=1,
            end_line=0, end_column=1, law_headings=[]), [],
            temp_coefficient_multiplicateur_d832_17_3_1,
            temp_coefficient_multiplicateur_d832_17_3)
    except EmptyError:
        temp_coefficient_multiplicateur_d832_17_3_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=737, start_column=11,
                                             end_line=737, end_column=47,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficient_multiplicateur_d832_17_3 = temp_coefficient_multiplicateur_d832_17_3_2
    try:
        def temp_montant_minimal_aide_d832_10(_:Unit):
            return money_of_cents_string("1000")
        def temp_montant_minimal_aide_d832_10_1(_:Unit):
            return (date_courante_9 >= date_of_numbers(2019,10,1))
        temp_montant_minimal_aide_d832_10_2 = handle_default(SourcePosition(filename="",
                                                             start_line=0,
                                                             start_column=1,
                                                             end_line=0, end_column=1,
                                                             law_headings=[]), [],
                                                             temp_montant_minimal_aide_d832_10_1,
                                                             temp_montant_minimal_aide_d832_10)
    except EmptyError:
        temp_montant_minimal_aide_d832_10_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=736, start_column=11,
                                             end_line=736, end_column=39,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    montant_minimal_aide_d832_10 = temp_montant_minimal_aide_d832_10_2
    try:
        def temp_montant_forfaitaire_d832_10(_:Unit):
            return money_of_cents_string("500")
        def temp_montant_forfaitaire_d832_10_1(_:Unit):
            return (date_courante_9 >= date_of_numbers(2019,10,1))
        temp_montant_forfaitaire_d832_10_2 = handle_default(SourcePosition(filename="",
                                                            start_line=0,
                                                            start_column=1,
                                                            end_line=0, end_column=1,
                                                            law_headings=[]), [],
                                                            temp_montant_forfaitaire_d832_10_1,
                                                            temp_montant_forfaitaire_d832_10)
    except EmptyError:
        temp_montant_forfaitaire_d832_10_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=735, start_column=11,
                                             end_line=735, end_column=38,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_d832_10 = temp_montant_forfaitaire_d832_10_2
    try:
        try:
            def temp_montant_forfaitaire_charges_d832_10(_:Unit):
                raise EmptyError
            def temp_montant_forfaitaire_charges_d832_10_1(_:Unit):
                return False
            def temp_montant_forfaitaire_charges_d832_10_2(_:Unit):
                def temp_montant_forfaitaire_charges_d832_10_3(_:Unit):
                    match_arg_45 = situation_familiale_calcul_apl_3
                    if match_arg_45.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_45.value
                        temp_montant_forfaitaire_charges_d832_10_4 = money_of_cents_string("2699")
                    elif match_arg_45.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_45.value
                        temp_montant_forfaitaire_charges_d832_10_4 = money_of_cents_string("5399")
                    return (temp_montant_forfaitaire_charges_d832_10_4 +
                        (money_of_cents_string("1224") *
                        decimal_of_integer(nombre_personnes_a_charge_3)))
                def temp_montant_forfaitaire_charges_d832_10_5(_:Unit):
                    return (((date_courante_9 <
                        date_of_numbers(2021,10,1)) and (date_courante_9 >=
                        date_of_numbers(2020,10,1))) and copropriete)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_d832_10_5,
                                      temp_montant_forfaitaire_charges_d832_10_3)
            def temp_montant_forfaitaire_charges_d832_10_6(_:Unit):
                def temp_montant_forfaitaire_charges_d832_10_7(_:Unit):
                    match_arg_46 = situation_familiale_calcul_apl_3
                    if match_arg_46.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_46.value
                        temp_montant_forfaitaire_charges_d832_10_8 = money_of_cents_string("2710")
                    elif match_arg_46.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_46.value
                        temp_montant_forfaitaire_charges_d832_10_8 = money_of_cents_string("5422")
                    return (temp_montant_forfaitaire_charges_d832_10_8 +
                        (money_of_cents_string("1229") *
                        decimal_of_integer(nombre_personnes_a_charge_3)))
                def temp_montant_forfaitaire_charges_d832_10_9(_:Unit):
                    return (((date_courante_9 >=
                        date_of_numbers(2021,10,1)) and (date_courante_9 <
                        date_of_numbers(2022,7,1))) and copropriete)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_d832_10_9,
                                      temp_montant_forfaitaire_charges_d832_10_7)
            def temp_montant_forfaitaire_charges_d832_10_10(_:Unit):
                def temp_montant_forfaitaire_charges_d832_10_11(_:Unit):
                    match_arg_47 = situation_familiale_calcul_apl_3
                    if match_arg_47.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_47.value
                        temp_montant_forfaitaire_charges_d832_10_12 = money_of_cents_string("2805")
                    elif match_arg_47.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_47.value
                        temp_montant_forfaitaire_charges_d832_10_12 = money_of_cents_string("5612")
                    return (temp_montant_forfaitaire_charges_d832_10_12 +
                        (money_of_cents_string("1272") *
                        decimal_of_integer(nombre_personnes_a_charge_3)))
                def temp_montant_forfaitaire_charges_d832_10_13(_:Unit):
                    return ((date_courante_9 >=
                        date_of_numbers(2022,7,1)) and copropriete)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_d832_10_13,
                                      temp_montant_forfaitaire_charges_d832_10_11)
            temp_montant_forfaitaire_charges_d832_10_14 = handle_default(
                SourcePosition(filename="", start_line=0, start_column=1,
                end_line=0, end_column=1,
                law_headings=[]), [temp_montant_forfaitaire_charges_d832_10_10,
                temp_montant_forfaitaire_charges_d832_10_6,
                temp_montant_forfaitaire_charges_d832_10_2],
                temp_montant_forfaitaire_charges_d832_10_1,
                temp_montant_forfaitaire_charges_d832_10)
        except EmptyError:
            def temp_montant_forfaitaire_charges_d832_10_15(_:Unit):
                raise EmptyError
            def temp_montant_forfaitaire_charges_d832_10_16(_:Unit):
                return False
            def temp_montant_forfaitaire_charges_d832_10_17(_:Unit):
                def temp_montant_forfaitaire_charges_d832_10_18(_:Unit):
                    return (money_of_cents_string("5399") +
                        (money_of_cents_string("1224") *
                        decimal_of_integer(nombre_personnes_a_charge_3)))
                def temp_montant_forfaitaire_charges_d832_10_19(_:Unit):
                    return ((date_courante_9 <
                        date_of_numbers(2021,10,1)) and (date_courante_9 >=
                        date_of_numbers(2020,10,1)))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_d832_10_19,
                                      temp_montant_forfaitaire_charges_d832_10_18)
            def temp_montant_forfaitaire_charges_d832_10_20(_:Unit):
                def temp_montant_forfaitaire_charges_d832_10_21(_:Unit):
                    return (money_of_cents_string("5422") +
                        (money_of_cents_string("1229") *
                        decimal_of_integer(nombre_personnes_a_charge_3)))
                def temp_montant_forfaitaire_charges_d832_10_22(_:Unit):
                    return ((date_courante_9 >=
                        date_of_numbers(2021,10,1)) and (date_courante_9 <
                        date_of_numbers(2022,7,1)))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_d832_10_22,
                                      temp_montant_forfaitaire_charges_d832_10_21)
            def temp_montant_forfaitaire_charges_d832_10_23(_:Unit):
                def temp_montant_forfaitaire_charges_d832_10_24(_:Unit):
                    return (money_of_cents_string("5612") +
                        (money_of_cents_string("1272") *
                        decimal_of_integer(nombre_personnes_a_charge_3)))
                def temp_montant_forfaitaire_charges_d832_10_25(_:Unit):
                    return (date_courante_9 >= date_of_numbers(2022,7,1))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_d832_10_25,
                                      temp_montant_forfaitaire_charges_d832_10_24)
            temp_montant_forfaitaire_charges_d832_10_14 = handle_default(
                SourcePosition(filename="", start_line=0, start_column=1,
                end_line=0, end_column=1,
                law_headings=[]), [temp_montant_forfaitaire_charges_d832_10_23,
                temp_montant_forfaitaire_charges_d832_10_20,
                temp_montant_forfaitaire_charges_d832_10_17],
                temp_montant_forfaitaire_charges_d832_10_16,
                temp_montant_forfaitaire_charges_d832_10_15)
    except EmptyError:
        temp_montant_forfaitaire_charges_d832_10_14 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=734, start_column=11,
                                             end_line=734, end_column=46,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_charges_d832_10 = temp_montant_forfaitaire_charges_d832_10_14
    try:
        temp_contributions_sociales_dot_date_courante_1 = date_courante_9
    except EmptyError:
        temp_contributions_sociales_dot_date_courante_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=760, start_column=14,
                                             end_line=760, end_column=50,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    contributions_sociales_dot_date_courante_1 = temp_contributions_sociales_dot_date_courante_1
    try:
        temp_contributions_sociales_dot_lieu_1 = residence_3
    except EmptyError:
        temp_contributions_sociales_dot_lieu_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=761, start_column=14,
                                             end_line=761, end_column=41,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    contributions_sociales_dot_lieu_1 = temp_contributions_sociales_dot_lieu_1
    result_4 = contributions_sociales_aides_personnelle_logement(ContributionsSocialesAidesPersonnelleLogementIn(date_courante_in = contributions_sociales_dot_date_courante_1,
                                                                 lieu_in = contributions_sociales_dot_lieu_1))
    contributions_sociales_dot_montant_1 = result_4.montant
    def temp_calcul_plafond_mensualite_d832_10_3(date_signature_pret_1:Date):
        try:
            def temp_calcul_plafond_mensualite_d832_10_3_1(_:Unit):
                raise EmptyError
            def temp_calcul_plafond_mensualite_d832_10_3_2(_:Unit):
                return False
            def temp_calcul_plafond_mensualite_d832_10_3_3(_:Unit):
                def temp_calcul_plafond_mensualite_d832_10_3_4(_:Unit):
                    raise EmptyError
                def temp_calcul_plafond_mensualite_d832_10_3_5(_:Unit):
                    return False
                def temp_calcul_plafond_mensualite_d832_10_3_6(_:Unit):
                    def temp_calcul_plafond_mensualite_d832_10_3_7(_:Unit):
                        match_arg_48 = zone_1
                        if match_arg_48.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_48.value
                            if (nombre_personnes_a_charge_3 ==
                                integer_of_string("0")):
                                match_arg_49 = situation_familiale_calcul_apl_3
                                if match_arg_49.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_49.value
                                    temp_calcul_plafond_mensualite_d832_10_3_8 = money_of_cents_string("148100")
                                elif match_arg_49.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_49.value
                                    temp_calcul_plafond_mensualite_d832_10_3_8 = money_of_cents_string("178700")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_8 = (money_of_cents_string("209300") +
                                    (money_of_cents_string("30600") *
                                    decimal_of_integer((nombre_personnes_a_charge_3 -
                                    integer_of_string("1")))))
                        elif match_arg_48.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_48.value
                            if (nombre_personnes_a_charge_3 ==
                                integer_of_string("0")):
                                match_arg_50 = situation_familiale_calcul_apl_3
                                if match_arg_50.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_50.value
                                    temp_calcul_plafond_mensualite_d832_10_3_8 = money_of_cents_string("132000")
                                elif match_arg_50.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_50.value
                                    temp_calcul_plafond_mensualite_d832_10_3_8 = money_of_cents_string("158900")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_8 = (money_of_cents_string("185800") +
                                    (money_of_cents_string("26900") *
                                    decimal_of_integer((nombre_personnes_a_charge_3 -
                                    integer_of_string("1")))))
                        elif match_arg_48.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_48.value
                            if (nombre_personnes_a_charge_3 ==
                                integer_of_string("0")):
                                match_arg_51 = situation_familiale_calcul_apl_3
                                if match_arg_51.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_51.value
                                    temp_calcul_plafond_mensualite_d832_10_3_8 = money_of_cents_string("123300")
                                elif match_arg_51.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_51.value
                                    temp_calcul_plafond_mensualite_d832_10_3_8 = money_of_cents_string("147900")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_8 = (money_of_cents_string("172500") +
                                    (money_of_cents_string("24600") *
                                    decimal_of_integer((nombre_personnes_a_charge_3 -
                                    integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_8 *
                            taux_francs_vers_euros)
                    def temp_calcul_plafond_mensualite_d832_10_3_9(_:Unit):
                        match_arg_52 = type_pret
                        if match_arg_52.code == TypePret_Code.D331_32:
                            _ = match_arg_52.value
                            temp_calcul_plafond_mensualite_d832_10_3_10 = True
                        elif match_arg_52.code == TypePret_Code.D331_63_64:
                            _ = match_arg_52.value
                            temp_calcul_plafond_mensualite_d832_10_3_10 = False
                        elif match_arg_52.code == TypePret_Code.D331_59_8:
                            _ = match_arg_52.value
                            temp_calcul_plafond_mensualite_d832_10_3_10 = False
                        elif match_arg_52.code == TypePret_Code.D331_76_1:
                            _ = match_arg_52.value
                            temp_calcul_plafond_mensualite_d832_10_3_10 = False
                        elif match_arg_52.code == TypePret_Code.Autre:
                            _ = match_arg_52.value
                            temp_calcul_plafond_mensualite_d832_10_3_10 = False
                        match_arg_53 = anciennete_logement
                        if match_arg_53.code == NeufOuAncien_Code.Neuf:
                            _ = match_arg_53.value
                            temp_calcul_plafond_mensualite_d832_10_3_11 = False
                        elif match_arg_53.code == NeufOuAncien_Code.Ancien:
                            _ = match_arg_53.value
                            temp_calcul_plafond_mensualite_d832_10_3_11 = True
                        return ((date_courante_9 >=
                            date_of_numbers(2019,10,1)) and
                            ((date_signature_pret_1 >=
                            date_of_numbers(1994,11,27)) and
                            (temp_calcul_plafond_mensualite_d832_10_3_11 and
                            temp_calcul_plafond_mensualite_d832_10_3_10)))
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_calcul_plafond_mensualite_d832_10_3_9,
                                          temp_calcul_plafond_mensualite_d832_10_3_7)
                def temp_calcul_plafond_mensualite_d832_10_3_12(_:Unit):
                    def temp_calcul_plafond_mensualite_d832_10_3_13(_:Unit):
                        match_arg_54 = zone_1
                        if match_arg_54.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_54.value
                            if (nombre_personnes_a_charge_3 ==
                                integer_of_string("0")):
                                match_arg_55 = situation_familiale_calcul_apl_3
                                if match_arg_55.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_55.value
                                    temp_calcul_plafond_mensualite_d832_10_3_14 = money_of_cents_string("184000")
                                elif match_arg_55.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_55.value
                                    temp_calcul_plafond_mensualite_d832_10_3_14 = money_of_cents_string("220000")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_14 = (money_of_cents_string("260000") +
                                    (money_of_cents_string("38000") *
                                    decimal_of_integer((nombre_personnes_a_charge_3 -
                                    integer_of_string("1")))))
                        elif match_arg_54.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_54.value
                            if (nombre_personnes_a_charge_3 ==
                                integer_of_string("0")):
                                match_arg_56 = situation_familiale_calcul_apl_3
                                if match_arg_56.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_56.value
                                    temp_calcul_plafond_mensualite_d832_10_3_14 = money_of_cents_string("164200")
                                elif match_arg_56.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_56.value
                                    temp_calcul_plafond_mensualite_d832_10_3_14 = money_of_cents_string("197700")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_14 = (money_of_cents_string("231200") +
                                    (money_of_cents_string("33500") *
                                    decimal_of_integer((nombre_personnes_a_charge_3 -
                                    integer_of_string("1")))))
                        elif match_arg_54.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_54.value
                            if (nombre_personnes_a_charge_3 ==
                                integer_of_string("0")):
                                match_arg_57 = situation_familiale_calcul_apl_3
                                if match_arg_57.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_57.value
                                    temp_calcul_plafond_mensualite_d832_10_3_14 = money_of_cents_string("153200")
                                elif match_arg_57.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_57.value
                                    temp_calcul_plafond_mensualite_d832_10_3_14 = money_of_cents_string("183700")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_14 = (money_of_cents_string("214200") +
                                    (money_of_cents_string("30500") *
                                    decimal_of_integer((nombre_personnes_a_charge_3 -
                                    integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_14 *
                            taux_francs_vers_euros)
                    def temp_calcul_plafond_mensualite_d832_10_3_15(_:Unit):
                        match_arg_58 = type_pret
                        if match_arg_58.code == TypePret_Code.D331_32:
                            _ = match_arg_58.value
                            temp_calcul_plafond_mensualite_d832_10_3_16 = True
                        elif match_arg_58.code == TypePret_Code.D331_63_64:
                            _ = match_arg_58.value
                            temp_calcul_plafond_mensualite_d832_10_3_16 = False
                        elif match_arg_58.code == TypePret_Code.D331_59_8:
                            _ = match_arg_58.value
                            temp_calcul_plafond_mensualite_d832_10_3_16 = False
                        elif match_arg_58.code == TypePret_Code.D331_76_1:
                            _ = match_arg_58.value
                            temp_calcul_plafond_mensualite_d832_10_3_16 = False
                        elif match_arg_58.code == TypePret_Code.Autre:
                            _ = match_arg_58.value
                            temp_calcul_plafond_mensualite_d832_10_3_16 = False
                        match_arg_59 = anciennete_logement
                        if match_arg_59.code == NeufOuAncien_Code.Neuf:
                            _ = match_arg_59.value
                            temp_calcul_plafond_mensualite_d832_10_3_17 = True
                        elif match_arg_59.code == NeufOuAncien_Code.Ancien:
                            _ = match_arg_59.value
                            temp_calcul_plafond_mensualite_d832_10_3_17 = False
                        return ((date_courante_9 >=
                            date_of_numbers(2019,10,1)) and
                            ((date_signature_pret_1 >=
                            date_of_numbers(1994,11,27)) and
                            (temp_calcul_plafond_mensualite_d832_10_3_17 and
                            temp_calcul_plafond_mensualite_d832_10_3_16)))
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_calcul_plafond_mensualite_d832_10_3_15,
                                          temp_calcul_plafond_mensualite_d832_10_3_13)
                def temp_calcul_plafond_mensualite_d832_10_3_18(_:Unit):
                    def temp_calcul_plafond_mensualite_d832_10_3_19(_:Unit):
                        match_arg_60 = zone_1
                        if match_arg_60.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_60.value
                            if (nombre_personnes_a_charge_3 ==
                                integer_of_string("0")):
                                match_arg_61 = situation_familiale_calcul_apl_3
                                if match_arg_61.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_61.value
                                    temp_calcul_plafond_mensualite_d832_10_3_20 = money_of_cents_string("167800")
                                elif match_arg_61.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_61.value
                                    temp_calcul_plafond_mensualite_d832_10_3_20 = money_of_cents_string("202500")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_20 = (money_of_cents_string("237200") +
                                    (money_of_cents_string("34700") *
                                    decimal_of_integer((nombre_personnes_a_charge_3 -
                                    integer_of_string("1")))))
                        elif match_arg_60.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_60.value
                            if (nombre_personnes_a_charge_3 ==
                                integer_of_string("0")):
                                match_arg_62 = situation_familiale_calcul_apl_3
                                if match_arg_62.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_62.value
                                    temp_calcul_plafond_mensualite_d832_10_3_20 = money_of_cents_string("149600")
                                elif match_arg_62.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_62.value
                                    temp_calcul_plafond_mensualite_d832_10_3_20 = money_of_cents_string("180100")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_20 = (money_of_cents_string("210600") +
                                    (money_of_cents_string("30500") *
                                    decimal_of_integer((nombre_personnes_a_charge_3 -
                                    integer_of_string("1")))))
                        elif match_arg_60.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_60.value
                            if (nombre_personnes_a_charge_3 ==
                                integer_of_string("0")):
                                match_arg_63 = situation_familiale_calcul_apl_3
                                if match_arg_63.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_63.value
                                    temp_calcul_plafond_mensualite_d832_10_3_20 = money_of_cents_string("139700")
                                elif match_arg_63.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_63.value
                                    temp_calcul_plafond_mensualite_d832_10_3_20 = money_of_cents_string("167600")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_20 = (money_of_cents_string("195500") +
                                    (money_of_cents_string("27900") *
                                    decimal_of_integer((nombre_personnes_a_charge_3 -
                                    integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_20 *
                            taux_francs_vers_euros)
                    def temp_calcul_plafond_mensualite_d832_10_3_21(_:Unit):
                        match_arg_64 = type_pret
                        if match_arg_64.code == TypePret_Code.D331_32:
                            _ = match_arg_64.value
                            temp_calcul_plafond_mensualite_d832_10_3_22 = True
                        elif match_arg_64.code == TypePret_Code.D331_63_64:
                            _ = match_arg_64.value
                            temp_calcul_plafond_mensualite_d832_10_3_22 = False
                        elif match_arg_64.code == TypePret_Code.D331_59_8:
                            _ = match_arg_64.value
                            temp_calcul_plafond_mensualite_d832_10_3_22 = False
                        elif match_arg_64.code == TypePret_Code.D331_76_1:
                            _ = match_arg_64.value
                            temp_calcul_plafond_mensualite_d832_10_3_22 = False
                        elif match_arg_64.code == TypePret_Code.Autre:
                            _ = match_arg_64.value
                            temp_calcul_plafond_mensualite_d832_10_3_22 = False
                        match_arg_65 = anciennete_logement
                        if match_arg_65.code == NeufOuAncien_Code.Neuf:
                            _ = match_arg_65.value
                            temp_calcul_plafond_mensualite_d832_10_3_23 = False
                        elif match_arg_65.code == NeufOuAncien_Code.Ancien:
                            _ = match_arg_65.value
                            temp_calcul_plafond_mensualite_d832_10_3_23 = True
                        return ((date_courante_9 >=
                            date_of_numbers(2019,10,1)) and
                            ((date_signature_pret_1 >=
                            date_of_numbers(1992,6,30)) and
                            ((date_signature_pret_1 <
                            date_of_numbers(1994,11,27)) and
                            (temp_calcul_plafond_mensualite_d832_10_3_23 and
                            temp_calcul_plafond_mensualite_d832_10_3_22))))
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_calcul_plafond_mensualite_d832_10_3_21,
                                          temp_calcul_plafond_mensualite_d832_10_3_19)
                def temp_calcul_plafond_mensualite_d832_10_3_24(_:Unit):
                    def temp_calcul_plafond_mensualite_d832_10_3_25(_:Unit):
                        match_arg_66 = zone_1
                        if match_arg_66.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_66.value
                            if (nombre_personnes_a_charge_3 ==
                                integer_of_string("0")):
                                match_arg_67 = situation_familiale_calcul_apl_3
                                if match_arg_67.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_67.value
                                    temp_calcul_plafond_mensualite_d832_10_3_26 = money_of_cents_string("208500")
                                elif match_arg_67.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_67.value
                                    temp_calcul_plafond_mensualite_d832_10_3_26 = money_of_cents_string("251500")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_26 = (money_of_cents_string("294500") +
                                    (money_of_cents_string("43000") *
                                    decimal_of_integer((nombre_personnes_a_charge_3 -
                                    integer_of_string("1")))))
                        elif match_arg_66.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_66.value
                            if (nombre_personnes_a_charge_3 ==
                                integer_of_string("0")):
                                match_arg_68 = situation_familiale_calcul_apl_3
                                if match_arg_68.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_68.value
                                    temp_calcul_plafond_mensualite_d832_10_3_26 = money_of_cents_string("186000")
                                elif match_arg_68.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_68.value
                                    temp_calcul_plafond_mensualite_d832_10_3_26 = money_of_cents_string("223900")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_26 = (money_of_cents_string("261800") +
                                    (money_of_cents_string("37900") *
                                    decimal_of_integer((nombre_personnes_a_charge_3 -
                                    integer_of_string("1")))))
                        elif match_arg_66.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_66.value
                            if (nombre_personnes_a_charge_3 ==
                                integer_of_string("0")):
                                match_arg_69 = situation_familiale_calcul_apl_3
                                if match_arg_69.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_69.value
                                    temp_calcul_plafond_mensualite_d832_10_3_26 = money_of_cents_string("173600")
                                elif match_arg_69.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_69.value
                                    temp_calcul_plafond_mensualite_d832_10_3_26 = money_of_cents_string("208200")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_26 = (money_of_cents_string("242800") +
                                    (money_of_cents_string("35600") *
                                    decimal_of_integer((nombre_personnes_a_charge_3 -
                                    integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_26 *
                            taux_francs_vers_euros)
                    def temp_calcul_plafond_mensualite_d832_10_3_27(_:Unit):
                        match_arg_70 = type_pret
                        if match_arg_70.code == TypePret_Code.D331_32:
                            _ = match_arg_70.value
                            temp_calcul_plafond_mensualite_d832_10_3_28 = True
                        elif match_arg_70.code == TypePret_Code.D331_63_64:
                            _ = match_arg_70.value
                            temp_calcul_plafond_mensualite_d832_10_3_28 = False
                        elif match_arg_70.code == TypePret_Code.D331_59_8:
                            _ = match_arg_70.value
                            temp_calcul_plafond_mensualite_d832_10_3_28 = False
                        elif match_arg_70.code == TypePret_Code.D331_76_1:
                            _ = match_arg_70.value
                            temp_calcul_plafond_mensualite_d832_10_3_28 = False
                        elif match_arg_70.code == TypePret_Code.Autre:
                            _ = match_arg_70.value
                            temp_calcul_plafond_mensualite_d832_10_3_28 = False
                        match_arg_71 = anciennete_logement
                        if match_arg_71.code == NeufOuAncien_Code.Neuf:
                            _ = match_arg_71.value
                            temp_calcul_plafond_mensualite_d832_10_3_29 = True
                        elif match_arg_71.code == NeufOuAncien_Code.Ancien:
                            _ = match_arg_71.value
                            temp_calcul_plafond_mensualite_d832_10_3_29 = False
                        return ((date_courante_9 >=
                            date_of_numbers(2019,10,1)) and
                            ((date_signature_pret_1 >=
                            date_of_numbers(1992,6,30)) and
                            ((date_signature_pret_1 <
                            date_of_numbers(1994,11,27)) and
                            (temp_calcul_plafond_mensualite_d832_10_3_29 and
                            temp_calcul_plafond_mensualite_d832_10_3_28))))
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_calcul_plafond_mensualite_d832_10_3_27,
                                          temp_calcul_plafond_mensualite_d832_10_3_25)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [temp_calcul_plafond_mensualite_d832_10_3_24,
                                      temp_calcul_plafond_mensualite_d832_10_3_18,
                                      temp_calcul_plafond_mensualite_d832_10_3_12,
                                      temp_calcul_plafond_mensualite_d832_10_3_6],
                                      temp_calcul_plafond_mensualite_d832_10_3_5,
                                      temp_calcul_plafond_mensualite_d832_10_3_4)
            def temp_calcul_plafond_mensualite_d832_10_3_30(_:Unit):
                try:
                    def temp_calcul_plafond_mensualite_d832_10_3_31(_:Unit):
                        if (nombre_personnes_a_charge_3 ==
                            integer_of_string("0")):
                            match_arg_72 = situation_familiale_calcul_apl_3
                            if match_arg_72.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_72.value
                                temp_calcul_plafond_mensualite_d832_10_3_32 = money_of_cents_string("86900")
                            elif match_arg_72.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_72.value
                                temp_calcul_plafond_mensualite_d832_10_3_32 = money_of_cents_string("97100")
                        else:
                            temp_calcul_plafond_mensualite_d832_10_3_32 = (money_of_cents_string("107300") +
                                (money_of_cents_string("10200") *
                                decimal_of_integer((nombre_personnes_a_charge_3 -
                                integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_32 *
                            taux_francs_vers_euros)
                    def temp_calcul_plafond_mensualite_d832_10_3_33(_:Unit):
                        match_arg_73 = type_pret
                        if match_arg_73.code == TypePret_Code.D331_32:
                            _ = match_arg_73.value
                            temp_calcul_plafond_mensualite_d832_10_3_34 = False
                        elif match_arg_73.code == TypePret_Code.D331_63_64:
                            _ = match_arg_73.value
                            temp_calcul_plafond_mensualite_d832_10_3_34 = True
                        elif match_arg_73.code == TypePret_Code.D331_59_8:
                            _ = match_arg_73.value
                            temp_calcul_plafond_mensualite_d832_10_3_34 = False
                        elif match_arg_73.code == TypePret_Code.D331_76_1:
                            _ = match_arg_73.value
                            temp_calcul_plafond_mensualite_d832_10_3_34 = False
                        elif match_arg_73.code == TypePret_Code.Autre:
                            _ = match_arg_73.value
                            temp_calcul_plafond_mensualite_d832_10_3_34 = False
                        match_arg_74 = anciennete_logement
                        if match_arg_74.code == NeufOuAncien_Code.Neuf:
                            _ = match_arg_74.value
                            temp_calcul_plafond_mensualite_d832_10_3_35 = False
                        elif match_arg_74.code == NeufOuAncien_Code.Ancien:
                            ameliore_par_occupant_1 = match_arg_74.value
                            match_arg_75 = ameliore_par_occupant_1
                            if match_arg_75.code == AmelioreParOccupant_Code.Oui:
                                _ = match_arg_75.value
                                temp_calcul_plafond_mensualite_d832_10_3_35 = True
                            elif match_arg_75.code == AmelioreParOccupant_Code.Non:
                                _ = match_arg_75.value
                                temp_calcul_plafond_mensualite_d832_10_3_35 = False
                        return ((date_courante_9 >=
                            date_of_numbers(2019,10,1)) and
                            ((date_courante_9 >=
                            date_of_numbers(2023,1,1)) and
                            ((date_signature_pret_1 >=
                            date_of_numbers(1992,6,30)) and
                            ((date_signature_pret_1 <=
                            date_of_numbers(1994,11,27)) and
                            (temp_calcul_plafond_mensualite_d832_10_3_35 and
                            temp_calcul_plafond_mensualite_d832_10_3_34)))))
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_calcul_plafond_mensualite_d832_10_3_33,
                                          temp_calcul_plafond_mensualite_d832_10_3_31)
                except EmptyError:
                    def temp_calcul_plafond_mensualite_d832_10_3_36(_:Unit):
                        raise EmptyError
                    def temp_calcul_plafond_mensualite_d832_10_3_37(_:Unit):
                        return False
                    def temp_calcul_plafond_mensualite_d832_10_3_38(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_39(_:Unit):
                            match_arg_76 = zone_1
                            if match_arg_76.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_76.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_77 = situation_familiale_calcul_apl_3
                                    if match_arg_77.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_77.value
                                        return money_of_cents_string("29986")
                                    elif match_arg_77.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_77.value
                                        return money_of_cents_string("36187")
                                else:
                                    return (money_of_cents_string("42386") +
                                        (money_of_cents_string("6201") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_76.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_76.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_78 = situation_familiale_calcul_apl_3
                                    if match_arg_78.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_78.value
                                        return money_of_cents_string("26730")
                                    elif match_arg_78.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_78.value
                                        return money_of_cents_string("32193")
                                else:
                                    return (money_of_cents_string("37656") +
                                        (money_of_cents_string("5463") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_76.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_76.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_79 = situation_familiale_calcul_apl_3
                                    if match_arg_79.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_79.value
                                        return money_of_cents_string("24964")
                                    elif match_arg_79.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_79.value
                                        return money_of_cents_string("29948")
                                else:
                                    return (money_of_cents_string("34934") +
                                        (money_of_cents_string("4986") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_40(_:Unit):
                            match_arg_80 = type_pret
                            if match_arg_80.code == TypePret_Code.D331_32:
                                _ = match_arg_80.value
                                temp_calcul_plafond_mensualite_d832_10_3_41 = False
                            elif match_arg_80.code == TypePret_Code.D331_63_64:
                                _ = match_arg_80.value
                                temp_calcul_plafond_mensualite_d832_10_3_41 = True
                            elif match_arg_80.code == TypePret_Code.D331_59_8:
                                _ = match_arg_80.value
                                temp_calcul_plafond_mensualite_d832_10_3_41 = False
                            elif match_arg_80.code == TypePret_Code.D331_76_1:
                                _ = match_arg_80.value
                                temp_calcul_plafond_mensualite_d832_10_3_41 = False
                            elif match_arg_80.code == TypePret_Code.Autre:
                                _ = match_arg_80.value
                                temp_calcul_plafond_mensualite_d832_10_3_41 = False
                            match_arg_81 = anciennete_logement
                            if match_arg_81.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_81.value
                                temp_calcul_plafond_mensualite_d832_10_3_42 = False
                            elif match_arg_81.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_81.value
                                temp_calcul_plafond_mensualite_d832_10_3_42 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2019,9,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_42 and
                                temp_calcul_plafond_mensualite_d832_10_3_41))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_40,
                                              temp_calcul_plafond_mensualite_d832_10_3_39)
                    def temp_calcul_plafond_mensualite_d832_10_3_43(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_44(_:Unit):
                            match_arg_82 = zone_1
                            if match_arg_82.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_82.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_83 = situation_familiale_calcul_apl_3
                                    if match_arg_83.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_83.value
                                        return money_of_cents_string("37252")
                                    elif match_arg_83.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_83.value
                                        return money_of_cents_string("44941")
                                else:
                                    return (money_of_cents_string("52629") +
                                        (money_of_cents_string("7687") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_82.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_82.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_84 = situation_familiale_calcul_apl_3
                                    if match_arg_84.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_84.value
                                        return money_of_cents_string("33244")
                                    elif match_arg_84.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_84.value
                                        return money_of_cents_string("40013")
                                else:
                                    return (money_of_cents_string("46783") +
                                        (money_of_cents_string("6768") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_82.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_82.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_85 = situation_familiale_calcul_apl_3
                                    if match_arg_85.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_85.value
                                        return money_of_cents_string("31036")
                                    elif match_arg_85.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_85.value
                                        return money_of_cents_string("37215")
                                else:
                                    return (money_of_cents_string("43394") +
                                        (money_of_cents_string("6179") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_45(_:Unit):
                            match_arg_86 = type_pret
                            if match_arg_86.code == TypePret_Code.D331_32:
                                _ = match_arg_86.value
                                temp_calcul_plafond_mensualite_d832_10_3_46 = False
                            elif match_arg_86.code == TypePret_Code.D331_63_64:
                                _ = match_arg_86.value
                                temp_calcul_plafond_mensualite_d832_10_3_46 = True
                            elif match_arg_86.code == TypePret_Code.D331_59_8:
                                _ = match_arg_86.value
                                temp_calcul_plafond_mensualite_d832_10_3_46 = False
                            elif match_arg_86.code == TypePret_Code.D331_76_1:
                                _ = match_arg_86.value
                                temp_calcul_plafond_mensualite_d832_10_3_46 = False
                            elif match_arg_86.code == TypePret_Code.Autre:
                                _ = match_arg_86.value
                                temp_calcul_plafond_mensualite_d832_10_3_46 = False
                            match_arg_87 = anciennete_logement
                            if match_arg_87.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_87.value
                                temp_calcul_plafond_mensualite_d832_10_3_47 = True
                            elif match_arg_87.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_87.value
                                temp_calcul_plafond_mensualite_d832_10_3_47 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2019,9,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_47 and
                                temp_calcul_plafond_mensualite_d832_10_3_46))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_45,
                                              temp_calcul_plafond_mensualite_d832_10_3_44)
                    def temp_calcul_plafond_mensualite_d832_10_3_48(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_49(_:Unit):
                            match_arg_88 = zone_1
                            if match_arg_88.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_88.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_89 = situation_familiale_calcul_apl_3
                                    if match_arg_89.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_89.value
                                        return money_of_cents_string("29897")
                                    elif match_arg_89.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_89.value
                                        return money_of_cents_string("36079")
                                else:
                                    return (money_of_cents_string("42260") +
                                        (money_of_cents_string("6182") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_88.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_88.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_90 = situation_familiale_calcul_apl_3
                                    if match_arg_90.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_90.value
                                        return money_of_cents_string("26650")
                                    elif match_arg_90.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_90.value
                                        return money_of_cents_string("32097")
                                else:
                                    return (money_of_cents_string("37543") +
                                        (money_of_cents_string("5447") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_88.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_88.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_91 = situation_familiale_calcul_apl_3
                                    if match_arg_91.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_91.value
                                        return money_of_cents_string("24889")
                                    elif match_arg_91.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_91.value
                                        return money_of_cents_string("29858")
                                else:
                                    return (money_of_cents_string("34829") +
                                        (money_of_cents_string("4971") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_50(_:Unit):
                            match_arg_92 = type_pret
                            if match_arg_92.code == TypePret_Code.D331_32:
                                _ = match_arg_92.value
                                temp_calcul_plafond_mensualite_d832_10_3_51 = False
                            elif match_arg_92.code == TypePret_Code.D331_63_64:
                                _ = match_arg_92.value
                                temp_calcul_plafond_mensualite_d832_10_3_51 = True
                            elif match_arg_92.code == TypePret_Code.D331_59_8:
                                _ = match_arg_92.value
                                temp_calcul_plafond_mensualite_d832_10_3_51 = False
                            elif match_arg_92.code == TypePret_Code.D331_76_1:
                                _ = match_arg_92.value
                                temp_calcul_plafond_mensualite_d832_10_3_51 = False
                            elif match_arg_92.code == TypePret_Code.Autre:
                                _ = match_arg_92.value
                                temp_calcul_plafond_mensualite_d832_10_3_51 = False
                            match_arg_93 = anciennete_logement
                            if match_arg_93.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_93.value
                                temp_calcul_plafond_mensualite_d832_10_3_52 = False
                            elif match_arg_93.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_93.value
                                temp_calcul_plafond_mensualite_d832_10_3_52 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2017,9,30)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2019,9,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_52 and
                                temp_calcul_plafond_mensualite_d832_10_3_51)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_50,
                                              temp_calcul_plafond_mensualite_d832_10_3_49)
                    def temp_calcul_plafond_mensualite_d832_10_3_53(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_54(_:Unit):
                            match_arg_94 = zone_1
                            if match_arg_94.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_94.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_95 = situation_familiale_calcul_apl_3
                                    if match_arg_95.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_95.value
                                        return money_of_cents_string("37140")
                                    elif match_arg_95.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_95.value
                                        return money_of_cents_string("44807")
                                else:
                                    return (money_of_cents_string("52472") +
                                        (money_of_cents_string("7664") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_94.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_94.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_96 = situation_familiale_calcul_apl_3
                                    if match_arg_96.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_96.value
                                        return money_of_cents_string("33145")
                                    elif match_arg_96.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_96.value
                                        return money_of_cents_string("39893")
                                else:
                                    return (money_of_cents_string("46643") +
                                        (money_of_cents_string("6748") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_94.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_94.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_97 = situation_familiale_calcul_apl_3
                                    if match_arg_97.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_97.value
                                        return money_of_cents_string("30943")
                                    elif match_arg_97.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_97.value
                                        return money_of_cents_string("37103")
                                else:
                                    return (money_of_cents_string("43264") +
                                        (money_of_cents_string("6161") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_55(_:Unit):
                            match_arg_98 = type_pret
                            if match_arg_98.code == TypePret_Code.D331_32:
                                _ = match_arg_98.value
                                temp_calcul_plafond_mensualite_d832_10_3_56 = False
                            elif match_arg_98.code == TypePret_Code.D331_63_64:
                                _ = match_arg_98.value
                                temp_calcul_plafond_mensualite_d832_10_3_56 = True
                            elif match_arg_98.code == TypePret_Code.D331_59_8:
                                _ = match_arg_98.value
                                temp_calcul_plafond_mensualite_d832_10_3_56 = False
                            elif match_arg_98.code == TypePret_Code.D331_76_1:
                                _ = match_arg_98.value
                                temp_calcul_plafond_mensualite_d832_10_3_56 = False
                            elif match_arg_98.code == TypePret_Code.Autre:
                                _ = match_arg_98.value
                                temp_calcul_plafond_mensualite_d832_10_3_56 = False
                            match_arg_99 = anciennete_logement
                            if match_arg_99.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_99.value
                                temp_calcul_plafond_mensualite_d832_10_3_57 = True
                            elif match_arg_99.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_99.value
                                temp_calcul_plafond_mensualite_d832_10_3_57 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2017,9,30)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2019,9,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_57 and
                                temp_calcul_plafond_mensualite_d832_10_3_56)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_55,
                                              temp_calcul_plafond_mensualite_d832_10_3_54)
                    def temp_calcul_plafond_mensualite_d832_10_3_58(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_59(_:Unit):
                            match_arg_100 = zone_1
                            if match_arg_100.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_100.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_101 = situation_familiale_calcul_apl_3
                                    if match_arg_101.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_101.value
                                        return money_of_cents_string("29674")
                                    elif match_arg_101.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_101.value
                                        return money_of_cents_string("35810")
                                else:
                                    return (money_of_cents_string("41945") +
                                        (money_of_cents_string("6136") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_100.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_100.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_102 = situation_familiale_calcul_apl_3
                                    if match_arg_102.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_102.value
                                        return money_of_cents_string("26452")
                                    elif match_arg_102.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_102.value
                                        return money_of_cents_string("31858")
                                else:
                                    return (money_of_cents_string("37264") +
                                        (money_of_cents_string("5406") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_100.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_100.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_103 = situation_familiale_calcul_apl_3
                                    if match_arg_103.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_103.value
                                        return money_of_cents_string("24704")
                                    elif match_arg_103.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_103.value
                                        return money_of_cents_string("29636")
                                else:
                                    return (money_of_cents_string("34570") +
                                        (money_of_cents_string("4934") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_60(_:Unit):
                            match_arg_104 = type_pret
                            if match_arg_104.code == TypePret_Code.D331_32:
                                _ = match_arg_104.value
                                temp_calcul_plafond_mensualite_d832_10_3_61 = False
                            elif match_arg_104.code == TypePret_Code.D331_63_64:
                                _ = match_arg_104.value
                                temp_calcul_plafond_mensualite_d832_10_3_61 = True
                            elif match_arg_104.code == TypePret_Code.D331_59_8:
                                _ = match_arg_104.value
                                temp_calcul_plafond_mensualite_d832_10_3_61 = False
                            elif match_arg_104.code == TypePret_Code.D331_76_1:
                                _ = match_arg_104.value
                                temp_calcul_plafond_mensualite_d832_10_3_61 = False
                            elif match_arg_104.code == TypePret_Code.Autre:
                                _ = match_arg_104.value
                                temp_calcul_plafond_mensualite_d832_10_3_61 = False
                            match_arg_105 = anciennete_logement
                            if match_arg_105.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_105.value
                                temp_calcul_plafond_mensualite_d832_10_3_62 = False
                            elif match_arg_105.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_105.value
                                temp_calcul_plafond_mensualite_d832_10_3_62 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2015,9,30)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2017,9,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_62 and
                                temp_calcul_plafond_mensualite_d832_10_3_61)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_60,
                                              temp_calcul_plafond_mensualite_d832_10_3_59)
                    def temp_calcul_plafond_mensualite_d832_10_3_63(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_64(_:Unit):
                            match_arg_106 = zone_1
                            if match_arg_106.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_106.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_107 = situation_familiale_calcul_apl_3
                                    if match_arg_107.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_107.value
                                        return money_of_cents_string("36864")
                                    elif match_arg_107.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_107.value
                                        return money_of_cents_string("44473")
                                else:
                                    return (money_of_cents_string("52081") +
                                        (money_of_cents_string("7607") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_106.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_106.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_108 = situation_familiale_calcul_apl_3
                                    if match_arg_108.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_108.value
                                        return money_of_cents_string("32898")
                                    elif match_arg_108.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_108.value
                                        return money_of_cents_string("39596")
                                else:
                                    return (money_of_cents_string("46296") +
                                        (money_of_cents_string("6698") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_106.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_106.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_109 = situation_familiale_calcul_apl_3
                                    if match_arg_109.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_109.value
                                        return money_of_cents_string("30713")
                                    elif match_arg_109.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_109.value
                                        return money_of_cents_string("36827")
                                else:
                                    return (money_of_cents_string("42942") +
                                        (money_of_cents_string("6115") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_65(_:Unit):
                            match_arg_110 = type_pret
                            if match_arg_110.code == TypePret_Code.D331_32:
                                _ = match_arg_110.value
                                temp_calcul_plafond_mensualite_d832_10_3_66 = False
                            elif match_arg_110.code == TypePret_Code.D331_63_64:
                                _ = match_arg_110.value
                                temp_calcul_plafond_mensualite_d832_10_3_66 = True
                            elif match_arg_110.code == TypePret_Code.D331_59_8:
                                _ = match_arg_110.value
                                temp_calcul_plafond_mensualite_d832_10_3_66 = False
                            elif match_arg_110.code == TypePret_Code.D331_76_1:
                                _ = match_arg_110.value
                                temp_calcul_plafond_mensualite_d832_10_3_66 = False
                            elif match_arg_110.code == TypePret_Code.Autre:
                                _ = match_arg_110.value
                                temp_calcul_plafond_mensualite_d832_10_3_66 = False
                            match_arg_111 = anciennete_logement
                            if match_arg_111.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_111.value
                                temp_calcul_plafond_mensualite_d832_10_3_67 = True
                            elif match_arg_111.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_111.value
                                temp_calcul_plafond_mensualite_d832_10_3_67 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2015,9,30)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2017,9,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_67 and
                                temp_calcul_plafond_mensualite_d832_10_3_66)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_65,
                                              temp_calcul_plafond_mensualite_d832_10_3_64)
                    def temp_calcul_plafond_mensualite_d832_10_3_68(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_69(_:Unit):
                            match_arg_112 = zone_1
                            if match_arg_112.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_112.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_113 = situation_familiale_calcul_apl_3
                                    if match_arg_113.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_113.value
                                        return money_of_cents_string("29650")
                                    elif match_arg_113.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_113.value
                                        return money_of_cents_string("35781")
                                else:
                                    return (money_of_cents_string("41911") +
                                        (money_of_cents_string("6131") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_112.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_112.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_114 = situation_familiale_calcul_apl_3
                                    if match_arg_114.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_114.value
                                        return money_of_cents_string("26431")
                                    elif match_arg_114.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_114.value
                                        return money_of_cents_string("31833")
                                else:
                                    return (money_of_cents_string("37234") +
                                        (money_of_cents_string("5402") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_112.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_112.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_115 = situation_familiale_calcul_apl_3
                                    if match_arg_115.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_115.value
                                        return money_of_cents_string("24684")
                                    elif match_arg_115.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_115.value
                                        return money_of_cents_string("29612")
                                else:
                                    return (money_of_cents_string("34542") +
                                        (money_of_cents_string("4930") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_70(_:Unit):
                            match_arg_116 = type_pret
                            if match_arg_116.code == TypePret_Code.D331_32:
                                _ = match_arg_116.value
                                temp_calcul_plafond_mensualite_d832_10_3_71 = False
                            elif match_arg_116.code == TypePret_Code.D331_63_64:
                                _ = match_arg_116.value
                                temp_calcul_plafond_mensualite_d832_10_3_71 = True
                            elif match_arg_116.code == TypePret_Code.D331_59_8:
                                _ = match_arg_116.value
                                temp_calcul_plafond_mensualite_d832_10_3_71 = False
                            elif match_arg_116.code == TypePret_Code.D331_76_1:
                                _ = match_arg_116.value
                                temp_calcul_plafond_mensualite_d832_10_3_71 = False
                            elif match_arg_116.code == TypePret_Code.Autre:
                                _ = match_arg_116.value
                                temp_calcul_plafond_mensualite_d832_10_3_71 = False
                            match_arg_117 = anciennete_logement
                            if match_arg_117.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_117.value
                                temp_calcul_plafond_mensualite_d832_10_3_72 = False
                            elif match_arg_117.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_117.value
                                temp_calcul_plafond_mensualite_d832_10_3_72 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2014,9,30)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2015,9,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_72 and
                                temp_calcul_plafond_mensualite_d832_10_3_71)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_70,
                                              temp_calcul_plafond_mensualite_d832_10_3_69)
                    def temp_calcul_plafond_mensualite_d832_10_3_73(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_74(_:Unit):
                            match_arg_118 = zone_1
                            if match_arg_118.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_118.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_119 = situation_familiale_calcul_apl_3
                                    if match_arg_119.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_119.value
                                        return money_of_cents_string("36835")
                                    elif match_arg_119.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_119.value
                                        return money_of_cents_string("44437")
                                else:
                                    return (money_of_cents_string("52039") +
                                        (money_of_cents_string("7601") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_118.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_118.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_120 = situation_familiale_calcul_apl_3
                                    if match_arg_120.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_120.value
                                        return money_of_cents_string("32872")
                                    elif match_arg_120.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_120.value
                                        return money_of_cents_string("39564")
                                else:
                                    return (money_of_cents_string("46259") +
                                        (money_of_cents_string("6693") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_118.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_118.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_121 = situation_familiale_calcul_apl_3
                                    if match_arg_121.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_121.value
                                        return money_of_cents_string("30688")
                                    elif match_arg_121.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_121.value
                                        return money_of_cents_string("36798")
                                else:
                                    return (money_of_cents_string("42908") +
                                        (money_of_cents_string("6110") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_75(_:Unit):
                            match_arg_122 = type_pret
                            if match_arg_122.code == TypePret_Code.D331_32:
                                _ = match_arg_122.value
                                temp_calcul_plafond_mensualite_d832_10_3_76 = False
                            elif match_arg_122.code == TypePret_Code.D331_63_64:
                                _ = match_arg_122.value
                                temp_calcul_plafond_mensualite_d832_10_3_76 = True
                            elif match_arg_122.code == TypePret_Code.D331_59_8:
                                _ = match_arg_122.value
                                temp_calcul_plafond_mensualite_d832_10_3_76 = False
                            elif match_arg_122.code == TypePret_Code.D331_76_1:
                                _ = match_arg_122.value
                                temp_calcul_plafond_mensualite_d832_10_3_76 = False
                            elif match_arg_122.code == TypePret_Code.Autre:
                                _ = match_arg_122.value
                                temp_calcul_plafond_mensualite_d832_10_3_76 = False
                            match_arg_123 = anciennete_logement
                            if match_arg_123.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_123.value
                                temp_calcul_plafond_mensualite_d832_10_3_77 = True
                            elif match_arg_123.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_123.value
                                temp_calcul_plafond_mensualite_d832_10_3_77 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2014,9,30)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2015,9,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_77 and
                                temp_calcul_plafond_mensualite_d832_10_3_76)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_75,
                                              temp_calcul_plafond_mensualite_d832_10_3_74)
                    def temp_calcul_plafond_mensualite_d832_10_3_78(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_79(_:Unit):
                            match_arg_124 = zone_1
                            if match_arg_124.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_124.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_125 = situation_familiale_calcul_apl_3
                                    if match_arg_125.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_125.value
                                        return money_of_cents_string("29482")
                                    elif match_arg_125.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_125.value
                                        return money_of_cents_string("35578")
                                else:
                                    return (money_of_cents_string("41673") +
                                        (money_of_cents_string("6096") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_124.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_124.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_126 = situation_familiale_calcul_apl_3
                                    if match_arg_126.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_126.value
                                        return money_of_cents_string("26281")
                                    elif match_arg_126.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_126.value
                                        return money_of_cents_string("31653")
                                else:
                                    return (money_of_cents_string("37023") +
                                        (money_of_cents_string("5371") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_124.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_124.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_127 = situation_familiale_calcul_apl_3
                                    if match_arg_127.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_127.value
                                        return money_of_cents_string("24544")
                                    elif match_arg_127.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_127.value
                                        return money_of_cents_string("29444")
                                else:
                                    return (money_of_cents_string("34346") +
                                        (money_of_cents_string("4902") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_80(_:Unit):
                            match_arg_128 = type_pret
                            if match_arg_128.code == TypePret_Code.D331_32:
                                _ = match_arg_128.value
                                temp_calcul_plafond_mensualite_d832_10_3_81 = False
                            elif match_arg_128.code == TypePret_Code.D331_63_64:
                                _ = match_arg_128.value
                                temp_calcul_plafond_mensualite_d832_10_3_81 = True
                            elif match_arg_128.code == TypePret_Code.D331_59_8:
                                _ = match_arg_128.value
                                temp_calcul_plafond_mensualite_d832_10_3_81 = False
                            elif match_arg_128.code == TypePret_Code.D331_76_1:
                                _ = match_arg_128.value
                                temp_calcul_plafond_mensualite_d832_10_3_81 = False
                            elif match_arg_128.code == TypePret_Code.Autre:
                                _ = match_arg_128.value
                                temp_calcul_plafond_mensualite_d832_10_3_81 = False
                            match_arg_129 = anciennete_logement
                            if match_arg_129.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_129.value
                                temp_calcul_plafond_mensualite_d832_10_3_82 = False
                            elif match_arg_129.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_129.value
                                temp_calcul_plafond_mensualite_d832_10_3_82 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2012,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2014,9,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_82 and
                                temp_calcul_plafond_mensualite_d832_10_3_81)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_80,
                                              temp_calcul_plafond_mensualite_d832_10_3_79)
                    def temp_calcul_plafond_mensualite_d832_10_3_83(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_84(_:Unit):
                            match_arg_130 = zone_1
                            if match_arg_130.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_130.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_131 = situation_familiale_calcul_apl_3
                                    if match_arg_131.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_131.value
                                        return money_of_cents_string("36626")
                                    elif match_arg_131.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_131.value
                                        return money_of_cents_string("44185")
                                else:
                                    return (money_of_cents_string("51744") +
                                        (money_of_cents_string("7558") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_130.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_130.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_132 = situation_familiale_calcul_apl_3
                                    if match_arg_132.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_132.value
                                        return money_of_cents_string("32686")
                                    elif match_arg_132.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_132.value
                                        return money_of_cents_string("39340")
                                else:
                                    return (money_of_cents_string("45997") +
                                        (money_of_cents_string("6655") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_130.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_130.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_133 = situation_familiale_calcul_apl_3
                                    if match_arg_133.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_133.value
                                        return money_of_cents_string("30514")
                                    elif match_arg_133.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_133.value
                                        return money_of_cents_string("36589")
                                else:
                                    return (money_of_cents_string("42665") +
                                        (money_of_cents_string("6075") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_85(_:Unit):
                            match_arg_134 = type_pret
                            if match_arg_134.code == TypePret_Code.D331_32:
                                _ = match_arg_134.value
                                temp_calcul_plafond_mensualite_d832_10_3_86 = False
                            elif match_arg_134.code == TypePret_Code.D331_63_64:
                                _ = match_arg_134.value
                                temp_calcul_plafond_mensualite_d832_10_3_86 = True
                            elif match_arg_134.code == TypePret_Code.D331_59_8:
                                _ = match_arg_134.value
                                temp_calcul_plafond_mensualite_d832_10_3_86 = False
                            elif match_arg_134.code == TypePret_Code.D331_76_1:
                                _ = match_arg_134.value
                                temp_calcul_plafond_mensualite_d832_10_3_86 = False
                            elif match_arg_134.code == TypePret_Code.Autre:
                                _ = match_arg_134.value
                                temp_calcul_plafond_mensualite_d832_10_3_86 = False
                            match_arg_135 = anciennete_logement
                            if match_arg_135.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_135.value
                                temp_calcul_plafond_mensualite_d832_10_3_87 = True
                            elif match_arg_135.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_135.value
                                temp_calcul_plafond_mensualite_d832_10_3_87 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2012,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2014,9,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_87 and
                                temp_calcul_plafond_mensualite_d832_10_3_86)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_85,
                                              temp_calcul_plafond_mensualite_d832_10_3_84)
                    def temp_calcul_plafond_mensualite_d832_10_3_88(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_89(_:Unit):
                            match_arg_136 = zone_1
                            if match_arg_136.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_136.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_137 = situation_familiale_calcul_apl_3
                                    if match_arg_137.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_137.value
                                        return money_of_cents_string("28861")
                                    elif match_arg_137.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_137.value
                                        return money_of_cents_string("34829")
                                else:
                                    return (money_of_cents_string("40796") +
                                        (money_of_cents_string("5968") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_136.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_136.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_138 = situation_familiale_calcul_apl_3
                                    if match_arg_138.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_138.value
                                        return money_of_cents_string("25728")
                                    elif match_arg_138.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_138.value
                                        return money_of_cents_string("30987")
                                else:
                                    return (money_of_cents_string("36244") +
                                        (money_of_cents_string("5258") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_136.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_136.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_139 = situation_familiale_calcul_apl_3
                                    if match_arg_139.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_139.value
                                        return money_of_cents_string("24027")
                                    elif match_arg_139.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_139.value
                                        return money_of_cents_string("28824")
                                else:
                                    return (money_of_cents_string("33623") +
                                        (money_of_cents_string("4799") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_90(_:Unit):
                            match_arg_140 = type_pret
                            if match_arg_140.code == TypePret_Code.D331_32:
                                _ = match_arg_140.value
                                temp_calcul_plafond_mensualite_d832_10_3_91 = False
                            elif match_arg_140.code == TypePret_Code.D331_63_64:
                                _ = match_arg_140.value
                                temp_calcul_plafond_mensualite_d832_10_3_91 = True
                            elif match_arg_140.code == TypePret_Code.D331_59_8:
                                _ = match_arg_140.value
                                temp_calcul_plafond_mensualite_d832_10_3_91 = False
                            elif match_arg_140.code == TypePret_Code.D331_76_1:
                                _ = match_arg_140.value
                                temp_calcul_plafond_mensualite_d832_10_3_91 = False
                            elif match_arg_140.code == TypePret_Code.Autre:
                                _ = match_arg_140.value
                                temp_calcul_plafond_mensualite_d832_10_3_91 = False
                            match_arg_141 = anciennete_logement
                            if match_arg_141.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_141.value
                                temp_calcul_plafond_mensualite_d832_10_3_92 = False
                            elif match_arg_141.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_141.value
                                temp_calcul_plafond_mensualite_d832_10_3_92 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2011,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2012,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_92 and
                                temp_calcul_plafond_mensualite_d832_10_3_91)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_90,
                                              temp_calcul_plafond_mensualite_d832_10_3_89)
                    def temp_calcul_plafond_mensualite_d832_10_3_93(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_94(_:Unit):
                            match_arg_142 = zone_1
                            if match_arg_142.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_142.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_143 = situation_familiale_calcul_apl_3
                                    if match_arg_143.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_143.value
                                        return money_of_cents_string("35855")
                                    elif match_arg_143.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_143.value
                                        return money_of_cents_string("43255")
                                else:
                                    return (money_of_cents_string("50655") +
                                        (money_of_cents_string("7399") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_142.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_142.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_144 = situation_familiale_calcul_apl_3
                                    if match_arg_144.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_144.value
                                        return money_of_cents_string("31998")
                                    elif match_arg_144.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_144.value
                                        return money_of_cents_string("38512")
                                else:
                                    return (money_of_cents_string("45029") +
                                        (money_of_cents_string("6515") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_142.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_142.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_145 = situation_familiale_calcul_apl_3
                                    if match_arg_145.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_145.value
                                        return money_of_cents_string("29872")
                                    elif match_arg_145.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_145.value
                                        return money_of_cents_string("35819")
                                else:
                                    return (money_of_cents_string("41767") +
                                        (money_of_cents_string("5947") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_95(_:Unit):
                            match_arg_146 = type_pret
                            if match_arg_146.code == TypePret_Code.D331_32:
                                _ = match_arg_146.value
                                temp_calcul_plafond_mensualite_d832_10_3_96 = False
                            elif match_arg_146.code == TypePret_Code.D331_63_64:
                                _ = match_arg_146.value
                                temp_calcul_plafond_mensualite_d832_10_3_96 = True
                            elif match_arg_146.code == TypePret_Code.D331_59_8:
                                _ = match_arg_146.value
                                temp_calcul_plafond_mensualite_d832_10_3_96 = False
                            elif match_arg_146.code == TypePret_Code.D331_76_1:
                                _ = match_arg_146.value
                                temp_calcul_plafond_mensualite_d832_10_3_96 = False
                            elif match_arg_146.code == TypePret_Code.Autre:
                                _ = match_arg_146.value
                                temp_calcul_plafond_mensualite_d832_10_3_96 = False
                            match_arg_147 = anciennete_logement
                            if match_arg_147.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_147.value
                                temp_calcul_plafond_mensualite_d832_10_3_97 = True
                            elif match_arg_147.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_147.value
                                temp_calcul_plafond_mensualite_d832_10_3_97 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2011,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2012,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_97 and
                                temp_calcul_plafond_mensualite_d832_10_3_96)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_95,
                                              temp_calcul_plafond_mensualite_d832_10_3_94)
                    def temp_calcul_plafond_mensualite_d832_10_3_98(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_99(_:Unit):
                            match_arg_148 = zone_1
                            if match_arg_148.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_148.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_149 = situation_familiale_calcul_apl_3
                                    if match_arg_149.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_149.value
                                        return money_of_cents_string("28575")
                                    elif match_arg_149.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_149.value
                                        return money_of_cents_string("34484")
                                else:
                                    return (money_of_cents_string("40392") +
                                        (money_of_cents_string("5909") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_148.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_148.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_150 = situation_familiale_calcul_apl_3
                                    if match_arg_150.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_150.value
                                        return money_of_cents_string("25473")
                                    elif match_arg_150.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_150.value
                                        return money_of_cents_string("30680")
                                else:
                                    return (money_of_cents_string("35885") +
                                        (money_of_cents_string("5206") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_148.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_148.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_151 = situation_familiale_calcul_apl_3
                                    if match_arg_151.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_151.value
                                        return money_of_cents_string("23789")
                                    elif match_arg_151.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_151.value
                                        return money_of_cents_string("28539")
                                else:
                                    return (money_of_cents_string("33290") +
                                        (money_of_cents_string("4751") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_100(_:Unit):
                            match_arg_152 = type_pret
                            if match_arg_152.code == TypePret_Code.D331_32:
                                _ = match_arg_152.value
                                temp_calcul_plafond_mensualite_d832_10_3_101 = False
                            elif match_arg_152.code == TypePret_Code.D331_63_64:
                                _ = match_arg_152.value
                                temp_calcul_plafond_mensualite_d832_10_3_101 = True
                            elif match_arg_152.code == TypePret_Code.D331_59_8:
                                _ = match_arg_152.value
                                temp_calcul_plafond_mensualite_d832_10_3_101 = False
                            elif match_arg_152.code == TypePret_Code.D331_76_1:
                                _ = match_arg_152.value
                                temp_calcul_plafond_mensualite_d832_10_3_101 = False
                            elif match_arg_152.code == TypePret_Code.Autre:
                                _ = match_arg_152.value
                                temp_calcul_plafond_mensualite_d832_10_3_101 = False
                            match_arg_153 = anciennete_logement
                            if match_arg_153.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_153.value
                                temp_calcul_plafond_mensualite_d832_10_3_102 = False
                            elif match_arg_153.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_153.value
                                temp_calcul_plafond_mensualite_d832_10_3_102 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2010,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2011,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_102 and
                                temp_calcul_plafond_mensualite_d832_10_3_101)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_100,
                                              temp_calcul_plafond_mensualite_d832_10_3_99)
                    def temp_calcul_plafond_mensualite_d832_10_3_103(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_104(_:Unit):
                            match_arg_154 = zone_1
                            if match_arg_154.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_154.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_155 = situation_familiale_calcul_apl_3
                                    if match_arg_155.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_155.value
                                        return money_of_cents_string("35500")
                                    elif match_arg_155.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_155.value
                                        return money_of_cents_string("42827")
                                else:
                                    return (money_of_cents_string("50153") +
                                        (money_of_cents_string("7326") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_154.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_154.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_156 = situation_familiale_calcul_apl_3
                                    if match_arg_156.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_156.value
                                        return money_of_cents_string("31681")
                                    elif match_arg_156.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_156.value
                                        return money_of_cents_string("38131")
                                else:
                                    return (money_of_cents_string("44583") +
                                        (money_of_cents_string("6450") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_154.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_154.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_157 = situation_familiale_calcul_apl_3
                                    if match_arg_157.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_157.value
                                        return money_of_cents_string("29576")
                                    elif match_arg_157.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_157.value
                                        return money_of_cents_string("35464")
                                else:
                                    return (money_of_cents_string("41353") +
                                        (money_of_cents_string("5888") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_105(_:Unit):
                            match_arg_158 = type_pret
                            if match_arg_158.code == TypePret_Code.D331_32:
                                _ = match_arg_158.value
                                temp_calcul_plafond_mensualite_d832_10_3_106 = False
                            elif match_arg_158.code == TypePret_Code.D331_63_64:
                                _ = match_arg_158.value
                                temp_calcul_plafond_mensualite_d832_10_3_106 = True
                            elif match_arg_158.code == TypePret_Code.D331_59_8:
                                _ = match_arg_158.value
                                temp_calcul_plafond_mensualite_d832_10_3_106 = False
                            elif match_arg_158.code == TypePret_Code.D331_76_1:
                                _ = match_arg_158.value
                                temp_calcul_plafond_mensualite_d832_10_3_106 = False
                            elif match_arg_158.code == TypePret_Code.Autre:
                                _ = match_arg_158.value
                                temp_calcul_plafond_mensualite_d832_10_3_106 = False
                            match_arg_159 = anciennete_logement
                            if match_arg_159.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_159.value
                                temp_calcul_plafond_mensualite_d832_10_3_107 = True
                            elif match_arg_159.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_159.value
                                temp_calcul_plafond_mensualite_d832_10_3_107 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2010,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2011,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_107 and
                                temp_calcul_plafond_mensualite_d832_10_3_106)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_105,
                                              temp_calcul_plafond_mensualite_d832_10_3_104)
                    def temp_calcul_plafond_mensualite_d832_10_3_108(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_109(_:Unit):
                            match_arg_160 = zone_1
                            if match_arg_160.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_160.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_161 = situation_familiale_calcul_apl_3
                                    if match_arg_161.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_161.value
                                        return money_of_cents_string("28264")
                                    elif match_arg_161.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_161.value
                                        return money_of_cents_string("34109")
                                else:
                                    return (money_of_cents_string("39953") +
                                        (money_of_cents_string("5845") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_160.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_160.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_162 = situation_familiale_calcul_apl_3
                                    if match_arg_162.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_162.value
                                        return money_of_cents_string("25196")
                                    elif match_arg_162.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_162.value
                                        return money_of_cents_string("30346")
                                else:
                                    return (money_of_cents_string("35495") +
                                        (money_of_cents_string("5149") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_160.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_160.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_163 = situation_familiale_calcul_apl_3
                                    if match_arg_163.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_163.value
                                        return money_of_cents_string("23530")
                                    elif match_arg_163.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_163.value
                                        return money_of_cents_string("28228")
                                else:
                                    return (money_of_cents_string("32928") +
                                        (money_of_cents_string("4699") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_110(_:Unit):
                            match_arg_164 = type_pret
                            if match_arg_164.code == TypePret_Code.D331_32:
                                _ = match_arg_164.value
                                temp_calcul_plafond_mensualite_d832_10_3_111 = False
                            elif match_arg_164.code == TypePret_Code.D331_63_64:
                                _ = match_arg_164.value
                                temp_calcul_plafond_mensualite_d832_10_3_111 = True
                            elif match_arg_164.code == TypePret_Code.D331_59_8:
                                _ = match_arg_164.value
                                temp_calcul_plafond_mensualite_d832_10_3_111 = False
                            elif match_arg_164.code == TypePret_Code.D331_76_1:
                                _ = match_arg_164.value
                                temp_calcul_plafond_mensualite_d832_10_3_111 = False
                            elif match_arg_164.code == TypePret_Code.Autre:
                                _ = match_arg_164.value
                                temp_calcul_plafond_mensualite_d832_10_3_111 = False
                            match_arg_165 = anciennete_logement
                            if match_arg_165.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_165.value
                                temp_calcul_plafond_mensualite_d832_10_3_112 = False
                            elif match_arg_165.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_165.value
                                temp_calcul_plafond_mensualite_d832_10_3_112 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2009,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2010,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_112 and
                                temp_calcul_plafond_mensualite_d832_10_3_111)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_110,
                                              temp_calcul_plafond_mensualite_d832_10_3_109)
                    def temp_calcul_plafond_mensualite_d832_10_3_113(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_114(_:Unit):
                            match_arg_166 = zone_1
                            if match_arg_166.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_166.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_167 = situation_familiale_calcul_apl_3
                                    if match_arg_167.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_167.value
                                        return money_of_cents_string("35114")
                                    elif match_arg_167.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_167.value
                                        return money_of_cents_string("42361")
                                else:
                                    return (money_of_cents_string("49607") +
                                        (money_of_cents_string("7246") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_166.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_166.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_168 = situation_familiale_calcul_apl_3
                                    if match_arg_168.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_168.value
                                        return money_of_cents_string("31336")
                                    elif match_arg_168.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_168.value
                                        return money_of_cents_string("37716")
                                else:
                                    return (money_of_cents_string("44098") +
                                        (money_of_cents_string("6380") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_166.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_166.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_169 = situation_familiale_calcul_apl_3
                                    if match_arg_169.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_169.value
                                        return money_of_cents_string("29254")
                                    elif match_arg_169.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_169.value
                                        return money_of_cents_string("35078")
                                else:
                                    return (money_of_cents_string("40903") +
                                        (money_of_cents_string("5824") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_115(_:Unit):
                            match_arg_170 = type_pret
                            if match_arg_170.code == TypePret_Code.D331_32:
                                _ = match_arg_170.value
                                temp_calcul_plafond_mensualite_d832_10_3_116 = False
                            elif match_arg_170.code == TypePret_Code.D331_63_64:
                                _ = match_arg_170.value
                                temp_calcul_plafond_mensualite_d832_10_3_116 = True
                            elif match_arg_170.code == TypePret_Code.D331_59_8:
                                _ = match_arg_170.value
                                temp_calcul_plafond_mensualite_d832_10_3_116 = False
                            elif match_arg_170.code == TypePret_Code.D331_76_1:
                                _ = match_arg_170.value
                                temp_calcul_plafond_mensualite_d832_10_3_116 = False
                            elif match_arg_170.code == TypePret_Code.Autre:
                                _ = match_arg_170.value
                                temp_calcul_plafond_mensualite_d832_10_3_116 = False
                            match_arg_171 = anciennete_logement
                            if match_arg_171.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_171.value
                                temp_calcul_plafond_mensualite_d832_10_3_117 = True
                            elif match_arg_171.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_171.value
                                temp_calcul_plafond_mensualite_d832_10_3_117 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2009,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2010,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_117 and
                                temp_calcul_plafond_mensualite_d832_10_3_116)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_115,
                                              temp_calcul_plafond_mensualite_d832_10_3_114)
                    def temp_calcul_plafond_mensualite_d832_10_3_118(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_119(_:Unit):
                            match_arg_172 = zone_1
                            if match_arg_172.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_172.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_173 = situation_familiale_calcul_apl_3
                                    if match_arg_173.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_173.value
                                        return money_of_cents_string("28174")
                                    elif match_arg_173.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_173.value
                                        return money_of_cents_string("34000")
                                else:
                                    return (money_of_cents_string("39826") +
                                        (money_of_cents_string("5826") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_172.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_172.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_174 = situation_familiale_calcul_apl_3
                                    if match_arg_174.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_174.value
                                        return money_of_cents_string("25116")
                                    elif match_arg_174.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_174.value
                                        return money_of_cents_string("30249")
                                else:
                                    return (money_of_cents_string("35382") +
                                        (money_of_cents_string("5133") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_172.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_172.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_175 = situation_familiale_calcul_apl_3
                                    if match_arg_175.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_175.value
                                        return money_of_cents_string("23455")
                                    elif match_arg_175.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_175.value
                                        return money_of_cents_string("28138")
                                else:
                                    return (money_of_cents_string("32823") +
                                        (money_of_cents_string("4684") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_120(_:Unit):
                            match_arg_176 = type_pret
                            if match_arg_176.code == TypePret_Code.D331_32:
                                _ = match_arg_176.value
                                temp_calcul_plafond_mensualite_d832_10_3_121 = False
                            elif match_arg_176.code == TypePret_Code.D331_63_64:
                                _ = match_arg_176.value
                                temp_calcul_plafond_mensualite_d832_10_3_121 = True
                            elif match_arg_176.code == TypePret_Code.D331_59_8:
                                _ = match_arg_176.value
                                temp_calcul_plafond_mensualite_d832_10_3_121 = False
                            elif match_arg_176.code == TypePret_Code.D331_76_1:
                                _ = match_arg_176.value
                                temp_calcul_plafond_mensualite_d832_10_3_121 = False
                            elif match_arg_176.code == TypePret_Code.Autre:
                                _ = match_arg_176.value
                                temp_calcul_plafond_mensualite_d832_10_3_121 = False
                            match_arg_177 = anciennete_logement
                            if match_arg_177.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_177.value
                                temp_calcul_plafond_mensualite_d832_10_3_122 = False
                            elif match_arg_177.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_177.value
                                temp_calcul_plafond_mensualite_d832_10_3_122 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2008,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2009,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_122 and
                                temp_calcul_plafond_mensualite_d832_10_3_121)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_120,
                                              temp_calcul_plafond_mensualite_d832_10_3_119)
                    def temp_calcul_plafond_mensualite_d832_10_3_123(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_124(_:Unit):
                            match_arg_178 = zone_1
                            if match_arg_178.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_178.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_179 = situation_familiale_calcul_apl_3
                                    if match_arg_179.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_179.value
                                        return money_of_cents_string("35002")
                                    elif match_arg_179.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_179.value
                                        return money_of_cents_string("42226")
                                else:
                                    return (money_of_cents_string("49449") +
                                        (money_of_cents_string("7223") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_178.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_178.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_180 = situation_familiale_calcul_apl_3
                                    if match_arg_180.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_180.value
                                        return money_of_cents_string("31236")
                                    elif match_arg_180.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_180.value
                                        return money_of_cents_string("37596")
                                else:
                                    return (money_of_cents_string("43957") +
                                        (money_of_cents_string("6360") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_178.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_178.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_181 = situation_familiale_calcul_apl_3
                                    if match_arg_181.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_181.value
                                        return money_of_cents_string("29161")
                                    elif match_arg_181.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_181.value
                                        return money_of_cents_string("34966")
                                else:
                                    return (money_of_cents_string("40773") +
                                        (money_of_cents_string("5805") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_125(_:Unit):
                            match_arg_182 = type_pret
                            if match_arg_182.code == TypePret_Code.D331_32:
                                _ = match_arg_182.value
                                temp_calcul_plafond_mensualite_d832_10_3_126 = False
                            elif match_arg_182.code == TypePret_Code.D331_63_64:
                                _ = match_arg_182.value
                                temp_calcul_plafond_mensualite_d832_10_3_126 = True
                            elif match_arg_182.code == TypePret_Code.D331_59_8:
                                _ = match_arg_182.value
                                temp_calcul_plafond_mensualite_d832_10_3_126 = False
                            elif match_arg_182.code == TypePret_Code.D331_76_1:
                                _ = match_arg_182.value
                                temp_calcul_plafond_mensualite_d832_10_3_126 = False
                            elif match_arg_182.code == TypePret_Code.Autre:
                                _ = match_arg_182.value
                                temp_calcul_plafond_mensualite_d832_10_3_126 = False
                            match_arg_183 = anciennete_logement
                            if match_arg_183.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_183.value
                                temp_calcul_plafond_mensualite_d832_10_3_127 = True
                            elif match_arg_183.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_183.value
                                temp_calcul_plafond_mensualite_d832_10_3_127 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2008,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2009,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_127 and
                                temp_calcul_plafond_mensualite_d832_10_3_126)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_125,
                                              temp_calcul_plafond_mensualite_d832_10_3_124)
                    def temp_calcul_plafond_mensualite_d832_10_3_128(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_129(_:Unit):
                            match_arg_184 = zone_1
                            if match_arg_184.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_184.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_185 = situation_familiale_calcul_apl_3
                                    if match_arg_185.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_185.value
                                        return money_of_cents_string("27367")
                                    elif match_arg_185.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_185.value
                                        return money_of_cents_string("33026")
                                else:
                                    return (money_of_cents_string("38685") +
                                        (money_of_cents_string("5659") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_184.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_184.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_186 = situation_familiale_calcul_apl_3
                                    if match_arg_186.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_186.value
                                        return money_of_cents_string("24396")
                                    elif match_arg_186.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_186.value
                                        return money_of_cents_string("29382")
                                else:
                                    return (money_of_cents_string("34368") +
                                        (money_of_cents_string("4986") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_184.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_184.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_187 = situation_familiale_calcul_apl_3
                                    if match_arg_187.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_187.value
                                        return money_of_cents_string("22783")
                                    elif match_arg_187.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_187.value
                                        return money_of_cents_string("27332")
                                else:
                                    return (money_of_cents_string("31882") +
                                        (money_of_cents_string("4550") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_130(_:Unit):
                            match_arg_188 = type_pret
                            if match_arg_188.code == TypePret_Code.D331_32:
                                _ = match_arg_188.value
                                temp_calcul_plafond_mensualite_d832_10_3_131 = False
                            elif match_arg_188.code == TypePret_Code.D331_63_64:
                                _ = match_arg_188.value
                                temp_calcul_plafond_mensualite_d832_10_3_131 = True
                            elif match_arg_188.code == TypePret_Code.D331_59_8:
                                _ = match_arg_188.value
                                temp_calcul_plafond_mensualite_d832_10_3_131 = False
                            elif match_arg_188.code == TypePret_Code.D331_76_1:
                                _ = match_arg_188.value
                                temp_calcul_plafond_mensualite_d832_10_3_131 = False
                            elif match_arg_188.code == TypePret_Code.Autre:
                                _ = match_arg_188.value
                                temp_calcul_plafond_mensualite_d832_10_3_131 = False
                            match_arg_189 = anciennete_logement
                            if match_arg_189.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_189.value
                                temp_calcul_plafond_mensualite_d832_10_3_132 = False
                            elif match_arg_189.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_189.value
                                temp_calcul_plafond_mensualite_d832_10_3_132 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2007,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2008,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_132 and
                                temp_calcul_plafond_mensualite_d832_10_3_131)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_130,
                                              temp_calcul_plafond_mensualite_d832_10_3_129)
                    def temp_calcul_plafond_mensualite_d832_10_3_133(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_134(_:Unit):
                            match_arg_190 = zone_1
                            if match_arg_190.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_190.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_191 = situation_familiale_calcul_apl_3
                                    if match_arg_191.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_191.value
                                        return money_of_cents_string("33999")
                                    elif match_arg_191.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_191.value
                                        return money_of_cents_string("41016")
                                else:
                                    return (money_of_cents_string("48032") +
                                        (money_of_cents_string("7016") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_190.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_190.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_192 = situation_familiale_calcul_apl_3
                                    if match_arg_192.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_192.value
                                        return money_of_cents_string("30341")
                                    elif match_arg_192.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_192.value
                                        return money_of_cents_string("36519")
                                else:
                                    return (money_of_cents_string("42697") +
                                        (money_of_cents_string("6178") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_190.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_190.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_193 = situation_familiale_calcul_apl_3
                                    if match_arg_193.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_193.value
                                        return money_of_cents_string("28325")
                                    elif match_arg_193.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_193.value
                                        return money_of_cents_string("33964")
                                else:
                                    return (money_of_cents_string("39605") +
                                        (money_of_cents_string("5639") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_135(_:Unit):
                            match_arg_194 = type_pret
                            if match_arg_194.code == TypePret_Code.D331_32:
                                _ = match_arg_194.value
                                temp_calcul_plafond_mensualite_d832_10_3_136 = False
                            elif match_arg_194.code == TypePret_Code.D331_63_64:
                                _ = match_arg_194.value
                                temp_calcul_plafond_mensualite_d832_10_3_136 = True
                            elif match_arg_194.code == TypePret_Code.D331_59_8:
                                _ = match_arg_194.value
                                temp_calcul_plafond_mensualite_d832_10_3_136 = False
                            elif match_arg_194.code == TypePret_Code.D331_76_1:
                                _ = match_arg_194.value
                                temp_calcul_plafond_mensualite_d832_10_3_136 = False
                            elif match_arg_194.code == TypePret_Code.Autre:
                                _ = match_arg_194.value
                                temp_calcul_plafond_mensualite_d832_10_3_136 = False
                            match_arg_195 = anciennete_logement
                            if match_arg_195.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_195.value
                                temp_calcul_plafond_mensualite_d832_10_3_137 = True
                            elif match_arg_195.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_195.value
                                temp_calcul_plafond_mensualite_d832_10_3_137 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2007,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2008,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_137 and
                                temp_calcul_plafond_mensualite_d832_10_3_136)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_135,
                                              temp_calcul_plafond_mensualite_d832_10_3_134)
                    def temp_calcul_plafond_mensualite_d832_10_3_138(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_139(_:Unit):
                            match_arg_196 = zone_1
                            if match_arg_196.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_196.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_197 = situation_familiale_calcul_apl_3
                                    if match_arg_197.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_197.value
                                        return money_of_cents_string("26632")
                                    elif match_arg_197.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_197.value
                                        return money_of_cents_string("32139")
                                else:
                                    return (money_of_cents_string("37646") +
                                        (money_of_cents_string("5507") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_196.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_196.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_198 = situation_familiale_calcul_apl_3
                                    if match_arg_198.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_198.value
                                        return money_of_cents_string("23741")
                                    elif match_arg_198.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_198.value
                                        return money_of_cents_string("28593")
                                else:
                                    return (money_of_cents_string("33445") +
                                        (money_of_cents_string("4852") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_196.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_196.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_199 = situation_familiale_calcul_apl_3
                                    if match_arg_199.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_199.value
                                        return money_of_cents_string("22171")
                                    elif match_arg_199.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_199.value
                                        return money_of_cents_string("36598")
                                else:
                                    return (money_of_cents_string("31026") +
                                        (money_of_cents_string("4428") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_140(_:Unit):
                            match_arg_200 = type_pret
                            if match_arg_200.code == TypePret_Code.D331_32:
                                _ = match_arg_200.value
                                temp_calcul_plafond_mensualite_d832_10_3_141 = False
                            elif match_arg_200.code == TypePret_Code.D331_63_64:
                                _ = match_arg_200.value
                                temp_calcul_plafond_mensualite_d832_10_3_141 = True
                            elif match_arg_200.code == TypePret_Code.D331_59_8:
                                _ = match_arg_200.value
                                temp_calcul_plafond_mensualite_d832_10_3_141 = False
                            elif match_arg_200.code == TypePret_Code.D331_76_1:
                                _ = match_arg_200.value
                                temp_calcul_plafond_mensualite_d832_10_3_141 = False
                            elif match_arg_200.code == TypePret_Code.Autre:
                                _ = match_arg_200.value
                                temp_calcul_plafond_mensualite_d832_10_3_141 = False
                            match_arg_201 = anciennete_logement
                            if match_arg_201.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_201.value
                                temp_calcul_plafond_mensualite_d832_10_3_142 = False
                            elif match_arg_201.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_201.value
                                temp_calcul_plafond_mensualite_d832_10_3_142 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2006,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2007,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_142 and
                                temp_calcul_plafond_mensualite_d832_10_3_141)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_140,
                                              temp_calcul_plafond_mensualite_d832_10_3_139)
                    def temp_calcul_plafond_mensualite_d832_10_3_143(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_144(_:Unit):
                            match_arg_202 = zone_1
                            if match_arg_202.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_202.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_203 = situation_familiale_calcul_apl_3
                                    if match_arg_203.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_203.value
                                        return money_of_cents_string("33086")
                                    elif match_arg_203.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_203.value
                                        return money_of_cents_string("39914")
                                else:
                                    return (money_of_cents_string("46742") +
                                        (money_of_cents_string("6828") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_202.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_202.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_204 = situation_familiale_calcul_apl_3
                                    if match_arg_204.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_204.value
                                        return money_of_cents_string("29526")
                                    elif match_arg_204.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_204.value
                                        return money_of_cents_string("35538")
                                else:
                                    return (money_of_cents_string("41550") +
                                        (money_of_cents_string("6012") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_202.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_202.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_205 = situation_familiale_calcul_apl_3
                                    if match_arg_205.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_205.value
                                        return money_of_cents_string("27564")
                                    elif match_arg_205.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_205.value
                                        return money_of_cents_string("33052")
                                else:
                                    return (money_of_cents_string("38541") +
                                        (money_of_cents_string("5488") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_145(_:Unit):
                            match_arg_206 = type_pret
                            if match_arg_206.code == TypePret_Code.D331_32:
                                _ = match_arg_206.value
                                temp_calcul_plafond_mensualite_d832_10_3_146 = False
                            elif match_arg_206.code == TypePret_Code.D331_63_64:
                                _ = match_arg_206.value
                                temp_calcul_plafond_mensualite_d832_10_3_146 = True
                            elif match_arg_206.code == TypePret_Code.D331_59_8:
                                _ = match_arg_206.value
                                temp_calcul_plafond_mensualite_d832_10_3_146 = False
                            elif match_arg_206.code == TypePret_Code.D331_76_1:
                                _ = match_arg_206.value
                                temp_calcul_plafond_mensualite_d832_10_3_146 = False
                            elif match_arg_206.code == TypePret_Code.Autre:
                                _ = match_arg_206.value
                                temp_calcul_plafond_mensualite_d832_10_3_146 = False
                            match_arg_207 = anciennete_logement
                            if match_arg_207.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_207.value
                                temp_calcul_plafond_mensualite_d832_10_3_147 = True
                            elif match_arg_207.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_207.value
                                temp_calcul_plafond_mensualite_d832_10_3_147 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2006,12,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2007,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_147 and
                                temp_calcul_plafond_mensualite_d832_10_3_146)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_145,
                                              temp_calcul_plafond_mensualite_d832_10_3_144)
                    def temp_calcul_plafond_mensualite_d832_10_3_148(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_149(_:Unit):
                            match_arg_208 = zone_1
                            if match_arg_208.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_208.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_209 = situation_familiale_calcul_apl_3
                                    if match_arg_209.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_209.value
                                        return money_of_cents_string("25907")
                                    elif match_arg_209.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_209.value
                                        return money_of_cents_string("31264")
                                else:
                                    return (money_of_cents_string("36621") +
                                        (money_of_cents_string("5357") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_208.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_208.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_210 = situation_familiale_calcul_apl_3
                                    if match_arg_210.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_210.value
                                        return money_of_cents_string("23094")
                                    elif match_arg_210.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_210.value
                                        return money_of_cents_string("27814")
                                else:
                                    return (money_of_cents_string("32534") +
                                        (money_of_cents_string("4720") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_208.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_208.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_211 = situation_familiale_calcul_apl_3
                                    if match_arg_211.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_211.value
                                        return money_of_cents_string("21567")
                                    elif match_arg_211.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_211.value
                                        return money_of_cents_string("25874")
                                else:
                                    return (money_of_cents_string("30181") +
                                        (money_of_cents_string("4307") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_150(_:Unit):
                            match_arg_212 = type_pret
                            if match_arg_212.code == TypePret_Code.D331_32:
                                _ = match_arg_212.value
                                temp_calcul_plafond_mensualite_d832_10_3_151 = False
                            elif match_arg_212.code == TypePret_Code.D331_63_64:
                                _ = match_arg_212.value
                                temp_calcul_plafond_mensualite_d832_10_3_151 = True
                            elif match_arg_212.code == TypePret_Code.D331_59_8:
                                _ = match_arg_212.value
                                temp_calcul_plafond_mensualite_d832_10_3_151 = False
                            elif match_arg_212.code == TypePret_Code.D331_76_1:
                                _ = match_arg_212.value
                                temp_calcul_plafond_mensualite_d832_10_3_151 = False
                            elif match_arg_212.code == TypePret_Code.Autre:
                                _ = match_arg_212.value
                                temp_calcul_plafond_mensualite_d832_10_3_151 = False
                            match_arg_213 = anciennete_logement
                            if match_arg_213.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_213.value
                                temp_calcul_plafond_mensualite_d832_10_3_152 = False
                            elif match_arg_213.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_213.value
                                temp_calcul_plafond_mensualite_d832_10_3_152 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2005,8,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2006,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_152 and
                                temp_calcul_plafond_mensualite_d832_10_3_151)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_150,
                                              temp_calcul_plafond_mensualite_d832_10_3_149)
                    def temp_calcul_plafond_mensualite_d832_10_3_153(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_154(_:Unit):
                            match_arg_214 = zone_1
                            if match_arg_214.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_214.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_215 = situation_familiale_calcul_apl_3
                                    if match_arg_215.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_215.value
                                        return money_of_cents_string("32185")
                                    elif match_arg_215.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_215.value
                                        return money_of_cents_string("38827")
                                else:
                                    return (money_of_cents_string("45469") +
                                        (money_of_cents_string("6642") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_214.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_214.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_216 = situation_familiale_calcul_apl_3
                                    if match_arg_216.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_216.value
                                        return money_of_cents_string("28722")
                                    elif match_arg_216.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_216.value
                                        return money_of_cents_string("34570")
                                else:
                                    return (money_of_cents_string("40418") +
                                        (money_of_cents_string("5848") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_214.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_214.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_217 = situation_familiale_calcul_apl_3
                                    if match_arg_217.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_217.value
                                        return money_of_cents_string("26813")
                                    elif match_arg_217.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_217.value
                                        return money_of_cents_string("32152")
                                else:
                                    return (money_of_cents_string("37491") +
                                        (money_of_cents_string("5339") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_155(_:Unit):
                            match_arg_218 = type_pret
                            if match_arg_218.code == TypePret_Code.D331_32:
                                _ = match_arg_218.value
                                temp_calcul_plafond_mensualite_d832_10_3_156 = False
                            elif match_arg_218.code == TypePret_Code.D331_63_64:
                                _ = match_arg_218.value
                                temp_calcul_plafond_mensualite_d832_10_3_156 = True
                            elif match_arg_218.code == TypePret_Code.D331_59_8:
                                _ = match_arg_218.value
                                temp_calcul_plafond_mensualite_d832_10_3_156 = False
                            elif match_arg_218.code == TypePret_Code.D331_76_1:
                                _ = match_arg_218.value
                                temp_calcul_plafond_mensualite_d832_10_3_156 = False
                            elif match_arg_218.code == TypePret_Code.Autre:
                                _ = match_arg_218.value
                                temp_calcul_plafond_mensualite_d832_10_3_156 = False
                            match_arg_219 = anciennete_logement
                            if match_arg_219.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_219.value
                                temp_calcul_plafond_mensualite_d832_10_3_157 = True
                            elif match_arg_219.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_219.value
                                temp_calcul_plafond_mensualite_d832_10_3_157 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2005,8,31)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2006,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_157 and
                                temp_calcul_plafond_mensualite_d832_10_3_156)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_155,
                                              temp_calcul_plafond_mensualite_d832_10_3_154)
                    def temp_calcul_plafond_mensualite_d832_10_3_158(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_159(_:Unit):
                            match_arg_220 = zone_1
                            if match_arg_220.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_220.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_221 = situation_familiale_calcul_apl_3
                                    if match_arg_221.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_221.value
                                        return money_of_cents_string("25449")
                                    elif match_arg_221.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_221.value
                                        return money_of_cents_string("30711")
                                else:
                                    return (money_of_cents_string("35973") +
                                        (money_of_cents_string("5262") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_220.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_220.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_222 = situation_familiale_calcul_apl_3
                                    if match_arg_222.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_222.value
                                        return money_of_cents_string("22686")
                                    elif match_arg_222.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_222.value
                                        return money_of_cents_string("27323")
                                else:
                                    return (money_of_cents_string("31960") +
                                        (money_of_cents_string("4637") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_220.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_220.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_223 = situation_familiale_calcul_apl_3
                                    if match_arg_223.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_223.value
                                        return money_of_cents_string("21186")
                                    elif match_arg_223.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_223.value
                                        return money_of_cents_string("25417")
                                else:
                                    return (money_of_cents_string("29648") +
                                        (money_of_cents_string("4231") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_160(_:Unit):
                            match_arg_224 = type_pret
                            if match_arg_224.code == TypePret_Code.D331_32:
                                _ = match_arg_224.value
                                temp_calcul_plafond_mensualite_d832_10_3_161 = False
                            elif match_arg_224.code == TypePret_Code.D331_63_64:
                                _ = match_arg_224.value
                                temp_calcul_plafond_mensualite_d832_10_3_161 = True
                            elif match_arg_224.code == TypePret_Code.D331_59_8:
                                _ = match_arg_224.value
                                temp_calcul_plafond_mensualite_d832_10_3_161 = False
                            elif match_arg_224.code == TypePret_Code.D331_76_1:
                                _ = match_arg_224.value
                                temp_calcul_plafond_mensualite_d832_10_3_161 = False
                            elif match_arg_224.code == TypePret_Code.Autre:
                                _ = match_arg_224.value
                                temp_calcul_plafond_mensualite_d832_10_3_161 = False
                            match_arg_225 = anciennete_logement
                            if match_arg_225.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_225.value
                                temp_calcul_plafond_mensualite_d832_10_3_162 = False
                            elif match_arg_225.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_225.value
                                temp_calcul_plafond_mensualite_d832_10_3_162 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2003,6,30)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2005,8,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_162 and
                                temp_calcul_plafond_mensualite_d832_10_3_161)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_160,
                                              temp_calcul_plafond_mensualite_d832_10_3_159)
                    def temp_calcul_plafond_mensualite_d832_10_3_163(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_164(_:Unit):
                            match_arg_226 = zone_1
                            if match_arg_226.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_226.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_227 = situation_familiale_calcul_apl_3
                                    if match_arg_227.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_227.value
                                        return money_of_cents_string("31616")
                                    elif match_arg_227.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_227.value
                                        return money_of_cents_string("38141")
                                else:
                                    return (money_of_cents_string("44666") +
                                        (money_of_cents_string("6525") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_226.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_226.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_228 = situation_familiale_calcul_apl_3
                                    if match_arg_228.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_228.value
                                        return money_of_cents_string("28214")
                                    elif match_arg_228.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_228.value
                                        return money_of_cents_string("33959")
                                else:
                                    return (money_of_cents_string("39704") +
                                        (money_of_cents_string("5745") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_226.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_226.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_229 = situation_familiale_calcul_apl_3
                                    if match_arg_229.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_229.value
                                        return money_of_cents_string("26339")
                                    elif match_arg_229.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_229.value
                                        return money_of_cents_string("31584")
                                else:
                                    return (money_of_cents_string("36829") +
                                        (money_of_cents_string("5245") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_165(_:Unit):
                            match_arg_230 = type_pret
                            if match_arg_230.code == TypePret_Code.D331_32:
                                _ = match_arg_230.value
                                temp_calcul_plafond_mensualite_d832_10_3_166 = False
                            elif match_arg_230.code == TypePret_Code.D331_63_64:
                                _ = match_arg_230.value
                                temp_calcul_plafond_mensualite_d832_10_3_166 = True
                            elif match_arg_230.code == TypePret_Code.D331_59_8:
                                _ = match_arg_230.value
                                temp_calcul_plafond_mensualite_d832_10_3_166 = False
                            elif match_arg_230.code == TypePret_Code.D331_76_1:
                                _ = match_arg_230.value
                                temp_calcul_plafond_mensualite_d832_10_3_166 = False
                            elif match_arg_230.code == TypePret_Code.Autre:
                                _ = match_arg_230.value
                                temp_calcul_plafond_mensualite_d832_10_3_166 = False
                            match_arg_231 = anciennete_logement
                            if match_arg_231.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_231.value
                                temp_calcul_plafond_mensualite_d832_10_3_167 = True
                            elif match_arg_231.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_231.value
                                temp_calcul_plafond_mensualite_d832_10_3_167 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2003,6,30)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2005,8,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_167 and
                                temp_calcul_plafond_mensualite_d832_10_3_166)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_165,
                                              temp_calcul_plafond_mensualite_d832_10_3_164)
                    def temp_calcul_plafond_mensualite_d832_10_3_168(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_169(_:Unit):
                            match_arg_232 = zone_1
                            if match_arg_232.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_232.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_233 = situation_familiale_calcul_apl_3
                                    if match_arg_233.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_233.value
                                        return money_of_cents_string("25147")
                                    elif match_arg_233.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_233.value
                                        return money_of_cents_string("30347")
                                else:
                                    return (money_of_cents_string("35547") +
                                        (money_of_cents_string("5200") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_232.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_232.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_234 = situation_familiale_calcul_apl_3
                                    if match_arg_234.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_234.value
                                        return money_of_cents_string("22417")
                                    elif match_arg_234.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_234.value
                                        return money_of_cents_string("26999")
                                else:
                                    return (money_of_cents_string("31581") +
                                        (money_of_cents_string("4582") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_232.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_232.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_235 = situation_familiale_calcul_apl_3
                                    if match_arg_235.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_235.value
                                        return money_of_cents_string("20935")
                                    elif match_arg_235.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_235.value
                                        return money_of_cents_string("25116")
                                else:
                                    return (money_of_cents_string("29297") +
                                        (money_of_cents_string("4181") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_170(_:Unit):
                            match_arg_236 = type_pret
                            if match_arg_236.code == TypePret_Code.D331_32:
                                _ = match_arg_236.value
                                temp_calcul_plafond_mensualite_d832_10_3_171 = False
                            elif match_arg_236.code == TypePret_Code.D331_63_64:
                                _ = match_arg_236.value
                                temp_calcul_plafond_mensualite_d832_10_3_171 = True
                            elif match_arg_236.code == TypePret_Code.D331_59_8:
                                _ = match_arg_236.value
                                temp_calcul_plafond_mensualite_d832_10_3_171 = False
                            elif match_arg_236.code == TypePret_Code.D331_76_1:
                                _ = match_arg_236.value
                                temp_calcul_plafond_mensualite_d832_10_3_171 = False
                            elif match_arg_236.code == TypePret_Code.Autre:
                                _ = match_arg_236.value
                                temp_calcul_plafond_mensualite_d832_10_3_171 = False
                            match_arg_237 = anciennete_logement
                            if match_arg_237.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_237.value
                                temp_calcul_plafond_mensualite_d832_10_3_172 = False
                            elif match_arg_237.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_237.value
                                temp_calcul_plafond_mensualite_d832_10_3_172 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2002,6,30)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2003,6,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_172 and
                                temp_calcul_plafond_mensualite_d832_10_3_171)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_170,
                                              temp_calcul_plafond_mensualite_d832_10_3_169)
                    def temp_calcul_plafond_mensualite_d832_10_3_173(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_174(_:Unit):
                            match_arg_238 = zone_1
                            if match_arg_238.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_238.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_239 = situation_familiale_calcul_apl_3
                                    if match_arg_239.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_239.value
                                        return money_of_cents_string("31241")
                                    elif match_arg_239.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_239.value
                                        return money_of_cents_string("37689")
                                else:
                                    return (money_of_cents_string("44137") +
                                        (money_of_cents_string("6448") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_238.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_238.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_240 = situation_familiale_calcul_apl_3
                                    if match_arg_240.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_240.value
                                        return money_of_cents_string("27879")
                                    elif match_arg_240.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_240.value
                                        return money_of_cents_string("33556")
                                else:
                                    return (money_of_cents_string("39233") +
                                        (money_of_cents_string("5677") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_238.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_238.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_241 = situation_familiale_calcul_apl_3
                                    if match_arg_241.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_241.value
                                        return money_of_cents_string("26027")
                                    elif match_arg_241.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_241.value
                                        return money_of_cents_string("31210")
                                else:
                                    return (money_of_cents_string("36393") +
                                        (money_of_cents_string("5183") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_175(_:Unit):
                            match_arg_242 = type_pret
                            if match_arg_242.code == TypePret_Code.D331_32:
                                _ = match_arg_242.value
                                temp_calcul_plafond_mensualite_d832_10_3_176 = False
                            elif match_arg_242.code == TypePret_Code.D331_63_64:
                                _ = match_arg_242.value
                                temp_calcul_plafond_mensualite_d832_10_3_176 = True
                            elif match_arg_242.code == TypePret_Code.D331_59_8:
                                _ = match_arg_242.value
                                temp_calcul_plafond_mensualite_d832_10_3_176 = False
                            elif match_arg_242.code == TypePret_Code.D331_76_1:
                                _ = match_arg_242.value
                                temp_calcul_plafond_mensualite_d832_10_3_176 = False
                            elif match_arg_242.code == TypePret_Code.Autre:
                                _ = match_arg_242.value
                                temp_calcul_plafond_mensualite_d832_10_3_176 = False
                            match_arg_243 = anciennete_logement
                            if match_arg_243.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_243.value
                                temp_calcul_plafond_mensualite_d832_10_3_177 = True
                            elif match_arg_243.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_243.value
                                temp_calcul_plafond_mensualite_d832_10_3_177 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2002,6,30)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2003,6,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_177 and
                                temp_calcul_plafond_mensualite_d832_10_3_176)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_175,
                                              temp_calcul_plafond_mensualite_d832_10_3_174)
                    def temp_calcul_plafond_mensualite_d832_10_3_178(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_179(_:Unit):
                            match_arg_244 = zone_1
                            if match_arg_244.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_244.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_245 = situation_familiale_calcul_apl_3
                                    if match_arg_245.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_245.value
                                        return money_of_cents_string("24849")
                                    elif match_arg_245.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_245.value
                                        return money_of_cents_string("29987")
                                else:
                                    return (money_of_cents_string("35125") +
                                        (money_of_cents_string("5138") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_244.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_244.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_246 = situation_familiale_calcul_apl_3
                                    if match_arg_246.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_246.value
                                        return money_of_cents_string("22151")
                                    elif match_arg_246.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_246.value
                                        return money_of_cents_string("26679")
                                else:
                                    return (money_of_cents_string("31207") +
                                        (money_of_cents_string("4528") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_244.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_244.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_247 = situation_familiale_calcul_apl_3
                                    if match_arg_247.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_247.value
                                        return money_of_cents_string("20687")
                                    elif match_arg_247.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_247.value
                                        return money_of_cents_string("24818")
                                else:
                                    return (money_of_cents_string("28949") +
                                        (money_of_cents_string("4131") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_180(_:Unit):
                            match_arg_248 = type_pret
                            if match_arg_248.code == TypePret_Code.D331_32:
                                _ = match_arg_248.value
                                temp_calcul_plafond_mensualite_d832_10_3_181 = False
                            elif match_arg_248.code == TypePret_Code.D331_63_64:
                                _ = match_arg_248.value
                                temp_calcul_plafond_mensualite_d832_10_3_181 = True
                            elif match_arg_248.code == TypePret_Code.D331_59_8:
                                _ = match_arg_248.value
                                temp_calcul_plafond_mensualite_d832_10_3_181 = False
                            elif match_arg_248.code == TypePret_Code.D331_76_1:
                                _ = match_arg_248.value
                                temp_calcul_plafond_mensualite_d832_10_3_181 = False
                            elif match_arg_248.code == TypePret_Code.Autre:
                                _ = match_arg_248.value
                                temp_calcul_plafond_mensualite_d832_10_3_181 = False
                            match_arg_249 = anciennete_logement
                            if match_arg_249.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_249.value
                                temp_calcul_plafond_mensualite_d832_10_3_182 = False
                            elif match_arg_249.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_249.value
                                temp_calcul_plafond_mensualite_d832_10_3_182 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2002,1,1)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2002,6,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_182 and
                                temp_calcul_plafond_mensualite_d832_10_3_181)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_180,
                                              temp_calcul_plafond_mensualite_d832_10_3_179)
                    def temp_calcul_plafond_mensualite_d832_10_3_183(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_184(_:Unit):
                            match_arg_250 = zone_1
                            if match_arg_250.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_250.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_251 = situation_familiale_calcul_apl_3
                                    if match_arg_251.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_251.value
                                        temp_calcul_plafond_mensualite_d832_10_3_185 = money_of_cents_string("163000")
                                    elif match_arg_251.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_251.value
                                        temp_calcul_plafond_mensualite_d832_10_3_185 = money_of_cents_string("196700")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_185 = (money_of_cents_string("230400") +
                                        (money_of_cents_string("33700") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_250.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_250.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_252 = situation_familiale_calcul_apl_3
                                    if match_arg_252.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_252.value
                                        temp_calcul_plafond_mensualite_d832_10_3_185 = money_of_cents_string("145300")
                                    elif match_arg_252.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_252.value
                                        temp_calcul_plafond_mensualite_d832_10_3_185 = money_of_cents_string("175000")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_185 = (money_of_cents_string("204700") +
                                        (money_of_cents_string("29700") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_250.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_250.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_253 = situation_familiale_calcul_apl_3
                                    if match_arg_253.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_253.value
                                        temp_calcul_plafond_mensualite_d832_10_3_185 = money_of_cents_string("135700")
                                    elif match_arg_253.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_253.value
                                        temp_calcul_plafond_mensualite_d832_10_3_185 = money_of_cents_string("162800")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_185 = (money_of_cents_string("189900") +
                                        (money_of_cents_string("27100") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            return (temp_calcul_plafond_mensualite_d832_10_3_185 *
                                taux_francs_vers_euros)
                        def temp_calcul_plafond_mensualite_d832_10_3_186(_:Unit):
                            match_arg_254 = type_pret
                            if match_arg_254.code == TypePret_Code.D331_32:
                                _ = match_arg_254.value
                                temp_calcul_plafond_mensualite_d832_10_3_187 = False
                            elif match_arg_254.code == TypePret_Code.D331_63_64:
                                _ = match_arg_254.value
                                temp_calcul_plafond_mensualite_d832_10_3_187 = True
                            elif match_arg_254.code == TypePret_Code.D331_59_8:
                                _ = match_arg_254.value
                                temp_calcul_plafond_mensualite_d832_10_3_187 = False
                            elif match_arg_254.code == TypePret_Code.D331_76_1:
                                _ = match_arg_254.value
                                temp_calcul_plafond_mensualite_d832_10_3_187 = False
                            elif match_arg_254.code == TypePret_Code.Autre:
                                _ = match_arg_254.value
                                temp_calcul_plafond_mensualite_d832_10_3_187 = False
                            match_arg_255 = anciennete_logement
                            if match_arg_255.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_255.value
                                temp_calcul_plafond_mensualite_d832_10_3_188 = False
                            elif match_arg_255.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_255.value
                                temp_calcul_plafond_mensualite_d832_10_3_188 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2001,7,1)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2001,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_188 and
                                temp_calcul_plafond_mensualite_d832_10_3_187)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_186,
                                              temp_calcul_plafond_mensualite_d832_10_3_184)
                    def temp_calcul_plafond_mensualite_d832_10_3_189(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_190(_:Unit):
                            match_arg_256 = zone_1
                            if match_arg_256.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_256.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_257 = situation_familiale_calcul_apl_3
                                    if match_arg_257.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_257.value
                                        return money_of_cents_string("30871")
                                    elif match_arg_257.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_257.value
                                        return money_of_cents_string("37243")
                                else:
                                    return (money_of_cents_string("43615") +
                                        (money_of_cents_string("6372") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_256.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_256.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_258 = situation_familiale_calcul_apl_3
                                    if match_arg_258.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_258.value
                                        return money_of_cents_string("27548")
                                    elif match_arg_258.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_258.value
                                        return money_of_cents_string("33148")
                                else:
                                    return (money_of_cents_string("38768") +
                                        (money_of_cents_string("5610") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_256.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_256.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_259 = situation_familiale_calcul_apl_3
                                    if match_arg_259.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_259.value
                                        return money_of_cents_string("25718")
                                    elif match_arg_259.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_259.value
                                        return money_of_cents_string("30840")
                                else:
                                    return (money_of_cents_string("35962") +
                                        (money_of_cents_string("5122") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                        def temp_calcul_plafond_mensualite_d832_10_3_191(_:Unit):
                            match_arg_260 = type_pret
                            if match_arg_260.code == TypePret_Code.D331_32:
                                _ = match_arg_260.value
                                temp_calcul_plafond_mensualite_d832_10_3_192 = False
                            elif match_arg_260.code == TypePret_Code.D331_63_64:
                                _ = match_arg_260.value
                                temp_calcul_plafond_mensualite_d832_10_3_192 = True
                            elif match_arg_260.code == TypePret_Code.D331_59_8:
                                _ = match_arg_260.value
                                temp_calcul_plafond_mensualite_d832_10_3_192 = False
                            elif match_arg_260.code == TypePret_Code.D331_76_1:
                                _ = match_arg_260.value
                                temp_calcul_plafond_mensualite_d832_10_3_192 = False
                            elif match_arg_260.code == TypePret_Code.Autre:
                                _ = match_arg_260.value
                                temp_calcul_plafond_mensualite_d832_10_3_192 = False
                            match_arg_261 = anciennete_logement
                            if match_arg_261.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_261.value
                                temp_calcul_plafond_mensualite_d832_10_3_193 = True
                            elif match_arg_261.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_261.value
                                temp_calcul_plafond_mensualite_d832_10_3_193 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2002,1,1)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2002,6,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_193 and
                                temp_calcul_plafond_mensualite_d832_10_3_192)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_191,
                                              temp_calcul_plafond_mensualite_d832_10_3_190)
                    def temp_calcul_plafond_mensualite_d832_10_3_194(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_195(_:Unit):
                            match_arg_262 = zone_1
                            if match_arg_262.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_262.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_263 = situation_familiale_calcul_apl_3
                                    if match_arg_263.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_263.value
                                        temp_calcul_plafond_mensualite_d832_10_3_196 = money_of_cents_string("202500")
                                    elif match_arg_263.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_263.value
                                        temp_calcul_plafond_mensualite_d832_10_3_196 = money_of_cents_string("244300")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_196 = (money_of_cents_string("286100") +
                                        (money_of_cents_string("41800") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_262.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_262.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_264 = situation_familiale_calcul_apl_3
                                    if match_arg_264.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_264.value
                                        temp_calcul_plafond_mensualite_d832_10_3_196 = money_of_cents_string("180700")
                                    elif match_arg_264.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_264.value
                                        temp_calcul_plafond_mensualite_d832_10_3_196 = money_of_cents_string("217500")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_196 = (money_of_cents_string("254300") +
                                        (money_of_cents_string("36800") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_262.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_262.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_265 = situation_familiale_calcul_apl_3
                                    if match_arg_265.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_265.value
                                        temp_calcul_plafond_mensualite_d832_10_3_196 = money_of_cents_string("168700")
                                    elif match_arg_265.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_265.value
                                        temp_calcul_plafond_mensualite_d832_10_3_196 = money_of_cents_string("202300")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_196 = (money_of_cents_string("235900") +
                                        (money_of_cents_string("33600") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            return (temp_calcul_plafond_mensualite_d832_10_3_196 *
                                taux_francs_vers_euros)
                        def temp_calcul_plafond_mensualite_d832_10_3_197(_:Unit):
                            match_arg_266 = type_pret
                            if match_arg_266.code == TypePret_Code.D331_32:
                                _ = match_arg_266.value
                                temp_calcul_plafond_mensualite_d832_10_3_198 = False
                            elif match_arg_266.code == TypePret_Code.D331_63_64:
                                _ = match_arg_266.value
                                temp_calcul_plafond_mensualite_d832_10_3_198 = True
                            elif match_arg_266.code == TypePret_Code.D331_59_8:
                                _ = match_arg_266.value
                                temp_calcul_plafond_mensualite_d832_10_3_198 = False
                            elif match_arg_266.code == TypePret_Code.D331_76_1:
                                _ = match_arg_266.value
                                temp_calcul_plafond_mensualite_d832_10_3_198 = False
                            elif match_arg_266.code == TypePret_Code.Autre:
                                _ = match_arg_266.value
                                temp_calcul_plafond_mensualite_d832_10_3_198 = False
                            match_arg_267 = anciennete_logement
                            if match_arg_267.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_267.value
                                temp_calcul_plafond_mensualite_d832_10_3_199 = True
                            elif match_arg_267.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_267.value
                                temp_calcul_plafond_mensualite_d832_10_3_199 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2001,7,1)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2001,12,31)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_199 and
                                temp_calcul_plafond_mensualite_d832_10_3_198)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_197,
                                              temp_calcul_plafond_mensualite_d832_10_3_195)
                    def temp_calcul_plafond_mensualite_d832_10_3_200(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_201(_:Unit):
                            match_arg_268 = zone_1
                            if match_arg_268.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_268.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_269 = situation_familiale_calcul_apl_3
                                    if match_arg_269.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_269.value
                                        temp_calcul_plafond_mensualite_d832_10_3_202 = money_of_cents_string("161100")
                                    elif match_arg_269.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_269.value
                                        temp_calcul_plafond_mensualite_d832_10_3_202 = money_of_cents_string("194400")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_202 = (money_of_cents_string("227700") +
                                        (money_of_cents_string("33300") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_268.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_268.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_270 = situation_familiale_calcul_apl_3
                                    if match_arg_270.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_270.value
                                        temp_calcul_plafond_mensualite_d832_10_3_202 = money_of_cents_string("143600")
                                    elif match_arg_270.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_270.value
                                        temp_calcul_plafond_mensualite_d832_10_3_202 = money_of_cents_string("172900")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_202 = (money_of_cents_string("202200") +
                                        (money_of_cents_string("29300") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_268.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_268.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_271 = situation_familiale_calcul_apl_3
                                    if match_arg_271.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_271.value
                                        temp_calcul_plafond_mensualite_d832_10_3_202 = money_of_cents_string("134100")
                                    elif match_arg_271.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_271.value
                                        temp_calcul_plafond_mensualite_d832_10_3_202 = money_of_cents_string("160900")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_202 = (money_of_cents_string("187700") +
                                        (money_of_cents_string("26800") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            return (temp_calcul_plafond_mensualite_d832_10_3_202 *
                                taux_francs_vers_euros)
                        def temp_calcul_plafond_mensualite_d832_10_3_203(_:Unit):
                            match_arg_272 = type_pret
                            if match_arg_272.code == TypePret_Code.D331_32:
                                _ = match_arg_272.value
                                temp_calcul_plafond_mensualite_d832_10_3_204 = False
                            elif match_arg_272.code == TypePret_Code.D331_63_64:
                                _ = match_arg_272.value
                                temp_calcul_plafond_mensualite_d832_10_3_204 = True
                            elif match_arg_272.code == TypePret_Code.D331_59_8:
                                _ = match_arg_272.value
                                temp_calcul_plafond_mensualite_d832_10_3_204 = False
                            elif match_arg_272.code == TypePret_Code.D331_76_1:
                                _ = match_arg_272.value
                                temp_calcul_plafond_mensualite_d832_10_3_204 = False
                            elif match_arg_272.code == TypePret_Code.Autre:
                                _ = match_arg_272.value
                                temp_calcul_plafond_mensualite_d832_10_3_204 = False
                            match_arg_273 = anciennete_logement
                            if match_arg_273.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_273.value
                                temp_calcul_plafond_mensualite_d832_10_3_205 = False
                            elif match_arg_273.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_273.value
                                temp_calcul_plafond_mensualite_d832_10_3_205 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2000,6,30)) and
                                ((date_signature_pret_1 <=
                                date_of_numbers(2001,6,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_205 and
                                temp_calcul_plafond_mensualite_d832_10_3_204)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_203,
                                              temp_calcul_plafond_mensualite_d832_10_3_201)
                    def temp_calcul_plafond_mensualite_d832_10_3_206(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_207(_:Unit):
                            match_arg_274 = zone_1
                            if match_arg_274.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_274.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_275 = situation_familiale_calcul_apl_3
                                    if match_arg_275.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_275.value
                                        temp_calcul_plafond_mensualite_d832_10_3_208 = money_of_cents_string("200100")
                                    elif match_arg_275.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_275.value
                                        temp_calcul_plafond_mensualite_d832_10_3_208 = money_of_cents_string("141400")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_208 = (money_of_cents_string("182700") +
                                        (money_of_cents_string("41300") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_274.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_274.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_276 = situation_familiale_calcul_apl_3
                                    if match_arg_276.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_276.value
                                        temp_calcul_plafond_mensualite_d832_10_3_208 = money_of_cents_string("178600")
                                    elif match_arg_276.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_276.value
                                        temp_calcul_plafond_mensualite_d832_10_3_208 = money_of_cents_string("215000")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_208 = (money_of_cents_string("251400") +
                                        (money_of_cents_string("36400") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_274.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_274.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_277 = situation_familiale_calcul_apl_3
                                    if match_arg_277.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_277.value
                                        temp_calcul_plafond_mensualite_d832_10_3_208 = money_of_cents_string("166700")
                                    elif match_arg_277.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_277.value
                                        temp_calcul_plafond_mensualite_d832_10_3_208 = money_of_cents_string("199900")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_208 = (money_of_cents_string("233100") +
                                        (money_of_cents_string("33200") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            return (temp_calcul_plafond_mensualite_d832_10_3_208 *
                                taux_francs_vers_euros)
                        def temp_calcul_plafond_mensualite_d832_10_3_209(_:Unit):
                            match_arg_278 = type_pret
                            if match_arg_278.code == TypePret_Code.D331_32:
                                _ = match_arg_278.value
                                temp_calcul_plafond_mensualite_d832_10_3_210 = False
                            elif match_arg_278.code == TypePret_Code.D331_63_64:
                                _ = match_arg_278.value
                                temp_calcul_plafond_mensualite_d832_10_3_210 = True
                            elif match_arg_278.code == TypePret_Code.D331_59_8:
                                _ = match_arg_278.value
                                temp_calcul_plafond_mensualite_d832_10_3_210 = False
                            elif match_arg_278.code == TypePret_Code.D331_76_1:
                                _ = match_arg_278.value
                                temp_calcul_plafond_mensualite_d832_10_3_210 = False
                            elif match_arg_278.code == TypePret_Code.Autre:
                                _ = match_arg_278.value
                                temp_calcul_plafond_mensualite_d832_10_3_210 = False
                            match_arg_279 = anciennete_logement
                            if match_arg_279.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_279.value
                                temp_calcul_plafond_mensualite_d832_10_3_211 = True
                            elif match_arg_279.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_279.value
                                temp_calcul_plafond_mensualite_d832_10_3_211 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(2000,6,30)) and
                                ((date_signature_pret_1 <=
                                date_of_numbers(2001,6,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_211 and
                                temp_calcul_plafond_mensualite_d832_10_3_210)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_209,
                                              temp_calcul_plafond_mensualite_d832_10_3_207)
                    def temp_calcul_plafond_mensualite_d832_10_3_212(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_213(_:Unit):
                            match_arg_280 = zone_1
                            if match_arg_280.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_280.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_281 = situation_familiale_calcul_apl_3
                                    if match_arg_281.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_281.value
                                        temp_calcul_plafond_mensualite_d832_10_3_214 = money_of_cents_string("159500")
                                    elif match_arg_281.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_281.value
                                        temp_calcul_plafond_mensualite_d832_10_3_214 = money_of_cents_string("192500")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_214 = (money_of_cents_string("225500") +
                                        (money_of_cents_string("33000") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_280.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_280.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_282 = situation_familiale_calcul_apl_3
                                    if match_arg_282.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_282.value
                                        temp_calcul_plafond_mensualite_d832_10_3_214 = money_of_cents_string("142200")
                                    elif match_arg_282.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_282.value
                                        temp_calcul_plafond_mensualite_d832_10_3_214 = money_of_cents_string("171200")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_214 = (money_of_cents_string("200200") +
                                        (money_of_cents_string("29000") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_280.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_280.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_283 = situation_familiale_calcul_apl_3
                                    if match_arg_283.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_283.value
                                        temp_calcul_plafond_mensualite_d832_10_3_214 = money_of_cents_string("132800")
                                    elif match_arg_283.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_283.value
                                        temp_calcul_plafond_mensualite_d832_10_3_214 = money_of_cents_string("159300")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_214 = (money_of_cents_string("185800") +
                                        (money_of_cents_string("26500") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            return (temp_calcul_plafond_mensualite_d832_10_3_214 *
                                taux_francs_vers_euros)
                        def temp_calcul_plafond_mensualite_d832_10_3_215(_:Unit):
                            match_arg_284 = type_pret
                            if match_arg_284.code == TypePret_Code.D331_32:
                                _ = match_arg_284.value
                                temp_calcul_plafond_mensualite_d832_10_3_216 = False
                            elif match_arg_284.code == TypePret_Code.D331_63_64:
                                _ = match_arg_284.value
                                temp_calcul_plafond_mensualite_d832_10_3_216 = True
                            elif match_arg_284.code == TypePret_Code.D331_59_8:
                                _ = match_arg_284.value
                                temp_calcul_plafond_mensualite_d832_10_3_216 = False
                            elif match_arg_284.code == TypePret_Code.D331_76_1:
                                _ = match_arg_284.value
                                temp_calcul_plafond_mensualite_d832_10_3_216 = False
                            elif match_arg_284.code == TypePret_Code.Autre:
                                _ = match_arg_284.value
                                temp_calcul_plafond_mensualite_d832_10_3_216 = False
                            match_arg_285 = anciennete_logement
                            if match_arg_285.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_285.value
                                temp_calcul_plafond_mensualite_d832_10_3_217 = False
                            elif match_arg_285.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_285.value
                                temp_calcul_plafond_mensualite_d832_10_3_217 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(1994,11,27)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2000,6,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_217 and
                                temp_calcul_plafond_mensualite_d832_10_3_216)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_215,
                                              temp_calcul_plafond_mensualite_d832_10_3_213)
                    def temp_calcul_plafond_mensualite_d832_10_3_218(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_219(_:Unit):
                            match_arg_286 = zone_1
                            if match_arg_286.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_286.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_287 = situation_familiale_calcul_apl_3
                                    if match_arg_287.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_287.value
                                        temp_calcul_plafond_mensualite_d832_10_3_220 = money_of_cents_string("198100")
                                    elif match_arg_287.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_287.value
                                        temp_calcul_plafond_mensualite_d832_10_3_220 = money_of_cents_string("239000")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_220 = (money_of_cents_string("279900") +
                                        (money_of_cents_string("40900") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_286.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_286.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_288 = situation_familiale_calcul_apl_3
                                    if match_arg_288.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_288.value
                                        temp_calcul_plafond_mensualite_d832_10_3_220 = money_of_cents_string("176800")
                                    elif match_arg_288.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_288.value
                                        temp_calcul_plafond_mensualite_d832_10_3_220 = money_of_cents_string("212800")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_220 = (money_of_cents_string("248800") +
                                        (money_of_cents_string("36000") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_286.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_286.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_289 = situation_familiale_calcul_apl_3
                                    if match_arg_289.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_289.value
                                        temp_calcul_plafond_mensualite_d832_10_3_220 = money_of_cents_string("165000")
                                    elif match_arg_289.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_289.value
                                        temp_calcul_plafond_mensualite_d832_10_3_220 = money_of_cents_string("197900")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_220 = (money_of_cents_string("230800") +
                                        (money_of_cents_string("32900") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            return (temp_calcul_plafond_mensualite_d832_10_3_220 *
                                taux_francs_vers_euros)
                        def temp_calcul_plafond_mensualite_d832_10_3_221(_:Unit):
                            match_arg_290 = type_pret
                            if match_arg_290.code == TypePret_Code.D331_32:
                                _ = match_arg_290.value
                                temp_calcul_plafond_mensualite_d832_10_3_222 = False
                            elif match_arg_290.code == TypePret_Code.D331_63_64:
                                _ = match_arg_290.value
                                temp_calcul_plafond_mensualite_d832_10_3_222 = True
                            elif match_arg_290.code == TypePret_Code.D331_59_8:
                                _ = match_arg_290.value
                                temp_calcul_plafond_mensualite_d832_10_3_222 = False
                            elif match_arg_290.code == TypePret_Code.D331_76_1:
                                _ = match_arg_290.value
                                temp_calcul_plafond_mensualite_d832_10_3_222 = False
                            elif match_arg_290.code == TypePret_Code.Autre:
                                _ = match_arg_290.value
                                temp_calcul_plafond_mensualite_d832_10_3_222 = False
                            match_arg_291 = anciennete_logement
                            if match_arg_291.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_291.value
                                temp_calcul_plafond_mensualite_d832_10_3_223 = True
                            elif match_arg_291.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_291.value
                                temp_calcul_plafond_mensualite_d832_10_3_223 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(1994,11,27)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(2000,6,30)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_223 and
                                temp_calcul_plafond_mensualite_d832_10_3_222)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_221,
                                              temp_calcul_plafond_mensualite_d832_10_3_219)
                    def temp_calcul_plafond_mensualite_d832_10_3_224(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_225(_:Unit):
                            match_arg_292 = zone_1
                            if match_arg_292.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_292.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_293 = situation_familiale_calcul_apl_3
                                    if match_arg_293.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_293.value
                                        temp_calcul_plafond_mensualite_d832_10_3_226 = money_of_cents_string("167800")
                                    elif match_arg_293.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_293.value
                                        temp_calcul_plafond_mensualite_d832_10_3_226 = money_of_cents_string("202500")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_226 = (money_of_cents_string("237200") +
                                        (money_of_cents_string("34700") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_292.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_292.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_294 = situation_familiale_calcul_apl_3
                                    if match_arg_294.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_294.value
                                        temp_calcul_plafond_mensualite_d832_10_3_226 = money_of_cents_string("149600")
                                    elif match_arg_294.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_294.value
                                        temp_calcul_plafond_mensualite_d832_10_3_226 = money_of_cents_string("180100")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_226 = (money_of_cents_string("210600") +
                                        (money_of_cents_string("30500") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_292.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_292.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_295 = situation_familiale_calcul_apl_3
                                    if match_arg_295.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_295.value
                                        temp_calcul_plafond_mensualite_d832_10_3_226 = money_of_cents_string("139700")
                                    elif match_arg_295.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_295.value
                                        temp_calcul_plafond_mensualite_d832_10_3_226 = money_of_cents_string("167600")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_226 = (money_of_cents_string("195500") +
                                        (money_of_cents_string("27900") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            return (temp_calcul_plafond_mensualite_d832_10_3_226 *
                                taux_francs_vers_euros)
                        def temp_calcul_plafond_mensualite_d832_10_3_227(_:Unit):
                            match_arg_296 = type_pret
                            if match_arg_296.code == TypePret_Code.D331_32:
                                _ = match_arg_296.value
                                temp_calcul_plafond_mensualite_d832_10_3_228 = False
                            elif match_arg_296.code == TypePret_Code.D331_63_64:
                                _ = match_arg_296.value
                                temp_calcul_plafond_mensualite_d832_10_3_228 = True
                            elif match_arg_296.code == TypePret_Code.D331_59_8:
                                _ = match_arg_296.value
                                temp_calcul_plafond_mensualite_d832_10_3_228 = False
                            elif match_arg_296.code == TypePret_Code.D331_76_1:
                                _ = match_arg_296.value
                                temp_calcul_plafond_mensualite_d832_10_3_228 = False
                            elif match_arg_296.code == TypePret_Code.Autre:
                                _ = match_arg_296.value
                                temp_calcul_plafond_mensualite_d832_10_3_228 = False
                            match_arg_297 = anciennete_logement
                            if match_arg_297.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_297.value
                                temp_calcul_plafond_mensualite_d832_10_3_229 = False
                            elif match_arg_297.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_297.value
                                temp_calcul_plafond_mensualite_d832_10_3_229 = True
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(1992,6,30)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(1994,11,27)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_229 and
                                temp_calcul_plafond_mensualite_d832_10_3_228)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_227,
                                              temp_calcul_plafond_mensualite_d832_10_3_225)
                    def temp_calcul_plafond_mensualite_d832_10_3_230(_:Unit):
                        def temp_calcul_plafond_mensualite_d832_10_3_231(_:Unit):
                            match_arg_298 = zone_1
                            if match_arg_298.code == ZoneDHabitation_Code.Zone1:
                                _ = match_arg_298.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_299 = situation_familiale_calcul_apl_3
                                    if match_arg_299.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_299.value
                                        temp_calcul_plafond_mensualite_d832_10_3_232 = money_of_cents_string("208500")
                                    elif match_arg_299.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_299.value
                                        temp_calcul_plafond_mensualite_d832_10_3_232 = money_of_cents_string("251500")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_232 = (money_of_cents_string("294500") +
                                        (money_of_cents_string("43000") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_298.code == ZoneDHabitation_Code.Zone2:
                                _ = match_arg_298.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_300 = situation_familiale_calcul_apl_3
                                    if match_arg_300.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_300.value
                                        temp_calcul_plafond_mensualite_d832_10_3_232 = money_of_cents_string("186000")
                                    elif match_arg_300.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_300.value
                                        temp_calcul_plafond_mensualite_d832_10_3_232 = money_of_cents_string("223900")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_232 = (money_of_cents_string("261800") +
                                        (money_of_cents_string("37900") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            elif match_arg_298.code == ZoneDHabitation_Code.Zone3:
                                _ = match_arg_298.value
                                if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("0")):
                                    match_arg_301 = situation_familiale_calcul_apl_3
                                    if match_arg_301.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_301.value
                                        temp_calcul_plafond_mensualite_d832_10_3_232 = money_of_cents_string("173600")
                                    elif match_arg_301.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_301.value
                                        temp_calcul_plafond_mensualite_d832_10_3_232 = money_of_cents_string("208200")
                                else:
                                    temp_calcul_plafond_mensualite_d832_10_3_232 = (money_of_cents_string("242800") +
                                        (money_of_cents_string("34600") *
                                        decimal_of_integer((nombre_personnes_a_charge_3 -
                                        integer_of_string("1")))))
                            return (temp_calcul_plafond_mensualite_d832_10_3_232 *
                                taux_francs_vers_euros)
                        def temp_calcul_plafond_mensualite_d832_10_3_233(_:Unit):
                            match_arg_302 = type_pret
                            if match_arg_302.code == TypePret_Code.D331_32:
                                _ = match_arg_302.value
                                temp_calcul_plafond_mensualite_d832_10_3_234 = False
                            elif match_arg_302.code == TypePret_Code.D331_63_64:
                                _ = match_arg_302.value
                                temp_calcul_plafond_mensualite_d832_10_3_234 = True
                            elif match_arg_302.code == TypePret_Code.D331_59_8:
                                _ = match_arg_302.value
                                temp_calcul_plafond_mensualite_d832_10_3_234 = False
                            elif match_arg_302.code == TypePret_Code.D331_76_1:
                                _ = match_arg_302.value
                                temp_calcul_plafond_mensualite_d832_10_3_234 = False
                            elif match_arg_302.code == TypePret_Code.Autre:
                                _ = match_arg_302.value
                                temp_calcul_plafond_mensualite_d832_10_3_234 = False
                            match_arg_303 = anciennete_logement
                            if match_arg_303.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_303.value
                                temp_calcul_plafond_mensualite_d832_10_3_235 = True
                            elif match_arg_303.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_303.value
                                temp_calcul_plafond_mensualite_d832_10_3_235 = False
                            return ((date_courante_9 >=
                                date_of_numbers(2019,10,1)) and
                                ((date_courante_9 >=
                                date_of_numbers(2020,10,1)) and
                                ((date_signature_pret_1 >=
                                date_of_numbers(1992,6,30)) and
                                ((date_signature_pret_1 <
                                date_of_numbers(1994,11,27)) and
                                (temp_calcul_plafond_mensualite_d832_10_3_235 and
                                temp_calcul_plafond_mensualite_d832_10_3_234)))))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d832_10_3_233,
                                              temp_calcul_plafond_mensualite_d832_10_3_231)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [temp_calcul_plafond_mensualite_d832_10_3_230,
                                          temp_calcul_plafond_mensualite_d832_10_3_224,
                                          temp_calcul_plafond_mensualite_d832_10_3_218,
                                          temp_calcul_plafond_mensualite_d832_10_3_212,
                                          temp_calcul_plafond_mensualite_d832_10_3_206,
                                          temp_calcul_plafond_mensualite_d832_10_3_200,
                                          temp_calcul_plafond_mensualite_d832_10_3_194,
                                          temp_calcul_plafond_mensualite_d832_10_3_189,
                                          temp_calcul_plafond_mensualite_d832_10_3_183,
                                          temp_calcul_plafond_mensualite_d832_10_3_178,
                                          temp_calcul_plafond_mensualite_d832_10_3_173,
                                          temp_calcul_plafond_mensualite_d832_10_3_168,
                                          temp_calcul_plafond_mensualite_d832_10_3_163,
                                          temp_calcul_plafond_mensualite_d832_10_3_158,
                                          temp_calcul_plafond_mensualite_d832_10_3_153,
                                          temp_calcul_plafond_mensualite_d832_10_3_148,
                                          temp_calcul_plafond_mensualite_d832_10_3_143,
                                          temp_calcul_plafond_mensualite_d832_10_3_138,
                                          temp_calcul_plafond_mensualite_d832_10_3_133,
                                          temp_calcul_plafond_mensualite_d832_10_3_128,
                                          temp_calcul_plafond_mensualite_d832_10_3_123,
                                          temp_calcul_plafond_mensualite_d832_10_3_118,
                                          temp_calcul_plafond_mensualite_d832_10_3_113,
                                          temp_calcul_plafond_mensualite_d832_10_3_108,
                                          temp_calcul_plafond_mensualite_d832_10_3_103,
                                          temp_calcul_plafond_mensualite_d832_10_3_98,
                                          temp_calcul_plafond_mensualite_d832_10_3_93,
                                          temp_calcul_plafond_mensualite_d832_10_3_88,
                                          temp_calcul_plafond_mensualite_d832_10_3_83,
                                          temp_calcul_plafond_mensualite_d832_10_3_78,
                                          temp_calcul_plafond_mensualite_d832_10_3_73,
                                          temp_calcul_plafond_mensualite_d832_10_3_68,
                                          temp_calcul_plafond_mensualite_d832_10_3_63,
                                          temp_calcul_plafond_mensualite_d832_10_3_58,
                                          temp_calcul_plafond_mensualite_d832_10_3_53,
                                          temp_calcul_plafond_mensualite_d832_10_3_48,
                                          temp_calcul_plafond_mensualite_d832_10_3_43,
                                          temp_calcul_plafond_mensualite_d832_10_3_38],
                                          temp_calcul_plafond_mensualite_d832_10_3_37,
                                          temp_calcul_plafond_mensualite_d832_10_3_36)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [temp_calcul_plafond_mensualite_d832_10_3_30,
                                  temp_calcul_plafond_mensualite_d832_10_3_3],
                                  temp_calcul_plafond_mensualite_d832_10_3_2,
                                  temp_calcul_plafond_mensualite_d832_10_3_1)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=722,
                                                 start_column=11,
                                                 end_line=722, end_column=46,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    calcul_plafond_mensualite_d832_10_3 = temp_calcul_plafond_mensualite_d832_10_3
    try:
        temp_n_nombre_parts_d832_11_1 = calcul_nombre_parts_dot_n_nombre_parts_d832_11
    except EmptyError:
        temp_n_nombre_parts_d832_11_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=724, start_column=11,
                                             end_line=724, end_column=33,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    n_nombre_parts_d832_11_1 = temp_n_nombre_parts_d832_11_1
    try:
        try:
            def temp_ressources_menage_avec_d832_18(_:Unit):
                return ressources_menage_arrondies_2
            def temp_ressources_menage_avec_d832_18_1(_:Unit):
                return situation_r822_11_13_17
            temp_ressources_menage_avec_d832_18_2 = handle_default(SourcePosition(filename="",
                                                                   start_line=0,
                                                                   start_column=1,
                                                                   end_line=0, end_column=1,
                                                                   law_headings=[]), [],
                                                                   temp_ressources_menage_avec_d832_18_1,
                                                                   temp_ressources_menage_avec_d832_18)
        except EmptyError:
            if (ressources_menage_arrondies_2 <= (mensualite_principale *
                coefficient_multiplicateur_d832_18)):
                temp_ressources_menage_avec_d832_18_2 = (mensualite_principale *
                    coefficient_multiplicateur_d832_18)
            else:
                temp_ressources_menage_avec_d832_18_2 = ressources_menage_arrondies_2
    except EmptyError:
        temp_ressources_menage_avec_d832_18_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=733, start_column=11,
                                             end_line=733, end_column=41,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    ressources_menage_avec_d832_18 = temp_ressources_menage_avec_d832_18_2
    def temp_traitement_aide_finale_minoration_forfaitaire_1(aide_finale_7:Money):
        try:
            if ((aide_finale_7 - montant_forfaitaire_d832_10) >=
                money_of_cents_string("0")):
                return (aide_finale_7 - montant_forfaitaire_d832_10)
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=754,
                                                 start_column=10,
                                                 end_line=754, end_column=32,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_minoration_forfaitaire_1 = temp_traitement_aide_finale_minoration_forfaitaire_1
    def temp_depense_nette_minimale_d832_10(allocation_mensuelle_2:Money):
        try:
            try:
                def temp_depense_nette_minimale_d832_10_1(_:Unit):
                    return ((mensualite_principale +
                        montant_forfaitaire_charges_d832_10) -
                        allocation_mensuelle_2)
                def temp_depense_nette_minimale_d832_10_2(_:Unit):
                    return (date_signature_pret >=
                        date_of_numbers(1999,6,30))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_depense_nette_minimale_d832_10_2,
                                      temp_depense_nette_minimale_d832_10_1)
            except EmptyError:
                return (mensualite_principale - allocation_mensuelle_2)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=729,
                                                 start_column=11,
                                                 end_line=729, end_column=41,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    depense_nette_minimale_d832_10 = temp_depense_nette_minimale_d832_10
    try:
        try:
            def temp_plafond_mensualite_d832_10_3_base(_:Unit):
                if (calcul_plafond_mensualite_d832_10_3(date_signature_pret) <
                    calcul_plafond_mensualite_d832_10_3(date_entree_logement)):
                    return calcul_plafond_mensualite_d832_10_3(date_entree_logement)
                else:
                    return calcul_plafond_mensualite_d832_10_3(date_signature_pret)
            def temp_plafond_mensualite_d832_10_3_base_1(_:Unit):
                return local_habite_premiere_fois_beneficiaire
            temp_plafond_mensualite_d832_10_3_base_2 = handle_default(
                SourcePosition(filename="", start_line=0, start_column=1,
                end_line=0, end_column=1, law_headings=[]), [],
                temp_plafond_mensualite_d832_10_3_base_1,
                temp_plafond_mensualite_d832_10_3_base)
        except EmptyError:
            temp_plafond_mensualite_d832_10_3_base_2 = calcul_plafond_mensualite_d832_10_3(
                date_signature_pret)
    except EmptyError:
        temp_plafond_mensualite_d832_10_3_base_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=720, start_column=10,
                                             end_line=720, end_column=14,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    plafond_mensualite_d832_10_3_base = temp_plafond_mensualite_d832_10_3_base_2
    try:
        temp_calcul_equivalence_loyer_minimale_dot_date_courante_1 = date_courante_9
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_date_courante_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=762, start_column=14,
                                             end_line=762, end_column=61,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_date_courante_1 = temp_calcul_equivalence_loyer_minimale_dot_date_courante_1
    try:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_1 = ressources_menage_arrondies_2
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=3410,
                                             start_column=14, end_line=3410,
                                             end_column=75,
                                             law_headings=["Article D832-15",
                                             "Section 2 : Accession à la propriété",
                                             "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                             "Titre III : Aide personnalisée au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_1 = temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_1
    try:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_1 = False
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=3409,
                                             start_column=14, end_line=3409,
                                             end_column=69,
                                             law_headings=["Article D832-15",
                                             "Section 2 : Accession à la propriété",
                                             "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                             "Titre III : Aide personnalisée au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_1 = temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_1
    try:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_1 = n_nombre_parts_d832_11_1
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=3412,
                                             start_column=14, end_line=3412,
                                             end_column=70,
                                             law_headings=["Article D832-15",
                                             "Section 2 : Accession à la propriété",
                                             "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                             "Titre III : Aide personnalisée au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_1 = temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_1
    result_5 = calcul_equivalence_loyer_minimale(CalculEquivalenceLoyerMinimaleIn(date_courante_in = calcul_equivalence_loyer_minimale_dot_date_courante_1,
                                                 ressources_menage_arrondies_in = calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_1,
                                                 condition_2_du_832_25_in = calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_1,
                                                 n_nombre_parts_d832_25_in = calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_1))
    calcul_equivalence_loyer_minimale_dot_montant_1 = result_5.montant
    try:
        temp_coefficient_prise_en_charge_d832_10_formule = (decimal_of_string("0.95") -
            (ressources_menage_arrondies_2 /
            (coefficient_multiplicateur_d832_11 * n_nombre_parts_d832_11_1)))
    except EmptyError:
        temp_coefficient_prise_en_charge_d832_10_formule = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=726, start_column=10,
                                             end_line=726, end_column=17,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficient_prise_en_charge_d832_10_formule = temp_coefficient_prise_en_charge_d832_10_formule
    def temp_abattement_depense_nette_minimale_d832_10(allocation_mensuelle_3:Money):
        try:
            if (depense_nette_minimale_d832_10(allocation_mensuelle_3) <=
                (ressources_menage_avec_d832_18 *
                coefficient_multiplicateur_d832_17_3)):
                return ((ressources_menage_avec_d832_18 *
                    coefficient_multiplicateur_d832_17_3) -
                    depense_nette_minimale_d832_10(allocation_mensuelle_3))
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=731,
                                                 start_column=11,
                                                 end_line=731, end_column=52,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    abattement_depense_nette_minimale_d832_10 = temp_abattement_depense_nette_minimale_d832_10
    try:
        try:
            try:
                def temp_plafond_mensualite_d832_10_3_coproprietaires(_:Unit):
                    if copropriete:
                        return (plafond_mensualite_d832_10_3_base *
                            decimal_of_string("0.75"))
                    else:
                        return plafond_mensualite_d832_10_3_base
                def temp_plafond_mensualite_d832_10_3_coproprietaires_1(_:Unit):
                    return ((date_courante_9 <
                        date_of_numbers(2021,10,1)) and (date_courante_9 >=
                        date_of_numbers(2020,10,1)))
                temp_plafond_mensualite_d832_10_3_coproprietaires_2 = handle_default(
                    SourcePosition(filename="", start_line=0, start_column=1,
                    end_line=0, end_column=1, law_headings=[]), [],
                    temp_plafond_mensualite_d832_10_3_coproprietaires_1,
                    temp_plafond_mensualite_d832_10_3_coproprietaires)
            except EmptyError:
                if ((date_courante_9 >= date_of_numbers(2021,10,1)) and
                    (date_courante_9 <
                    date_of_numbers(2022,7,1))):
                    if copropriete:
                        temp_plafond_mensualite_d832_10_3_coproprietaires_2 = (plafond_mensualite_d832_10_3_base *
                            decimal_of_string("0.75"))
                    else:
                        temp_plafond_mensualite_d832_10_3_coproprietaires_2 = plafond_mensualite_d832_10_3_base
                else:
                    temp_plafond_mensualite_d832_10_3_coproprietaires_2 = dead_value
                    raise EmptyError
        except EmptyError:
            if (date_courante_9 >=
                date_of_numbers(2022,7,1)):
                if copropriete:
                    temp_plafond_mensualite_d832_10_3_coproprietaires_2 = (plafond_mensualite_d832_10_3_base *
                        decimal_of_string("0.75"))
                else:
                    temp_plafond_mensualite_d832_10_3_coproprietaires_2 = plafond_mensualite_d832_10_3_base
            else:
                temp_plafond_mensualite_d832_10_3_coproprietaires_2 = dead_value
                raise EmptyError
    except EmptyError:
        temp_plafond_mensualite_d832_10_3_coproprietaires_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=721, start_column=10,
                                             end_line=721, end_column=25,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    plafond_mensualite_d832_10_3_coproprietaires = temp_plafond_mensualite_d832_10_3_coproprietaires_2
    try:
        def temp_mensualite_minimale(_:Unit):
            raise EmptyError
        def temp_mensualite_minimale_1(_:Unit):
            return False
        def temp_mensualite_minimale_2(_:Unit):
            def temp_mensualite_minimale_3(_:Unit):
                return calcul_equivalence_loyer_minimale_dot_montant_1
            def temp_mensualite_minimale_4(_:Unit):
                match_arg_304 = type_travaux_logement
                if match_arg_304.code == TypeTravauxLogementD83215_Code.TravauxPourAcquisitionD832_15_1:
                    _ = match_arg_304.value
                    return False
                elif match_arg_304.code == TypeTravauxLogementD83215_Code.TravauxSurLogementDejaAcquisD832_15_2:
                    _ = match_arg_304.value
                    return True
                elif match_arg_304.code == TypeTravauxLogementD83215_Code.PasDeTravaux:
                    _ = match_arg_304.value
                    return False
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_mensualite_minimale_4,
                                  temp_mensualite_minimale_3)
        def temp_mensualite_minimale_5(_:Unit):
            def temp_mensualite_minimale_6(_:Unit):
                if (decimal_of_money(ressources_menage_arrondies_2) <=
                    (decimal_of_money(montant_limite_tranches_d832_15_1) *
                    n_nombre_parts_d832_11_1)):
                    temp_mensualite_minimale_7 = (decimal_of_money(ressources_menage_arrondies_2) *
                        taux_tranche_inferieure_d832_15_1)
                else:
                    temp_mensualite_minimale_7 = ((decimal_of_money(montant_limite_tranches_d832_15_1) *
                        n_nombre_parts_d832_11_1) *
                        taux_tranche_inferieure_d832_15_1)
                if (decimal_of_money(ressources_menage_arrondies_2) >=
                    (decimal_of_money(montant_limite_tranches_d832_15_1) *
                    n_nombre_parts_d832_11_1)):
                    temp_mensualite_minimale_8 = ((decimal_of_money(ressources_menage_arrondies_2) -
                        (decimal_of_money(montant_limite_tranches_d832_15_1) *
                        n_nombre_parts_d832_11_1)) *
                        taux_tranche_superieure_d832_15_1)
                else:
                    temp_mensualite_minimale_8 = decimal_of_string("0.")
                return money_of_decimal(((temp_mensualite_minimale_8 +
                    temp_mensualite_minimale_7) / decimal_of_string("12.")))
            def temp_mensualite_minimale_9(_:Unit):
                match_arg_305 = type_travaux_logement
                if match_arg_305.code == TypeTravauxLogementD83215_Code.TravauxPourAcquisitionD832_15_1:
                    _ = match_arg_305.value
                    temp_mensualite_minimale_10 = False
                elif match_arg_305.code == TypeTravauxLogementD83215_Code.TravauxSurLogementDejaAcquisD832_15_2:
                    _ = match_arg_305.value
                    temp_mensualite_minimale_10 = False
                elif match_arg_305.code == TypeTravauxLogementD83215_Code.PasDeTravaux:
                    _ = match_arg_305.value
                    temp_mensualite_minimale_10 = True
                match_arg_306 = type_travaux_logement
                if match_arg_306.code == TypeTravauxLogementD83215_Code.TravauxPourAcquisitionD832_15_1:
                    _ = match_arg_306.value
                    temp_mensualite_minimale_11 = True
                elif match_arg_306.code == TypeTravauxLogementD83215_Code.TravauxSurLogementDejaAcquisD832_15_2:
                    _ = match_arg_306.value
                    temp_mensualite_minimale_11 = False
                elif match_arg_306.code == TypeTravauxLogementD83215_Code.PasDeTravaux:
                    _ = match_arg_306.value
                    temp_mensualite_minimale_11 = False
                return (temp_mensualite_minimale_11 or
                    temp_mensualite_minimale_10)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_mensualite_minimale_9,
                                  temp_mensualite_minimale_6)
        temp_mensualite_minimale_12 = handle_default(SourcePosition(filename="",
                                                     start_line=0,
                                                     start_column=1,
                                                     end_line=0, end_column=1,
                                                     law_headings=[]), [temp_mensualite_minimale_5,
                                                     temp_mensualite_minimale_2],
                                                     temp_mensualite_minimale_1,
                                                     temp_mensualite_minimale)
    except EmptyError:
        temp_mensualite_minimale_12 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=718, start_column=12,
                                             end_line=718, end_column=31,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    mensualite_minimale = temp_mensualite_minimale_12
    try:
        temp_coefficient_prise_en_charge_d832_10_coeff_arrondi = (decimal_round(((coefficient_prise_en_charge_d832_10_formule -
            decimal_of_string("0.005")) * decimal_of_string("100."))) /
            decimal_of_string("100."))
    except EmptyError:
        temp_coefficient_prise_en_charge_d832_10_coeff_arrondi = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=727, start_column=10,
                                             end_line=727, end_column=23,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficient_prise_en_charge_d832_10_coeff_arrondi = temp_coefficient_prise_en_charge_d832_10_coeff_arrondi
    def temp_traitement_aide_finale_abattement_1(aide_finale_8:Money):
        try:
            if ((traitement_aide_finale_minoration_forfaitaire_1(aide_finale_8) -
                abattement_depense_nette_minimale_d832_10(traitement_aide_finale_minoration_forfaitaire_1(
                                                          aide_finale_8))) >=
                money_of_cents_string("0")):
                return (traitement_aide_finale_minoration_forfaitaire_1(
                    aide_finale_8) -
                    abattement_depense_nette_minimale_d832_10(traitement_aide_finale_minoration_forfaitaire_1(
                                                              aide_finale_8)))
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=755,
                                                 start_column=10,
                                                 end_line=755, end_column=20,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_abattement_1 = temp_traitement_aide_finale_abattement_1
    try:
        if (mensualite_principale >
            plafond_mensualite_d832_10_3_coproprietaires):
            temp_mensualite_eligible = plafond_mensualite_d832_10_3_coproprietaires
        else:
            temp_mensualite_eligible = mensualite_principale
    except EmptyError:
        temp_mensualite_eligible = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=717, start_column=12,
                                             end_line=717, end_column=31,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    mensualite_eligible = temp_mensualite_eligible
    try:
        if (coefficient_prise_en_charge_d832_10_coeff_arrondi >=
            decimal_of_string("0.95")):
            temp_coefficient_prise_en_charge_d832_10_seuil = decimal_of_string("0.95")
        else:
            temp_coefficient_prise_en_charge_d832_10_seuil = coefficient_prise_en_charge_d832_10_coeff_arrondi
    except EmptyError:
        temp_coefficient_prise_en_charge_d832_10_seuil = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=728, start_column=10,
                                             end_line=728, end_column=15,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficient_prise_en_charge_d832_10_seuil = temp_coefficient_prise_en_charge_d832_10_seuil
    def temp_traitement_aide_finale_contributions_sociales_arrondi_1(aide_finale_9:Money):
        try:
            if ((money_round(((traitement_aide_finale_abattement_1(aide_finale_9) -
                contributions_sociales_dot_montant_1(traitement_aide_finale_abattement_1(
                                                     aide_finale_9))) -
                money_of_cents_string("50"))) +
                contributions_sociales_dot_montant_1(traitement_aide_finale_abattement_1(
                                                     aide_finale_9))) >=
                money_of_cents_string("0")):
                return (money_round(((traitement_aide_finale_abattement_1(
                    aide_finale_9) -
                    contributions_sociales_dot_montant_1(traitement_aide_finale_abattement_1(
                                                         aide_finale_9))) -
                    money_of_cents_string("50"))) +
                    contributions_sociales_dot_montant_1(traitement_aide_finale_abattement_1(
                                                         aide_finale_9)))
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=756,
                                                 start_column=10,
                                                 end_line=756, end_column=40,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_contributions_sociales_arrondi_1 = temp_traitement_aide_finale_contributions_sociales_arrondi_1
    try:
        if ((((mensualite_eligible + montant_forfaitaire_charges_d832_10) -
            mensualite_minimale) *
            coefficient_prise_en_charge_d832_10_seuil) <
            money_of_cents_string("0")):
            temp_aide_finale_formule_1 = money_of_cents_string("0")
        else:
            temp_aide_finale_formule_1 = (((mensualite_eligible +
                montant_forfaitaire_charges_d832_10) - mensualite_minimale) *
                coefficient_prise_en_charge_d832_10_seuil)
    except EmptyError:
        temp_aide_finale_formule_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=751, start_column=12,
                                             end_line=751, end_column=31,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    aide_finale_formule_1 = temp_aide_finale_formule_1
    def temp_traitement_aide_finale_montant_minimal_1(aide_finale_10:Money):
        try:
            if (traitement_aide_finale_contributions_sociales_arrondi_1(
                aide_finale_10) <
                montant_minimal_aide_d832_10):
                return money_of_cents_string("0")
            else:
                return traitement_aide_finale_contributions_sociales_arrondi_1(
                    aide_finale_10)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=757,
                                                 start_column=10,
                                                 end_line=757, end_column=25,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_montant_minimal_1 = temp_traitement_aide_finale_montant_minimal_1
    return CalculAidePersonnaliseeLogementAccessionPropriete(mensualite_eligible = mensualite_eligible,
        mensualite_minimale = mensualite_minimale,
        coefficient_prise_en_charge_d832_10 = coefficient_prise_en_charge_d832_10_seuil,
        aide_finale_formule = aide_finale_formule_1,
        traitement_aide_finale = traitement_aide_finale_montant_minimal_1)

def eligibilite_prestations_familiales(eligibilite_prestations_familiales_in:EligibilitePrestationsFamilialesIn):
    date_courante_10 = eligibilite_prestations_familiales_in.date_courante_in
    residence_4 = eligibilite_prestations_familiales_in.residence_in
    age_l512_3_2 = eligibilite_prestations_familiales_in.age_l512_3_2_in
    try:
        try:
            temp_age_l512_3_2 = age_l512_3_2(Unit())
        except EmptyError:
            temp_age_l512_3_2 = duration_of_numbers(20,0,0)
    except EmptyError:
        temp_age_l512_3_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                             start_line=26, start_column=21,
                                             end_line=26, end_column=33,
                                             law_headings=["Prologue : prestations familiales"]))
    age_l512_3_2_1 = temp_age_l512_3_2
    try:
        temp_smic_dot_date_courante = date_courante_10
    except EmptyError:
        temp_smic_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                             start_line=37, start_column=14,
                                             end_line=37, end_column=32,
                                             law_headings=["Prologue : prestations familiales"]))
    smic_dot_date_courante = temp_smic_dot_date_courante
    try:
        temp_smic_dot_residence = residence_4
    except EmptyError:
        temp_smic_dot_residence = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                             start_line=36, start_column=14,
                                             end_line=36, end_column=28,
                                             law_headings=["Prologue : prestations familiales"]))
    smic_dot_residence = temp_smic_dot_residence
    result_6 = smic(SmicIn(date_courante_in = smic_dot_date_courante,
                    residence_in = smic_dot_residence))
    smic_dot_brut_horaire = result_6.brut_horaire
    try:
        try:
            def temp_regime_outre_mer_l751_1(_:Unit):
                return True
            def temp_regime_outre_mer_l751_1_1(_:Unit):
                return ((residence_4 ==
                    Collectivite(Collectivite_Code.Guadeloupe, Unit())) or
                    ((residence_4 == Collectivite(Collectivite_Code.Guyane,
                    Unit())) or ((residence_4 ==
                    Collectivite(Collectivite_Code.Martinique, Unit())) or
                    ((residence_4 ==
                    Collectivite(Collectivite_Code.LaReunion, Unit())) or
                    ((residence_4 ==
                    Collectivite(Collectivite_Code.SaintBarthelemy,
                    Unit())) or (residence_4 ==
                    Collectivite(Collectivite_Code.SaintMartin, Unit())))))))
            temp_regime_outre_mer_l751_1_2 = handle_default(SourcePosition(filename="",
                                                            start_line=0,
                                                            start_column=1,
                                                            end_line=0, end_column=1,
                                                            law_headings=[]), [],
                                                            temp_regime_outre_mer_l751_1_1,
                                                            temp_regime_outre_mer_l751_1)
        except EmptyError:
            temp_regime_outre_mer_l751_1_2 = False
    except EmptyError:
        temp_regime_outre_mer_l751_1_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                             start_line=31, start_column=12,
                                             end_line=31, end_column=35,
                                             law_headings=["Prologue : prestations familiales"]))
    regime_outre_mer_l751_1 = temp_regime_outre_mer_l751_1_2
    try:
        try:
            def temp_plafond_l512_3_2(_:Unit):
                return ((smic_dot_brut_horaire * decimal_of_string("0.55")) *
                    decimal_of_string("169."))
            def temp_plafond_l512_3_2_1(_:Unit):
                return regime_outre_mer_l751_1
            temp_plafond_l512_3_2_2 = handle_default(SourcePosition(filename="",
                                                     start_line=0,
                                                     start_column=1,
                                                     end_line=0, end_column=1,
                                                     law_headings=[]), [],
                                                     temp_plafond_l512_3_2_1,
                                                     temp_plafond_l512_3_2)
        except EmptyError:
            temp_plafond_l512_3_2_2 = ((smic_dot_brut_horaire *
                decimal_of_string("0.55")) * decimal_of_string("169."))
    except EmptyError:
        temp_plafond_l512_3_2_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                             start_line=24, start_column=11,
                                             end_line=24, end_column=27,
                                             law_headings=["Prologue : prestations familiales"]))
    plafond_l512_3_2 = temp_plafond_l512_3_2_2
    def temp_conditions_hors_age(enfant:EnfantPrestationsFamiliales):
        try:
            try:
                def temp_conditions_hors_age_1(_:Unit):
                    return True
                def temp_conditions_hors_age_2(_:Unit):
                    match_arg_307 = enfant.obligation_scolaire
                    if match_arg_307.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg_307.value
                        temp_conditions_hors_age_3 = False
                    elif match_arg_307.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg_307.value
                        temp_conditions_hors_age_3 = False
                    elif match_arg_307.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg_307.value
                        temp_conditions_hors_age_3 = True
                    match_arg_308 = enfant.obligation_scolaire
                    if match_arg_308.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg_308.value
                        temp_conditions_hors_age_4 = False
                    elif match_arg_308.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg_308.value
                        temp_conditions_hors_age_4 = True
                    elif match_arg_308.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg_308.value
                        temp_conditions_hors_age_4 = False
                    match_arg_309 = enfant.obligation_scolaire
                    if match_arg_309.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg_309.value
                        temp_conditions_hors_age_5 = True
                    elif match_arg_309.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg_309.value
                        temp_conditions_hors_age_5 = False
                    elif match_arg_309.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg_309.value
                        temp_conditions_hors_age_5 = False
                    return ((temp_conditions_hors_age_5 or
                        (temp_conditions_hors_age_4 or
                        temp_conditions_hors_age_3)) and
                        (enfant.remuneration_mensuelle <= plafond_l512_3_2))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_conditions_hors_age_2,
                                      temp_conditions_hors_age_1)
            except EmptyError:
                return False
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                                 start_line=29,
                                                 start_column=12,
                                                 end_line=29, end_column=31,
                                                 law_headings=["Prologue : prestations familiales"]))
    conditions_hors_age = temp_conditions_hors_age
    def temp_droit_ouvert(enfant_1:EnfantPrestationsFamiliales):
        try:
            try:
                try:
                    def temp_droit_ouvert_1(_:Unit):
                        return True
                    def temp_droit_ouvert_2(_:Unit):
                        try:
                            temp_droit_ouvert_3 = enfant_1.date_de_naissance
                        except EmptyError:
                            temp_droit_ouvert_3 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/sécurité_sociale_L.catala_fr",
                                                                 start_line=66,
                                                                 start_column=38,
                                                                 end_line=66,
                                                                 end_column=62,
                                                                 law_headings=["Article L512-3",
                                                                 "Chapitre 2 : Champ d'application",
                                                                 "Titre 1 : Champ d'application - Généralités",
                                                                 "Livre 5 : Prestations familiales et prestations assimilées",
                                                                 "Partie législative",
                                                                 "Code de la sécurité sociale"]))
                        try:
                            temp_droit_ouvert_4 = date_courante_10
                        except EmptyError:
                            temp_droit_ouvert_4 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/sécurité_sociale_L.catala_fr",
                                                                 start_line=67,
                                                                 start_column=37,
                                                                 end_line=67,
                                                                 end_column=50,
                                                                 law_headings=["Article L512-3",
                                                                 "Chapitre 2 : Champ d'application",
                                                                 "Titre 1 : Champ d'application - Généralités",
                                                                 "Livre 5 : Prestations familiales et prestations assimilées",
                                                                 "Partie législative",
                                                                 "Code de la sécurité sociale"]))
                        try:
                            temp_droit_ouvert_5 = age_l512_3_2_1
                        except EmptyError:
                            temp_droit_ouvert_5 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/sécurité_sociale_L.catala_fr",
                                                                 start_line=68,
                                                                 start_column=30,
                                                                 end_line=68,
                                                                 end_column=42,
                                                                 law_headings=["Article L512-3",
                                                                 "Chapitre 2 : Champ d'application",
                                                                 "Titre 1 : Champ d'application - Généralités",
                                                                 "Livre 5 : Prestations familiales et prestations assimilées",
                                                                 "Partie législative",
                                                                 "Code de la sécurité sociale"]))
                        match_arg_310 = enfant_1.obligation_scolaire
                        if match_arg_310.code == SituationObligationScolaire_Code.Avant:
                            _ = match_arg_310.value
                            temp_droit_ouvert_6 = False
                        elif match_arg_310.code == SituationObligationScolaire_Code.Pendant:
                            _ = match_arg_310.value
                            temp_droit_ouvert_6 = False
                        elif match_arg_310.code == SituationObligationScolaire_Code.Apres:
                            _ = match_arg_310.value
                            temp_droit_ouvert_6 = True
                        return (temp_droit_ouvert_6 and
                            ((enfant_1.remuneration_mensuelle <=
                            plafond_l512_3_2) and
                            verification_age_superieur_a(VerificationAgeSuperieurAIn(date_naissance_in = temp_droit_ouvert_3,
                                                         date_courante_in = temp_droit_ouvert_4,
                                                         annees_in = temp_droit_ouvert_5)).est_superieur))
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_droit_ouvert_2,
                                          temp_droit_ouvert_1)
                except EmptyError:
                    match_arg_311 = enfant_1.obligation_scolaire
                    if match_arg_311.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg_311.value
                        temp_droit_ouvert_7 = False
                    elif match_arg_311.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg_311.value
                        temp_droit_ouvert_7 = True
                    elif match_arg_311.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg_311.value
                        temp_droit_ouvert_7 = False
                    match_arg_312 = enfant_1.obligation_scolaire
                    if match_arg_312.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg_312.value
                        temp_droit_ouvert_8 = True
                    elif match_arg_312.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg_312.value
                        temp_droit_ouvert_8 = False
                    elif match_arg_312.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg_312.value
                        temp_droit_ouvert_8 = False
                    if (temp_droit_ouvert_8 or
                        temp_droit_ouvert_7):
                        return True
                    else:
                        raise EmptyError
            except EmptyError:
                return False
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                                 start_line=27,
                                                 start_column=12,
                                                 end_line=27, end_column=24,
                                                 law_headings=["Prologue : prestations familiales"]))
    droit_ouvert = temp_droit_ouvert
    return EligibilitePrestationsFamiliales(age_l512_3_2 = age_l512_3_2_1,
        droit_ouvert = droit_ouvert,
        conditions_hors_age = conditions_hors_age,
        regime_outre_mer_l751_1 = regime_outre_mer_l751_1)

def calcul_aide_personnalisee_logement_locatif(calcul_aide_personnalisee_logement_locatif_in:CalculAidePersonnaliseeLogementLocatifIn):
    loyer_principal_base = calcul_aide_personnalisee_logement_locatif_in.loyer_principal_base_in
    ressources_menage_arrondies_3 = calcul_aide_personnalisee_logement_locatif_in.ressources_menage_arrondies_in
    beneficiaire_aide_adulte_ou_enfant_handicapes = calcul_aide_personnalisee_logement_locatif_in.beneficiaire_aide_adulte_ou_enfant_handicapes_in
    date_courante_11 = calcul_aide_personnalisee_logement_locatif_in.date_courante_in
    nombre_personnes_a_charge_4 = calcul_aide_personnalisee_logement_locatif_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_4 = calcul_aide_personnalisee_logement_locatif_in.situation_familiale_calcul_apl_in
    zone_2 = calcul_aide_personnalisee_logement_locatif_in.zone_in
    logement_est_chambre = calcul_aide_personnalisee_logement_locatif_in.logement_est_chambre_in
    agees_ou_handicap_adultes_hebergees_onereux_particuliers = calcul_aide_personnalisee_logement_locatif_in.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in
    type_aide = calcul_aide_personnalisee_logement_locatif_in.type_aide_in
    colocation = calcul_aide_personnalisee_logement_locatif_in.colocation_in
    reduction_loyer_solidarite = calcul_aide_personnalisee_logement_locatif_in.reduction_loyer_solidarite_in
    logement_meuble_d842_2 = calcul_aide_personnalisee_logement_locatif_in.logement_meuble_d842_2_in
    residence_5 = calcul_aide_personnalisee_logement_locatif_in.residence_in
    try:
        temp_fraction_l832_3 = decimal_of_string("0.98")
    except EmptyError:
        temp_fraction_l832_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=548, start_column=11,
                                             end_line=548, end_column=26,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    fraction_l832_3 = temp_fraction_l832_3
    try:
        temp___6 = (date_courante_11 >= date_of_numbers(2020,10,1))
    except EmptyError:
        temp___6 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=591, start_column=13,
                                             end_line=591, end_column=42,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    if not (temp___6):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                              start_line=591,
                                              start_column=13, end_line=591,
                                              end_column=42,
                                              law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    try:
        def temp_montant_forfaitaire_d823_16(_:Unit):
            return money_of_cents_string("500")
        def temp_montant_forfaitaire_d823_16_1(_:Unit):
            return (date_courante_11 >= date_of_numbers(2019,10,1))
        temp_montant_forfaitaire_d823_16_2 = handle_default(SourcePosition(filename="",
                                                            start_line=0,
                                                            start_column=1,
                                                            end_line=0, end_column=1,
                                                            law_headings=[]), [],
                                                            temp_montant_forfaitaire_d823_16_1,
                                                            temp_montant_forfaitaire_d823_16)
    except EmptyError:
        temp_montant_forfaitaire_d823_16_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=551, start_column=11,
                                             end_line=551, end_column=38,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_d823_16 = temp_montant_forfaitaire_d823_16_2
    try:
        temp___7 = (nombre_personnes_a_charge_4 >= integer_of_string("0"))
    except EmptyError:
        temp___7 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=592, start_column=13,
                                             end_line=592, end_column=43,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    if not (temp___7):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                              start_line=592,
                                              start_column=13, end_line=592,
                                              end_column=43,
                                              law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    try:
        try:
            try:
                def temp_multiplicateur_majoration_charges_d823_16(_:Unit):
                    return decimal_of_integer(nombre_personnes_a_charge_4)
                def temp_multiplicateur_majoration_charges_d823_16_1(_:Unit):
                    return ((date_courante_11 <
                        date_of_numbers(2021,10,1)) and (date_courante_11 >=
                        date_of_numbers(2020,10,1)))
                temp_multiplicateur_majoration_charges_d823_16_2 = handle_default(
                    SourcePosition(filename="", start_line=0, start_column=1,
                    end_line=0, end_column=1, law_headings=[]), [],
                    temp_multiplicateur_majoration_charges_d823_16_1,
                    temp_multiplicateur_majoration_charges_d823_16)
            except EmptyError:
                if ((date_courante_11 >= date_of_numbers(2021,10,1)) and
                    (date_courante_11 <
                    date_of_numbers(2022,7,1))):
                    temp_multiplicateur_majoration_charges_d823_16_2 = decimal_of_integer(nombre_personnes_a_charge_4)
                else:
                    temp_multiplicateur_majoration_charges_d823_16_2 = dead_value
                    raise EmptyError
        except EmptyError:
            if (date_courante_11 >=
                date_of_numbers(2022,7,1)):
                temp_multiplicateur_majoration_charges_d823_16_2 = decimal_of_integer(nombre_personnes_a_charge_4)
            else:
                temp_multiplicateur_majoration_charges_d823_16_2 = dead_value
                raise EmptyError
    except EmptyError:
        temp_multiplicateur_majoration_charges_d823_16_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=556, start_column=11,
                                             end_line=556, end_column=52,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    multiplicateur_majoration_charges_d823_16 = temp_multiplicateur_majoration_charges_d823_16_2
    try:
        def temp_montant_minimal_aide_d823_16(_:Unit):
            match_arg_313 = type_aide
            if match_arg_313.code == TypeAidesPersonnelleLogement_Code.AidePersonnaliseeLogement:
                _ = match_arg_313.value
                return money_of_cents_string("0")
            elif match_arg_313.code == TypeAidesPersonnelleLogement_Code.AllocationLogementFamiliale:
                _ = match_arg_313.value
                return money_of_cents_string("1000")
            elif match_arg_313.code == TypeAidesPersonnelleLogement_Code.AllocationLogementSociale:
                _ = match_arg_313.value
                return money_of_cents_string("1000")
        def temp_montant_minimal_aide_d823_16_1(_:Unit):
            return (date_courante_11 >= date_of_numbers(2019,10,1))
        temp_montant_minimal_aide_d823_16_2 = handle_default(SourcePosition(filename="",
                                                             start_line=0,
                                                             start_column=1,
                                                             end_line=0, end_column=1,
                                                             law_headings=[]), [],
                                                             temp_montant_minimal_aide_d823_16_1,
                                                             temp_montant_minimal_aide_d823_16)
    except EmptyError:
        temp_montant_minimal_aide_d823_16_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=552, start_column=11,
                                             end_line=552, end_column=39,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    montant_minimal_aide_d823_16 = temp_montant_minimal_aide_d823_16_2
    try:
        temp___8 = not (logement_est_chambre and colocation)
    except EmptyError:
        temp___8 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=599, start_column=13,
                                             end_line=599, end_column=53,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    if not (temp___8):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                              start_line=599,
                                              start_column=13, end_line=599,
                                              end_column=53,
                                              law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    try:
        if logement_meuble_d842_2:
            temp_loyer_principal_avec_reduction_meuble = (loyer_principal_base *
                (decimal_of_string("2.") / decimal_of_string("3.")))
        else:
            temp_loyer_principal_avec_reduction_meuble = loyer_principal_base
    except EmptyError:
        temp_loyer_principal_avec_reduction_meuble = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=525, start_column=10,
                                             end_line=525, end_column=31,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    loyer_principal_avec_reduction_meuble = temp_loyer_principal_avec_reduction_meuble
    try:
        temp_contributions_sociales_dot_date_courante_2 = date_courante_11
    except EmptyError:
        temp_contributions_sociales_dot_date_courante_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=587, start_column=14,
                                             end_line=587, end_column=50,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    contributions_sociales_dot_date_courante_2 = temp_contributions_sociales_dot_date_courante_2
    try:
        temp_contributions_sociales_dot_lieu_2 = residence_5
    except EmptyError:
        temp_contributions_sociales_dot_lieu_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=588, start_column=14,
                                             end_line=588, end_column=41,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    contributions_sociales_dot_lieu_2 = temp_contributions_sociales_dot_lieu_2
    result_7 = contributions_sociales_aides_personnelle_logement(ContributionsSocialesAidesPersonnelleLogementIn(date_courante_in = contributions_sociales_dot_date_courante_2,
                                                                 lieu_in = contributions_sociales_dot_lieu_2))
    contributions_sociales_dot_montant_2 = result_7.montant
    try:
        try:
            def temp_taux_composition_familiale(_:Unit):
                raise EmptyError
            def temp_taux_composition_familiale_1(_:Unit):
                return False
            def temp_taux_composition_familiale_2(_:Unit):
                try:
                    try:
                        try:
                            try:
                                def temp_taux_composition_familiale_3(_:Unit):
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("0")):
                                        match_arg_314 = situation_familiale_calcul_apl_4
                                        if match_arg_314.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                            _ = match_arg_314.value
                                            return decimal_of_string("0.0281")
                                        elif match_arg_314.code == SituationFamilialeCalculAPL_Code.Couple:
                                            _ = match_arg_314.value
                                            return decimal_of_string("0.0299")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("1")):
                                            return decimal_of_string("0.0238")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("2")):
                                                return decimal_of_string("0.0217")
                                            else:
                                                if (nombre_personnes_a_charge_4 ==
                                                    integer_of_string("3")):
                                                    return decimal_of_string("0.0194")
                                                else:
                                                    if (nombre_personnes_a_charge_4 ==
                                                        integer_of_string("4")):
                                                        return decimal_of_string("0.018")
                                                    else:
                                                        if (nombre_personnes_a_charge_4 ==
                                                            integer_of_string("5")):
                                                            return decimal_of_string("0.0169")
                                                        else:
                                                            return decimal_of_string("0.0162")
                                def temp_taux_composition_familiale_4(_:Unit):
                                    match_arg_315 = residence_5
                                    if match_arg_315.code == Collectivite_Code.Guadeloupe:
                                        _ = match_arg_315.value
                                        temp_taux_composition_familiale_5 = True
                                    elif match_arg_315.code == Collectivite_Code.Guyane:
                                        _ = match_arg_315.value
                                        temp_taux_composition_familiale_5 = False
                                    elif match_arg_315.code == Collectivite_Code.Martinique:
                                        _ = match_arg_315.value
                                        temp_taux_composition_familiale_5 = True
                                    elif match_arg_315.code == Collectivite_Code.LaReunion:
                                        _ = match_arg_315.value
                                        temp_taux_composition_familiale_5 = True
                                    elif match_arg_315.code == Collectivite_Code.SaintBarthelemy:
                                        _ = match_arg_315.value
                                        temp_taux_composition_familiale_5 = True
                                    elif match_arg_315.code == Collectivite_Code.SaintMartin:
                                        _ = match_arg_315.value
                                        temp_taux_composition_familiale_5 = True
                                    elif match_arg_315.code == Collectivite_Code.Metropole:
                                        _ = match_arg_315.value
                                        temp_taux_composition_familiale_5 = False
                                    elif match_arg_315.code == Collectivite_Code.SaintPierreEtMiquelon:
                                        _ = match_arg_315.value
                                        temp_taux_composition_familiale_5 = False
                                    elif match_arg_315.code == Collectivite_Code.Mayotte:
                                        _ = match_arg_315.value
                                        temp_taux_composition_familiale_5 = True
                                    return (((date_courante_11 >=
                                        date_of_numbers(2020,1,1)) and
                                        (date_courante_11 <
                                        date_of_numbers(2020,10,1))) and
                                        temp_taux_composition_familiale_5)
                                return handle_default(SourcePosition(filename="",
                                                      start_line=0,
                                                      start_column=1,
                                                      end_line=0, end_column=1,
                                                      law_headings=[]), [],
                                                      temp_taux_composition_familiale_4,
                                                      temp_taux_composition_familiale_3)
                            except EmptyError:
                                match_arg_316 = residence_5
                                if match_arg_316.code == Collectivite_Code.Guadeloupe:
                                    _ = match_arg_316.value
                                    temp_taux_composition_familiale_6 = True
                                elif match_arg_316.code == Collectivite_Code.Guyane:
                                    _ = match_arg_316.value
                                    temp_taux_composition_familiale_6 = False
                                elif match_arg_316.code == Collectivite_Code.Martinique:
                                    _ = match_arg_316.value
                                    temp_taux_composition_familiale_6 = True
                                elif match_arg_316.code == Collectivite_Code.LaReunion:
                                    _ = match_arg_316.value
                                    temp_taux_composition_familiale_6 = True
                                elif match_arg_316.code == Collectivite_Code.SaintBarthelemy:
                                    _ = match_arg_316.value
                                    temp_taux_composition_familiale_6 = True
                                elif match_arg_316.code == Collectivite_Code.SaintMartin:
                                    _ = match_arg_316.value
                                    temp_taux_composition_familiale_6 = True
                                elif match_arg_316.code == Collectivite_Code.Metropole:
                                    _ = match_arg_316.value
                                    temp_taux_composition_familiale_6 = False
                                elif match_arg_316.code == Collectivite_Code.SaintPierreEtMiquelon:
                                    _ = match_arg_316.value
                                    temp_taux_composition_familiale_6 = False
                                elif match_arg_316.code == Collectivite_Code.Mayotte:
                                    _ = match_arg_316.value
                                    temp_taux_composition_familiale_6 = True
                                if (((date_courante_11 >=
                                    date_of_numbers(2020,10,1)) and
                                    (date_courante_11 <
                                    date_of_numbers(2021,10,1))) and
                                    temp_taux_composition_familiale_6):
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("0")):
                                        match_arg_317 = situation_familiale_calcul_apl_4
                                        if match_arg_317.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                            _ = match_arg_317.value
                                            return decimal_of_string("0.0281")
                                        elif match_arg_317.code == SituationFamilialeCalculAPL_Code.Couple:
                                            _ = match_arg_317.value
                                            return decimal_of_string("0.0299")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("1")):
                                            return decimal_of_string("0.0238")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("2")):
                                                return decimal_of_string("0.0217")
                                            else:
                                                if (nombre_personnes_a_charge_4 ==
                                                    integer_of_string("3")):
                                                    return decimal_of_string("0.0194")
                                                else:
                                                    if (nombre_personnes_a_charge_4 ==
                                                        integer_of_string("4")):
                                                        return decimal_of_string("0.018")
                                                    else:
                                                        if (nombre_personnes_a_charge_4 ==
                                                            integer_of_string("5")):
                                                            return decimal_of_string("0.0169")
                                                        else:
                                                            return decimal_of_string("0.0162")
                                else:
                                    raise EmptyError
                        except EmptyError:
                            match_arg_318 = residence_5
                            if match_arg_318.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_318.value
                                temp_taux_composition_familiale_7 = True
                            elif match_arg_318.code == Collectivite_Code.Guyane:
                                _ = match_arg_318.value
                                temp_taux_composition_familiale_7 = False
                            elif match_arg_318.code == Collectivite_Code.Martinique:
                                _ = match_arg_318.value
                                temp_taux_composition_familiale_7 = True
                            elif match_arg_318.code == Collectivite_Code.LaReunion:
                                _ = match_arg_318.value
                                temp_taux_composition_familiale_7 = True
                            elif match_arg_318.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_318.value
                                temp_taux_composition_familiale_7 = True
                            elif match_arg_318.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_318.value
                                temp_taux_composition_familiale_7 = True
                            elif match_arg_318.code == Collectivite_Code.Metropole:
                                _ = match_arg_318.value
                                temp_taux_composition_familiale_7 = False
                            elif match_arg_318.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_318.value
                                temp_taux_composition_familiale_7 = False
                            elif match_arg_318.code == Collectivite_Code.Mayotte:
                                _ = match_arg_318.value
                                temp_taux_composition_familiale_7 = True
                            if (((date_courante_11 >=
                                date_of_numbers(2021,10,1)) and
                                (date_courante_11 <
                                date_of_numbers(2022,1,1))) and
                                temp_taux_composition_familiale_7):
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                    match_arg_319 = situation_familiale_calcul_apl_4
                                    if match_arg_319.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_319.value
                                        return decimal_of_string("0.0281")
                                    elif match_arg_319.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_319.value
                                        return decimal_of_string("0.0299")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("1")):
                                        return decimal_of_string("0.0238")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("2")):
                                            return decimal_of_string("0.0217")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("3")):
                                                return decimal_of_string("0.0194")
                                            else:
                                                if (nombre_personnes_a_charge_4 ==
                                                    integer_of_string("4")):
                                                    return decimal_of_string("0.018")
                                                else:
                                                    if (nombre_personnes_a_charge_4 ==
                                                        integer_of_string("5")):
                                                        return decimal_of_string("0.0169")
                                                    else:
                                                        return decimal_of_string("0.0162")
                            else:
                                raise EmptyError
                    except EmptyError:
                        match_arg_320 = residence_5
                        if match_arg_320.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_320.value
                            temp_taux_composition_familiale_8 = True
                        elif match_arg_320.code == Collectivite_Code.Guyane:
                            _ = match_arg_320.value
                            temp_taux_composition_familiale_8 = False
                        elif match_arg_320.code == Collectivite_Code.Martinique:
                            _ = match_arg_320.value
                            temp_taux_composition_familiale_8 = True
                        elif match_arg_320.code == Collectivite_Code.LaReunion:
                            _ = match_arg_320.value
                            temp_taux_composition_familiale_8 = True
                        elif match_arg_320.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_320.value
                            temp_taux_composition_familiale_8 = True
                        elif match_arg_320.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_320.value
                            temp_taux_composition_familiale_8 = True
                        elif match_arg_320.code == Collectivite_Code.Metropole:
                            _ = match_arg_320.value
                            temp_taux_composition_familiale_8 = False
                        elif match_arg_320.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_320.value
                            temp_taux_composition_familiale_8 = False
                        elif match_arg_320.code == Collectivite_Code.Mayotte:
                            _ = match_arg_320.value
                            temp_taux_composition_familiale_8 = True
                        if (((date_courante_11 >=
                            date_of_numbers(2022,1,1)) and
                            (date_courante_11 <
                            date_of_numbers(2022,7,1))) and
                            temp_taux_composition_familiale_8):
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("0")):
                                match_arg_321 = situation_familiale_calcul_apl_4
                                if match_arg_321.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_321.value
                                    return decimal_of_string("0.0281")
                                elif match_arg_321.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_321.value
                                    return decimal_of_string("0.0299")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("1")):
                                    return decimal_of_string("0.0238")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("2")):
                                        return decimal_of_string("0.0217")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("3")):
                                            return decimal_of_string("0.0194")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("4")):
                                                return decimal_of_string("0.018")
                                            else:
                                                if (nombre_personnes_a_charge_4 ==
                                                    integer_of_string("5")):
                                                    return decimal_of_string("0.0169")
                                                else:
                                                    return decimal_of_string("0.0162")
                        else:
                            raise EmptyError
                except EmptyError:
                    match_arg_322 = residence_5
                    if match_arg_322.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_322.value
                        temp_taux_composition_familiale_9 = True
                    elif match_arg_322.code == Collectivite_Code.Guyane:
                        _ = match_arg_322.value
                        temp_taux_composition_familiale_9 = False
                    elif match_arg_322.code == Collectivite_Code.Martinique:
                        _ = match_arg_322.value
                        temp_taux_composition_familiale_9 = True
                    elif match_arg_322.code == Collectivite_Code.LaReunion:
                        _ = match_arg_322.value
                        temp_taux_composition_familiale_9 = True
                    elif match_arg_322.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_322.value
                        temp_taux_composition_familiale_9 = True
                    elif match_arg_322.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_322.value
                        temp_taux_composition_familiale_9 = True
                    elif match_arg_322.code == Collectivite_Code.Metropole:
                        _ = match_arg_322.value
                        temp_taux_composition_familiale_9 = False
                    elif match_arg_322.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_322.value
                        temp_taux_composition_familiale_9 = False
                    elif match_arg_322.code == Collectivite_Code.Mayotte:
                        _ = match_arg_322.value
                        temp_taux_composition_familiale_9 = True
                    if (((date_courante_11 >= date_of_numbers(2022,7,1)) and
                        (date_courante_11 < date_of_numbers(2023,1,1))) and
                        temp_taux_composition_familiale_9):
                        if (nombre_personnes_a_charge_4 ==
                            integer_of_string("0")):
                            match_arg_323 = situation_familiale_calcul_apl_4
                            if match_arg_323.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_323.value
                                return decimal_of_string("0.0281")
                            elif match_arg_323.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_323.value
                                return decimal_of_string("0.0299")
                        else:
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("1")):
                                return decimal_of_string("0.0238")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("2")):
                                    return decimal_of_string("0.0217")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("3")):
                                        return decimal_of_string("0.0194")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("4")):
                                            return decimal_of_string("0.018")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("5")):
                                                return decimal_of_string("0.0169")
                                            else:
                                                return decimal_of_string("0.0162")
                    else:
                        raise EmptyError
            def temp_taux_composition_familiale_10(_:Unit):
                def temp_taux_composition_familiale_11(_:Unit):
                    if (nombre_personnes_a_charge_4 ==
                        integer_of_string("0")):
                        match_arg_324 = situation_familiale_calcul_apl_4
                        if match_arg_324.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_324.value
                            return decimal_of_string("0.0281")
                        elif match_arg_324.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_324.value
                            return decimal_of_string("0.0299")
                    else:
                        if (nombre_personnes_a_charge_4 ==
                            integer_of_string("1")):
                            return decimal_of_string("0.0238")
                        else:
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("2")):
                                return decimal_of_string("0.0217")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("3")):
                                    return decimal_of_string("0.0194")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("4")):
                                        return decimal_of_string("0.018")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("5")):
                                            return decimal_of_string("0.0169")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("6")):
                                                return decimal_of_string("0.0162")
                                            else:
                                                if (nombre_personnes_a_charge_4 ==
                                                    integer_of_string("7")):
                                                    return decimal_of_string("0.0167")
                                                else:
                                                    return (decimal_of_string("0.0167") -
                                                        (decimal_of_string("0.0006") *
                                                        decimal_of_integer((nombre_personnes_a_charge_4 -
                                                        integer_of_string("7")))))
                def temp_taux_composition_familiale_12(_:Unit):
                    match_arg_325 = residence_5
                    if match_arg_325.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_325.value
                        temp_taux_composition_familiale_13 = True
                    elif match_arg_325.code == Collectivite_Code.Guyane:
                        _ = match_arg_325.value
                        temp_taux_composition_familiale_13 = False
                    elif match_arg_325.code == Collectivite_Code.Martinique:
                        _ = match_arg_325.value
                        temp_taux_composition_familiale_13 = True
                    elif match_arg_325.code == Collectivite_Code.LaReunion:
                        _ = match_arg_325.value
                        temp_taux_composition_familiale_13 = True
                    elif match_arg_325.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_325.value
                        temp_taux_composition_familiale_13 = True
                    elif match_arg_325.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_325.value
                        temp_taux_composition_familiale_13 = True
                    elif match_arg_325.code == Collectivite_Code.Metropole:
                        _ = match_arg_325.value
                        temp_taux_composition_familiale_13 = False
                    elif match_arg_325.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_325.value
                        temp_taux_composition_familiale_13 = False
                    elif match_arg_325.code == Collectivite_Code.Mayotte:
                        _ = match_arg_325.value
                        temp_taux_composition_familiale_13 = True
                    return ((date_courante_11 >=
                        date_of_numbers(2023,1,1)) and
                        temp_taux_composition_familiale_13)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_taux_composition_familiale_12,
                                      temp_taux_composition_familiale_11)
            temp_taux_composition_familiale_14 = handle_default(SourcePosition(filename="",
                                                                start_line=0,
                                                                start_column=1,
                                                                end_line=0, end_column=1,
                                                                law_headings=[]), [temp_taux_composition_familiale_10,
                                                                temp_taux_composition_familiale_2],
                                                                temp_taux_composition_familiale_1,
                                                                temp_taux_composition_familiale)
        except EmptyError:
            try:
                try:
                    def temp_taux_composition_familiale_15(_:Unit):
                        if (nombre_personnes_a_charge_4 ==
                            integer_of_string("0")):
                            match_arg_326 = situation_familiale_calcul_apl_4
                            if match_arg_326.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_326.value
                                return decimal_of_string("0.0283")
                            elif match_arg_326.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_326.value
                                return decimal_of_string("0.0315")
                        else:
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("1")):
                                return decimal_of_string("0.027")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("2")):
                                    return decimal_of_string("0.0238")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("3")):
                                        return decimal_of_string("0.0201")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("4")):
                                            return decimal_of_string("0.0185")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("5")):
                                                return decimal_of_string("0.0179")
                                            else:
                                                if (nombre_personnes_a_charge_4 ==
                                                    integer_of_string("6")):
                                                    return decimal_of_string("0.0173")
                                                else:
                                                    return (decimal_of_string("0.0173") -
                                                        (decimal_of_string("0.0006") *
                                                        decimal_of_integer((nombre_personnes_a_charge_4 -
                                                        integer_of_string("6")))))
                    def temp_taux_composition_familiale_16(_:Unit):
                        return ((date_courante_11 >=
                            date_of_numbers(2020,10,1)) and
                            (date_courante_11 < date_of_numbers(2021,10,1)))
                    temp_taux_composition_familiale_14 = handle_default(
                        SourcePosition(filename="", start_line=0,
                        start_column=1, end_line=0, end_column=1,
                        law_headings=[]), [],
                        temp_taux_composition_familiale_16,
                        temp_taux_composition_familiale_15)
                except EmptyError:
                    if ((date_courante_11 >= date_of_numbers(2021,10,1)) and
                        (date_courante_11 <
                        date_of_numbers(2022,7,1))):
                        if (nombre_personnes_a_charge_4 ==
                            integer_of_string("0")):
                            match_arg_327 = situation_familiale_calcul_apl_4
                            if match_arg_327.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_327.value
                                temp_taux_composition_familiale_14 = decimal_of_string("0.0283")
                            elif match_arg_327.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_327.value
                                temp_taux_composition_familiale_14 = decimal_of_string("0.0315")
                        else:
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("1")):
                                temp_taux_composition_familiale_14 = decimal_of_string("0.027")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("2")):
                                    temp_taux_composition_familiale_14 = decimal_of_string("0.0238")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("3")):
                                        temp_taux_composition_familiale_14 = decimal_of_string("0.0201")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("4")):
                                            temp_taux_composition_familiale_14 = decimal_of_string("0.0185")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("5")):
                                                temp_taux_composition_familiale_14 = decimal_of_string("0.0179")
                                            else:
                                                if (nombre_personnes_a_charge_4 ==
                                                    integer_of_string("6")):
                                                    temp_taux_composition_familiale_14 = decimal_of_string("0.0173")
                                                else:
                                                    temp_taux_composition_familiale_14 = (decimal_of_string("0.0173") -
                                                        (decimal_of_string("0.0006") *
                                                        decimal_of_integer((nombre_personnes_a_charge_4 -
                                                        integer_of_string("6")))))
                    else:
                        temp_taux_composition_familiale_14 = dead_value
                        raise EmptyError
            except EmptyError:
                if (date_courante_11 >=
                    date_of_numbers(2022,7,1)):
                    if (nombre_personnes_a_charge_4 ==
                        integer_of_string("0")):
                        match_arg_328 = situation_familiale_calcul_apl_4
                        if match_arg_328.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_328.value
                            temp_taux_composition_familiale_14 = decimal_of_string("0.0283")
                        elif match_arg_328.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_328.value
                            temp_taux_composition_familiale_14 = decimal_of_string("0.0315")
                    else:
                        if (nombre_personnes_a_charge_4 ==
                            integer_of_string("1")):
                            temp_taux_composition_familiale_14 = decimal_of_string("0.027")
                        else:
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("2")):
                                temp_taux_composition_familiale_14 = decimal_of_string("0.0238")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("3")):
                                    temp_taux_composition_familiale_14 = decimal_of_string("0.0201")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("4")):
                                        temp_taux_composition_familiale_14 = decimal_of_string("0.0185")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("5")):
                                            temp_taux_composition_familiale_14 = decimal_of_string("0.0179")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("6")):
                                                temp_taux_composition_familiale_14 = decimal_of_string("0.0173")
                                            else:
                                                temp_taux_composition_familiale_14 = (decimal_of_string("0.0173") -
                                                    (decimal_of_string("0.0006") *
                                                    decimal_of_integer((nombre_personnes_a_charge_4 -
                                                    integer_of_string("6")))))
                else:
                    temp_taux_composition_familiale_14 = dead_value
                    raise EmptyError
    except EmptyError:
        temp_taux_composition_familiale_14 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=563, start_column=12,
                                             end_line=563, end_column=38,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    taux_composition_familiale = temp_taux_composition_familiale_14
    try:
        try:
            try:
                try:
                    try:
                        try:
                            def temp_multiplicateur_majoration_r0(_:Unit):
                                return decimal_of_string("0.")
                            def temp_multiplicateur_majoration_r0_1(_:Unit):
                                match_arg_329 = residence_5
                                if match_arg_329.code == Collectivite_Code.Guadeloupe:
                                    _ = match_arg_329.value
                                    temp_multiplicateur_majoration_r0_2 = True
                                elif match_arg_329.code == Collectivite_Code.Guyane:
                                    _ = match_arg_329.value
                                    temp_multiplicateur_majoration_r0_2 = False
                                elif match_arg_329.code == Collectivite_Code.Martinique:
                                    _ = match_arg_329.value
                                    temp_multiplicateur_majoration_r0_2 = True
                                elif match_arg_329.code == Collectivite_Code.LaReunion:
                                    _ = match_arg_329.value
                                    temp_multiplicateur_majoration_r0_2 = True
                                elif match_arg_329.code == Collectivite_Code.SaintBarthelemy:
                                    _ = match_arg_329.value
                                    temp_multiplicateur_majoration_r0_2 = True
                                elif match_arg_329.code == Collectivite_Code.SaintMartin:
                                    _ = match_arg_329.value
                                    temp_multiplicateur_majoration_r0_2 = True
                                elif match_arg_329.code == Collectivite_Code.Metropole:
                                    _ = match_arg_329.value
                                    temp_multiplicateur_majoration_r0_2 = False
                                elif match_arg_329.code == Collectivite_Code.SaintPierreEtMiquelon:
                                    _ = match_arg_329.value
                                    temp_multiplicateur_majoration_r0_2 = False
                                elif match_arg_329.code == Collectivite_Code.Mayotte:
                                    _ = match_arg_329.value
                                    temp_multiplicateur_majoration_r0_2 = True
                                return (((date_courante_11 >=
                                    date_of_numbers(2020,1,1)) and
                                    (date_courante_11 <
                                    date_of_numbers(2020,10,1))) and
                                    (temp_multiplicateur_majoration_r0_2 and
                                    (nombre_personnes_a_charge_4 >=
                                    integer_of_string("6"))))
                            temp_multiplicateur_majoration_r0_3 = handle_default(
                                SourcePosition(filename="", start_line=0,
                                start_column=1, end_line=0, end_column=1,
                                law_headings=[]), [],
                                temp_multiplicateur_majoration_r0_1,
                                temp_multiplicateur_majoration_r0)
                        except EmptyError:
                            match_arg_330 = residence_5
                            if match_arg_330.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_330.value
                                temp_multiplicateur_majoration_r0_4 = True
                            elif match_arg_330.code == Collectivite_Code.Guyane:
                                _ = match_arg_330.value
                                temp_multiplicateur_majoration_r0_4 = False
                            elif match_arg_330.code == Collectivite_Code.Martinique:
                                _ = match_arg_330.value
                                temp_multiplicateur_majoration_r0_4 = True
                            elif match_arg_330.code == Collectivite_Code.LaReunion:
                                _ = match_arg_330.value
                                temp_multiplicateur_majoration_r0_4 = True
                            elif match_arg_330.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_330.value
                                temp_multiplicateur_majoration_r0_4 = True
                            elif match_arg_330.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_330.value
                                temp_multiplicateur_majoration_r0_4 = True
                            elif match_arg_330.code == Collectivite_Code.Metropole:
                                _ = match_arg_330.value
                                temp_multiplicateur_majoration_r0_4 = False
                            elif match_arg_330.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_330.value
                                temp_multiplicateur_majoration_r0_4 = False
                            elif match_arg_330.code == Collectivite_Code.Mayotte:
                                _ = match_arg_330.value
                                temp_multiplicateur_majoration_r0_4 = True
                            if (((date_courante_11 >=
                                date_of_numbers(2020,10,1)) and
                                (date_courante_11 <
                                date_of_numbers(2021,10,1))) and
                                (temp_multiplicateur_majoration_r0_4 and
                                (nombre_personnes_a_charge_4 >=
                                integer_of_string("6")))):
                                temp_multiplicateur_majoration_r0_3 = decimal_of_string("0.")
                            else:
                                temp_multiplicateur_majoration_r0_3 = dead_value
                                raise EmptyError
                    except EmptyError:
                        match_arg_331 = residence_5
                        if match_arg_331.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_331.value
                            temp_multiplicateur_majoration_r0_5 = True
                        elif match_arg_331.code == Collectivite_Code.Guyane:
                            _ = match_arg_331.value
                            temp_multiplicateur_majoration_r0_5 = False
                        elif match_arg_331.code == Collectivite_Code.Martinique:
                            _ = match_arg_331.value
                            temp_multiplicateur_majoration_r0_5 = True
                        elif match_arg_331.code == Collectivite_Code.LaReunion:
                            _ = match_arg_331.value
                            temp_multiplicateur_majoration_r0_5 = True
                        elif match_arg_331.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_331.value
                            temp_multiplicateur_majoration_r0_5 = True
                        elif match_arg_331.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_331.value
                            temp_multiplicateur_majoration_r0_5 = True
                        elif match_arg_331.code == Collectivite_Code.Metropole:
                            _ = match_arg_331.value
                            temp_multiplicateur_majoration_r0_5 = False
                        elif match_arg_331.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_331.value
                            temp_multiplicateur_majoration_r0_5 = False
                        elif match_arg_331.code == Collectivite_Code.Mayotte:
                            _ = match_arg_331.value
                            temp_multiplicateur_majoration_r0_5 = True
                        if (((date_courante_11 >=
                            date_of_numbers(2021,10,1)) and
                            (date_courante_11 <
                            date_of_numbers(2022,1,1))) and
                            (temp_multiplicateur_majoration_r0_5 and
                            (nombre_personnes_a_charge_4 >=
                            integer_of_string("6")))):
                            temp_multiplicateur_majoration_r0_3 = decimal_of_string("0.")
                        else:
                            temp_multiplicateur_majoration_r0_3 = dead_value
                            raise EmptyError
                except EmptyError:
                    match_arg_332 = residence_5
                    if match_arg_332.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_332.value
                        temp_multiplicateur_majoration_r0_6 = True
                    elif match_arg_332.code == Collectivite_Code.Guyane:
                        _ = match_arg_332.value
                        temp_multiplicateur_majoration_r0_6 = False
                    elif match_arg_332.code == Collectivite_Code.Martinique:
                        _ = match_arg_332.value
                        temp_multiplicateur_majoration_r0_6 = True
                    elif match_arg_332.code == Collectivite_Code.LaReunion:
                        _ = match_arg_332.value
                        temp_multiplicateur_majoration_r0_6 = True
                    elif match_arg_332.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_332.value
                        temp_multiplicateur_majoration_r0_6 = True
                    elif match_arg_332.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_332.value
                        temp_multiplicateur_majoration_r0_6 = True
                    elif match_arg_332.code == Collectivite_Code.Metropole:
                        _ = match_arg_332.value
                        temp_multiplicateur_majoration_r0_6 = False
                    elif match_arg_332.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_332.value
                        temp_multiplicateur_majoration_r0_6 = False
                    elif match_arg_332.code == Collectivite_Code.Mayotte:
                        _ = match_arg_332.value
                        temp_multiplicateur_majoration_r0_6 = True
                    if (((date_courante_11 >= date_of_numbers(2022,1,1)) and
                        (date_courante_11 < date_of_numbers(2022,7,1))) and
                        (temp_multiplicateur_majoration_r0_6 and
                        (nombre_personnes_a_charge_4 >=
                        integer_of_string("6")))):
                        temp_multiplicateur_majoration_r0_3 = decimal_of_string("0.")
                    else:
                        temp_multiplicateur_majoration_r0_3 = dead_value
                        raise EmptyError
            except EmptyError:
                match_arg_333 = residence_5
                if match_arg_333.code == Collectivite_Code.Guadeloupe:
                    _ = match_arg_333.value
                    temp_multiplicateur_majoration_r0_7 = True
                elif match_arg_333.code == Collectivite_Code.Guyane:
                    _ = match_arg_333.value
                    temp_multiplicateur_majoration_r0_7 = False
                elif match_arg_333.code == Collectivite_Code.Martinique:
                    _ = match_arg_333.value
                    temp_multiplicateur_majoration_r0_7 = True
                elif match_arg_333.code == Collectivite_Code.LaReunion:
                    _ = match_arg_333.value
                    temp_multiplicateur_majoration_r0_7 = True
                elif match_arg_333.code == Collectivite_Code.SaintBarthelemy:
                    _ = match_arg_333.value
                    temp_multiplicateur_majoration_r0_7 = True
                elif match_arg_333.code == Collectivite_Code.SaintMartin:
                    _ = match_arg_333.value
                    temp_multiplicateur_majoration_r0_7 = True
                elif match_arg_333.code == Collectivite_Code.Metropole:
                    _ = match_arg_333.value
                    temp_multiplicateur_majoration_r0_7 = False
                elif match_arg_333.code == Collectivite_Code.SaintPierreEtMiquelon:
                    _ = match_arg_333.value
                    temp_multiplicateur_majoration_r0_7 = False
                elif match_arg_333.code == Collectivite_Code.Mayotte:
                    _ = match_arg_333.value
                    temp_multiplicateur_majoration_r0_7 = True
                if (((date_courante_11 >= date_of_numbers(2022,7,1)) and
                    (date_courante_11 < date_of_numbers(2023,1,1))) and
                    (temp_multiplicateur_majoration_r0_7 and
                    (nombre_personnes_a_charge_4 >=
                    integer_of_string("6")))):
                    temp_multiplicateur_majoration_r0_3 = decimal_of_string("0.")
                else:
                    temp_multiplicateur_majoration_r0_3 = dead_value
                    raise EmptyError
        except EmptyError:
            try:
                try:
                    try:
                        def temp_multiplicateur_majoration_r0_8(_:Unit):
                            return decimal_of_integer((nombre_personnes_a_charge_4 -
                                integer_of_string("6")))
                        def temp_multiplicateur_majoration_r0_9(_:Unit):
                            return ((date_courante_11 <
                                date_of_numbers(2022,1,1)) and
                                (date_courante_11 >=
                                date_of_numbers(2020,1,1)))
                        temp_multiplicateur_majoration_r0_3 = handle_default(
                            SourcePosition(filename="", start_line=0,
                            start_column=1, end_line=0, end_column=1,
                            law_headings=[]), [],
                            temp_multiplicateur_majoration_r0_9,
                            temp_multiplicateur_majoration_r0_8)
                    except EmptyError:
                        if ((date_courante_11 >=
                            date_of_numbers(2022,1,1)) and
                            (date_courante_11 <
                            date_of_numbers(2022,7,1))):
                            temp_multiplicateur_majoration_r0_3 = decimal_of_integer((nombre_personnes_a_charge_4 -
                                integer_of_string("6")))
                        else:
                            temp_multiplicateur_majoration_r0_3 = dead_value
                            raise EmptyError
                except EmptyError:
                    if ((date_courante_11 >= date_of_numbers(2022,7,1)) and
                        (date_courante_11 <=
                        date_of_numbers(2022,12,31))):
                        temp_multiplicateur_majoration_r0_3 = decimal_of_integer((nombre_personnes_a_charge_4 -
                            integer_of_string("6")))
                    else:
                        temp_multiplicateur_majoration_r0_3 = dead_value
                        raise EmptyError
            except EmptyError:
                if (date_courante_11 >=
                    date_of_numbers(2023,1,1)):
                    temp_multiplicateur_majoration_r0_3 = decimal_of_integer((nombre_personnes_a_charge_4 -
                        integer_of_string("6")))
                else:
                    temp_multiplicateur_majoration_r0_3 = dead_value
                    raise EmptyError
    except EmptyError:
        temp_multiplicateur_majoration_r0_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=558, start_column=11,
                                             end_line=558, end_column=39,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    multiplicateur_majoration_r0 = temp_multiplicateur_majoration_r0_3
    try:
        try:
            try:
                try:
                    try:
                        try:
                            def temp_multiplicateur_majoration_loyer_reference(_:Unit):
                                return decimal_of_string("5.")
                            def temp_multiplicateur_majoration_loyer_reference_1(_:Unit):
                                match_arg_334 = residence_5
                                if match_arg_334.code == Collectivite_Code.Guadeloupe:
                                    _ = match_arg_334.value
                                    temp_multiplicateur_majoration_loyer_reference_2 = True
                                elif match_arg_334.code == Collectivite_Code.Guyane:
                                    _ = match_arg_334.value
                                    temp_multiplicateur_majoration_loyer_reference_2 = False
                                elif match_arg_334.code == Collectivite_Code.Martinique:
                                    _ = match_arg_334.value
                                    temp_multiplicateur_majoration_loyer_reference_2 = True
                                elif match_arg_334.code == Collectivite_Code.LaReunion:
                                    _ = match_arg_334.value
                                    temp_multiplicateur_majoration_loyer_reference_2 = True
                                elif match_arg_334.code == Collectivite_Code.SaintBarthelemy:
                                    _ = match_arg_334.value
                                    temp_multiplicateur_majoration_loyer_reference_2 = True
                                elif match_arg_334.code == Collectivite_Code.SaintMartin:
                                    _ = match_arg_334.value
                                    temp_multiplicateur_majoration_loyer_reference_2 = True
                                elif match_arg_334.code == Collectivite_Code.Metropole:
                                    _ = match_arg_334.value
                                    temp_multiplicateur_majoration_loyer_reference_2 = False
                                elif match_arg_334.code == Collectivite_Code.SaintPierreEtMiquelon:
                                    _ = match_arg_334.value
                                    temp_multiplicateur_majoration_loyer_reference_2 = False
                                elif match_arg_334.code == Collectivite_Code.Mayotte:
                                    _ = match_arg_334.value
                                    temp_multiplicateur_majoration_loyer_reference_2 = True
                                return (((date_courante_11 >=
                                    date_of_numbers(2020,1,1)) and
                                    (date_courante_11 <
                                    date_of_numbers(2020,10,1))) and
                                    (temp_multiplicateur_majoration_loyer_reference_2 and
                                    (nombre_personnes_a_charge_4 >=
                                    integer_of_string("6"))))
                            temp_multiplicateur_majoration_loyer_reference_3 = handle_default(
                                SourcePosition(filename="", start_line=0,
                                start_column=1, end_line=0, end_column=1,
                                law_headings=[]), [],
                                temp_multiplicateur_majoration_loyer_reference_1,
                                temp_multiplicateur_majoration_loyer_reference)
                        except EmptyError:
                            match_arg_335 = residence_5
                            if match_arg_335.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_335.value
                                temp_multiplicateur_majoration_loyer_reference_4 = True
                            elif match_arg_335.code == Collectivite_Code.Guyane:
                                _ = match_arg_335.value
                                temp_multiplicateur_majoration_loyer_reference_4 = False
                            elif match_arg_335.code == Collectivite_Code.Martinique:
                                _ = match_arg_335.value
                                temp_multiplicateur_majoration_loyer_reference_4 = True
                            elif match_arg_335.code == Collectivite_Code.LaReunion:
                                _ = match_arg_335.value
                                temp_multiplicateur_majoration_loyer_reference_4 = True
                            elif match_arg_335.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_335.value
                                temp_multiplicateur_majoration_loyer_reference_4 = True
                            elif match_arg_335.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_335.value
                                temp_multiplicateur_majoration_loyer_reference_4 = True
                            elif match_arg_335.code == Collectivite_Code.Metropole:
                                _ = match_arg_335.value
                                temp_multiplicateur_majoration_loyer_reference_4 = False
                            elif match_arg_335.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_335.value
                                temp_multiplicateur_majoration_loyer_reference_4 = False
                            elif match_arg_335.code == Collectivite_Code.Mayotte:
                                _ = match_arg_335.value
                                temp_multiplicateur_majoration_loyer_reference_4 = True
                            if (((date_courante_11 >=
                                date_of_numbers(2020,10,1)) and
                                (date_courante_11 <
                                date_of_numbers(2021,10,1))) and
                                (temp_multiplicateur_majoration_loyer_reference_4 and
                                (nombre_personnes_a_charge_4 >=
                                integer_of_string("6")))):
                                temp_multiplicateur_majoration_loyer_reference_3 = decimal_of_string("5.")
                            else:
                                temp_multiplicateur_majoration_loyer_reference_3 = dead_value
                                raise EmptyError
                    except EmptyError:
                        match_arg_336 = residence_5
                        if match_arg_336.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_336.value
                            temp_multiplicateur_majoration_loyer_reference_5 = True
                        elif match_arg_336.code == Collectivite_Code.Guyane:
                            _ = match_arg_336.value
                            temp_multiplicateur_majoration_loyer_reference_5 = False
                        elif match_arg_336.code == Collectivite_Code.Martinique:
                            _ = match_arg_336.value
                            temp_multiplicateur_majoration_loyer_reference_5 = True
                        elif match_arg_336.code == Collectivite_Code.LaReunion:
                            _ = match_arg_336.value
                            temp_multiplicateur_majoration_loyer_reference_5 = True
                        elif match_arg_336.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_336.value
                            temp_multiplicateur_majoration_loyer_reference_5 = True
                        elif match_arg_336.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_336.value
                            temp_multiplicateur_majoration_loyer_reference_5 = True
                        elif match_arg_336.code == Collectivite_Code.Metropole:
                            _ = match_arg_336.value
                            temp_multiplicateur_majoration_loyer_reference_5 = False
                        elif match_arg_336.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_336.value
                            temp_multiplicateur_majoration_loyer_reference_5 = False
                        elif match_arg_336.code == Collectivite_Code.Mayotte:
                            _ = match_arg_336.value
                            temp_multiplicateur_majoration_loyer_reference_5 = True
                        if (((date_courante_11 >=
                            date_of_numbers(2021,10,1)) and
                            (date_courante_11 <
                            date_of_numbers(2022,1,1))) and
                            (temp_multiplicateur_majoration_loyer_reference_5 and
                            (nombre_personnes_a_charge_4 >=
                            integer_of_string("6")))):
                            temp_multiplicateur_majoration_loyer_reference_3 = decimal_of_string("5.")
                        else:
                            temp_multiplicateur_majoration_loyer_reference_3 = dead_value
                            raise EmptyError
                except EmptyError:
                    match_arg_337 = residence_5
                    if match_arg_337.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_337.value
                        temp_multiplicateur_majoration_loyer_reference_6 = True
                    elif match_arg_337.code == Collectivite_Code.Guyane:
                        _ = match_arg_337.value
                        temp_multiplicateur_majoration_loyer_reference_6 = False
                    elif match_arg_337.code == Collectivite_Code.Martinique:
                        _ = match_arg_337.value
                        temp_multiplicateur_majoration_loyer_reference_6 = True
                    elif match_arg_337.code == Collectivite_Code.LaReunion:
                        _ = match_arg_337.value
                        temp_multiplicateur_majoration_loyer_reference_6 = True
                    elif match_arg_337.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_337.value
                        temp_multiplicateur_majoration_loyer_reference_6 = True
                    elif match_arg_337.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_337.value
                        temp_multiplicateur_majoration_loyer_reference_6 = True
                    elif match_arg_337.code == Collectivite_Code.Metropole:
                        _ = match_arg_337.value
                        temp_multiplicateur_majoration_loyer_reference_6 = False
                    elif match_arg_337.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_337.value
                        temp_multiplicateur_majoration_loyer_reference_6 = False
                    elif match_arg_337.code == Collectivite_Code.Mayotte:
                        _ = match_arg_337.value
                        temp_multiplicateur_majoration_loyer_reference_6 = True
                    if (((date_courante_11 >= date_of_numbers(2022,1,1)) and
                        (date_courante_11 < date_of_numbers(2022,7,1))) and
                        (temp_multiplicateur_majoration_loyer_reference_6 and
                        (nombre_personnes_a_charge_4 >=
                        integer_of_string("6")))):
                        temp_multiplicateur_majoration_loyer_reference_3 = decimal_of_string("5.")
                    else:
                        temp_multiplicateur_majoration_loyer_reference_3 = dead_value
                        raise EmptyError
            except EmptyError:
                match_arg_338 = residence_5
                if match_arg_338.code == Collectivite_Code.Guadeloupe:
                    _ = match_arg_338.value
                    temp_multiplicateur_majoration_loyer_reference_7 = True
                elif match_arg_338.code == Collectivite_Code.Guyane:
                    _ = match_arg_338.value
                    temp_multiplicateur_majoration_loyer_reference_7 = False
                elif match_arg_338.code == Collectivite_Code.Martinique:
                    _ = match_arg_338.value
                    temp_multiplicateur_majoration_loyer_reference_7 = True
                elif match_arg_338.code == Collectivite_Code.LaReunion:
                    _ = match_arg_338.value
                    temp_multiplicateur_majoration_loyer_reference_7 = True
                elif match_arg_338.code == Collectivite_Code.SaintBarthelemy:
                    _ = match_arg_338.value
                    temp_multiplicateur_majoration_loyer_reference_7 = True
                elif match_arg_338.code == Collectivite_Code.SaintMartin:
                    _ = match_arg_338.value
                    temp_multiplicateur_majoration_loyer_reference_7 = True
                elif match_arg_338.code == Collectivite_Code.Metropole:
                    _ = match_arg_338.value
                    temp_multiplicateur_majoration_loyer_reference_7 = False
                elif match_arg_338.code == Collectivite_Code.SaintPierreEtMiquelon:
                    _ = match_arg_338.value
                    temp_multiplicateur_majoration_loyer_reference_7 = False
                elif match_arg_338.code == Collectivite_Code.Mayotte:
                    _ = match_arg_338.value
                    temp_multiplicateur_majoration_loyer_reference_7 = True
                if (((date_courante_11 >= date_of_numbers(2022,7,1)) and
                    (date_courante_11 < date_of_numbers(2023,1,1))) and
                    (temp_multiplicateur_majoration_loyer_reference_7 and
                    (nombre_personnes_a_charge_4 >=
                    integer_of_string("6")))):
                    temp_multiplicateur_majoration_loyer_reference_3 = decimal_of_string("5.")
                else:
                    temp_multiplicateur_majoration_loyer_reference_3 = dead_value
                    raise EmptyError
        except EmptyError:
            try:
                try:
                    def temp_multiplicateur_majoration_loyer_reference_8(_:Unit):
                        return decimal_of_integer((nombre_personnes_a_charge_4 -
                            integer_of_string("1")))
                    def temp_multiplicateur_majoration_loyer_reference_9(_:Unit):
                        return ((date_courante_11 >=
                            date_of_numbers(2020,10,1)) and
                            (date_courante_11 < date_of_numbers(2021,10,1)))
                    temp_multiplicateur_majoration_loyer_reference_3 = handle_default(
                        SourcePosition(filename="", start_line=0,
                        start_column=1, end_line=0, end_column=1,
                        law_headings=[]), [],
                        temp_multiplicateur_majoration_loyer_reference_9,
                        temp_multiplicateur_majoration_loyer_reference_8)
                except EmptyError:
                    if ((date_courante_11 >= date_of_numbers(2021,10,1)) and
                        (date_courante_11 <
                        date_of_numbers(2022,7,1))):
                        temp_multiplicateur_majoration_loyer_reference_3 = decimal_of_integer((nombre_personnes_a_charge_4 -
                            integer_of_string("1")))
                    else:
                        temp_multiplicateur_majoration_loyer_reference_3 = dead_value
                        raise EmptyError
            except EmptyError:
                if (date_courante_11 >=
                    date_of_numbers(2022,7,1)):
                    temp_multiplicateur_majoration_loyer_reference_3 = decimal_of_integer((nombre_personnes_a_charge_4 -
                        integer_of_string("1")))
                else:
                    temp_multiplicateur_majoration_loyer_reference_3 = dead_value
                    raise EmptyError
    except EmptyError:
        temp_multiplicateur_majoration_loyer_reference_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=557, start_column=11,
                                             end_line=557, end_column=52,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    multiplicateur_majoration_loyer_reference = temp_multiplicateur_majoration_loyer_reference_3
    try:
        try:
            try:
                try:
                    try:
                        try:
                            def temp_multiplicateur_majoration_plafond_loyer_d823_16_2(_:Unit):
                                return decimal_of_string("5.")
                            def temp_multiplicateur_majoration_plafond_loyer_d823_16_2_1(_:Unit):
                                match_arg_339 = residence_5
                                if match_arg_339.code == Collectivite_Code.Guadeloupe:
                                    _ = match_arg_339.value
                                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_2 = True
                                elif match_arg_339.code == Collectivite_Code.Guyane:
                                    _ = match_arg_339.value
                                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_2 = False
                                elif match_arg_339.code == Collectivite_Code.Martinique:
                                    _ = match_arg_339.value
                                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_2 = True
                                elif match_arg_339.code == Collectivite_Code.LaReunion:
                                    _ = match_arg_339.value
                                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_2 = True
                                elif match_arg_339.code == Collectivite_Code.SaintBarthelemy:
                                    _ = match_arg_339.value
                                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_2 = True
                                elif match_arg_339.code == Collectivite_Code.SaintMartin:
                                    _ = match_arg_339.value
                                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_2 = True
                                elif match_arg_339.code == Collectivite_Code.Metropole:
                                    _ = match_arg_339.value
                                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_2 = False
                                elif match_arg_339.code == Collectivite_Code.SaintPierreEtMiquelon:
                                    _ = match_arg_339.value
                                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_2 = False
                                elif match_arg_339.code == Collectivite_Code.Mayotte:
                                    _ = match_arg_339.value
                                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_2 = True
                                return (((date_courante_11 >=
                                    date_of_numbers(2020,1,1)) and
                                    (date_courante_11 <
                                    date_of_numbers(2020,10,1))) and
                                    (temp_multiplicateur_majoration_plafond_loyer_d823_16_2_2 and
                                    (nombre_personnes_a_charge_4 >=
                                    integer_of_string("6"))))
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = handle_default(
                                SourcePosition(filename="", start_line=0,
                                start_column=1, end_line=0, end_column=1,
                                law_headings=[]), [],
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_1,
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2)
                        except EmptyError:
                            match_arg_340 = residence_5
                            if match_arg_340.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_340.value
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_4 = True
                            elif match_arg_340.code == Collectivite_Code.Guyane:
                                _ = match_arg_340.value
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_4 = False
                            elif match_arg_340.code == Collectivite_Code.Martinique:
                                _ = match_arg_340.value
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_4 = True
                            elif match_arg_340.code == Collectivite_Code.LaReunion:
                                _ = match_arg_340.value
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_4 = True
                            elif match_arg_340.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_340.value
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_4 = True
                            elif match_arg_340.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_340.value
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_4 = True
                            elif match_arg_340.code == Collectivite_Code.Metropole:
                                _ = match_arg_340.value
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_4 = False
                            elif match_arg_340.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_340.value
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_4 = False
                            elif match_arg_340.code == Collectivite_Code.Mayotte:
                                _ = match_arg_340.value
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_4 = True
                            if (((date_courante_11 >=
                                date_of_numbers(2020,10,1)) and
                                (date_courante_11 <
                                date_of_numbers(2021,10,1))) and
                                (temp_multiplicateur_majoration_plafond_loyer_d823_16_2_4 and
                                (nombre_personnes_a_charge_4 >=
                                integer_of_string("6")))):
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = decimal_of_string("5.")
                            else:
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = dead_value
                                raise EmptyError
                    except EmptyError:
                        match_arg_341 = residence_5
                        if match_arg_341.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_341.value
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_5 = True
                        elif match_arg_341.code == Collectivite_Code.Guyane:
                            _ = match_arg_341.value
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_5 = False
                        elif match_arg_341.code == Collectivite_Code.Martinique:
                            _ = match_arg_341.value
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_5 = True
                        elif match_arg_341.code == Collectivite_Code.LaReunion:
                            _ = match_arg_341.value
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_5 = True
                        elif match_arg_341.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_341.value
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_5 = True
                        elif match_arg_341.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_341.value
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_5 = True
                        elif match_arg_341.code == Collectivite_Code.Metropole:
                            _ = match_arg_341.value
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_5 = False
                        elif match_arg_341.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_341.value
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_5 = False
                        elif match_arg_341.code == Collectivite_Code.Mayotte:
                            _ = match_arg_341.value
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_5 = True
                        if (((date_courante_11 >=
                            date_of_numbers(2021,10,1)) and
                            (date_courante_11 <
                            date_of_numbers(2022,1,1))) and
                            (temp_multiplicateur_majoration_plafond_loyer_d823_16_2_5 and
                            (nombre_personnes_a_charge_4 >=
                            integer_of_string("6")))):
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = decimal_of_string("5.")
                        else:
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = dead_value
                            raise EmptyError
                except EmptyError:
                    match_arg_342 = residence_5
                    if match_arg_342.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_342.value
                        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_6 = True
                    elif match_arg_342.code == Collectivite_Code.Guyane:
                        _ = match_arg_342.value
                        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_6 = False
                    elif match_arg_342.code == Collectivite_Code.Martinique:
                        _ = match_arg_342.value
                        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_6 = True
                    elif match_arg_342.code == Collectivite_Code.LaReunion:
                        _ = match_arg_342.value
                        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_6 = True
                    elif match_arg_342.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_342.value
                        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_6 = True
                    elif match_arg_342.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_342.value
                        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_6 = True
                    elif match_arg_342.code == Collectivite_Code.Metropole:
                        _ = match_arg_342.value
                        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_6 = False
                    elif match_arg_342.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_342.value
                        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_6 = False
                    elif match_arg_342.code == Collectivite_Code.Mayotte:
                        _ = match_arg_342.value
                        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_6 = True
                    if (((date_courante_11 >= date_of_numbers(2022,1,1)) and
                        (date_courante_11 < date_of_numbers(2022,7,1))) and
                        (temp_multiplicateur_majoration_plafond_loyer_d823_16_2_6 and
                        (nombre_personnes_a_charge_4 >=
                        integer_of_string("6")))):
                        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = decimal_of_string("5.")
                    else:
                        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = dead_value
                        raise EmptyError
            except EmptyError:
                match_arg_343 = residence_5
                if match_arg_343.code == Collectivite_Code.Guadeloupe:
                    _ = match_arg_343.value
                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_7 = True
                elif match_arg_343.code == Collectivite_Code.Guyane:
                    _ = match_arg_343.value
                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_7 = False
                elif match_arg_343.code == Collectivite_Code.Martinique:
                    _ = match_arg_343.value
                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_7 = True
                elif match_arg_343.code == Collectivite_Code.LaReunion:
                    _ = match_arg_343.value
                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_7 = True
                elif match_arg_343.code == Collectivite_Code.SaintBarthelemy:
                    _ = match_arg_343.value
                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_7 = True
                elif match_arg_343.code == Collectivite_Code.SaintMartin:
                    _ = match_arg_343.value
                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_7 = True
                elif match_arg_343.code == Collectivite_Code.Metropole:
                    _ = match_arg_343.value
                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_7 = False
                elif match_arg_343.code == Collectivite_Code.SaintPierreEtMiquelon:
                    _ = match_arg_343.value
                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_7 = False
                elif match_arg_343.code == Collectivite_Code.Mayotte:
                    _ = match_arg_343.value
                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_7 = True
                if (((date_courante_11 >= date_of_numbers(2022,7,1)) and
                    (date_courante_11 < date_of_numbers(2023,1,1))) and
                    (temp_multiplicateur_majoration_plafond_loyer_d823_16_2_7 and
                    (nombre_personnes_a_charge_4 >=
                    integer_of_string("6")))):
                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = decimal_of_string("5.")
                else:
                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = dead_value
                    raise EmptyError
        except EmptyError:
            try:
                try:
                    try:
                        try:
                            def temp_multiplicateur_majoration_plafond_loyer_d823_16_2_8(_:Unit):
                                return decimal_of_integer((nombre_personnes_a_charge_4 -
                                    integer_of_string("1")))
                            def temp_multiplicateur_majoration_plafond_loyer_d823_16_2_9(_:Unit):
                                return ((date_courante_11 <
                                    date_of_numbers(2021,10,1)) and
                                    ((date_courante_11 >=
                                    date_of_numbers(2020,10,1)) and
                                    colocation))
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = handle_default(
                                SourcePosition(filename="", start_line=0,
                                start_column=1, end_line=0, end_column=1,
                                law_headings=[]), [],
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_9,
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_8)
                        except EmptyError:
                            if ((date_courante_11 <
                                date_of_numbers(2021,10,1)) and
                                (date_courante_11 >=
                                date_of_numbers(2020,10,1))):
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = decimal_of_integer((nombre_personnes_a_charge_4 -
                                    integer_of_string("1")))
                            else:
                                temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = dead_value
                                raise EmptyError
                    except EmptyError:
                        if ((date_courante_11 >=
                            date_of_numbers(2021,10,1)) and
                            ((date_courante_11 <
                            date_of_numbers(2022,7,1)) and
                            colocation)):
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = decimal_of_integer((nombre_personnes_a_charge_4 -
                                integer_of_string("1")))
                        else:
                            temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = dead_value
                            raise EmptyError
                except EmptyError:
                    if ((date_courante_11 >= date_of_numbers(2021,10,1)) and
                        (date_courante_11 <
                        date_of_numbers(2022,7,1))):
                        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = decimal_of_integer((nombre_personnes_a_charge_4 -
                            integer_of_string("1")))
                    else:
                        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = dead_value
                        raise EmptyError
            except EmptyError:
                if (date_courante_11 >=
                    date_of_numbers(2022,7,1)):
                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = decimal_of_integer((nombre_personnes_a_charge_4 -
                        integer_of_string("1")))
                else:
                    temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = dead_value
                    raise EmptyError
    except EmptyError:
        temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=555, start_column=11,
                                             end_line=555, end_column=60,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    multiplicateur_majoration_plafond_loyer_d823_16_2 = temp_multiplicateur_majoration_plafond_loyer_d823_16_2_3
    try:
        temp___9 = ((fraction_l832_3 >= decimal_of_string("0.9")) and
            (fraction_l832_3 <= decimal_of_string("0.98")))
    except EmptyError:
        temp___9 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                             start_line=840, start_column=13,
                                             end_line=840, end_column=61,
                                             law_headings=["Article L832-3",
                                             "Chapitre Ier : Champ d'application",
                                             "Titre III : Aide personnalisée au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie législative",
                                             "Code de la construction et de l'habitation"]))
    if not (temp___9):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                              start_line=840,
                                              start_column=13, end_line=840,
                                              end_column=61,
                                              law_headings=["Article L832-3",
                                                           "Chapitre Ier : Champ d'application",
                                                           "Titre III : Aide personnalisée au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie législative",
                                                           "Code de la construction et de l'habitation"]))
    try:
        try:
            try:
                try:
                    def temp_montant_forfaitaire_charges_d823_16(_:Unit):
                        raise EmptyError
                    def temp_montant_forfaitaire_charges_d823_16_1(_:Unit):
                        return False
                    def temp_montant_forfaitaire_charges_d823_16_2(_:Unit):
                        def temp_montant_forfaitaire_charges_d823_16_3(_:Unit):
                            match_arg_344 = situation_familiale_calcul_apl_4
                            if match_arg_344.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_344.value
                                temp_montant_forfaitaire_charges_d823_16_4 = money_of_cents_string("1858")
                            elif match_arg_344.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_344.value
                                temp_montant_forfaitaire_charges_d823_16_4 = money_of_cents_string("3614")
                            match_arg_345 = situation_familiale_calcul_apl_4
                            if match_arg_345.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_345.value
                                temp_montant_forfaitaire_charges_d823_16_5 = money_of_cents_string("1858")
                            elif match_arg_345.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_345.value
                                temp_montant_forfaitaire_charges_d823_16_5 = money_of_cents_string("3614")
                            if ((temp_montant_forfaitaire_charges_d823_16_5 +
                                (money_of_cents_string("929") *
                                decimal_of_integer(nombre_personnes_a_charge_4))) >
                                (temp_montant_forfaitaire_charges_d823_16_4 +
                                (money_of_cents_string("929") *
                                decimal_of_string("6.")))):
                                match_arg_346 = situation_familiale_calcul_apl_4
                                if match_arg_346.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_346.value
                                    temp_montant_forfaitaire_charges_d823_16_6 = money_of_cents_string("1858")
                                elif match_arg_346.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_346.value
                                    temp_montant_forfaitaire_charges_d823_16_6 = money_of_cents_string("3614")
                                return (temp_montant_forfaitaire_charges_d823_16_6 +
                                    (money_of_cents_string("929") *
                                    decimal_of_string("6.")))
                            else:
                                match_arg_347 = situation_familiale_calcul_apl_4
                                if match_arg_347.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_347.value
                                    temp_montant_forfaitaire_charges_d823_16_7 = money_of_cents_string("1858")
                                elif match_arg_347.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_347.value
                                    temp_montant_forfaitaire_charges_d823_16_7 = money_of_cents_string("3614")
                                return (temp_montant_forfaitaire_charges_d823_16_7 +
                                    (money_of_cents_string("929") *
                                    decimal_of_integer(nombre_personnes_a_charge_4)))
                        def temp_montant_forfaitaire_charges_d823_16_8(_:Unit):
                            match_arg_348 = residence_5
                            if match_arg_348.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_348.value
                                temp_montant_forfaitaire_charges_d823_16_9 = True
                            elif match_arg_348.code == Collectivite_Code.Guyane:
                                _ = match_arg_348.value
                                temp_montant_forfaitaire_charges_d823_16_9 = False
                            elif match_arg_348.code == Collectivite_Code.Martinique:
                                _ = match_arg_348.value
                                temp_montant_forfaitaire_charges_d823_16_9 = True
                            elif match_arg_348.code == Collectivite_Code.LaReunion:
                                _ = match_arg_348.value
                                temp_montant_forfaitaire_charges_d823_16_9 = True
                            elif match_arg_348.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_348.value
                                temp_montant_forfaitaire_charges_d823_16_9 = True
                            elif match_arg_348.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_348.value
                                temp_montant_forfaitaire_charges_d823_16_9 = True
                            elif match_arg_348.code == Collectivite_Code.Metropole:
                                _ = match_arg_348.value
                                temp_montant_forfaitaire_charges_d823_16_9 = False
                            elif match_arg_348.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_348.value
                                temp_montant_forfaitaire_charges_d823_16_9 = False
                            elif match_arg_348.code == Collectivite_Code.Mayotte:
                                _ = match_arg_348.value
                                temp_montant_forfaitaire_charges_d823_16_9 = True
                            return (((date_courante_11 >=
                                date_of_numbers(2020,1,1)) and
                                (date_courante_11 <
                                date_of_numbers(2020,10,1))) and
                                temp_montant_forfaitaire_charges_d823_16_9)
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_d823_16_8,
                                              temp_montant_forfaitaire_charges_d823_16_3)
                    def temp_montant_forfaitaire_charges_d823_16_10(_:Unit):
                        def temp_montant_forfaitaire_charges_d823_16_11(_:Unit):
                            match_arg_349 = situation_familiale_calcul_apl_4
                            if match_arg_349.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_349.value
                                temp_montant_forfaitaire_charges_d823_16_12 = money_of_cents_string("1864")
                            elif match_arg_349.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_349.value
                                temp_montant_forfaitaire_charges_d823_16_12 = money_of_cents_string("3625")
                            match_arg_350 = situation_familiale_calcul_apl_4
                            if match_arg_350.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_350.value
                                temp_montant_forfaitaire_charges_d823_16_13 = money_of_cents_string("1864")
                            elif match_arg_350.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_350.value
                                temp_montant_forfaitaire_charges_d823_16_13 = money_of_cents_string("3625")
                            if ((temp_montant_forfaitaire_charges_d823_16_13 +
                                (money_of_cents_string("932") *
                                decimal_of_integer(nombre_personnes_a_charge_4))) >
                                (temp_montant_forfaitaire_charges_d823_16_12 +
                                (money_of_cents_string("932") *
                                decimal_of_string("6.")))):
                                match_arg_351 = situation_familiale_calcul_apl_4
                                if match_arg_351.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_351.value
                                    temp_montant_forfaitaire_charges_d823_16_14 = money_of_cents_string("1864")
                                elif match_arg_351.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_351.value
                                    temp_montant_forfaitaire_charges_d823_16_14 = money_of_cents_string("3625")
                                return (temp_montant_forfaitaire_charges_d823_16_14 +
                                    (money_of_cents_string("932") *
                                    decimal_of_string("6.")))
                            else:
                                match_arg_352 = situation_familiale_calcul_apl_4
                                if match_arg_352.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_352.value
                                    temp_montant_forfaitaire_charges_d823_16_15 = money_of_cents_string("1864")
                                elif match_arg_352.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_352.value
                                    temp_montant_forfaitaire_charges_d823_16_15 = money_of_cents_string("3625")
                                return (temp_montant_forfaitaire_charges_d823_16_15 +
                                    (money_of_cents_string("932") *
                                    decimal_of_integer(nombre_personnes_a_charge_4)))
                        def temp_montant_forfaitaire_charges_d823_16_16(_:Unit):
                            match_arg_353 = residence_5
                            if match_arg_353.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_353.value
                                temp_montant_forfaitaire_charges_d823_16_17 = True
                            elif match_arg_353.code == Collectivite_Code.Guyane:
                                _ = match_arg_353.value
                                temp_montant_forfaitaire_charges_d823_16_17 = False
                            elif match_arg_353.code == Collectivite_Code.Martinique:
                                _ = match_arg_353.value
                                temp_montant_forfaitaire_charges_d823_16_17 = True
                            elif match_arg_353.code == Collectivite_Code.LaReunion:
                                _ = match_arg_353.value
                                temp_montant_forfaitaire_charges_d823_16_17 = True
                            elif match_arg_353.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_353.value
                                temp_montant_forfaitaire_charges_d823_16_17 = True
                            elif match_arg_353.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_353.value
                                temp_montant_forfaitaire_charges_d823_16_17 = True
                            elif match_arg_353.code == Collectivite_Code.Metropole:
                                _ = match_arg_353.value
                                temp_montant_forfaitaire_charges_d823_16_17 = False
                            elif match_arg_353.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_353.value
                                temp_montant_forfaitaire_charges_d823_16_17 = False
                            elif match_arg_353.code == Collectivite_Code.Mayotte:
                                _ = match_arg_353.value
                                temp_montant_forfaitaire_charges_d823_16_17 = True
                            return (((date_courante_11 >=
                                date_of_numbers(2020,10,1)) and
                                (date_courante_11 <
                                date_of_numbers(2021,10,1))) and
                                temp_montant_forfaitaire_charges_d823_16_17)
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_d823_16_16,
                                              temp_montant_forfaitaire_charges_d823_16_11)
                    def temp_montant_forfaitaire_charges_d823_16_18(_:Unit):
                        try:
                            def temp_montant_forfaitaire_charges_d823_16_19(_:Unit):
                                match_arg_354 = situation_familiale_calcul_apl_4
                                if match_arg_354.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_354.value
                                    temp_montant_forfaitaire_charges_d823_16_20 = money_of_cents_string("1872")
                                elif match_arg_354.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_354.value
                                    temp_montant_forfaitaire_charges_d823_16_20 = money_of_cents_string("3640")
                                match_arg_355 = situation_familiale_calcul_apl_4
                                if match_arg_355.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_355.value
                                    temp_montant_forfaitaire_charges_d823_16_21 = money_of_cents_string("1872")
                                elif match_arg_355.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_355.value
                                    temp_montant_forfaitaire_charges_d823_16_21 = money_of_cents_string("3640")
                                if ((temp_montant_forfaitaire_charges_d823_16_21 +
                                    (money_of_cents_string("936") *
                                    decimal_of_integer(nombre_personnes_a_charge_4))) >
                                    (temp_montant_forfaitaire_charges_d823_16_20 +
                                    (money_of_cents_string("936") *
                                    decimal_of_string("6.")))):
                                    match_arg_356 = situation_familiale_calcul_apl_4
                                    if match_arg_356.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_356.value
                                        temp_montant_forfaitaire_charges_d823_16_22 = money_of_cents_string("1872")
                                    elif match_arg_356.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_356.value
                                        temp_montant_forfaitaire_charges_d823_16_22 = money_of_cents_string("3640")
                                    return (temp_montant_forfaitaire_charges_d823_16_22 +
                                        (money_of_cents_string("936") *
                                        decimal_of_string("6.")))
                                else:
                                    match_arg_357 = situation_familiale_calcul_apl_4
                                    if match_arg_357.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_357.value
                                        temp_montant_forfaitaire_charges_d823_16_23 = money_of_cents_string("1872")
                                    elif match_arg_357.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_357.value
                                        temp_montant_forfaitaire_charges_d823_16_23 = money_of_cents_string("3640")
                                    return (temp_montant_forfaitaire_charges_d823_16_23 +
                                        (money_of_cents_string("936") *
                                        decimal_of_integer(nombre_personnes_a_charge_4)))
                            def temp_montant_forfaitaire_charges_d823_16_24(_:Unit):
                                match_arg_358 = residence_5
                                if match_arg_358.code == Collectivite_Code.Guadeloupe:
                                    _ = match_arg_358.value
                                    temp_montant_forfaitaire_charges_d823_16_25 = True
                                elif match_arg_358.code == Collectivite_Code.Guyane:
                                    _ = match_arg_358.value
                                    temp_montant_forfaitaire_charges_d823_16_25 = False
                                elif match_arg_358.code == Collectivite_Code.Martinique:
                                    _ = match_arg_358.value
                                    temp_montant_forfaitaire_charges_d823_16_25 = True
                                elif match_arg_358.code == Collectivite_Code.LaReunion:
                                    _ = match_arg_358.value
                                    temp_montant_forfaitaire_charges_d823_16_25 = True
                                elif match_arg_358.code == Collectivite_Code.SaintBarthelemy:
                                    _ = match_arg_358.value
                                    temp_montant_forfaitaire_charges_d823_16_25 = True
                                elif match_arg_358.code == Collectivite_Code.SaintMartin:
                                    _ = match_arg_358.value
                                    temp_montant_forfaitaire_charges_d823_16_25 = True
                                elif match_arg_358.code == Collectivite_Code.Metropole:
                                    _ = match_arg_358.value
                                    temp_montant_forfaitaire_charges_d823_16_25 = False
                                elif match_arg_358.code == Collectivite_Code.SaintPierreEtMiquelon:
                                    _ = match_arg_358.value
                                    temp_montant_forfaitaire_charges_d823_16_25 = False
                                elif match_arg_358.code == Collectivite_Code.Mayotte:
                                    _ = match_arg_358.value
                                    temp_montant_forfaitaire_charges_d823_16_25 = True
                                return (((date_courante_11 >=
                                    date_of_numbers(2021,10,1)) and
                                    (date_courante_11 <
                                    date_of_numbers(2022,1,1))) and
                                    temp_montant_forfaitaire_charges_d823_16_25)
                            return handle_default(SourcePosition(filename="",
                                                  start_line=0,
                                                  start_column=1,
                                                  end_line=0, end_column=1,
                                                  law_headings=[]), [],
                                                  temp_montant_forfaitaire_charges_d823_16_24,
                                                  temp_montant_forfaitaire_charges_d823_16_19)
                        except EmptyError:
                            match_arg_359 = residence_5
                            if match_arg_359.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_359.value
                                temp_montant_forfaitaire_charges_d823_16_26 = True
                            elif match_arg_359.code == Collectivite_Code.Guyane:
                                _ = match_arg_359.value
                                temp_montant_forfaitaire_charges_d823_16_26 = False
                            elif match_arg_359.code == Collectivite_Code.Martinique:
                                _ = match_arg_359.value
                                temp_montant_forfaitaire_charges_d823_16_26 = True
                            elif match_arg_359.code == Collectivite_Code.LaReunion:
                                _ = match_arg_359.value
                                temp_montant_forfaitaire_charges_d823_16_26 = True
                            elif match_arg_359.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_359.value
                                temp_montant_forfaitaire_charges_d823_16_26 = True
                            elif match_arg_359.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_359.value
                                temp_montant_forfaitaire_charges_d823_16_26 = True
                            elif match_arg_359.code == Collectivite_Code.Metropole:
                                _ = match_arg_359.value
                                temp_montant_forfaitaire_charges_d823_16_26 = False
                            elif match_arg_359.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_359.value
                                temp_montant_forfaitaire_charges_d823_16_26 = False
                            elif match_arg_359.code == Collectivite_Code.Mayotte:
                                _ = match_arg_359.value
                                temp_montant_forfaitaire_charges_d823_16_26 = True
                            if (((date_courante_11 >=
                                date_of_numbers(2022,1,1)) and
                                (date_courante_11 <
                                date_of_numbers(2022,7,1))) and
                                temp_montant_forfaitaire_charges_d823_16_26):
                                match_arg_360 = situation_familiale_calcul_apl_4
                                if match_arg_360.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_360.value
                                    temp_montant_forfaitaire_charges_d823_16_27 = money_of_cents_string("1872")
                                elif match_arg_360.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_360.value
                                    temp_montant_forfaitaire_charges_d823_16_27 = money_of_cents_string("3640")
                                match_arg_361 = situation_familiale_calcul_apl_4
                                if match_arg_361.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_361.value
                                    temp_montant_forfaitaire_charges_d823_16_28 = money_of_cents_string("1872")
                                elif match_arg_361.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_361.value
                                    temp_montant_forfaitaire_charges_d823_16_28 = money_of_cents_string("3640")
                                if ((temp_montant_forfaitaire_charges_d823_16_28 +
                                    (money_of_cents_string("936") *
                                    decimal_of_integer(nombre_personnes_a_charge_4))) >
                                    (temp_montant_forfaitaire_charges_d823_16_27 +
                                    (money_of_cents_string("936") *
                                    decimal_of_string("6.")))):
                                    match_arg_362 = situation_familiale_calcul_apl_4
                                    if match_arg_362.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_362.value
                                        temp_montant_forfaitaire_charges_d823_16_29 = money_of_cents_string("1872")
                                    elif match_arg_362.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_362.value
                                        temp_montant_forfaitaire_charges_d823_16_29 = money_of_cents_string("3640")
                                    return (temp_montant_forfaitaire_charges_d823_16_29 +
                                        (money_of_cents_string("936") *
                                        decimal_of_string("6.")))
                                else:
                                    match_arg_363 = situation_familiale_calcul_apl_4
                                    if match_arg_363.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_363.value
                                        temp_montant_forfaitaire_charges_d823_16_30 = money_of_cents_string("1872")
                                    elif match_arg_363.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_363.value
                                        temp_montant_forfaitaire_charges_d823_16_30 = money_of_cents_string("3640")
                                    return (temp_montant_forfaitaire_charges_d823_16_30 +
                                        (money_of_cents_string("936") *
                                        decimal_of_integer(nombre_personnes_a_charge_4)))
                            else:
                                raise EmptyError
                    def temp_montant_forfaitaire_charges_d823_16_31(_:Unit):
                        def temp_montant_forfaitaire_charges_d823_16_32(_:Unit):
                            match_arg_364 = situation_familiale_calcul_apl_4
                            if match_arg_364.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_364.value
                                temp_montant_forfaitaire_charges_d823_16_33 = money_of_cents_string("1938")
                            elif match_arg_364.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_364.value
                                temp_montant_forfaitaire_charges_d823_16_33 = money_of_cents_string("3767")
                            match_arg_365 = situation_familiale_calcul_apl_4
                            if match_arg_365.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_365.value
                                temp_montant_forfaitaire_charges_d823_16_34 = money_of_cents_string("1938")
                            elif match_arg_365.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_365.value
                                temp_montant_forfaitaire_charges_d823_16_34 = money_of_cents_string("3767")
                            if ((temp_montant_forfaitaire_charges_d823_16_34 +
                                (money_of_cents_string("969") *
                                decimal_of_integer(nombre_personnes_a_charge_4))) >
                                (temp_montant_forfaitaire_charges_d823_16_33 +
                                (money_of_cents_string("969") *
                                decimal_of_string("6.")))):
                                match_arg_366 = situation_familiale_calcul_apl_4
                                if match_arg_366.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_366.value
                                    temp_montant_forfaitaire_charges_d823_16_35 = money_of_cents_string("1938")
                                elif match_arg_366.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_366.value
                                    temp_montant_forfaitaire_charges_d823_16_35 = money_of_cents_string("3767")
                                return (temp_montant_forfaitaire_charges_d823_16_35 +
                                    (money_of_cents_string("969") *
                                    decimal_of_string("6.")))
                            else:
                                match_arg_367 = situation_familiale_calcul_apl_4
                                if match_arg_367.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_367.value
                                    temp_montant_forfaitaire_charges_d823_16_36 = money_of_cents_string("1938")
                                elif match_arg_367.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_367.value
                                    temp_montant_forfaitaire_charges_d823_16_36 = money_of_cents_string("3767")
                                return (temp_montant_forfaitaire_charges_d823_16_36 +
                                    (money_of_cents_string("969") *
                                    decimal_of_integer(nombre_personnes_a_charge_4)))
                        def temp_montant_forfaitaire_charges_d823_16_37(_:Unit):
                            match_arg_368 = residence_5
                            if match_arg_368.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_368.value
                                temp_montant_forfaitaire_charges_d823_16_38 = True
                            elif match_arg_368.code == Collectivite_Code.Guyane:
                                _ = match_arg_368.value
                                temp_montant_forfaitaire_charges_d823_16_38 = False
                            elif match_arg_368.code == Collectivite_Code.Martinique:
                                _ = match_arg_368.value
                                temp_montant_forfaitaire_charges_d823_16_38 = True
                            elif match_arg_368.code == Collectivite_Code.LaReunion:
                                _ = match_arg_368.value
                                temp_montant_forfaitaire_charges_d823_16_38 = True
                            elif match_arg_368.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_368.value
                                temp_montant_forfaitaire_charges_d823_16_38 = True
                            elif match_arg_368.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_368.value
                                temp_montant_forfaitaire_charges_d823_16_38 = True
                            elif match_arg_368.code == Collectivite_Code.Metropole:
                                _ = match_arg_368.value
                                temp_montant_forfaitaire_charges_d823_16_38 = False
                            elif match_arg_368.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_368.value
                                temp_montant_forfaitaire_charges_d823_16_38 = False
                            elif match_arg_368.code == Collectivite_Code.Mayotte:
                                _ = match_arg_368.value
                                temp_montant_forfaitaire_charges_d823_16_38 = True
                            return (((date_courante_11 >=
                                date_of_numbers(2022,7,1)) and
                                (date_courante_11 <
                                date_of_numbers(2023,1,1))) and
                                temp_montant_forfaitaire_charges_d823_16_38)
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_d823_16_37,
                                              temp_montant_forfaitaire_charges_d823_16_32)
                    def temp_montant_forfaitaire_charges_d823_16_39(_:Unit):
                        def temp_montant_forfaitaire_charges_d823_16_40(_:Unit):
                            match_arg_369 = situation_familiale_calcul_apl_4
                            if match_arg_369.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_369.value
                                temp_montant_forfaitaire_charges_d823_16_41 = money_of_cents_string("1938")
                            elif match_arg_369.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_369.value
                                temp_montant_forfaitaire_charges_d823_16_41 = money_of_cents_string("3767")
                            return (temp_montant_forfaitaire_charges_d823_16_41 +
                                (money_of_cents_string("969") *
                                multiplicateur_majoration_charges_d823_16))
                        def temp_montant_forfaitaire_charges_d823_16_42(_:Unit):
                            match_arg_370 = residence_5
                            if match_arg_370.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_370.value
                                temp_montant_forfaitaire_charges_d823_16_43 = True
                            elif match_arg_370.code == Collectivite_Code.Guyane:
                                _ = match_arg_370.value
                                temp_montant_forfaitaire_charges_d823_16_43 = False
                            elif match_arg_370.code == Collectivite_Code.Martinique:
                                _ = match_arg_370.value
                                temp_montant_forfaitaire_charges_d823_16_43 = True
                            elif match_arg_370.code == Collectivite_Code.LaReunion:
                                _ = match_arg_370.value
                                temp_montant_forfaitaire_charges_d823_16_43 = True
                            elif match_arg_370.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_370.value
                                temp_montant_forfaitaire_charges_d823_16_43 = True
                            elif match_arg_370.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_370.value
                                temp_montant_forfaitaire_charges_d823_16_43 = True
                            elif match_arg_370.code == Collectivite_Code.Metropole:
                                _ = match_arg_370.value
                                temp_montant_forfaitaire_charges_d823_16_43 = False
                            elif match_arg_370.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_370.value
                                temp_montant_forfaitaire_charges_d823_16_43 = False
                            elif match_arg_370.code == Collectivite_Code.Mayotte:
                                _ = match_arg_370.value
                                temp_montant_forfaitaire_charges_d823_16_43 = True
                            return ((date_courante_11 >=
                                date_of_numbers(2023,1,1)) and
                                (temp_montant_forfaitaire_charges_d823_16_43 and
                                colocation))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_d823_16_42,
                                              temp_montant_forfaitaire_charges_d823_16_40)
                    temp_montant_forfaitaire_charges_d823_16_44 = handle_default(
                        SourcePosition(filename="", start_line=0,
                        start_column=1, end_line=0, end_column=1,
                        law_headings=[]), [temp_montant_forfaitaire_charges_d823_16_39,
                        temp_montant_forfaitaire_charges_d823_16_31,
                        temp_montant_forfaitaire_charges_d823_16_18,
                        temp_montant_forfaitaire_charges_d823_16_10,
                        temp_montant_forfaitaire_charges_d823_16_2],
                        temp_montant_forfaitaire_charges_d823_16_1,
                        temp_montant_forfaitaire_charges_d823_16)
                except EmptyError:
                    def temp_montant_forfaitaire_charges_d823_16_45(_:Unit):
                        raise EmptyError
                    def temp_montant_forfaitaire_charges_d823_16_46(_:Unit):
                        return False
                    def temp_montant_forfaitaire_charges_d823_16_47(_:Unit):
                        def temp_montant_forfaitaire_charges_d823_16_48(_:Unit):
                            match_arg_371 = situation_familiale_calcul_apl_4
                            if match_arg_371.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_371.value
                                temp_montant_forfaitaire_charges_d823_16_49 = money_of_cents_string("2699")
                            elif match_arg_371.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_371.value
                                temp_montant_forfaitaire_charges_d823_16_49 = money_of_cents_string("5399")
                            return (temp_montant_forfaitaire_charges_d823_16_49 +
                                (money_of_cents_string("1224") *
                                multiplicateur_majoration_charges_d823_16))
                        def temp_montant_forfaitaire_charges_d823_16_50(_:Unit):
                            return ((date_courante_11 <
                                date_of_numbers(2021,10,1)) and
                                ((date_courante_11 >=
                                date_of_numbers(2020,10,1)) and colocation))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_d823_16_50,
                                              temp_montant_forfaitaire_charges_d823_16_48)
                    def temp_montant_forfaitaire_charges_d823_16_51(_:Unit):
                        def temp_montant_forfaitaire_charges_d823_16_52(_:Unit):
                            match_arg_372 = situation_familiale_calcul_apl_4
                            if match_arg_372.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_372.value
                                temp_montant_forfaitaire_charges_d823_16_53 = money_of_cents_string("2710")
                            elif match_arg_372.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_372.value
                                temp_montant_forfaitaire_charges_d823_16_53 = money_of_cents_string("5422")
                            return (temp_montant_forfaitaire_charges_d823_16_53 +
                                (money_of_cents_string("1229") *
                                multiplicateur_majoration_charges_d823_16))
                        def temp_montant_forfaitaire_charges_d823_16_54(_:Unit):
                            return ((date_courante_11 >=
                                date_of_numbers(2021,10,1)) and
                                ((date_courante_11 <
                                date_of_numbers(2022,7,1)) and colocation))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_d823_16_54,
                                              temp_montant_forfaitaire_charges_d823_16_52)
                    def temp_montant_forfaitaire_charges_d823_16_55(_:Unit):
                        def temp_montant_forfaitaire_charges_d823_16_56(_:Unit):
                            match_arg_373 = situation_familiale_calcul_apl_4
                            if match_arg_373.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_373.value
                                temp_montant_forfaitaire_charges_d823_16_57 = money_of_cents_string("2805")
                            elif match_arg_373.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_373.value
                                temp_montant_forfaitaire_charges_d823_16_57 = money_of_cents_string("5612")
                            return (temp_montant_forfaitaire_charges_d823_16_57 +
                                (money_of_cents_string("1272") *
                                multiplicateur_majoration_charges_d823_16))
                        def temp_montant_forfaitaire_charges_d823_16_58(_:Unit):
                            return ((date_courante_11 >=
                                date_of_numbers(2022,7,1)) and colocation)
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_d823_16_58,
                                              temp_montant_forfaitaire_charges_d823_16_56)
                    temp_montant_forfaitaire_charges_d823_16_44 = handle_default(
                        SourcePosition(filename="", start_line=0,
                        start_column=1, end_line=0, end_column=1,
                        law_headings=[]), [temp_montant_forfaitaire_charges_d823_16_55,
                        temp_montant_forfaitaire_charges_d823_16_51,
                        temp_montant_forfaitaire_charges_d823_16_47],
                        temp_montant_forfaitaire_charges_d823_16_46,
                        temp_montant_forfaitaire_charges_d823_16_45)
            except EmptyError:
                def temp_montant_forfaitaire_charges_d823_16_59(_:Unit):
                    raise EmptyError
                def temp_montant_forfaitaire_charges_d823_16_60(_:Unit):
                    return False
                def temp_montant_forfaitaire_charges_d823_16_61(_:Unit):
                    def temp_montant_forfaitaire_charges_d823_16_62(_:Unit):
                        if ((money_of_cents_string("3614") +
                            (money_of_cents_string("929") *
                            decimal_of_integer(nombre_personnes_a_charge_4))) >
                            (money_of_cents_string("3614") +
                            (money_of_cents_string("929") *
                            decimal_of_string("6.")))):
                            return (money_of_cents_string("3614") +
                                (money_of_cents_string("929") *
                                decimal_of_string("6.")))
                        else:
                            return (money_of_cents_string("3614") +
                                (money_of_cents_string("929") *
                                decimal_of_integer(nombre_personnes_a_charge_4)))
                    def temp_montant_forfaitaire_charges_d823_16_63(_:Unit):
                        match_arg_374 = residence_5
                        if match_arg_374.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_374.value
                            temp_montant_forfaitaire_charges_d823_16_64 = True
                        elif match_arg_374.code == Collectivite_Code.Guyane:
                            _ = match_arg_374.value
                            temp_montant_forfaitaire_charges_d823_16_64 = False
                        elif match_arg_374.code == Collectivite_Code.Martinique:
                            _ = match_arg_374.value
                            temp_montant_forfaitaire_charges_d823_16_64 = True
                        elif match_arg_374.code == Collectivite_Code.LaReunion:
                            _ = match_arg_374.value
                            temp_montant_forfaitaire_charges_d823_16_64 = True
                        elif match_arg_374.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_374.value
                            temp_montant_forfaitaire_charges_d823_16_64 = True
                        elif match_arg_374.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_374.value
                            temp_montant_forfaitaire_charges_d823_16_64 = True
                        elif match_arg_374.code == Collectivite_Code.Metropole:
                            _ = match_arg_374.value
                            temp_montant_forfaitaire_charges_d823_16_64 = False
                        elif match_arg_374.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_374.value
                            temp_montant_forfaitaire_charges_d823_16_64 = False
                        elif match_arg_374.code == Collectivite_Code.Mayotte:
                            _ = match_arg_374.value
                            temp_montant_forfaitaire_charges_d823_16_64 = True
                        return (((date_courante_11 >=
                            date_of_numbers(2020,1,1)) and
                            (date_courante_11 <
                            date_of_numbers(2020,10,1))) and
                            temp_montant_forfaitaire_charges_d823_16_64)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_montant_forfaitaire_charges_d823_16_63,
                                          temp_montant_forfaitaire_charges_d823_16_62)
                def temp_montant_forfaitaire_charges_d823_16_65(_:Unit):
                    def temp_montant_forfaitaire_charges_d823_16_66(_:Unit):
                        if ((money_of_cents_string("3625") +
                            (money_of_cents_string("932") *
                            decimal_of_integer(nombre_personnes_a_charge_4))) >
                            (money_of_cents_string("3625") +
                            (money_of_cents_string("932") *
                            decimal_of_string("6.")))):
                            return (money_of_cents_string("3625") +
                                (money_of_cents_string("932") *
                                decimal_of_string("6.")))
                        else:
                            return (money_of_cents_string("3625") +
                                (money_of_cents_string("932") *
                                decimal_of_integer(nombre_personnes_a_charge_4)))
                    def temp_montant_forfaitaire_charges_d823_16_67(_:Unit):
                        match_arg_375 = residence_5
                        if match_arg_375.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_375.value
                            temp_montant_forfaitaire_charges_d823_16_68 = True
                        elif match_arg_375.code == Collectivite_Code.Guyane:
                            _ = match_arg_375.value
                            temp_montant_forfaitaire_charges_d823_16_68 = False
                        elif match_arg_375.code == Collectivite_Code.Martinique:
                            _ = match_arg_375.value
                            temp_montant_forfaitaire_charges_d823_16_68 = True
                        elif match_arg_375.code == Collectivite_Code.LaReunion:
                            _ = match_arg_375.value
                            temp_montant_forfaitaire_charges_d823_16_68 = True
                        elif match_arg_375.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_375.value
                            temp_montant_forfaitaire_charges_d823_16_68 = True
                        elif match_arg_375.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_375.value
                            temp_montant_forfaitaire_charges_d823_16_68 = True
                        elif match_arg_375.code == Collectivite_Code.Metropole:
                            _ = match_arg_375.value
                            temp_montant_forfaitaire_charges_d823_16_68 = False
                        elif match_arg_375.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_375.value
                            temp_montant_forfaitaire_charges_d823_16_68 = False
                        elif match_arg_375.code == Collectivite_Code.Mayotte:
                            _ = match_arg_375.value
                            temp_montant_forfaitaire_charges_d823_16_68 = True
                        return (((date_courante_11 >=
                            date_of_numbers(2020,10,1)) and
                            (date_courante_11 <
                            date_of_numbers(2021,10,1))) and
                            temp_montant_forfaitaire_charges_d823_16_68)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_montant_forfaitaire_charges_d823_16_67,
                                          temp_montant_forfaitaire_charges_d823_16_66)
                def temp_montant_forfaitaire_charges_d823_16_69(_:Unit):
                    try:
                        def temp_montant_forfaitaire_charges_d823_16_70(_:Unit):
                            if ((money_of_cents_string("3640") +
                                (money_of_cents_string("936") *
                                decimal_of_integer(nombre_personnes_a_charge_4))) >
                                (money_of_cents_string("3640") +
                                (money_of_cents_string("936") *
                                decimal_of_string("6.")))):
                                return (money_of_cents_string("3640") +
                                    (money_of_cents_string("936") *
                                    decimal_of_string("6.")))
                            else:
                                return (money_of_cents_string("3640") +
                                    (money_of_cents_string("936") *
                                    decimal_of_integer(nombre_personnes_a_charge_4)))
                        def temp_montant_forfaitaire_charges_d823_16_71(_:Unit):
                            match_arg_376 = residence_5
                            if match_arg_376.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_376.value
                                temp_montant_forfaitaire_charges_d823_16_72 = True
                            elif match_arg_376.code == Collectivite_Code.Guyane:
                                _ = match_arg_376.value
                                temp_montant_forfaitaire_charges_d823_16_72 = False
                            elif match_arg_376.code == Collectivite_Code.Martinique:
                                _ = match_arg_376.value
                                temp_montant_forfaitaire_charges_d823_16_72 = True
                            elif match_arg_376.code == Collectivite_Code.LaReunion:
                                _ = match_arg_376.value
                                temp_montant_forfaitaire_charges_d823_16_72 = True
                            elif match_arg_376.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_376.value
                                temp_montant_forfaitaire_charges_d823_16_72 = True
                            elif match_arg_376.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_376.value
                                temp_montant_forfaitaire_charges_d823_16_72 = True
                            elif match_arg_376.code == Collectivite_Code.Metropole:
                                _ = match_arg_376.value
                                temp_montant_forfaitaire_charges_d823_16_72 = False
                            elif match_arg_376.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_376.value
                                temp_montant_forfaitaire_charges_d823_16_72 = False
                            elif match_arg_376.code == Collectivite_Code.Mayotte:
                                _ = match_arg_376.value
                                temp_montant_forfaitaire_charges_d823_16_72 = True
                            return (((date_courante_11 >=
                                date_of_numbers(2021,10,1)) and
                                (date_courante_11 <
                                date_of_numbers(2022,1,1))) and
                                temp_montant_forfaitaire_charges_d823_16_72)
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_d823_16_71,
                                              temp_montant_forfaitaire_charges_d823_16_70)
                    except EmptyError:
                        match_arg_377 = residence_5
                        if match_arg_377.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_377.value
                            temp_montant_forfaitaire_charges_d823_16_73 = True
                        elif match_arg_377.code == Collectivite_Code.Guyane:
                            _ = match_arg_377.value
                            temp_montant_forfaitaire_charges_d823_16_73 = False
                        elif match_arg_377.code == Collectivite_Code.Martinique:
                            _ = match_arg_377.value
                            temp_montant_forfaitaire_charges_d823_16_73 = True
                        elif match_arg_377.code == Collectivite_Code.LaReunion:
                            _ = match_arg_377.value
                            temp_montant_forfaitaire_charges_d823_16_73 = True
                        elif match_arg_377.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_377.value
                            temp_montant_forfaitaire_charges_d823_16_73 = True
                        elif match_arg_377.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_377.value
                            temp_montant_forfaitaire_charges_d823_16_73 = True
                        elif match_arg_377.code == Collectivite_Code.Metropole:
                            _ = match_arg_377.value
                            temp_montant_forfaitaire_charges_d823_16_73 = False
                        elif match_arg_377.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_377.value
                            temp_montant_forfaitaire_charges_d823_16_73 = False
                        elif match_arg_377.code == Collectivite_Code.Mayotte:
                            _ = match_arg_377.value
                            temp_montant_forfaitaire_charges_d823_16_73 = True
                        if (((date_courante_11 >=
                            date_of_numbers(2022,1,1)) and
                            (date_courante_11 <
                            date_of_numbers(2022,7,1))) and
                            temp_montant_forfaitaire_charges_d823_16_73):
                            if ((money_of_cents_string("3640") +
                                (money_of_cents_string("936") *
                                decimal_of_integer(nombre_personnes_a_charge_4))) >
                                (money_of_cents_string("3640") +
                                (money_of_cents_string("936") *
                                decimal_of_string("6.")))):
                                return (money_of_cents_string("3640") +
                                    (money_of_cents_string("936") *
                                    decimal_of_string("6.")))
                            else:
                                return (money_of_cents_string("3640") +
                                    (money_of_cents_string("936") *
                                    decimal_of_integer(nombre_personnes_a_charge_4)))
                        else:
                            raise EmptyError
                def temp_montant_forfaitaire_charges_d823_16_74(_:Unit):
                    def temp_montant_forfaitaire_charges_d823_16_75(_:Unit):
                        if ((money_of_cents_string("3767") +
                            (money_of_cents_string("969") *
                            decimal_of_integer(nombre_personnes_a_charge_4))) >
                            (money_of_cents_string("3767") +
                            (money_of_cents_string("969") *
                            decimal_of_string("6.")))):
                            return (money_of_cents_string("3767") +
                                (money_of_cents_string("969") *
                                decimal_of_string("6.")))
                        else:
                            return (money_of_cents_string("3767") +
                                (money_of_cents_string("969") *
                                decimal_of_integer(nombre_personnes_a_charge_4)))
                    def temp_montant_forfaitaire_charges_d823_16_76(_:Unit):
                        match_arg_378 = residence_5
                        if match_arg_378.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_378.value
                            temp_montant_forfaitaire_charges_d823_16_77 = True
                        elif match_arg_378.code == Collectivite_Code.Guyane:
                            _ = match_arg_378.value
                            temp_montant_forfaitaire_charges_d823_16_77 = False
                        elif match_arg_378.code == Collectivite_Code.Martinique:
                            _ = match_arg_378.value
                            temp_montant_forfaitaire_charges_d823_16_77 = True
                        elif match_arg_378.code == Collectivite_Code.LaReunion:
                            _ = match_arg_378.value
                            temp_montant_forfaitaire_charges_d823_16_77 = True
                        elif match_arg_378.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_378.value
                            temp_montant_forfaitaire_charges_d823_16_77 = True
                        elif match_arg_378.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_378.value
                            temp_montant_forfaitaire_charges_d823_16_77 = True
                        elif match_arg_378.code == Collectivite_Code.Metropole:
                            _ = match_arg_378.value
                            temp_montant_forfaitaire_charges_d823_16_77 = False
                        elif match_arg_378.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_378.value
                            temp_montant_forfaitaire_charges_d823_16_77 = False
                        elif match_arg_378.code == Collectivite_Code.Mayotte:
                            _ = match_arg_378.value
                            temp_montant_forfaitaire_charges_d823_16_77 = True
                        return (((date_courante_11 >=
                            date_of_numbers(2022,7,1)) and
                            (date_courante_11 <
                            date_of_numbers(2023,1,1))) and
                            temp_montant_forfaitaire_charges_d823_16_77)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_montant_forfaitaire_charges_d823_16_76,
                                          temp_montant_forfaitaire_charges_d823_16_75)
                def temp_montant_forfaitaire_charges_d823_16_78(_:Unit):
                    def temp_montant_forfaitaire_charges_d823_16_79(_:Unit):
                        return (money_of_cents_string("3767") +
                            (money_of_cents_string("969") *
                            multiplicateur_majoration_charges_d823_16))
                    def temp_montant_forfaitaire_charges_d823_16_80(_:Unit):
                        match_arg_379 = residence_5
                        if match_arg_379.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_379.value
                            temp_montant_forfaitaire_charges_d823_16_81 = True
                        elif match_arg_379.code == Collectivite_Code.Guyane:
                            _ = match_arg_379.value
                            temp_montant_forfaitaire_charges_d823_16_81 = False
                        elif match_arg_379.code == Collectivite_Code.Martinique:
                            _ = match_arg_379.value
                            temp_montant_forfaitaire_charges_d823_16_81 = True
                        elif match_arg_379.code == Collectivite_Code.LaReunion:
                            _ = match_arg_379.value
                            temp_montant_forfaitaire_charges_d823_16_81 = True
                        elif match_arg_379.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_379.value
                            temp_montant_forfaitaire_charges_d823_16_81 = True
                        elif match_arg_379.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_379.value
                            temp_montant_forfaitaire_charges_d823_16_81 = True
                        elif match_arg_379.code == Collectivite_Code.Metropole:
                            _ = match_arg_379.value
                            temp_montant_forfaitaire_charges_d823_16_81 = False
                        elif match_arg_379.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_379.value
                            temp_montant_forfaitaire_charges_d823_16_81 = False
                        elif match_arg_379.code == Collectivite_Code.Mayotte:
                            _ = match_arg_379.value
                            temp_montant_forfaitaire_charges_d823_16_81 = True
                        return ((date_courante_11 >=
                            date_of_numbers(2023,1,1)) and
                            temp_montant_forfaitaire_charges_d823_16_81)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_montant_forfaitaire_charges_d823_16_80,
                                          temp_montant_forfaitaire_charges_d823_16_79)
                temp_montant_forfaitaire_charges_d823_16_44 = handle_default(
                    SourcePosition(filename="", start_line=0, start_column=1,
                    end_line=0, end_column=1,
                    law_headings=[]), [temp_montant_forfaitaire_charges_d823_16_78,
                    temp_montant_forfaitaire_charges_d823_16_74,
                    temp_montant_forfaitaire_charges_d823_16_69,
                    temp_montant_forfaitaire_charges_d823_16_65,
                    temp_montant_forfaitaire_charges_d823_16_61],
                    temp_montant_forfaitaire_charges_d823_16_60,
                    temp_montant_forfaitaire_charges_d823_16_59)
        except EmptyError:
            def temp_montant_forfaitaire_charges_d823_16_82(_:Unit):
                raise EmptyError
            def temp_montant_forfaitaire_charges_d823_16_83(_:Unit):
                return False
            def temp_montant_forfaitaire_charges_d823_16_84(_:Unit):
                def temp_montant_forfaitaire_charges_d823_16_85(_:Unit):
                    return (money_of_cents_string("5399") +
                        (money_of_cents_string("1224") *
                        multiplicateur_majoration_charges_d823_16))
                def temp_montant_forfaitaire_charges_d823_16_86(_:Unit):
                    return ((date_courante_11 <
                        date_of_numbers(2021,10,1)) and (date_courante_11 >=
                        date_of_numbers(2020,10,1)))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_d823_16_86,
                                      temp_montant_forfaitaire_charges_d823_16_85)
            def temp_montant_forfaitaire_charges_d823_16_87(_:Unit):
                def temp_montant_forfaitaire_charges_d823_16_88(_:Unit):
                    return (money_of_cents_string("5422") +
                        (money_of_cents_string("1229") *
                        multiplicateur_majoration_charges_d823_16))
                def temp_montant_forfaitaire_charges_d823_16_89(_:Unit):
                    return ((date_courante_11 >=
                        date_of_numbers(2021,10,1)) and (date_courante_11 <
                        date_of_numbers(2022,7,1)))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_d823_16_89,
                                      temp_montant_forfaitaire_charges_d823_16_88)
            def temp_montant_forfaitaire_charges_d823_16_90(_:Unit):
                def temp_montant_forfaitaire_charges_d823_16_91(_:Unit):
                    return (money_of_cents_string("5612") +
                        (money_of_cents_string("1272") *
                        multiplicateur_majoration_charges_d823_16))
                def temp_montant_forfaitaire_charges_d823_16_92(_:Unit):
                    return (date_courante_11 >= date_of_numbers(2022,7,1))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_d823_16_92,
                                      temp_montant_forfaitaire_charges_d823_16_91)
            temp_montant_forfaitaire_charges_d823_16_44 = handle_default(
                SourcePosition(filename="", start_line=0, start_column=1,
                end_line=0, end_column=1,
                law_headings=[]), [temp_montant_forfaitaire_charges_d823_16_90,
                temp_montant_forfaitaire_charges_d823_16_87,
                temp_montant_forfaitaire_charges_d823_16_84],
                temp_montant_forfaitaire_charges_d823_16_83,
                temp_montant_forfaitaire_charges_d823_16_82)
    except EmptyError:
        temp_montant_forfaitaire_charges_d823_16_44 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=560, start_column=12,
                                             end_line=560, end_column=47,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_charges_d823_16 = temp_montant_forfaitaire_charges_d823_16_44
    try:
        def temp_abattement_forfaitaire_d823_17(_:Unit):
            def temp_abattement_forfaitaire_d823_17_1(_:Unit):
                raise EmptyError
            def temp_abattement_forfaitaire_d823_17_2(_:Unit):
                return False
            def temp_abattement_forfaitaire_d823_17_3(_:Unit):
                def temp_abattement_forfaitaire_d823_17_4(_:Unit):
                    if (nombre_personnes_a_charge_4 ==
                        integer_of_string("0")):
                        match_arg_380 = situation_familiale_calcul_apl_4
                        if match_arg_380.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_380.value
                            return money_of_cents_string("458800")
                        elif match_arg_380.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_380.value
                            return money_of_cents_string("657200")
                    else:
                        if (nombre_personnes_a_charge_4 ==
                            integer_of_string("1")):
                            return money_of_cents_string("783900")
                        else:
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("2")):
                                return money_of_cents_string("801500")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("832200")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("4")):
                                        return money_of_cents_string("863100")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("5")):
                                            return money_of_cents_string("893800")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("6")):
                                                return money_of_cents_string("924600")
                                            else:
                                                return (money_of_cents_string("924600") +
                                                    (money_of_cents_string("30500") *
                                                    decimal_of_integer((nombre_personnes_a_charge_4 -
                                                    integer_of_string("6")))))
                def temp_abattement_forfaitaire_d823_17_5(_:Unit):
                    return ((date_courante_11 <
                        date_of_numbers(2022,1,1)) and (date_courante_11 >=
                        date_of_numbers(2020,1,1)))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_abattement_forfaitaire_d823_17_5,
                                      temp_abattement_forfaitaire_d823_17_4)
            def temp_abattement_forfaitaire_d823_17_6(_:Unit):
                def temp_abattement_forfaitaire_d823_17_7(_:Unit):
                    if (nombre_personnes_a_charge_4 ==
                        integer_of_string("0")):
                        match_arg_381 = situation_familiale_calcul_apl_4
                        if match_arg_381.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_381.value
                            return money_of_cents_string("468300")
                        elif match_arg_381.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_381.value
                            return money_of_cents_string("670900")
                    else:
                        if (nombre_personnes_a_charge_4 ==
                            integer_of_string("1")):
                            return money_of_cents_string("800200")
                        else:
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("2")):
                                return money_of_cents_string("819200")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("849500")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("4")):
                                        return money_of_cents_string("881100")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("5")):
                                            return money_of_cents_string("912400")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("6")):
                                                return money_of_cents_string("943900")
                                            else:
                                                return (money_of_cents_string("943900") +
                                                    (money_of_cents_string("31100") *
                                                    multiplicateur_majoration_r0))
                def temp_abattement_forfaitaire_d823_17_8(_:Unit):
                    return ((date_courante_11 >=
                        date_of_numbers(2022,1,1)) and (date_courante_11 <
                        date_of_numbers(2022,7,1)))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_abattement_forfaitaire_d823_17_8,
                                      temp_abattement_forfaitaire_d823_17_7)
            def temp_abattement_forfaitaire_d823_17_9(_:Unit):
                def temp_abattement_forfaitaire_d823_17_10(_:Unit):
                    if (nombre_personnes_a_charge_4 ==
                        integer_of_string("0")):
                        match_arg_382 = situation_familiale_calcul_apl_4
                        if match_arg_382.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_382.value
                            return money_of_cents_string("487000")
                        elif match_arg_382.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_382.value
                            return money_of_cents_string("697700")
                    else:
                        if (nombre_personnes_a_charge_4 ==
                            integer_of_string("1")):
                            return money_of_cents_string("832200")
                        else:
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("2")):
                                return money_of_cents_string("850900")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("883400")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("4")):
                                        return money_of_cents_string("916300")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("5")):
                                            return money_of_cents_string("948800")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("6")):
                                                return money_of_cents_string("981600")
                                            else:
                                                return (money_of_cents_string("981600") +
                                                    (money_of_cents_string("32300") *
                                                    multiplicateur_majoration_r0))
                def temp_abattement_forfaitaire_d823_17_11(_:Unit):
                    return ((date_courante_11 >=
                        date_of_numbers(2022,7,1)) and (date_courante_11 <=
                        date_of_numbers(2022,12,31)))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_abattement_forfaitaire_d823_17_11,
                                      temp_abattement_forfaitaire_d823_17_10)
            def temp_abattement_forfaitaire_d823_17_12(_:Unit):
                def temp_abattement_forfaitaire_d823_17_13(_:Unit):
                    if (nombre_personnes_a_charge_4 ==
                        integer_of_string("0")):
                        match_arg_383 = situation_familiale_calcul_apl_4
                        if match_arg_383.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_383.value
                            return money_of_cents_string("494900")
                        elif match_arg_383.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_383.value
                            return money_of_cents_string("709000")
                    else:
                        if (nombre_personnes_a_charge_4 ==
                            integer_of_string("1")):
                            return money_of_cents_string("845600")
                        else:
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("2")):
                                return money_of_cents_string("864600")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("897700")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("4")):
                                        return money_of_cents_string("931100")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("5")):
                                            return money_of_cents_string("964200")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("6")):
                                                return money_of_cents_string("997500")
                                            else:
                                                return (money_of_cents_string("997500") +
                                                    (money_of_cents_string("32800") *
                                                    multiplicateur_majoration_r0))
                def temp_abattement_forfaitaire_d823_17_14(_:Unit):
                    return (date_courante_11 >= date_of_numbers(2023,1,1))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_abattement_forfaitaire_d823_17_14,
                                      temp_abattement_forfaitaire_d823_17_13)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [temp_abattement_forfaitaire_d823_17_12,
                                  temp_abattement_forfaitaire_d823_17_9,
                                  temp_abattement_forfaitaire_d823_17_6,
                                  temp_abattement_forfaitaire_d823_17_3],
                                  temp_abattement_forfaitaire_d823_17_2,
                                  temp_abattement_forfaitaire_d823_17_1)
        def temp_abattement_forfaitaire_d823_17_15(_:Unit):
            return True
        def temp_abattement_forfaitaire_d823_17_16(_:Unit):
            def temp_abattement_forfaitaire_d823_17_17(_:Unit):
                raise EmptyError
            def temp_abattement_forfaitaire_d823_17_18(_:Unit):
                return False
            def temp_abattement_forfaitaire_d823_17_19(_:Unit):
                def temp_abattement_forfaitaire_d823_17_20(_:Unit):
                    return money_of_cents_string("758400")
                def temp_abattement_forfaitaire_d823_17_21(_:Unit):
                    match_arg_384 = residence_5
                    if match_arg_384.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_384.value
                        temp_abattement_forfaitaire_d823_17_22 = True
                    elif match_arg_384.code == Collectivite_Code.Guyane:
                        _ = match_arg_384.value
                        temp_abattement_forfaitaire_d823_17_22 = False
                    elif match_arg_384.code == Collectivite_Code.Martinique:
                        _ = match_arg_384.value
                        temp_abattement_forfaitaire_d823_17_22 = True
                    elif match_arg_384.code == Collectivite_Code.LaReunion:
                        _ = match_arg_384.value
                        temp_abattement_forfaitaire_d823_17_22 = True
                    elif match_arg_384.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_384.value
                        temp_abattement_forfaitaire_d823_17_22 = True
                    elif match_arg_384.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_384.value
                        temp_abattement_forfaitaire_d823_17_22 = True
                    elif match_arg_384.code == Collectivite_Code.Metropole:
                        _ = match_arg_384.value
                        temp_abattement_forfaitaire_d823_17_22 = False
                    elif match_arg_384.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_384.value
                        temp_abattement_forfaitaire_d823_17_22 = False
                    elif match_arg_384.code == Collectivite_Code.Mayotte:
                        _ = match_arg_384.value
                        temp_abattement_forfaitaire_d823_17_22 = True
                    return (((date_courante_11 >=
                        date_of_numbers(2020,1,1)) and (date_courante_11 <
                        date_of_numbers(2020,10,1))) and
                        (temp_abattement_forfaitaire_d823_17_22 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("1"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_abattement_forfaitaire_d823_17_21,
                                      temp_abattement_forfaitaire_d823_17_20)
            def temp_abattement_forfaitaire_d823_17_23(_:Unit):
                def temp_abattement_forfaitaire_d823_17_24(_:Unit):
                    return money_of_cents_string("774200")
                def temp_abattement_forfaitaire_d823_17_25(_:Unit):
                    match_arg_385 = residence_5
                    if match_arg_385.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_385.value
                        temp_abattement_forfaitaire_d823_17_26 = True
                    elif match_arg_385.code == Collectivite_Code.Guyane:
                        _ = match_arg_385.value
                        temp_abattement_forfaitaire_d823_17_26 = False
                    elif match_arg_385.code == Collectivite_Code.Martinique:
                        _ = match_arg_385.value
                        temp_abattement_forfaitaire_d823_17_26 = True
                    elif match_arg_385.code == Collectivite_Code.LaReunion:
                        _ = match_arg_385.value
                        temp_abattement_forfaitaire_d823_17_26 = True
                    elif match_arg_385.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_385.value
                        temp_abattement_forfaitaire_d823_17_26 = True
                    elif match_arg_385.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_385.value
                        temp_abattement_forfaitaire_d823_17_26 = True
                    elif match_arg_385.code == Collectivite_Code.Metropole:
                        _ = match_arg_385.value
                        temp_abattement_forfaitaire_d823_17_26 = False
                    elif match_arg_385.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_385.value
                        temp_abattement_forfaitaire_d823_17_26 = False
                    elif match_arg_385.code == Collectivite_Code.Mayotte:
                        _ = match_arg_385.value
                        temp_abattement_forfaitaire_d823_17_26 = True
                    return (((date_courante_11 >=
                        date_of_numbers(2022,1,1)) and (date_courante_11 <
                        date_of_numbers(2022,7,1))) and
                        (temp_abattement_forfaitaire_d823_17_26 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("1"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_abattement_forfaitaire_d823_17_25,
                                      temp_abattement_forfaitaire_d823_17_24)
            def temp_abattement_forfaitaire_d823_17_27(_:Unit):
                def temp_abattement_forfaitaire_d823_17_28(_:Unit):
                    if (nombre_personnes_a_charge_4 ==
                        integer_of_string("0")):
                        match_arg_386 = situation_familiale_calcul_apl_4
                        if match_arg_386.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_386.value
                            return money_of_cents_string("487000")
                        elif match_arg_386.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_386.value
                            return money_of_cents_string("697700")
                    else:
                        if (nombre_personnes_a_charge_4 ==
                            integer_of_string("1")):
                            return money_of_cents_string("832200")
                        else:
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("2")):
                                return money_of_cents_string("850900")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("883400")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("4")):
                                        return money_of_cents_string("916300")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("5")):
                                            return money_of_cents_string("948800")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("6")):
                                                return money_of_cents_string("981600")
                                            else:
                                                return (money_of_cents_string("981600") +
                                                    (money_of_cents_string("35000") *
                                                    decimal_of_integer((nombre_personnes_a_charge_4 -
                                                    integer_of_string("6")))))
                def temp_abattement_forfaitaire_d823_17_29(_:Unit):
                    match_arg_387 = residence_5
                    if match_arg_387.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_387.value
                        temp_abattement_forfaitaire_d823_17_30 = False
                    elif match_arg_387.code == Collectivite_Code.Guyane:
                        _ = match_arg_387.value
                        temp_abattement_forfaitaire_d823_17_30 = False
                    elif match_arg_387.code == Collectivite_Code.Martinique:
                        _ = match_arg_387.value
                        temp_abattement_forfaitaire_d823_17_30 = False
                    elif match_arg_387.code == Collectivite_Code.LaReunion:
                        _ = match_arg_387.value
                        temp_abattement_forfaitaire_d823_17_30 = False
                    elif match_arg_387.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_387.value
                        temp_abattement_forfaitaire_d823_17_30 = False
                    elif match_arg_387.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_387.value
                        temp_abattement_forfaitaire_d823_17_30 = False
                    elif match_arg_387.code == Collectivite_Code.Metropole:
                        _ = match_arg_387.value
                        temp_abattement_forfaitaire_d823_17_30 = False
                    elif match_arg_387.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_387.value
                        temp_abattement_forfaitaire_d823_17_30 = True
                    elif match_arg_387.code == Collectivite_Code.Mayotte:
                        _ = match_arg_387.value
                        temp_abattement_forfaitaire_d823_17_30 = False
                    return (((date_courante_11 >=
                        date_of_numbers(2022,7,1)) and (date_courante_11 <
                        date_of_numbers(2023,1,1))) and
                        temp_abattement_forfaitaire_d823_17_30)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_abattement_forfaitaire_d823_17_29,
                                      temp_abattement_forfaitaire_d823_17_28)
            def temp_abattement_forfaitaire_d823_17_31(_:Unit):
                def temp_abattement_forfaitaire_d823_17_32(_:Unit):
                    return money_of_cents_string("805100")
                def temp_abattement_forfaitaire_d823_17_33(_:Unit):
                    match_arg_388 = residence_5
                    if match_arg_388.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_388.value
                        temp_abattement_forfaitaire_d823_17_34 = True
                    elif match_arg_388.code == Collectivite_Code.Guyane:
                        _ = match_arg_388.value
                        temp_abattement_forfaitaire_d823_17_34 = False
                    elif match_arg_388.code == Collectivite_Code.Martinique:
                        _ = match_arg_388.value
                        temp_abattement_forfaitaire_d823_17_34 = True
                    elif match_arg_388.code == Collectivite_Code.LaReunion:
                        _ = match_arg_388.value
                        temp_abattement_forfaitaire_d823_17_34 = True
                    elif match_arg_388.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_388.value
                        temp_abattement_forfaitaire_d823_17_34 = True
                    elif match_arg_388.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_388.value
                        temp_abattement_forfaitaire_d823_17_34 = True
                    elif match_arg_388.code == Collectivite_Code.Metropole:
                        _ = match_arg_388.value
                        temp_abattement_forfaitaire_d823_17_34 = False
                    elif match_arg_388.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_388.value
                        temp_abattement_forfaitaire_d823_17_34 = False
                    elif match_arg_388.code == Collectivite_Code.Mayotte:
                        _ = match_arg_388.value
                        temp_abattement_forfaitaire_d823_17_34 = True
                    return (((date_courante_11 >=
                        date_of_numbers(2022,7,1)) and (date_courante_11 <
                        date_of_numbers(2023,1,1))) and
                        (temp_abattement_forfaitaire_d823_17_34 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("1"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_abattement_forfaitaire_d823_17_33,
                                      temp_abattement_forfaitaire_d823_17_32)
            def temp_abattement_forfaitaire_d823_17_35(_:Unit):
                def temp_abattement_forfaitaire_d823_17_36(_:Unit):
                    if (nombre_personnes_a_charge_4 ==
                        integer_of_string("0")):
                        match_arg_389 = situation_familiale_calcul_apl_4
                        if match_arg_389.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_389.value
                            return money_of_cents_string("527200")
                        elif match_arg_389.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_389.value
                            return money_of_cents_string("755200")
                    else:
                        if (nombre_personnes_a_charge_4 ==
                            integer_of_string("1")):
                            return money_of_cents_string("900800")
                        else:
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("2")):
                                return money_of_cents_string("921100")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("3")):
                                    return money_of_cents_string("956300")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("4")):
                                        return money_of_cents_string("991900")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("5")):
                                            return money_of_cents_string("1027100")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("6")):
                                                return money_of_cents_string("1062600")
                                            else:
                                                return (money_of_cents_string("1062600") +
                                                    (money_of_cents_string("35000") *
                                                    decimal_of_integer((nombre_personnes_a_charge_4 -
                                                    integer_of_string("6")))))
                def temp_abattement_forfaitaire_d823_17_37(_:Unit):
                    match_arg_390 = residence_5
                    if match_arg_390.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_390.value
                        temp_abattement_forfaitaire_d823_17_38 = False
                    elif match_arg_390.code == Collectivite_Code.Guyane:
                        _ = match_arg_390.value
                        temp_abattement_forfaitaire_d823_17_38 = False
                    elif match_arg_390.code == Collectivite_Code.Martinique:
                        _ = match_arg_390.value
                        temp_abattement_forfaitaire_d823_17_38 = False
                    elif match_arg_390.code == Collectivite_Code.LaReunion:
                        _ = match_arg_390.value
                        temp_abattement_forfaitaire_d823_17_38 = False
                    elif match_arg_390.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_390.value
                        temp_abattement_forfaitaire_d823_17_38 = False
                    elif match_arg_390.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_390.value
                        temp_abattement_forfaitaire_d823_17_38 = False
                    elif match_arg_390.code == Collectivite_Code.Metropole:
                        _ = match_arg_390.value
                        temp_abattement_forfaitaire_d823_17_38 = False
                    elif match_arg_390.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_390.value
                        temp_abattement_forfaitaire_d823_17_38 = True
                    elif match_arg_390.code == Collectivite_Code.Mayotte:
                        _ = match_arg_390.value
                        temp_abattement_forfaitaire_d823_17_38 = False
                    return ((date_courante_11 >=
                        date_of_numbers(2023,1,1)) and
                        temp_abattement_forfaitaire_d823_17_38)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_abattement_forfaitaire_d823_17_37,
                                      temp_abattement_forfaitaire_d823_17_36)
            def temp_abattement_forfaitaire_d823_17_39(_:Unit):
                def temp_abattement_forfaitaire_d823_17_40(_:Unit):
                    return money_of_cents_string("818100")
                def temp_abattement_forfaitaire_d823_17_41(_:Unit):
                    match_arg_391 = residence_5
                    if match_arg_391.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_391.value
                        temp_abattement_forfaitaire_d823_17_42 = True
                    elif match_arg_391.code == Collectivite_Code.Guyane:
                        _ = match_arg_391.value
                        temp_abattement_forfaitaire_d823_17_42 = False
                    elif match_arg_391.code == Collectivite_Code.Martinique:
                        _ = match_arg_391.value
                        temp_abattement_forfaitaire_d823_17_42 = True
                    elif match_arg_391.code == Collectivite_Code.LaReunion:
                        _ = match_arg_391.value
                        temp_abattement_forfaitaire_d823_17_42 = True
                    elif match_arg_391.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_391.value
                        temp_abattement_forfaitaire_d823_17_42 = True
                    elif match_arg_391.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_391.value
                        temp_abattement_forfaitaire_d823_17_42 = True
                    elif match_arg_391.code == Collectivite_Code.Metropole:
                        _ = match_arg_391.value
                        temp_abattement_forfaitaire_d823_17_42 = False
                    elif match_arg_391.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_391.value
                        temp_abattement_forfaitaire_d823_17_42 = False
                    elif match_arg_391.code == Collectivite_Code.Mayotte:
                        _ = match_arg_391.value
                        temp_abattement_forfaitaire_d823_17_42 = True
                    return ((date_courante_11 >=
                        date_of_numbers(2023,1,1)) and
                        (temp_abattement_forfaitaire_d823_17_42 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("1"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_abattement_forfaitaire_d823_17_41,
                                      temp_abattement_forfaitaire_d823_17_40)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [temp_abattement_forfaitaire_d823_17_39,
                                  temp_abattement_forfaitaire_d823_17_35,
                                  temp_abattement_forfaitaire_d823_17_31,
                                  temp_abattement_forfaitaire_d823_17_27,
                                  temp_abattement_forfaitaire_d823_17_23,
                                  temp_abattement_forfaitaire_d823_17_19],
                                  temp_abattement_forfaitaire_d823_17_18,
                                  temp_abattement_forfaitaire_d823_17_17)
        def temp_abattement_forfaitaire_d823_17_43(_:Unit):
            try:
                def temp_abattement_forfaitaire_d823_17_44(_:Unit):
                    raise EmptyError
                def temp_abattement_forfaitaire_d823_17_45(_:Unit):
                    return False
                def temp_abattement_forfaitaire_d823_17_46(_:Unit):
                    def temp_abattement_forfaitaire_d823_17_47(_:Unit):
                        if (nombre_personnes_a_charge_4 ==
                            integer_of_string("0")):
                            match_arg_392 = situation_familiale_calcul_apl_4
                            if match_arg_392.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_392.value
                                return money_of_cents_string("396000")
                            elif match_arg_392.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_392.value
                                return money_of_cents_string("567300")
                        else:
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("1")):
                                return money_of_cents_string("639600")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("684900")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("738600")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("793500")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("848400")
                                            else:
                                                return money_of_cents_string("903200")
                    def temp_abattement_forfaitaire_d823_17_48(_:Unit):
                        match_arg_393 = residence_5
                        if match_arg_393.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_393.value
                            temp_abattement_forfaitaire_d823_17_49 = True
                        elif match_arg_393.code == Collectivite_Code.Guyane:
                            _ = match_arg_393.value
                            temp_abattement_forfaitaire_d823_17_49 = False
                        elif match_arg_393.code == Collectivite_Code.Martinique:
                            _ = match_arg_393.value
                            temp_abattement_forfaitaire_d823_17_49 = True
                        elif match_arg_393.code == Collectivite_Code.LaReunion:
                            _ = match_arg_393.value
                            temp_abattement_forfaitaire_d823_17_49 = True
                        elif match_arg_393.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_393.value
                            temp_abattement_forfaitaire_d823_17_49 = True
                        elif match_arg_393.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_393.value
                            temp_abattement_forfaitaire_d823_17_49 = True
                        elif match_arg_393.code == Collectivite_Code.Metropole:
                            _ = match_arg_393.value
                            temp_abattement_forfaitaire_d823_17_49 = False
                        elif match_arg_393.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_393.value
                            temp_abattement_forfaitaire_d823_17_49 = False
                        elif match_arg_393.code == Collectivite_Code.Mayotte:
                            _ = match_arg_393.value
                            temp_abattement_forfaitaire_d823_17_49 = True
                        return (((date_courante_11 >=
                            date_of_numbers(2020,1,1)) and
                            (date_courante_11 <
                            date_of_numbers(2021,1,1))) and
                            temp_abattement_forfaitaire_d823_17_49)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_abattement_forfaitaire_d823_17_48,
                                          temp_abattement_forfaitaire_d823_17_47)
                def temp_abattement_forfaitaire_d823_17_50(_:Unit):
                    def temp_abattement_forfaitaire_d823_17_51(_:Unit):
                        if (nombre_personnes_a_charge_4 ==
                            integer_of_string("0")):
                            match_arg_394 = situation_familiale_calcul_apl_4
                            if match_arg_394.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_394.value
                                return money_of_cents_string("427400")
                            elif match_arg_394.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_394.value
                                return money_of_cents_string("612200")
                        else:
                            if (nombre_personnes_a_charge_4 ==
                                integer_of_string("1")):
                                return money_of_cents_string("699000")
                            else:
                                if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("743200")
                                else:
                                    if (nombre_personnes_a_charge_4 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("785400")
                                    else:
                                        if (nombre_personnes_a_charge_4 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("828300")
                                        else:
                                            if (nombre_personnes_a_charge_4 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("871100")
                                            else:
                                                return money_of_cents_string("913900")
                    def temp_abattement_forfaitaire_d823_17_52(_:Unit):
                        match_arg_395 = residence_5
                        if match_arg_395.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_395.value
                            temp_abattement_forfaitaire_d823_17_53 = True
                        elif match_arg_395.code == Collectivite_Code.Guyane:
                            _ = match_arg_395.value
                            temp_abattement_forfaitaire_d823_17_53 = False
                        elif match_arg_395.code == Collectivite_Code.Martinique:
                            _ = match_arg_395.value
                            temp_abattement_forfaitaire_d823_17_53 = True
                        elif match_arg_395.code == Collectivite_Code.LaReunion:
                            _ = match_arg_395.value
                            temp_abattement_forfaitaire_d823_17_53 = True
                        elif match_arg_395.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_395.value
                            temp_abattement_forfaitaire_d823_17_53 = True
                        elif match_arg_395.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_395.value
                            temp_abattement_forfaitaire_d823_17_53 = True
                        elif match_arg_395.code == Collectivite_Code.Metropole:
                            _ = match_arg_395.value
                            temp_abattement_forfaitaire_d823_17_53 = False
                        elif match_arg_395.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_395.value
                            temp_abattement_forfaitaire_d823_17_53 = False
                        elif match_arg_395.code == Collectivite_Code.Mayotte:
                            _ = match_arg_395.value
                            temp_abattement_forfaitaire_d823_17_53 = True
                        return (((date_courante_11 >=
                            date_of_numbers(2021,1,1)) and
                            (date_courante_11 <
                            date_of_numbers(2022,1,1))) and
                            temp_abattement_forfaitaire_d823_17_53)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_abattement_forfaitaire_d823_17_52,
                                          temp_abattement_forfaitaire_d823_17_51)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [temp_abattement_forfaitaire_d823_17_50,
                                      temp_abattement_forfaitaire_d823_17_46],
                                      temp_abattement_forfaitaire_d823_17_45,
                                      temp_abattement_forfaitaire_d823_17_44)
            except EmptyError:
                try:
                    def temp_abattement_forfaitaire_d823_17_54(_:Unit):
                        return money_of_cents_string("758400")
                    def temp_abattement_forfaitaire_d823_17_55(_:Unit):
                        match_arg_396 = residence_5
                        if match_arg_396.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_396.value
                            temp_abattement_forfaitaire_d823_17_56 = True
                        elif match_arg_396.code == Collectivite_Code.Guyane:
                            _ = match_arg_396.value
                            temp_abattement_forfaitaire_d823_17_56 = False
                        elif match_arg_396.code == Collectivite_Code.Martinique:
                            _ = match_arg_396.value
                            temp_abattement_forfaitaire_d823_17_56 = True
                        elif match_arg_396.code == Collectivite_Code.LaReunion:
                            _ = match_arg_396.value
                            temp_abattement_forfaitaire_d823_17_56 = True
                        elif match_arg_396.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_396.value
                            temp_abattement_forfaitaire_d823_17_56 = True
                        elif match_arg_396.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_396.value
                            temp_abattement_forfaitaire_d823_17_56 = True
                        elif match_arg_396.code == Collectivite_Code.Metropole:
                            _ = match_arg_396.value
                            temp_abattement_forfaitaire_d823_17_56 = False
                        elif match_arg_396.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_396.value
                            temp_abattement_forfaitaire_d823_17_56 = False
                        elif match_arg_396.code == Collectivite_Code.Mayotte:
                            _ = match_arg_396.value
                            temp_abattement_forfaitaire_d823_17_56 = True
                        return (((date_courante_11 >=
                            date_of_numbers(2020,10,1)) and
                            (date_courante_11 <
                            date_of_numbers(2021,10,1))) and
                            (temp_abattement_forfaitaire_d823_17_56 and
                            (nombre_personnes_a_charge_4 ==
                            integer_of_string("1"))))
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_abattement_forfaitaire_d823_17_55,
                                          temp_abattement_forfaitaire_d823_17_54)
                except EmptyError:
                    match_arg_397 = residence_5
                    if match_arg_397.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_397.value
                        temp_abattement_forfaitaire_d823_17_57 = True
                    elif match_arg_397.code == Collectivite_Code.Guyane:
                        _ = match_arg_397.value
                        temp_abattement_forfaitaire_d823_17_57 = False
                    elif match_arg_397.code == Collectivite_Code.Martinique:
                        _ = match_arg_397.value
                        temp_abattement_forfaitaire_d823_17_57 = True
                    elif match_arg_397.code == Collectivite_Code.LaReunion:
                        _ = match_arg_397.value
                        temp_abattement_forfaitaire_d823_17_57 = True
                    elif match_arg_397.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_397.value
                        temp_abattement_forfaitaire_d823_17_57 = True
                    elif match_arg_397.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_397.value
                        temp_abattement_forfaitaire_d823_17_57 = True
                    elif match_arg_397.code == Collectivite_Code.Metropole:
                        _ = match_arg_397.value
                        temp_abattement_forfaitaire_d823_17_57 = False
                    elif match_arg_397.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_397.value
                        temp_abattement_forfaitaire_d823_17_57 = False
                    elif match_arg_397.code == Collectivite_Code.Mayotte:
                        _ = match_arg_397.value
                        temp_abattement_forfaitaire_d823_17_57 = True
                    if (((date_courante_11 >= date_of_numbers(2021,10,1)) and
                        (date_courante_11 < date_of_numbers(2022,1,1))) and
                        (temp_abattement_forfaitaire_d823_17_57 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("1")))):
                        return money_of_cents_string("758400")
                    else:
                        raise EmptyError
        temp_abattement_forfaitaire_d823_17_58 = handle_default(SourcePosition(filename="",
                                                                start_line=0,
                                                                start_column=1,
                                                                end_line=0, end_column=1,
                                                                law_headings=[]), [temp_abattement_forfaitaire_d823_17_43,
                                                                temp_abattement_forfaitaire_d823_17_16],
                                                                temp_abattement_forfaitaire_d823_17_15,
                                                                temp_abattement_forfaitaire_d823_17)
    except EmptyError:
        temp_abattement_forfaitaire_d823_17_58 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=553, start_column=11,
                                             end_line=553, end_column=41,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    abattement_forfaitaire_d823_17 = temp_abattement_forfaitaire_d823_17_58
    try:
        def temp_loyer_reference(_:Unit):
            raise EmptyError
        def temp_loyer_reference_1(_:Unit):
            return False
        def temp_loyer_reference_2(_:Unit):
            def temp_loyer_reference_3(_:Unit):
                if (nombre_personnes_a_charge_4 ==
                    integer_of_string("0")):
                    match_arg_398 = situation_familiale_calcul_apl_4
                    if match_arg_398.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_398.value
                        return money_of_cents_string("25869")
                    elif match_arg_398.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_398.value
                        return money_of_cents_string("31664")
                else:
                    return (money_of_cents_string("35630") +
                        (money_of_cents_string("5186") *
                        multiplicateur_majoration_loyer_reference))
            def temp_loyer_reference_4(_:Unit):
                return ((date_courante_11 >= date_of_numbers(2020,10,1)) and
                    (date_courante_11 < date_of_numbers(2021,10,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_loyer_reference_4,
                                  temp_loyer_reference_3)
        def temp_loyer_reference_5(_:Unit):
            def temp_loyer_reference_6(_:Unit):
                if (nombre_personnes_a_charge_4 ==
                    integer_of_string("0")):
                    match_arg_399 = situation_familiale_calcul_apl_4
                    if match_arg_399.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_399.value
                        return money_of_cents_string("25978")
                    elif match_arg_399.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_399.value
                        return money_of_cents_string("31797")
                else:
                    return (money_of_cents_string("35780") +
                        (money_of_cents_string("5208") *
                        multiplicateur_majoration_loyer_reference))
            def temp_loyer_reference_7(_:Unit):
                return ((date_courante_11 >= date_of_numbers(2021,10,1)) and
                    (date_courante_11 < date_of_numbers(2022,7,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_loyer_reference_7,
                                  temp_loyer_reference_6)
        def temp_loyer_reference_8(_:Unit):
            def temp_loyer_reference_9(_:Unit):
                if (nombre_personnes_a_charge_4 ==
                    integer_of_string("0")):
                    match_arg_400 = situation_familiale_calcul_apl_4
                    if match_arg_400.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_400.value
                        return money_of_cents_string("26887")
                    elif match_arg_400.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_400.value
                        return money_of_cents_string("32910")
                else:
                    return (money_of_cents_string("37032") +
                        (money_of_cents_string("5390") *
                        multiplicateur_majoration_loyer_reference))
            def temp_loyer_reference_10(_:Unit):
                return (date_courante_11 >= date_of_numbers(2022,7,1))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_loyer_reference_10,
                                  temp_loyer_reference_9)
        temp_loyer_reference_11 = handle_default(SourcePosition(filename="",
                                                 start_line=0,
                                                 start_column=1,
                                                 end_line=0, end_column=1,
                                                 law_headings=[]), [temp_loyer_reference_8,
                                                 temp_loyer_reference_5,
                                                 temp_loyer_reference_2],
                                                 temp_loyer_reference_1,
                                                 temp_loyer_reference)
    except EmptyError:
        temp_loyer_reference_11 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=547, start_column=11,
                                             end_line=547, end_column=26,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    loyer_reference = temp_loyer_reference_11
    try:
        def temp_plafond_loyer_d823_16_2(_:Unit):
            def temp_plafond_loyer_d823_16_2_1(_:Unit):
                raise EmptyError
            def temp_plafond_loyer_d823_16_2_2(_:Unit):
                return False
            def temp_plafond_loyer_d823_16_2_3(_:Unit):
                def temp_plafond_loyer_d823_16_2_4(_:Unit):
                    match_arg_401 = zone_2
                    if match_arg_401.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_401.value
                        return (money_of_cents_string("40460") +
                            (money_of_cents_string("5870") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                    elif match_arg_401.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_401.value
                        return (money_of_cents_string("35630") +
                            (money_of_cents_string("5186") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                    elif match_arg_401.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_401.value
                        return (money_of_cents_string("32956") +
                            (money_of_cents_string("4723") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                def temp_plafond_loyer_d823_16_2_5(_:Unit):
                    return (((date_courante_11 <
                        date_of_numbers(2021,10,1)) and (date_courante_11 >=
                        date_of_numbers(2020,10,1))) and
                        (nombre_personnes_a_charge_4 >=
                        integer_of_string("1")))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_5,
                                      temp_plafond_loyer_d823_16_2_4)
            def temp_plafond_loyer_d823_16_2_6(_:Unit):
                def temp_plafond_loyer_d823_16_2_7(_:Unit):
                    match_arg_402 = zone_2
                    if match_arg_402.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_402.value
                        return money_of_cents_string("35799")
                    elif match_arg_402.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_402.value
                        return money_of_cents_string("31664")
                    elif match_arg_402.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_402.value
                        return money_of_cents_string("29392")
                def temp_plafond_loyer_d823_16_2_8(_:Unit):
                    match_arg_403 = situation_familiale_calcul_apl_4
                    if match_arg_403.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_403.value
                        temp_plafond_loyer_d823_16_2_9 = False
                    elif match_arg_403.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_403.value
                        temp_plafond_loyer_d823_16_2_9 = True
                    return (((date_courante_11 <
                        date_of_numbers(2021,10,1)) and (date_courante_11 >=
                        date_of_numbers(2020,10,1))) and
                        (temp_plafond_loyer_d823_16_2_9 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("0"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_8,
                                      temp_plafond_loyer_d823_16_2_7)
            def temp_plafond_loyer_d823_16_2_10(_:Unit):
                def temp_plafond_loyer_d823_16_2_11(_:Unit):
                    match_arg_404 = zone_2
                    if match_arg_404.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_404.value
                        return money_of_cents_string("29682")
                    elif match_arg_404.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_404.value
                        return money_of_cents_string("25859")
                    elif match_arg_404.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_404.value
                        return money_of_cents_string("24246")
                def temp_plafond_loyer_d823_16_2_12(_:Unit):
                    match_arg_405 = situation_familiale_calcul_apl_4
                    if match_arg_405.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_405.value
                        temp_plafond_loyer_d823_16_2_13 = True
                    elif match_arg_405.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_405.value
                        temp_plafond_loyer_d823_16_2_13 = False
                    return (((date_courante_11 <
                        date_of_numbers(2021,10,1)) and (date_courante_11 >=
                        date_of_numbers(2020,10,1))) and
                        (temp_plafond_loyer_d823_16_2_13 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("0"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_12,
                                      temp_plafond_loyer_d823_16_2_11)
            def temp_plafond_loyer_d823_16_2_14(_:Unit):
                def temp_plafond_loyer_d823_16_2_15(_:Unit):
                    match_arg_406 = zone_2
                    if match_arg_406.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_406.value
                        return (money_of_cents_string("40630") +
                            (money_of_cents_string("5895") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                    elif match_arg_406.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_406.value
                        return (money_of_cents_string("35780") +
                            (money_of_cents_string("5208") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                    elif match_arg_406.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_406.value
                        return (money_of_cents_string("33094") +
                            (money_of_cents_string("4743") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                def temp_plafond_loyer_d823_16_2_16(_:Unit):
                    return (((date_courante_11 >=
                        date_of_numbers(2021,10,1)) and (date_courante_11 <
                        date_of_numbers(2022,7,1))) and
                        (nombre_personnes_a_charge_4 >=
                        integer_of_string("1")))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_16,
                                      temp_plafond_loyer_d823_16_2_15)
            def temp_plafond_loyer_d823_16_2_17(_:Unit):
                def temp_plafond_loyer_d823_16_2_18(_:Unit):
                    match_arg_407 = zone_2
                    if match_arg_407.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_407.value
                        return money_of_cents_string("35949")
                    elif match_arg_407.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_407.value
                        return money_of_cents_string("31797")
                    elif match_arg_407.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_407.value
                        return money_of_cents_string("29515")
                def temp_plafond_loyer_d823_16_2_19(_:Unit):
                    match_arg_408 = situation_familiale_calcul_apl_4
                    if match_arg_408.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_408.value
                        temp_plafond_loyer_d823_16_2_20 = False
                    elif match_arg_408.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_408.value
                        temp_plafond_loyer_d823_16_2_20 = True
                    return (((date_courante_11 >=
                        date_of_numbers(2021,10,1)) and (date_courante_11 <
                        date_of_numbers(2022,7,1))) and
                        (temp_plafond_loyer_d823_16_2_20 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("0"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_19,
                                      temp_plafond_loyer_d823_16_2_18)
            def temp_plafond_loyer_d823_16_2_21(_:Unit):
                def temp_plafond_loyer_d823_16_2_22(_:Unit):
                    match_arg_409 = zone_2
                    if match_arg_409.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_409.value
                        return money_of_cents_string("29807")
                    elif match_arg_409.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_409.value
                        return money_of_cents_string("25978")
                    elif match_arg_409.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_409.value
                        return money_of_cents_string("24348")
                def temp_plafond_loyer_d823_16_2_23(_:Unit):
                    match_arg_410 = situation_familiale_calcul_apl_4
                    if match_arg_410.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_410.value
                        temp_plafond_loyer_d823_16_2_24 = True
                    elif match_arg_410.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_410.value
                        temp_plafond_loyer_d823_16_2_24 = False
                    return (((date_courante_11 >=
                        date_of_numbers(2021,10,1)) and (date_courante_11 <
                        date_of_numbers(2022,7,1))) and
                        (temp_plafond_loyer_d823_16_2_24 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("0"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_23,
                                      temp_plafond_loyer_d823_16_2_22)
            def temp_plafond_loyer_d823_16_2_25(_:Unit):
                def temp_plafond_loyer_d823_16_2_26(_:Unit):
                    match_arg_411 = zone_2
                    if match_arg_411.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_411.value
                        return (money_of_cents_string("42052") +
                            (money_of_cents_string("6101") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                    elif match_arg_411.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_411.value
                        return (money_of_cents_string("37032") +
                            (money_of_cents_string("5390") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                    elif match_arg_411.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_411.value
                        return (money_of_cents_string("34252") +
                            (money_of_cents_string("4909") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                def temp_plafond_loyer_d823_16_2_27(_:Unit):
                    return ((date_courante_11 >=
                        date_of_numbers(2022,7,1)) and
                        (nombre_personnes_a_charge_4 >=
                        integer_of_string("1")))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_27,
                                      temp_plafond_loyer_d823_16_2_26)
            def temp_plafond_loyer_d823_16_2_28(_:Unit):
                def temp_plafond_loyer_d823_16_2_29(_:Unit):
                    match_arg_412 = zone_2
                    if match_arg_412.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_412.value
                        return money_of_cents_string("37207")
                    elif match_arg_412.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_412.value
                        return money_of_cents_string("32910")
                    elif match_arg_412.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_412.value
                        return money_of_cents_string("30548")
                def temp_plafond_loyer_d823_16_2_30(_:Unit):
                    match_arg_413 = situation_familiale_calcul_apl_4
                    if match_arg_413.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_413.value
                        temp_plafond_loyer_d823_16_2_31 = False
                    elif match_arg_413.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_413.value
                        temp_plafond_loyer_d823_16_2_31 = True
                    return ((date_courante_11 >=
                        date_of_numbers(2022,7,1)) and
                        (temp_plafond_loyer_d823_16_2_31 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("0"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_30,
                                      temp_plafond_loyer_d823_16_2_29)
            def temp_plafond_loyer_d823_16_2_32(_:Unit):
                def temp_plafond_loyer_d823_16_2_33(_:Unit):
                    match_arg_414 = zone_2
                    if match_arg_414.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_414.value
                        return money_of_cents_string("30850")
                    elif match_arg_414.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_414.value
                        return money_of_cents_string("26887")
                    elif match_arg_414.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_414.value
                        return money_of_cents_string("25200")
                def temp_plafond_loyer_d823_16_2_34(_:Unit):
                    match_arg_415 = situation_familiale_calcul_apl_4
                    if match_arg_415.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_415.value
                        temp_plafond_loyer_d823_16_2_35 = True
                    elif match_arg_415.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_415.value
                        temp_plafond_loyer_d823_16_2_35 = False
                    return ((date_courante_11 >=
                        date_of_numbers(2022,7,1)) and
                        (temp_plafond_loyer_d823_16_2_35 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("0"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_34,
                                      temp_plafond_loyer_d823_16_2_33)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [temp_plafond_loyer_d823_16_2_32,
                                  temp_plafond_loyer_d823_16_2_28,
                                  temp_plafond_loyer_d823_16_2_25,
                                  temp_plafond_loyer_d823_16_2_21,
                                  temp_plafond_loyer_d823_16_2_17,
                                  temp_plafond_loyer_d823_16_2_14,
                                  temp_plafond_loyer_d823_16_2_10,
                                  temp_plafond_loyer_d823_16_2_6,
                                  temp_plafond_loyer_d823_16_2_3],
                                  temp_plafond_loyer_d823_16_2_2,
                                  temp_plafond_loyer_d823_16_2_1)
        def temp_plafond_loyer_d823_16_2_36(_:Unit):
            return True
        def temp_plafond_loyer_d823_16_2_37(_:Unit):
            try:
                def temp_plafond_loyer_d823_16_2_38(_:Unit):
                    raise EmptyError
                def temp_plafond_loyer_d823_16_2_39(_:Unit):
                    return False
                def temp_plafond_loyer_d823_16_2_40(_:Unit):
                    def temp_plafond_loyer_d823_16_2_41(_:Unit):
                        match_arg_416 = zone_2
                        if match_arg_416.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_416.value
                            return money_of_cents_string("22262")
                        elif match_arg_416.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_416.value
                            return money_of_cents_string("19402")
                        elif match_arg_416.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_416.value
                            return money_of_cents_string("18185")
                    def temp_plafond_loyer_d823_16_2_42(_:Unit):
                        return (((date_courante_11 <
                            date_of_numbers(2021,10,1)) and
                            ((date_courante_11 >=
                            date_of_numbers(2020,10,1)) and
                            logement_est_chambre)) and
                            agees_ou_handicap_adultes_hebergees_onereux_particuliers)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_plafond_loyer_d823_16_2_42,
                                          temp_plafond_loyer_d823_16_2_41)
                def temp_plafond_loyer_d823_16_2_43(_:Unit):
                    def temp_plafond_loyer_d823_16_2_44(_:Unit):
                        match_arg_417 = zone_2
                        if match_arg_417.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_417.value
                            return money_of_cents_string("22355")
                        elif match_arg_417.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_417.value
                            return money_of_cents_string("19484")
                        elif match_arg_417.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_417.value
                            return money_of_cents_string("18261")
                    def temp_plafond_loyer_d823_16_2_45(_:Unit):
                        return (((date_courante_11 >=
                            date_of_numbers(2021,10,1)) and
                            ((date_courante_11 <
                            date_of_numbers(2022,7,1)) and
                            logement_est_chambre)) and
                            agees_ou_handicap_adultes_hebergees_onereux_particuliers)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_plafond_loyer_d823_16_2_45,
                                          temp_plafond_loyer_d823_16_2_44)
                def temp_plafond_loyer_d823_16_2_46(_:Unit):
                    def temp_plafond_loyer_d823_16_2_47(_:Unit):
                        match_arg_418 = zone_2
                        if match_arg_418.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_418.value
                            return money_of_cents_string("23138")
                        elif match_arg_418.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_418.value
                            return money_of_cents_string("20165")
                        elif match_arg_418.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_418.value
                            return money_of_cents_string("18900")
                    def temp_plafond_loyer_d823_16_2_48(_:Unit):
                        return (((date_courante_11 >=
                            date_of_numbers(2022,7,1)) and
                            logement_est_chambre) and
                            agees_ou_handicap_adultes_hebergees_onereux_particuliers)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_plafond_loyer_d823_16_2_48,
                                          temp_plafond_loyer_d823_16_2_47)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [temp_plafond_loyer_d823_16_2_46,
                                      temp_plafond_loyer_d823_16_2_43,
                                      temp_plafond_loyer_d823_16_2_40],
                                      temp_plafond_loyer_d823_16_2_39,
                                      temp_plafond_loyer_d823_16_2_38)
            except EmptyError:
                def temp_plafond_loyer_d823_16_2_49(_:Unit):
                    raise EmptyError
                def temp_plafond_loyer_d823_16_2_50(_:Unit):
                    return False
                def temp_plafond_loyer_d823_16_2_51(_:Unit):
                    def temp_plafond_loyer_d823_16_2_52(_:Unit):
                        match_arg_419 = zone_2
                        if match_arg_419.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_419.value
                            return money_of_cents_string("26714")
                        elif match_arg_419.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_419.value
                            return money_of_cents_string("23282")
                        elif match_arg_419.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_419.value
                            return money_of_cents_string("21821")
                    def temp_plafond_loyer_d823_16_2_53(_:Unit):
                        return ((date_courante_11 <
                            date_of_numbers(2021,10,1)) and
                            ((date_courante_11 >=
                            date_of_numbers(2020,10,1)) and
                            logement_est_chambre))
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_plafond_loyer_d823_16_2_53,
                                          temp_plafond_loyer_d823_16_2_52)
                def temp_plafond_loyer_d823_16_2_54(_:Unit):
                    def temp_plafond_loyer_d823_16_2_55(_:Unit):
                        match_arg_420 = zone_2
                        if match_arg_420.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_420.value
                            return money_of_cents_string("26826")
                        elif match_arg_420.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_420.value
                            return money_of_cents_string("23380")
                        elif match_arg_420.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_420.value
                            return money_of_cents_string("21913")
                    def temp_plafond_loyer_d823_16_2_56(_:Unit):
                        return ((date_courante_11 >=
                            date_of_numbers(2021,10,1)) and
                            ((date_courante_11 <
                            date_of_numbers(2022,7,1)) and
                            logement_est_chambre))
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_plafond_loyer_d823_16_2_56,
                                          temp_plafond_loyer_d823_16_2_55)
                def temp_plafond_loyer_d823_16_2_57(_:Unit):
                    def temp_plafond_loyer_d823_16_2_58(_:Unit):
                        match_arg_421 = zone_2
                        if match_arg_421.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_421.value
                            return money_of_cents_string("27765")
                        elif match_arg_421.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_421.value
                            return money_of_cents_string("24198")
                        elif match_arg_421.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_421.value
                            return money_of_cents_string("22680")
                    def temp_plafond_loyer_d823_16_2_59(_:Unit):
                        return ((date_courante_11 >=
                            date_of_numbers(2022,7,1)) and
                            logement_est_chambre)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_plafond_loyer_d823_16_2_59,
                                          temp_plafond_loyer_d823_16_2_58)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [temp_plafond_loyer_d823_16_2_57,
                                      temp_plafond_loyer_d823_16_2_54,
                                      temp_plafond_loyer_d823_16_2_51],
                                      temp_plafond_loyer_d823_16_2_50,
                                      temp_plafond_loyer_d823_16_2_49)
        def temp_plafond_loyer_d823_16_2_60(_:Unit):
            def temp_plafond_loyer_d823_16_2_61(_:Unit):
                raise EmptyError
            def temp_plafond_loyer_d823_16_2_62(_:Unit):
                return False
            def temp_plafond_loyer_d823_16_2_63(_:Unit):
                def temp_plafond_loyer_d823_16_2_64(_:Unit):
                    match_arg_422 = zone_2
                    if match_arg_422.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_422.value
                        return (money_of_cents_string("30345") +
                            (money_of_cents_string("4403") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                    elif match_arg_422.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_422.value
                        return (money_of_cents_string("26723") +
                            (money_of_cents_string("3890") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                    elif match_arg_422.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_422.value
                        return (money_of_cents_string("24717") +
                            (money_of_cents_string("3542") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                def temp_plafond_loyer_d823_16_2_65(_:Unit):
                    return (((date_courante_11 <
                        date_of_numbers(2021,10,1)) and ((date_courante_11 >=
                        date_of_numbers(2020,10,1)) and colocation)) and
                        (nombre_personnes_a_charge_4 >=
                        integer_of_string("1")))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_65,
                                      temp_plafond_loyer_d823_16_2_64)
            def temp_plafond_loyer_d823_16_2_66(_:Unit):
                def temp_plafond_loyer_d823_16_2_67(_:Unit):
                    match_arg_423 = zone_2
                    if match_arg_423.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_423.value
                        return money_of_cents_string("26849")
                    elif match_arg_423.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_423.value
                        return money_of_cents_string("23748")
                    elif match_arg_423.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_423.value
                        return money_of_cents_string("22044")
                def temp_plafond_loyer_d823_16_2_68(_:Unit):
                    match_arg_424 = situation_familiale_calcul_apl_4
                    if match_arg_424.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_424.value
                        temp_plafond_loyer_d823_16_2_69 = False
                    elif match_arg_424.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_424.value
                        temp_plafond_loyer_d823_16_2_69 = True
                    return (((date_courante_11 <
                        date_of_numbers(2021,10,1)) and ((date_courante_11 >=
                        date_of_numbers(2020,10,1)) and colocation)) and
                        (temp_plafond_loyer_d823_16_2_69 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("0"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_68,
                                      temp_plafond_loyer_d823_16_2_67)
            def temp_plafond_loyer_d823_16_2_70(_:Unit):
                def temp_plafond_loyer_d823_16_2_71(_:Unit):
                    match_arg_425 = zone_2
                    if match_arg_425.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_425.value
                        return money_of_cents_string("22262")
                    elif match_arg_425.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_425.value
                        return money_of_cents_string("19402")
                    elif match_arg_425.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_425.value
                        return money_of_cents_string("18185")
                def temp_plafond_loyer_d823_16_2_72(_:Unit):
                    match_arg_426 = situation_familiale_calcul_apl_4
                    if match_arg_426.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_426.value
                        temp_plafond_loyer_d823_16_2_73 = True
                    elif match_arg_426.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_426.value
                        temp_plafond_loyer_d823_16_2_73 = False
                    return (((date_courante_11 <
                        date_of_numbers(2021,10,1)) and ((date_courante_11 >=
                        date_of_numbers(2020,10,1)) and colocation)) and
                        (temp_plafond_loyer_d823_16_2_73 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("0"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_72,
                                      temp_plafond_loyer_d823_16_2_71)
            def temp_plafond_loyer_d823_16_2_74(_:Unit):
                def temp_plafond_loyer_d823_16_2_75(_:Unit):
                    match_arg_427 = zone_2
                    if match_arg_427.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_427.value
                        return (money_of_cents_string("30473") +
                            (money_of_cents_string("4421") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                    elif match_arg_427.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_427.value
                        return (money_of_cents_string("26835") +
                            (money_of_cents_string("3906") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                    elif match_arg_427.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_427.value
                        return (money_of_cents_string("24821") +
                            (money_of_cents_string("3557") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                def temp_plafond_loyer_d823_16_2_76(_:Unit):
                    return (((date_courante_11 >=
                        date_of_numbers(2021,10,1)) and ((date_courante_11 <
                        date_of_numbers(2022,7,1)) and colocation)) and
                        (nombre_personnes_a_charge_4 >=
                        integer_of_string("1")))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_76,
                                      temp_plafond_loyer_d823_16_2_75)
            def temp_plafond_loyer_d823_16_2_77(_:Unit):
                def temp_plafond_loyer_d823_16_2_78(_:Unit):
                    match_arg_428 = zone_2
                    if match_arg_428.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_428.value
                        return money_of_cents_string("26962")
                    elif match_arg_428.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_428.value
                        return money_of_cents_string("23848")
                    elif match_arg_428.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_428.value
                        return money_of_cents_string("22136")
                def temp_plafond_loyer_d823_16_2_79(_:Unit):
                    match_arg_429 = situation_familiale_calcul_apl_4
                    if match_arg_429.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_429.value
                        temp_plafond_loyer_d823_16_2_80 = False
                    elif match_arg_429.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_429.value
                        temp_plafond_loyer_d823_16_2_80 = True
                    return (((date_courante_11 >=
                        date_of_numbers(2021,10,1)) and ((date_courante_11 <
                        date_of_numbers(2022,7,1)) and colocation)) and
                        (temp_plafond_loyer_d823_16_2_80 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("0"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_79,
                                      temp_plafond_loyer_d823_16_2_78)
            def temp_plafond_loyer_d823_16_2_81(_:Unit):
                def temp_plafond_loyer_d823_16_2_82(_:Unit):
                    match_arg_430 = zone_2
                    if match_arg_430.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_430.value
                        return money_of_cents_string("22355")
                    elif match_arg_430.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_430.value
                        return money_of_cents_string("19484")
                    elif match_arg_430.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_430.value
                        return money_of_cents_string("18261")
                def temp_plafond_loyer_d823_16_2_83(_:Unit):
                    match_arg_431 = situation_familiale_calcul_apl_4
                    if match_arg_431.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_431.value
                        temp_plafond_loyer_d823_16_2_84 = True
                    elif match_arg_431.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_431.value
                        temp_plafond_loyer_d823_16_2_84 = False
                    return (((date_courante_11 >=
                        date_of_numbers(2021,10,1)) and ((date_courante_11 <
                        date_of_numbers(2022,7,1)) and colocation)) and
                        (temp_plafond_loyer_d823_16_2_84 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("0"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_83,
                                      temp_plafond_loyer_d823_16_2_82)
            def temp_plafond_loyer_d823_16_2_85(_:Unit):
                def temp_plafond_loyer_d823_16_2_86(_:Unit):
                    match_arg_432 = zone_2
                    if match_arg_432.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_432.value
                        return (money_of_cents_string("31539") +
                            (money_of_cents_string("4576") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                    elif match_arg_432.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_432.value
                        return (money_of_cents_string("27774") +
                            (money_of_cents_string("4043") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                    elif match_arg_432.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_432.value
                        return (money_of_cents_string("25689") +
                            (money_of_cents_string("3682") *
                            multiplicateur_majoration_plafond_loyer_d823_16_2))
                def temp_plafond_loyer_d823_16_2_87(_:Unit):
                    return (((date_courante_11 >=
                        date_of_numbers(2022,7,1)) and colocation) and
                        (nombre_personnes_a_charge_4 >=
                        integer_of_string("1")))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_87,
                                      temp_plafond_loyer_d823_16_2_86)
            def temp_plafond_loyer_d823_16_2_88(_:Unit):
                def temp_plafond_loyer_d823_16_2_89(_:Unit):
                    match_arg_433 = zone_2
                    if match_arg_433.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_433.value
                        return money_of_cents_string("27905")
                    elif match_arg_433.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_433.value
                        return money_of_cents_string("24683")
                    elif match_arg_433.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_433.value
                        return money_of_cents_string("22911")
                def temp_plafond_loyer_d823_16_2_90(_:Unit):
                    match_arg_434 = situation_familiale_calcul_apl_4
                    if match_arg_434.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_434.value
                        temp_plafond_loyer_d823_16_2_91 = False
                    elif match_arg_434.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_434.value
                        temp_plafond_loyer_d823_16_2_91 = True
                    return (((date_courante_11 >=
                        date_of_numbers(2022,7,1)) and colocation) and
                        (temp_plafond_loyer_d823_16_2_91 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("0"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_90,
                                      temp_plafond_loyer_d823_16_2_89)
            def temp_plafond_loyer_d823_16_2_92(_:Unit):
                def temp_plafond_loyer_d823_16_2_93(_:Unit):
                    match_arg_435 = zone_2
                    if match_arg_435.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_435.value
                        return money_of_cents_string("23138")
                    elif match_arg_435.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_435.value
                        return money_of_cents_string("20165")
                    elif match_arg_435.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_435.value
                        return money_of_cents_string("18900")
                def temp_plafond_loyer_d823_16_2_94(_:Unit):
                    match_arg_436 = situation_familiale_calcul_apl_4
                    if match_arg_436.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_436.value
                        temp_plafond_loyer_d823_16_2_95 = True
                    elif match_arg_436.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_436.value
                        temp_plafond_loyer_d823_16_2_95 = False
                    return (((date_courante_11 >=
                        date_of_numbers(2022,7,1)) and colocation) and
                        (temp_plafond_loyer_d823_16_2_95 and
                        (nombre_personnes_a_charge_4 ==
                        integer_of_string("0"))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_plafond_loyer_d823_16_2_94,
                                      temp_plafond_loyer_d823_16_2_93)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [temp_plafond_loyer_d823_16_2_92,
                                  temp_plafond_loyer_d823_16_2_88,
                                  temp_plafond_loyer_d823_16_2_85,
                                  temp_plafond_loyer_d823_16_2_81,
                                  temp_plafond_loyer_d823_16_2_77,
                                  temp_plafond_loyer_d823_16_2_74,
                                  temp_plafond_loyer_d823_16_2_70,
                                  temp_plafond_loyer_d823_16_2_66,
                                  temp_plafond_loyer_d823_16_2_63],
                                  temp_plafond_loyer_d823_16_2_62,
                                  temp_plafond_loyer_d823_16_2_61)
        temp_plafond_loyer_d823_16_2_96 = handle_default(SourcePosition(filename="",
                                                         start_line=0,
                                                         start_column=1,
                                                         end_line=0, end_column=1,
                                                         law_headings=[]), [temp_plafond_loyer_d823_16_2_60,
                                                         temp_plafond_loyer_d823_16_2_37],
                                                         temp_plafond_loyer_d823_16_2_36,
                                                         temp_plafond_loyer_d823_16_2)
    except EmptyError:
        temp_plafond_loyer_d823_16_2_96 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=561, start_column=12,
                                             end_line=561, end_column=35,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    plafond_loyer_d823_16_2 = temp_plafond_loyer_d823_16_2_96
    try:
        def temp_plafond_suppression_d823_16(_:Unit):
            match_arg_437 = zone_2
            if match_arg_437.code == ZoneDHabitation_Code.Zone1:
                _ = match_arg_437.value
                return (plafond_loyer_d823_16_2 * decimal_of_string("4."))
            elif match_arg_437.code == ZoneDHabitation_Code.Zone2:
                _ = match_arg_437.value
                return (plafond_loyer_d823_16_2 * decimal_of_string("3.1"))
            elif match_arg_437.code == ZoneDHabitation_Code.Zone3:
                _ = match_arg_437.value
                return (plafond_loyer_d823_16_2 * decimal_of_string("3.1"))
        def temp_plafond_suppression_d823_16_1(_:Unit):
            return (date_courante_11 >= date_of_numbers(2019,10,1))
        temp_plafond_suppression_d823_16_2 = handle_default(SourcePosition(filename="",
                                                            start_line=0,
                                                            start_column=1,
                                                            end_line=0, end_column=1,
                                                            law_headings=[]), [],
                                                            temp_plafond_suppression_d823_16_1,
                                                            temp_plafond_suppression_d823_16)
    except EmptyError:
        temp_plafond_suppression_d823_16_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=550, start_column=11,
                                             end_line=550, end_column=38,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    plafond_suppression_d823_16 = temp_plafond_suppression_d823_16_2
    try:
        def temp_plafond_degressivite_d823_16(_:Unit):
            match_arg_438 = zone_2
            if match_arg_438.code == ZoneDHabitation_Code.Zone1:
                _ = match_arg_438.value
                return (plafond_loyer_d823_16_2 * decimal_of_string("3.4"))
            elif match_arg_438.code == ZoneDHabitation_Code.Zone2:
                _ = match_arg_438.value
                return (plafond_loyer_d823_16_2 * decimal_of_string("2.5"))
            elif match_arg_438.code == ZoneDHabitation_Code.Zone3:
                _ = match_arg_438.value
                return (plafond_loyer_d823_16_2 * decimal_of_string("2.5"))
        def temp_plafond_degressivite_d823_16_1(_:Unit):
            return (date_courante_11 >= date_of_numbers(2019,10,1))
        temp_plafond_degressivite_d823_16_2 = handle_default(SourcePosition(filename="",
                                                             start_line=0,
                                                             start_column=1,
                                                             end_line=0, end_column=1,
                                                             law_headings=[]), [],
                                                             temp_plafond_degressivite_d823_16_1,
                                                             temp_plafond_degressivite_d823_16)
    except EmptyError:
        temp_plafond_degressivite_d823_16_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=549, start_column=11,
                                             end_line=549, end_column=39,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    plafond_degressivite_d823_16 = temp_plafond_degressivite_d823_16_2
    try:
        if (loyer_principal_avec_reduction_meuble >
            plafond_loyer_d823_16_2):
            temp_loyer_eligible = plafond_loyer_d823_16_2
        else:
            temp_loyer_eligible = loyer_principal_avec_reduction_meuble
    except EmptyError:
        temp_loyer_eligible = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=542, start_column=11,
                                             end_line=542, end_column=25,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    loyer_eligible = temp_loyer_eligible
    try:
        temp___10 = (plafond_degressivite_d823_16 >=
            (plafond_loyer_d823_16_2 * decimal_of_string("2.5")))
    except EmptyError:
        temp___10 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=1816,
                                             start_column=13, end_line=1816,
                                             end_column=74,
                                             law_headings=["Article D823-16",
                                             "Sous-section 2 : Calcul de l'aide en secteur locatif",
                                             "Section 1 : Calcul, liquidation et versement des aides",
                                             "Chapitre III : Modalités de liquidation et de versement",
                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    if not (temp___10):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                              start_line=1816,
                                              start_column=13, end_line=1816,
                                              end_column=74,
                                              law_headings=["Article D823-16",
                                                           "Sous-section 2 : Calcul de l'aide en secteur locatif",
                                                           "Section 1 : Calcul, liquidation et versement des aides",
                                                           "Chapitre III : Modalités de liquidation et de versement",
                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie réglementaire",
                                                           "Code de la construction et de l'habitation"]))
    def temp_traitement_aide_finale_diminue(aide_finale_11:Money):
        try:
            try:
                def temp_traitement_aide_finale_diminue_1(_:Unit):
                    return aide_finale_11
                def temp_traitement_aide_finale_diminue_2(_:Unit):
                    return beneficiaire_aide_adulte_ou_enfant_handicapes
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_traitement_aide_finale_diminue_2,
                                      temp_traitement_aide_finale_diminue_1)
            except EmptyError:
                if (loyer_principal_avec_reduction_meuble >
                    plafond_suppression_d823_16):
                    return money_of_cents_string("0")
                else:
                    if (loyer_principal_avec_reduction_meuble >
                        plafond_degressivite_d823_16):
                        return (aide_finale_11 - (aide_finale_11 *
                            ((loyer_principal_avec_reduction_meuble -
                            plafond_degressivite_d823_16) /
                            (plafond_suppression_d823_16 -
                            plafond_degressivite_d823_16))))
                    else:
                        return aide_finale_11
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=573,
                                                 start_column=10,
                                                 end_line=573, end_column=17,
                                                 law_headings=["Secteur locatif",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_diminue = temp_traitement_aide_finale_diminue
    try:
        def temp_participation_minimale(_:Unit):
            raise EmptyError
        def temp_participation_minimale_1(_:Unit):
            return False
        def temp_participation_minimale_2(_:Unit):
            def temp_participation_minimale_3(_:Unit):
                if (((loyer_eligible + montant_forfaitaire_charges_d823_16) *
                    decimal_of_string("0.085")) >=
                    money_of_cents_string("3524")):
                    return ((loyer_eligible +
                        montant_forfaitaire_charges_d823_16) *
                        decimal_of_string("0.085"))
                else:
                    return money_of_cents_string("3524")
            def temp_participation_minimale_4(_:Unit):
                return ((date_courante_11 < date_of_numbers(2021,10,1)) and
                    (date_courante_11 >= date_of_numbers(2020,10,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_participation_minimale_4,
                                  temp_participation_minimale_3)
        def temp_participation_minimale_5(_:Unit):
            def temp_participation_minimale_6(_:Unit):
                if (((loyer_eligible + montant_forfaitaire_charges_d823_16) *
                    decimal_of_string("0.085")) >=
                    money_of_cents_string("3539")):
                    return ((loyer_eligible +
                        montant_forfaitaire_charges_d823_16) *
                        decimal_of_string("0.085"))
                else:
                    return money_of_cents_string("3539")
            def temp_participation_minimale_7(_:Unit):
                return ((date_courante_11 >= date_of_numbers(2021,10,1)) and
                    (date_courante_11 < date_of_numbers(2022,7,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_participation_minimale_7,
                                  temp_participation_minimale_6)
        def temp_participation_minimale_8(_:Unit):
            def temp_participation_minimale_9(_:Unit):
                if (((loyer_eligible + montant_forfaitaire_charges_d823_16) *
                    decimal_of_string("0.085")) >=
                    money_of_cents_string("3663")):
                    return ((loyer_eligible +
                        montant_forfaitaire_charges_d823_16) *
                        decimal_of_string("0.085"))
                else:
                    return money_of_cents_string("3663")
            def temp_participation_minimale_10(_:Unit):
                return (date_courante_11 >= date_of_numbers(2022,7,1))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_participation_minimale_10,
                                  temp_participation_minimale_9)
        temp_participation_minimale_11 = handle_default(SourcePosition(filename="",
                                                        start_line=0,
                                                        start_column=1,
                                                        end_line=0, end_column=1,
                                                        law_headings=[]), [temp_participation_minimale_8,
                                                        temp_participation_minimale_5,
                                                        temp_participation_minimale_2],
                                                        temp_participation_minimale_1,
                                                        temp_participation_minimale)
    except EmptyError:
        temp_participation_minimale_11 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=562, start_column=12,
                                             end_line=562, end_column=34,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    participation_minimale = temp_participation_minimale_11
    try:
        try:
            try:
                def temp_rapport_loyers(_:Unit):
                    return (decimal_round(((loyer_eligible /
                        loyer_reference) * decimal_of_string("100."))) /
                        decimal_of_string("100."))
                def temp_rapport_loyers_1(_:Unit):
                    return ((date_courante_11 >=
                        date_of_numbers(2020,10,1)) and (date_courante_11 <
                        date_of_numbers(2021,10,1)))
                temp_rapport_loyers_2 = handle_default(SourcePosition(filename="",
                                                       start_line=0,
                                                       start_column=1,
                                                       end_line=0, end_column=1,
                                                       law_headings=[]), [],
                                                       temp_rapport_loyers_1,
                                                       temp_rapport_loyers)
            except EmptyError:
                if ((date_courante_11 >= date_of_numbers(2021,10,1)) and
                    (date_courante_11 <
                    date_of_numbers(2022,7,1))):
                    temp_rapport_loyers_2 = (decimal_round(((loyer_eligible /
                        loyer_reference) * decimal_of_string("100."))) /
                        decimal_of_string("100."))
                else:
                    temp_rapport_loyers_2 = dead_value
                    raise EmptyError
        except EmptyError:
            if (date_courante_11 >=
                date_of_numbers(2022,7,1)):
                temp_rapport_loyers_2 = (decimal_round(((loyer_eligible /
                    loyer_reference) * decimal_of_string("100."))) /
                    decimal_of_string("100."))
            else:
                temp_rapport_loyers_2 = dead_value
                raise EmptyError
    except EmptyError:
        temp_rapport_loyers_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=546, start_column=11,
                                             end_line=546, end_column=25,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    rapport_loyers = temp_rapport_loyers_2
    def temp_traitement_aide_finale_minoration_forfaitaire_2(aide_finale_12:Money):
        try:
            if ((traitement_aide_finale_diminue(aide_finale_12) -
                montant_forfaitaire_d823_16) >=
                money_of_cents_string("0")):
                return (traitement_aide_finale_diminue(aide_finale_12) -
                    montant_forfaitaire_d823_16)
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=574,
                                                 start_column=10,
                                                 end_line=574, end_column=32,
                                                 law_headings=["Secteur locatif",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_minoration_forfaitaire_2 = temp_traitement_aide_finale_minoration_forfaitaire_2
    try:
        try:
            try:
                def temp_taux_loyer_eligible_formule(_:Unit):
                    if (rapport_loyers <
                        decimal_of_string("0.45")):
                        return decimal_of_string("0.")
                    else:
                        if ((rapport_loyers >= decimal_of_string("0.45")) and
                            (rapport_loyers <
                            decimal_of_string("0.75"))):
                            return (decimal_of_string("0.0045") *
                                (rapport_loyers -
                                decimal_of_string("0.0045")))
                        else:
                            if (rapport_loyers >=
                                decimal_of_string("0.75")):
                                return ((decimal_of_string("0.0045") *
                                    decimal_of_string("0.3")) +
                                    (decimal_of_string("0.0068") *
                                    (rapport_loyers -
                                    decimal_of_string("0.75"))))
                            else:
                                return decimal_of_string("0.")
                def temp_taux_loyer_eligible_formule_1(_:Unit):
                    return ((date_courante_11 >=
                        date_of_numbers(2020,10,1)) and (date_courante_11 <
                        date_of_numbers(2021,10,1)))
                temp_taux_loyer_eligible_formule_2 = handle_default(SourcePosition(filename="",
                                                                    start_line=0,
                                                                    start_column=1,
                                                                    end_line=0, end_column=1,
                                                                    law_headings=[]), [],
                                                                    temp_taux_loyer_eligible_formule_1,
                                                                    temp_taux_loyer_eligible_formule)
            except EmptyError:
                if ((date_courante_11 >= date_of_numbers(2021,10,1)) and
                    (date_courante_11 <
                    date_of_numbers(2022,7,1))):
                    if (rapport_loyers <
                        decimal_of_string("0.45")):
                        temp_taux_loyer_eligible_formule_2 = decimal_of_string("0.")
                    else:
                        if ((rapport_loyers >= decimal_of_string("0.45")) and
                            (rapport_loyers <
                            decimal_of_string("0.75"))):
                            temp_taux_loyer_eligible_formule_2 = (decimal_of_string("0.0045") *
                                (rapport_loyers -
                                decimal_of_string("0.0045")))
                        else:
                            if (rapport_loyers >=
                                decimal_of_string("0.75")):
                                temp_taux_loyer_eligible_formule_2 = ((decimal_of_string("0.0045") *
                                    decimal_of_string("0.3")) +
                                    (decimal_of_string("0.0068") *
                                    (rapport_loyers -
                                    decimal_of_string("0.75"))))
                            else:
                                temp_taux_loyer_eligible_formule_2 = decimal_of_string("0.")
                else:
                    temp_taux_loyer_eligible_formule_2 = dead_value
                    raise EmptyError
        except EmptyError:
            if (date_courante_11 >=
                date_of_numbers(2022,7,1)):
                if (rapport_loyers <
                    decimal_of_string("0.45")):
                    temp_taux_loyer_eligible_formule_2 = decimal_of_string("0.")
                else:
                    if ((rapport_loyers >= decimal_of_string("0.45")) and
                        (rapport_loyers <
                        decimal_of_string("0.75"))):
                        temp_taux_loyer_eligible_formule_2 = (decimal_of_string("0.0045") *
                            (rapport_loyers - decimal_of_string("0.0045")))
                    else:
                        if (rapport_loyers >=
                            decimal_of_string("0.75")):
                            temp_taux_loyer_eligible_formule_2 = ((decimal_of_string("0.0045") *
                                decimal_of_string("0.3")) +
                                (decimal_of_string("0.0068") *
                                (rapport_loyers -
                                decimal_of_string("0.75"))))
                        else:
                            temp_taux_loyer_eligible_formule_2 = decimal_of_string("0.")
            else:
                temp_taux_loyer_eligible_formule_2 = dead_value
                raise EmptyError
    except EmptyError:
        temp_taux_loyer_eligible_formule_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=544, start_column=10,
                                             end_line=544, end_column=17,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    taux_loyer_eligible_formule = temp_taux_loyer_eligible_formule_2
    def temp_traitement_aide_finale_contributions_sociales_arrondi_2(aide_finale_13:Money):
        try:
            if ((money_round(((traitement_aide_finale_minoration_forfaitaire_2(
                aide_finale_13) -
                contributions_sociales_dot_montant_2(traitement_aide_finale_minoration_forfaitaire_2(
                                                     aide_finale_13))) -
                money_of_cents_string("50"))) +
                contributions_sociales_dot_montant_2(traitement_aide_finale_minoration_forfaitaire_2(
                                                     aide_finale_13))) >=
                money_of_cents_string("0")):
                return (money_round(((traitement_aide_finale_minoration_forfaitaire_2(
                    aide_finale_13) -
                    contributions_sociales_dot_montant_2(traitement_aide_finale_minoration_forfaitaire_2(
                                                         aide_finale_13))) -
                    money_of_cents_string("50"))) +
                    contributions_sociales_dot_montant_2(traitement_aide_finale_minoration_forfaitaire_2(
                                                         aide_finale_13)))
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=575,
                                                 start_column=10,
                                                 end_line=575, end_column=40,
                                                 law_headings=["Secteur locatif",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_contributions_sociales_arrondi_2 = temp_traitement_aide_finale_contributions_sociales_arrondi_2
    try:
        try:
            try:
                def temp_taux_loyer_eligible_taux_arrondi(_:Unit):
                    return (decimal_round((taux_loyer_eligible_formule *
                        decimal_of_string("100000."))) /
                        decimal_of_string("100000."))
                def temp_taux_loyer_eligible_taux_arrondi_1(_:Unit):
                    return ((date_courante_11 >=
                        date_of_numbers(2020,10,1)) and (date_courante_11 <
                        date_of_numbers(2021,10,1)))
                temp_taux_loyer_eligible_taux_arrondi_2 = handle_default(
                    SourcePosition(filename="", start_line=0, start_column=1,
                    end_line=0, end_column=1, law_headings=[]), [],
                    temp_taux_loyer_eligible_taux_arrondi_1,
                    temp_taux_loyer_eligible_taux_arrondi)
            except EmptyError:
                if ((date_courante_11 >= date_of_numbers(2021,10,1)) and
                    (date_courante_11 <
                    date_of_numbers(2022,7,1))):
                    temp_taux_loyer_eligible_taux_arrondi_2 = (decimal_round((taux_loyer_eligible_formule *
                        decimal_of_string("100000."))) /
                        decimal_of_string("100000."))
                else:
                    temp_taux_loyer_eligible_taux_arrondi_2 = dead_value
                    raise EmptyError
        except EmptyError:
            if (date_courante_11 >=
                date_of_numbers(2022,7,1)):
                temp_taux_loyer_eligible_taux_arrondi_2 = (decimal_round((taux_loyer_eligible_formule *
                    decimal_of_string("100000."))) /
                    decimal_of_string("100000."))
            else:
                temp_taux_loyer_eligible_taux_arrondi_2 = dead_value
                raise EmptyError
    except EmptyError:
        temp_taux_loyer_eligible_taux_arrondi_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=545, start_column=10,
                                             end_line=545, end_column=22,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    taux_loyer_eligible_taux_arrondi = temp_taux_loyer_eligible_taux_arrondi_2
    def temp_traitement_aide_finale_reduction_loyer_solidarite(aide_finale_14:Money):
        try:
            if ((traitement_aide_finale_contributions_sociales_arrondi_2(
                aide_finale_14) - (reduction_loyer_solidarite *
                fraction_l832_3)) >=
                money_of_cents_string("0")):
                return (traitement_aide_finale_contributions_sociales_arrondi_2(
                    aide_finale_14) - (reduction_loyer_solidarite *
                    fraction_l832_3))
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=576,
                                                 start_column=10,
                                                 end_line=576, end_column=36,
                                                 law_headings=["Secteur locatif",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_reduction_loyer_solidarite = temp_traitement_aide_finale_reduction_loyer_solidarite
    try:
        temp_taux_prise_compte_ressources = (taux_composition_familiale +
            taux_loyer_eligible_taux_arrondi)
    except EmptyError:
        temp_taux_prise_compte_ressources = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=554, start_column=11,
                                             end_line=554, end_column=39,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    taux_prise_compte_ressources = temp_taux_prise_compte_ressources
    def temp_traitement_aide_finale_montee_en_charge_saint_pierre_miquelon(aide_finale_15:Money):
        try:
            return montee_en_charge_saint_pierre_miquelon(traitement_aide_finale_reduction_loyer_solidarite(
                                                          aide_finale_15),
                                                          residence_5,
                                                          date_courante_11)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=583,
                                                 start_column=10,
                                                 end_line=583, end_column=48,
                                                 law_headings=["Secteur locatif",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_montee_en_charge_saint_pierre_miquelon = temp_traitement_aide_finale_montee_en_charge_saint_pierre_miquelon
    try:
        if (((ressources_menage_arrondies_3 -
            abattement_forfaitaire_d823_17) * taux_prise_compte_ressources) <
            money_of_cents_string("0")):
            temp_participation_personnelle = money_of_cents_string("0")
        else:
            temp_participation_personnelle = ((ressources_menage_arrondies_3 -
                abattement_forfaitaire_d823_17) *
                taux_prise_compte_ressources)
        temp_participation_personnelle_1 = (participation_minimale +
            temp_participation_personnelle)
    except EmptyError:
        temp_participation_personnelle_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=564, start_column=12,
                                             end_line=564, end_column=37,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    participation_personnelle = temp_participation_personnelle_1
    def temp_traitement_aide_finale_montant_minimal_2(aide_finale_16:Money):
        try:
            if (traitement_aide_finale_montee_en_charge_saint_pierre_miquelon(
                aide_finale_16) <
                montant_minimal_aide_d823_16):
                return money_of_cents_string("0")
            else:
                return traitement_aide_finale_montee_en_charge_saint_pierre_miquelon(
                    aide_finale_16)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=584,
                                                 start_column=10,
                                                 end_line=584, end_column=25,
                                                 law_headings=["Secteur locatif",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_montant_minimal_2 = temp_traitement_aide_finale_montant_minimal_2
    try:
        if (((loyer_eligible + montant_forfaitaire_charges_d823_16) -
            participation_personnelle) <
            money_of_cents_string("0")):
            temp_aide_finale_formule_2 = money_of_cents_string("0")
        else:
            temp_aide_finale_formule_2 = ((loyer_eligible +
                montant_forfaitaire_charges_d823_16) -
                participation_personnelle)
    except EmptyError:
        temp_aide_finale_formule_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=569, start_column=12,
                                             end_line=569, end_column=31,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    aide_finale_formule_2 = temp_aide_finale_formule_2
    return CalculAidePersonnaliseeLogementLocatif(montant_forfaitaire_charges_d823_16 = montant_forfaitaire_charges_d823_16,
        plafond_loyer_d823_16_2 = plafond_loyer_d823_16_2,
        participation_minimale = participation_minimale,
        taux_composition_familiale = taux_composition_familiale,
        participation_personnelle = participation_personnelle,
        aide_finale_formule = aide_finale_formule_2,
        traitement_aide_finale = traitement_aide_finale_montant_minimal_2)

def calcul_allocation_logement_foyer(calcul_allocation_logement_foyer_in:CalculAllocationLogementFoyerIn):
    type_logement_foyer_1 = calcul_allocation_logement_foyer_in.type_logement_foyer_in
    logement_foyer_jeunes_travailleurs_1 = calcul_allocation_logement_foyer_in.logement_foyer_jeunes_travailleurs_in
    date_conventionnement_1 = calcul_allocation_logement_foyer_in.date_conventionnement_in
    residence_6 = calcul_allocation_logement_foyer_in.residence_in
    redevance_1 = calcul_allocation_logement_foyer_in.redevance_in
    ressources_menage_arrondies_4 = calcul_allocation_logement_foyer_in.ressources_menage_arrondies_in
    nombre_personnes_a_charge_5 = calcul_allocation_logement_foyer_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_5 = calcul_allocation_logement_foyer_in.situation_familiale_calcul_apl_in
    zone_3 = calcul_allocation_logement_foyer_in.zone_in
    date_courante_12 = calcul_allocation_logement_foyer_in.date_courante_in
    categorie_equivalence_loyer_d842_16 = calcul_allocation_logement_foyer_in.categorie_equivalence_loyer_d842_16_in
    try:
        temp___11 = (date_courante_12 >= date_of_numbers(2021,10,1))
    except EmptyError:
        temp___11 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1049,
                                             start_column=13, end_line=1049,
                                             end_column=42,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    if not (temp___11):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                              start_line=1049,
                                              start_column=13, end_line=1049,
                                              end_column=42,
                                              law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    try:
        temp_contributions_sociales_dot_date_courante_3 = date_courante_12
    except EmptyError:
        temp_contributions_sociales_dot_date_courante_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1043,
                                             start_column=14, end_line=1043,
                                             end_column=50,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    contributions_sociales_dot_date_courante_3 = temp_contributions_sociales_dot_date_courante_3
    try:
        temp_contributions_sociales_dot_lieu_3 = residence_6
    except EmptyError:
        temp_contributions_sociales_dot_lieu_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1044,
                                             start_column=14, end_line=1044,
                                             end_column=41,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    contributions_sociales_dot_lieu_3 = temp_contributions_sociales_dot_lieu_3
    result_8 = contributions_sociales_aides_personnelle_logement(ContributionsSocialesAidesPersonnelleLogementIn(date_courante_in = contributions_sociales_dot_date_courante_3,
                                                                 lieu_in = contributions_sociales_dot_lieu_3))
    contributions_sociales_dot_montant_3 = result_8.montant
    try:
        temp_calcul_apl_logement_foyer_dot_residence = residence_6
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_residence = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1024,
                                             start_column=14, end_line=1024,
                                             end_column=49,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_residence = temp_calcul_apl_logement_foyer_dot_residence
    try:
        temp_calcul_apl_logement_foyer_dot_logement_foyer_jeunes_travailleurs = logement_foyer_jeunes_travailleurs_1
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_logement_foyer_jeunes_travailleurs = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1028,
                                             start_column=14, end_line=1028,
                                             end_column=74,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_logement_foyer_jeunes_travailleurs = temp_calcul_apl_logement_foyer_dot_logement_foyer_jeunes_travailleurs
    try:
        temp_calcul_apl_logement_foyer_dot_type_logement_foyer = type_logement_foyer_1
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_type_logement_foyer = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1026,
                                             start_column=14, end_line=1026,
                                             end_column=59,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_type_logement_foyer = temp_calcul_apl_logement_foyer_dot_type_logement_foyer
    try:
        temp_calcul_apl_logement_foyer_dot_date_conventionnement = date_conventionnement_1
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_date_conventionnement = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1030,
                                             start_column=14, end_line=1030,
                                             end_column=61,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_date_conventionnement = temp_calcul_apl_logement_foyer_dot_date_conventionnement
    try:
        temp_calcul_apl_logement_foyer_dot_ressources_menage_arrondies = ressources_menage_arrondies_4
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_ressources_menage_arrondies = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1034,
                                             start_column=14, end_line=1034,
                                             end_column=67,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_ressources_menage_arrondies = temp_calcul_apl_logement_foyer_dot_ressources_menage_arrondies
    try:
        temp_calcul_apl_logement_foyer_dot_nombre_personnes_a_charge = nombre_personnes_a_charge_5
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_nombre_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1036,
                                             start_column=14, end_line=1036,
                                             end_column=65,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_nombre_personnes_a_charge = temp_calcul_apl_logement_foyer_dot_nombre_personnes_a_charge
    try:
        temp_calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl = situation_familiale_calcul_apl_5
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1038,
                                             start_column=14, end_line=1038,
                                             end_column=70,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl = temp_calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl
    try:
        temp_calcul_apl_logement_foyer_dot_zone = zone_3
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_zone = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1040,
                                             start_column=14, end_line=1040,
                                             end_column=44,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_zone = temp_calcul_apl_logement_foyer_dot_zone
    try:
        temp_calcul_apl_logement_foyer_dot_date_courante = date_courante_12
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1041,
                                             start_column=14, end_line=1041,
                                             end_column=53,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_date_courante = temp_calcul_apl_logement_foyer_dot_date_courante
    try:
        temp_calcul_apl_logement_foyer_dot_redevance = redevance_1
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_redevance = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1032,
                                             start_column=14, end_line=1032,
                                             end_column=49,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_redevance = temp_calcul_apl_logement_foyer_dot_redevance
    def temp_calcul_apl_logement_foyer_dot_condition_2_du_832_25(_:Unit):
        return True
    calcul_apl_logement_foyer_dot_condition_2_du_832_25 = temp_calcul_apl_logement_foyer_dot_condition_2_du_832_25
    def temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge(_:Unit):
        def temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_1(_:Unit):
            return True
        def temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_2(_:Unit):
            match_arg_439 = residence_6
            if match_arg_439.code == Collectivite_Code.Guadeloupe:
                _ = match_arg_439.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_3 = True
            elif match_arg_439.code == Collectivite_Code.Guyane:
                _ = match_arg_439.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_3 = True
            elif match_arg_439.code == Collectivite_Code.Martinique:
                _ = match_arg_439.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_3 = True
            elif match_arg_439.code == Collectivite_Code.LaReunion:
                _ = match_arg_439.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_3 = True
            elif match_arg_439.code == Collectivite_Code.SaintBarthelemy:
                _ = match_arg_439.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_3 = False
            elif match_arg_439.code == Collectivite_Code.SaintMartin:
                _ = match_arg_439.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_3 = False
            elif match_arg_439.code == Collectivite_Code.Metropole:
                _ = match_arg_439.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_3 = False
            elif match_arg_439.code == Collectivite_Code.SaintPierreEtMiquelon:
                _ = match_arg_439.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_3 = False
            elif match_arg_439.code == Collectivite_Code.Mayotte:
                _ = match_arg_439.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_3 = True
            return (((date_courante_12 >= date_of_numbers(2019,9,1)) and
                (date_courante_12 < date_of_numbers(2023,4,5))) and
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_3)
        return handle_default(SourcePosition(filename="", start_line=0,
                              start_column=1, end_line=0, end_column=1,
                              law_headings=[]), [],
                              temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_2,
                              temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_1)
    calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge = temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge
    def temp_calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25(_:Unit):
        raise EmptyError
    calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25 = temp_calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25
    result_9 = calcul_aide_personnalisee_logement_foyer(CalculAidePersonnaliseeLogementFoyerIn(residence_in = calcul_apl_logement_foyer_dot_residence,
                                                        logement_foyer_jeunes_travailleurs_in = calcul_apl_logement_foyer_dot_logement_foyer_jeunes_travailleurs,
                                                        type_logement_foyer_in = calcul_apl_logement_foyer_dot_type_logement_foyer,
                                                        date_conventionnement_in = calcul_apl_logement_foyer_dot_date_conventionnement,
                                                        ressources_menage_arrondies_in = calcul_apl_logement_foyer_dot_ressources_menage_arrondies,
                                                        nombre_personnes_a_charge_in = calcul_apl_logement_foyer_dot_nombre_personnes_a_charge,
                                                        situation_familiale_calcul_apl_in = calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl,
                                                        zone_in = calcul_apl_logement_foyer_dot_zone,
                                                        date_courante_in = calcul_apl_logement_foyer_dot_date_courante,
                                                        redevance_in = calcul_apl_logement_foyer_dot_redevance,
                                                        condition_2_du_832_25_in = calcul_apl_logement_foyer_dot_condition_2_du_832_25,
                                                        limitation_majoration_personnes_a_charge_in = calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge,
                                                        n_nombre_parts_d832_25_in = calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25))
    calcul_apl_logement_foyer_dot_coefficient_multiplicateur_d832_25 = result_9.coefficient_multiplicateur_d832_25
    calcul_apl_logement_foyer_dot_coefficient_r_d832_25 = result_9.coefficient_r_d832_25
    calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_1 = result_9.n_nombre_parts_d832_25
    calcul_apl_logement_foyer_dot_equivalence_loyer_eligible = result_9.equivalence_loyer_eligible
    calcul_apl_logement_foyer_dot_plafond_equivalence_loyer_eligible = result_9.plafond_equivalence_loyer_eligible
    calcul_apl_logement_foyer_dot_equivalence_loyer_minimale = result_9.equivalence_loyer_minimale
    calcul_apl_logement_foyer_dot_coefficient_prise_en_charge_d832_25_seuil = result_9.coefficient_prise_en_charge_d832_25
    calcul_apl_logement_foyer_dot_aide_finale_formule = result_9.aide_finale_formule
    calcul_apl_logement_foyer_dot_traitement_aide_finale_montant_minimal = result_9.traitement_aide_finale
    try:
        temp_calcul_nombre_parts_dot_date_courante_1 = date_courante_12
    except EmptyError:
        temp_calcul_nombre_parts_dot_date_courante_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4817,
                                             start_column=14, end_line=4817,
                                             end_column=47,
                                             law_headings=["Article D842-15",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_nombre_parts_dot_date_courante_1 = temp_calcul_nombre_parts_dot_date_courante_1
    try:
        temp_calcul_nombre_parts_dot_condition_2_du_832_25_1 = True
    except EmptyError:
        temp_calcul_nombre_parts_dot_condition_2_du_832_25_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4816,
                                             start_column=14, end_line=4816,
                                             end_column=55,
                                             law_headings=["Article D842-15",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_nombre_parts_dot_condition_2_du_832_25_1 = temp_calcul_nombre_parts_dot_condition_2_du_832_25_1
    try:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_2 = nombre_personnes_a_charge_5
    except EmptyError:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4812,
                                             start_column=14, end_line=4812,
                                             end_column=59,
                                             law_headings=["Article D842-15",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_nombre_parts_dot_nombre_personnes_a_charge_2 = temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_2
    try:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_2 = situation_familiale_calcul_apl_5
    except EmptyError:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4814,
                                             start_column=14, end_line=4814,
                                             end_column=64,
                                             law_headings=["Article D842-15",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_nombre_parts_dot_situation_familiale_calcul_apl_2 = temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_2
    def temp_calcul_nombre_parts_dot_limitation_majoration_personnes_a_charge_3(_:Unit):
        raise EmptyError
    calcul_nombre_parts_dot_limitation_majoration_personnes_a_charge_1 = temp_calcul_nombre_parts_dot_limitation_majoration_personnes_a_charge_3
    result_10 = calcul_nombre_part_logement_foyer(CalculNombrePartLogementFoyerIn(date_courante_in = calcul_nombre_parts_dot_date_courante_1,
                                                  condition_2_du_832_25_in = calcul_nombre_parts_dot_condition_2_du_832_25_1,
                                                  nombre_personnes_a_charge_in = calcul_nombre_parts_dot_nombre_personnes_a_charge_2,
                                                  situation_familiale_calcul_apl_in = calcul_nombre_parts_dot_situation_familiale_calcul_apl_2,
                                                  limitation_majoration_personnes_a_charge_in = calcul_nombre_parts_dot_limitation_majoration_personnes_a_charge_1))
    calcul_nombre_parts_dot_n_nombre_parts_d832_25_1 = result_10.n_nombre_parts_d832_25
    try:
        try:
            try:
                try:
                    try:
                        try:
                            def temp_multiplicateur_majoration_charges(_:Unit):
                                return decimal_of_string("6.")
                            def temp_multiplicateur_majoration_charges_1(_:Unit):
                                match_arg_440 = residence_6
                                if match_arg_440.code == Collectivite_Code.Guadeloupe:
                                    _ = match_arg_440.value
                                    temp_multiplicateur_majoration_charges_2 = True
                                elif match_arg_440.code == Collectivite_Code.Guyane:
                                    _ = match_arg_440.value
                                    temp_multiplicateur_majoration_charges_2 = False
                                elif match_arg_440.code == Collectivite_Code.Martinique:
                                    _ = match_arg_440.value
                                    temp_multiplicateur_majoration_charges_2 = True
                                elif match_arg_440.code == Collectivite_Code.LaReunion:
                                    _ = match_arg_440.value
                                    temp_multiplicateur_majoration_charges_2 = True
                                elif match_arg_440.code == Collectivite_Code.SaintBarthelemy:
                                    _ = match_arg_440.value
                                    temp_multiplicateur_majoration_charges_2 = True
                                elif match_arg_440.code == Collectivite_Code.SaintMartin:
                                    _ = match_arg_440.value
                                    temp_multiplicateur_majoration_charges_2 = True
                                elif match_arg_440.code == Collectivite_Code.Metropole:
                                    _ = match_arg_440.value
                                    temp_multiplicateur_majoration_charges_2 = False
                                elif match_arg_440.code == Collectivite_Code.SaintPierreEtMiquelon:
                                    _ = match_arg_440.value
                                    temp_multiplicateur_majoration_charges_2 = False
                                elif match_arg_440.code == Collectivite_Code.Mayotte:
                                    _ = match_arg_440.value
                                    temp_multiplicateur_majoration_charges_2 = True
                                return (((date_courante_12 >=
                                    date_of_numbers(2020,1,1)) and
                                    (date_courante_12 <
                                    date_of_numbers(2020,10,1))) and
                                    (temp_multiplicateur_majoration_charges_2 and
                                    (nombre_personnes_a_charge_5 >=
                                    integer_of_string("6"))))
                            temp_multiplicateur_majoration_charges_3 = handle_default(
                                SourcePosition(filename="", start_line=0,
                                start_column=1, end_line=0, end_column=1,
                                law_headings=[]), [],
                                temp_multiplicateur_majoration_charges_1,
                                temp_multiplicateur_majoration_charges)
                        except EmptyError:
                            match_arg_441 = residence_6
                            if match_arg_441.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_441.value
                                temp_multiplicateur_majoration_charges_4 = True
                            elif match_arg_441.code == Collectivite_Code.Guyane:
                                _ = match_arg_441.value
                                temp_multiplicateur_majoration_charges_4 = False
                            elif match_arg_441.code == Collectivite_Code.Martinique:
                                _ = match_arg_441.value
                                temp_multiplicateur_majoration_charges_4 = True
                            elif match_arg_441.code == Collectivite_Code.LaReunion:
                                _ = match_arg_441.value
                                temp_multiplicateur_majoration_charges_4 = True
                            elif match_arg_441.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_441.value
                                temp_multiplicateur_majoration_charges_4 = True
                            elif match_arg_441.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_441.value
                                temp_multiplicateur_majoration_charges_4 = True
                            elif match_arg_441.code == Collectivite_Code.Metropole:
                                _ = match_arg_441.value
                                temp_multiplicateur_majoration_charges_4 = False
                            elif match_arg_441.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_441.value
                                temp_multiplicateur_majoration_charges_4 = False
                            elif match_arg_441.code == Collectivite_Code.Mayotte:
                                _ = match_arg_441.value
                                temp_multiplicateur_majoration_charges_4 = True
                            if (((date_courante_12 >=
                                date_of_numbers(2020,10,1)) and
                                (date_courante_12 <
                                date_of_numbers(2021,10,1))) and
                                (temp_multiplicateur_majoration_charges_4 and
                                (nombre_personnes_a_charge_5 >=
                                integer_of_string("6")))):
                                temp_multiplicateur_majoration_charges_3 = decimal_of_string("6.")
                            else:
                                temp_multiplicateur_majoration_charges_3 = dead_value
                                raise EmptyError
                    except EmptyError:
                        match_arg_442 = residence_6
                        if match_arg_442.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_442.value
                            temp_multiplicateur_majoration_charges_5 = True
                        elif match_arg_442.code == Collectivite_Code.Guyane:
                            _ = match_arg_442.value
                            temp_multiplicateur_majoration_charges_5 = False
                        elif match_arg_442.code == Collectivite_Code.Martinique:
                            _ = match_arg_442.value
                            temp_multiplicateur_majoration_charges_5 = True
                        elif match_arg_442.code == Collectivite_Code.LaReunion:
                            _ = match_arg_442.value
                            temp_multiplicateur_majoration_charges_5 = True
                        elif match_arg_442.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_442.value
                            temp_multiplicateur_majoration_charges_5 = True
                        elif match_arg_442.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_442.value
                            temp_multiplicateur_majoration_charges_5 = True
                        elif match_arg_442.code == Collectivite_Code.Metropole:
                            _ = match_arg_442.value
                            temp_multiplicateur_majoration_charges_5 = False
                        elif match_arg_442.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_442.value
                            temp_multiplicateur_majoration_charges_5 = False
                        elif match_arg_442.code == Collectivite_Code.Mayotte:
                            _ = match_arg_442.value
                            temp_multiplicateur_majoration_charges_5 = True
                        if (((date_courante_12 >=
                            date_of_numbers(2021,10,1)) and
                            (date_courante_12 <
                            date_of_numbers(2022,1,1))) and
                            (temp_multiplicateur_majoration_charges_5 and
                            (nombre_personnes_a_charge_5 >=
                            integer_of_string("6")))):
                            temp_multiplicateur_majoration_charges_3 = decimal_of_string("6.")
                        else:
                            temp_multiplicateur_majoration_charges_3 = dead_value
                            raise EmptyError
                except EmptyError:
                    match_arg_443 = residence_6
                    if match_arg_443.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_443.value
                        temp_multiplicateur_majoration_charges_6 = True
                    elif match_arg_443.code == Collectivite_Code.Guyane:
                        _ = match_arg_443.value
                        temp_multiplicateur_majoration_charges_6 = False
                    elif match_arg_443.code == Collectivite_Code.Martinique:
                        _ = match_arg_443.value
                        temp_multiplicateur_majoration_charges_6 = True
                    elif match_arg_443.code == Collectivite_Code.LaReunion:
                        _ = match_arg_443.value
                        temp_multiplicateur_majoration_charges_6 = True
                    elif match_arg_443.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_443.value
                        temp_multiplicateur_majoration_charges_6 = True
                    elif match_arg_443.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_443.value
                        temp_multiplicateur_majoration_charges_6 = True
                    elif match_arg_443.code == Collectivite_Code.Metropole:
                        _ = match_arg_443.value
                        temp_multiplicateur_majoration_charges_6 = False
                    elif match_arg_443.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_443.value
                        temp_multiplicateur_majoration_charges_6 = False
                    elif match_arg_443.code == Collectivite_Code.Mayotte:
                        _ = match_arg_443.value
                        temp_multiplicateur_majoration_charges_6 = True
                    if (((date_courante_12 >= date_of_numbers(2022,1,1)) and
                        (date_courante_12 < date_of_numbers(2022,7,1))) and
                        (temp_multiplicateur_majoration_charges_6 and
                        (nombre_personnes_a_charge_5 >=
                        integer_of_string("6")))):
                        temp_multiplicateur_majoration_charges_3 = decimal_of_string("6.")
                    else:
                        temp_multiplicateur_majoration_charges_3 = dead_value
                        raise EmptyError
            except EmptyError:
                match_arg_444 = residence_6
                if match_arg_444.code == Collectivite_Code.Guadeloupe:
                    _ = match_arg_444.value
                    temp_multiplicateur_majoration_charges_7 = True
                elif match_arg_444.code == Collectivite_Code.Guyane:
                    _ = match_arg_444.value
                    temp_multiplicateur_majoration_charges_7 = False
                elif match_arg_444.code == Collectivite_Code.Martinique:
                    _ = match_arg_444.value
                    temp_multiplicateur_majoration_charges_7 = True
                elif match_arg_444.code == Collectivite_Code.LaReunion:
                    _ = match_arg_444.value
                    temp_multiplicateur_majoration_charges_7 = True
                elif match_arg_444.code == Collectivite_Code.SaintBarthelemy:
                    _ = match_arg_444.value
                    temp_multiplicateur_majoration_charges_7 = True
                elif match_arg_444.code == Collectivite_Code.SaintMartin:
                    _ = match_arg_444.value
                    temp_multiplicateur_majoration_charges_7 = True
                elif match_arg_444.code == Collectivite_Code.Metropole:
                    _ = match_arg_444.value
                    temp_multiplicateur_majoration_charges_7 = False
                elif match_arg_444.code == Collectivite_Code.SaintPierreEtMiquelon:
                    _ = match_arg_444.value
                    temp_multiplicateur_majoration_charges_7 = False
                elif match_arg_444.code == Collectivite_Code.Mayotte:
                    _ = match_arg_444.value
                    temp_multiplicateur_majoration_charges_7 = True
                if (((date_courante_12 >= date_of_numbers(2022,7,1)) and
                    (date_courante_12 < date_of_numbers(2023,1,1))) and
                    (temp_multiplicateur_majoration_charges_7 and
                    (nombre_personnes_a_charge_5 >=
                    integer_of_string("6")))):
                    temp_multiplicateur_majoration_charges_3 = decimal_of_string("6.")
                else:
                    temp_multiplicateur_majoration_charges_3 = dead_value
                    raise EmptyError
        except EmptyError:
            try:
                def temp_multiplicateur_majoration_charges_8(_:Unit):
                    return decimal_of_integer(nombre_personnes_a_charge_5)
                def temp_multiplicateur_majoration_charges_9(_:Unit):
                    return ((date_courante_12 >=
                        date_of_numbers(2021,10,1)) and (date_courante_12 <
                        date_of_numbers(2022,7,1)))
                temp_multiplicateur_majoration_charges_3 = handle_default(
                    SourcePosition(filename="", start_line=0, start_column=1,
                    end_line=0, end_column=1, law_headings=[]), [],
                    temp_multiplicateur_majoration_charges_9,
                    temp_multiplicateur_majoration_charges_8)
            except EmptyError:
                if (date_courante_12 >=
                    date_of_numbers(2022,7,1)):
                    temp_multiplicateur_majoration_charges_3 = decimal_of_integer(nombre_personnes_a_charge_5)
                else:
                    temp_multiplicateur_majoration_charges_3 = dead_value
                    raise EmptyError
    except EmptyError:
        temp_multiplicateur_majoration_charges_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=993, start_column=11,
                                             end_line=993, end_column=44,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    multiplicateur_majoration_charges = temp_multiplicateur_majoration_charges_3
    try:
        def temp_montant_minimal_depense_nette_d842_17(_:Unit):
            return money_of_cents_string("1500")
        def temp_montant_minimal_depense_nette_d842_17_1(_:Unit):
            return (date_courante_12 >= date_of_numbers(2019,10,1))
        temp_montant_minimal_depense_nette_d842_17_2 = handle_default(
            SourcePosition(filename="", start_line=0, start_column=1,
            end_line=0, end_column=1, law_headings=[]), [],
            temp_montant_minimal_depense_nette_d842_17_1,
            temp_montant_minimal_depense_nette_d842_17)
    except EmptyError:
        temp_montant_minimal_depense_nette_d842_17_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=992, start_column=11,
                                             end_line=992, end_column=48,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    montant_minimal_depense_nette_d842_17 = temp_montant_minimal_depense_nette_d842_17_2
    try:
        def temp_montant_forfaitaire_d842_15(_:Unit):
            return money_of_cents_string("500")
        def temp_montant_forfaitaire_d842_15_1(_:Unit):
            return (date_courante_12 >= date_of_numbers(2019,10,1))
        temp_montant_forfaitaire_d842_15_2 = handle_default(SourcePosition(filename="",
                                                            start_line=0,
                                                            start_column=1,
                                                            end_line=0, end_column=1,
                                                            law_headings=[]), [],
                                                            temp_montant_forfaitaire_d842_15_1,
                                                            temp_montant_forfaitaire_d842_15)
    except EmptyError:
        temp_montant_forfaitaire_d842_15_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=991, start_column=11,
                                             end_line=991, end_column=38,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_d842_15 = temp_montant_forfaitaire_d842_15_2
    try:
        def temp_montant_minimal_aide_d842_15(_:Unit):
            return money_of_cents_string("1000")
        def temp_montant_minimal_aide_d842_15_1(_:Unit):
            return (date_courante_12 >= date_of_numbers(2019,10,1))
        temp_montant_minimal_aide_d842_15_2 = handle_default(SourcePosition(filename="",
                                                             start_line=0,
                                                             start_column=1,
                                                             end_line=0, end_column=1,
                                                             law_headings=[]), [],
                                                             temp_montant_minimal_aide_d842_15_1,
                                                             temp_montant_minimal_aide_d842_15)
    except EmptyError:
        temp_montant_minimal_aide_d842_15_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=990, start_column=11,
                                             end_line=990, end_column=39,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    montant_minimal_aide_d842_15 = temp_montant_minimal_aide_d842_15_2
    try:
        def temp_equivalence_loyer(_:Unit):
            raise EmptyError
        def temp_equivalence_loyer_1(_:Unit):
            return False
        def temp_equivalence_loyer_2(_:Unit):
            try:
                def temp_equivalence_loyer_3(_:Unit):
                    match_arg_445 = situation_familiale_calcul_apl_5
                    if match_arg_445.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_445.value
                        return money_of_cents_string("16941")
                    elif match_arg_445.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_445.value
                        return money_of_cents_string("26329")
                def temp_equivalence_loyer_4(_:Unit):
                    match_arg_446 = categorie_equivalence_loyer_d842_16
                    if match_arg_446.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUS:
                        _ = match_arg_446.value
                        temp_equivalence_loyer_5 = False
                    elif match_arg_446.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUSRehabilitee:
                        _ = match_arg_446.value
                        temp_equivalence_loyer_5 = False
                    elif match_arg_446.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                        _ = match_arg_446.value
                        temp_equivalence_loyer_5 = False
                    elif match_arg_446.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                        _ = match_arg_446.value
                        temp_equivalence_loyer_5 = True
                    return (((date_courante_12 >=
                        date_of_numbers(2020,10,1)) and (date_courante_12 <
                        date_of_numbers(2021,10,1))) and
                        temp_equivalence_loyer_5)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_equivalence_loyer_4,
                                      temp_equivalence_loyer_3)
            except EmptyError:
                match_arg_447 = categorie_equivalence_loyer_d842_16
                if match_arg_447.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUS:
                    _ = match_arg_447.value
                    temp_equivalence_loyer_6 = False
                elif match_arg_447.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUSRehabilitee:
                    _ = match_arg_447.value
                    temp_equivalence_loyer_6 = True
                elif match_arg_447.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                    _ = match_arg_447.value
                    temp_equivalence_loyer_6 = False
                elif match_arg_447.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                    _ = match_arg_447.value
                    temp_equivalence_loyer_6 = False
                if (((date_courante_12 >= date_of_numbers(2020,10,1)) and
                    (date_courante_12 < date_of_numbers(2021,10,1))) and
                    temp_equivalence_loyer_6):
                    match_arg_448 = situation_familiale_calcul_apl_5
                    if match_arg_448.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_448.value
                        return money_of_cents_string("16941")
                    elif match_arg_448.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_448.value
                        return money_of_cents_string("26329")
                else:
                    raise EmptyError
        def temp_equivalence_loyer_7(_:Unit):
            def temp_equivalence_loyer_8(_:Unit):
                match_arg_449 = situation_familiale_calcul_apl_5
                if match_arg_449.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_449.value
                    return money_of_cents_string("20554")
                elif match_arg_449.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_449.value
                    return money_of_cents_string("31939")
            def temp_equivalence_loyer_9(_:Unit):
                match_arg_450 = categorie_equivalence_loyer_d842_16
                if match_arg_450.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUS:
                    _ = match_arg_450.value
                    temp_equivalence_loyer_10 = False
                elif match_arg_450.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUSRehabilitee:
                    _ = match_arg_450.value
                    temp_equivalence_loyer_10 = False
                elif match_arg_450.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                    _ = match_arg_450.value
                    temp_equivalence_loyer_10 = True
                elif match_arg_450.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                    _ = match_arg_450.value
                    temp_equivalence_loyer_10 = False
                return (((date_courante_12 >= date_of_numbers(2020,10,1)) and
                    (date_courante_12 < date_of_numbers(2021,10,1))) and
                    temp_equivalence_loyer_10)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_equivalence_loyer_9,
                                  temp_equivalence_loyer_8)
        def temp_equivalence_loyer_11(_:Unit):
            def temp_equivalence_loyer_12(_:Unit):
                match_arg_451 = situation_familiale_calcul_apl_5
                if match_arg_451.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_451.value
                    return money_of_cents_string("8379")
                elif match_arg_451.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_451.value
                    return money_of_cents_string("13045")
            def temp_equivalence_loyer_13(_:Unit):
                match_arg_452 = categorie_equivalence_loyer_d842_16
                if match_arg_452.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUS:
                    _ = match_arg_452.value
                    temp_equivalence_loyer_14 = True
                elif match_arg_452.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUSRehabilitee:
                    _ = match_arg_452.value
                    temp_equivalence_loyer_14 = False
                elif match_arg_452.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                    _ = match_arg_452.value
                    temp_equivalence_loyer_14 = False
                elif match_arg_452.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                    _ = match_arg_452.value
                    temp_equivalence_loyer_14 = False
                return (((date_courante_12 >= date_of_numbers(2020,10,1)) and
                    (date_courante_12 < date_of_numbers(2021,10,1))) and
                    temp_equivalence_loyer_14)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_equivalence_loyer_13,
                                  temp_equivalence_loyer_12)
        def temp_equivalence_loyer_15(_:Unit):
            try:
                def temp_equivalence_loyer_16(_:Unit):
                    match_arg_453 = situation_familiale_calcul_apl_5
                    if match_arg_453.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_453.value
                        return money_of_cents_string("17012")
                    elif match_arg_453.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_453.value
                        return money_of_cents_string("26440")
                def temp_equivalence_loyer_17(_:Unit):
                    match_arg_454 = categorie_equivalence_loyer_d842_16
                    if match_arg_454.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUS:
                        _ = match_arg_454.value
                        temp_equivalence_loyer_18 = False
                    elif match_arg_454.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUSRehabilitee:
                        _ = match_arg_454.value
                        temp_equivalence_loyer_18 = False
                    elif match_arg_454.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                        _ = match_arg_454.value
                        temp_equivalence_loyer_18 = False
                    elif match_arg_454.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                        _ = match_arg_454.value
                        temp_equivalence_loyer_18 = True
                    return (((date_courante_12 >=
                        date_of_numbers(2021,10,1)) and (date_courante_12 <
                        date_of_numbers(2022,7,1))) and
                        temp_equivalence_loyer_18)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_equivalence_loyer_17,
                                      temp_equivalence_loyer_16)
            except EmptyError:
                match_arg_455 = categorie_equivalence_loyer_d842_16
                if match_arg_455.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUS:
                    _ = match_arg_455.value
                    temp_equivalence_loyer_19 = False
                elif match_arg_455.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUSRehabilitee:
                    _ = match_arg_455.value
                    temp_equivalence_loyer_19 = True
                elif match_arg_455.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                    _ = match_arg_455.value
                    temp_equivalence_loyer_19 = False
                elif match_arg_455.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                    _ = match_arg_455.value
                    temp_equivalence_loyer_19 = False
                if (((date_courante_12 >= date_of_numbers(2021,10,1)) and
                    (date_courante_12 < date_of_numbers(2022,7,1))) and
                    temp_equivalence_loyer_19):
                    match_arg_456 = situation_familiale_calcul_apl_5
                    if match_arg_456.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_456.value
                        return money_of_cents_string("17012")
                    elif match_arg_456.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_456.value
                        return money_of_cents_string("26440")
                else:
                    raise EmptyError
        def temp_equivalence_loyer_20(_:Unit):
            def temp_equivalence_loyer_21(_:Unit):
                match_arg_457 = situation_familiale_calcul_apl_5
                if match_arg_457.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_457.value
                    return money_of_cents_string("20640")
                elif match_arg_457.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_457.value
                    return money_of_cents_string("32073")
            def temp_equivalence_loyer_22(_:Unit):
                match_arg_458 = categorie_equivalence_loyer_d842_16
                if match_arg_458.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUS:
                    _ = match_arg_458.value
                    temp_equivalence_loyer_23 = False
                elif match_arg_458.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUSRehabilitee:
                    _ = match_arg_458.value
                    temp_equivalence_loyer_23 = False
                elif match_arg_458.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                    _ = match_arg_458.value
                    temp_equivalence_loyer_23 = True
                elif match_arg_458.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                    _ = match_arg_458.value
                    temp_equivalence_loyer_23 = False
                return (((date_courante_12 >= date_of_numbers(2021,10,1)) and
                    (date_courante_12 < date_of_numbers(2022,7,1))) and
                    temp_equivalence_loyer_23)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_equivalence_loyer_22,
                                  temp_equivalence_loyer_21)
        def temp_equivalence_loyer_24(_:Unit):
            def temp_equivalence_loyer_25(_:Unit):
                match_arg_459 = situation_familiale_calcul_apl_5
                if match_arg_459.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_459.value
                    return money_of_cents_string("8414")
                elif match_arg_459.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_459.value
                    return money_of_cents_string("13100")
            def temp_equivalence_loyer_26(_:Unit):
                match_arg_460 = categorie_equivalence_loyer_d842_16
                if match_arg_460.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUS:
                    _ = match_arg_460.value
                    temp_equivalence_loyer_27 = True
                elif match_arg_460.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUSRehabilitee:
                    _ = match_arg_460.value
                    temp_equivalence_loyer_27 = False
                elif match_arg_460.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                    _ = match_arg_460.value
                    temp_equivalence_loyer_27 = False
                elif match_arg_460.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                    _ = match_arg_460.value
                    temp_equivalence_loyer_27 = False
                return (((date_courante_12 >= date_of_numbers(2021,10,1)) and
                    (date_courante_12 < date_of_numbers(2022,7,1))) and
                    temp_equivalence_loyer_27)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_equivalence_loyer_26,
                                  temp_equivalence_loyer_25)
        def temp_equivalence_loyer_28(_:Unit):
            try:
                def temp_equivalence_loyer_29(_:Unit):
                    match_arg_461 = situation_familiale_calcul_apl_5
                    if match_arg_461.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_461.value
                        return money_of_cents_string("17607")
                    elif match_arg_461.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_461.value
                        return money_of_cents_string("27365")
                def temp_equivalence_loyer_30(_:Unit):
                    match_arg_462 = categorie_equivalence_loyer_d842_16
                    if match_arg_462.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUS:
                        _ = match_arg_462.value
                        temp_equivalence_loyer_31 = False
                    elif match_arg_462.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUSRehabilitee:
                        _ = match_arg_462.value
                        temp_equivalence_loyer_31 = False
                    elif match_arg_462.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                        _ = match_arg_462.value
                        temp_equivalence_loyer_31 = False
                    elif match_arg_462.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                        _ = match_arg_462.value
                        temp_equivalence_loyer_31 = True
                    return ((date_courante_12 >=
                        date_of_numbers(2022,7,1)) and
                        temp_equivalence_loyer_31)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_equivalence_loyer_30,
                                      temp_equivalence_loyer_29)
            except EmptyError:
                match_arg_463 = categorie_equivalence_loyer_d842_16
                if match_arg_463.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUS:
                    _ = match_arg_463.value
                    temp_equivalence_loyer_32 = False
                elif match_arg_463.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUSRehabilitee:
                    _ = match_arg_463.value
                    temp_equivalence_loyer_32 = True
                elif match_arg_463.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                    _ = match_arg_463.value
                    temp_equivalence_loyer_32 = False
                elif match_arg_463.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                    _ = match_arg_463.value
                    temp_equivalence_loyer_32 = False
                if ((date_courante_12 >= date_of_numbers(2022,7,1)) and
                    temp_equivalence_loyer_32):
                    match_arg_464 = situation_familiale_calcul_apl_5
                    if match_arg_464.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_464.value
                        return money_of_cents_string("17607")
                    elif match_arg_464.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_464.value
                        return money_of_cents_string("27365")
                else:
                    raise EmptyError
        def temp_equivalence_loyer_33(_:Unit):
            def temp_equivalence_loyer_34(_:Unit):
                match_arg_465 = situation_familiale_calcul_apl_5
                if match_arg_465.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_465.value
                    return money_of_cents_string("21362")
                elif match_arg_465.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_465.value
                    return money_of_cents_string("33196")
            def temp_equivalence_loyer_35(_:Unit):
                match_arg_466 = categorie_equivalence_loyer_d842_16
                if match_arg_466.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUS:
                    _ = match_arg_466.value
                    temp_equivalence_loyer_36 = False
                elif match_arg_466.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUSRehabilitee:
                    _ = match_arg_466.value
                    temp_equivalence_loyer_36 = False
                elif match_arg_466.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                    _ = match_arg_466.value
                    temp_equivalence_loyer_36 = True
                elif match_arg_466.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                    _ = match_arg_466.value
                    temp_equivalence_loyer_36 = False
                return ((date_courante_12 >= date_of_numbers(2022,7,1)) and
                    temp_equivalence_loyer_36)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_equivalence_loyer_35,
                                  temp_equivalence_loyer_34)
        def temp_equivalence_loyer_37(_:Unit):
            def temp_equivalence_loyer_38(_:Unit):
                match_arg_467 = situation_familiale_calcul_apl_5
                if match_arg_467.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_467.value
                    return money_of_cents_string("8708")
                elif match_arg_467.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_467.value
                    return money_of_cents_string("13559")
            def temp_equivalence_loyer_39(_:Unit):
                match_arg_468 = categorie_equivalence_loyer_d842_16
                if match_arg_468.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUS:
                    _ = match_arg_468.value
                    temp_equivalence_loyer_40 = True
                elif match_arg_468.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreCROUSRehabilitee:
                    _ = match_arg_468.value
                    temp_equivalence_loyer_40 = False
                elif match_arg_468.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                    _ = match_arg_468.value
                    temp_equivalence_loyer_40 = False
                elif match_arg_468.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                    _ = match_arg_468.value
                    temp_equivalence_loyer_40 = False
                return ((date_courante_12 >= date_of_numbers(2022,7,1)) and
                    temp_equivalence_loyer_40)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_equivalence_loyer_39,
                                  temp_equivalence_loyer_38)
        temp_equivalence_loyer_41 = handle_default(SourcePosition(filename="",
                                                   start_line=0,
                                                   start_column=1,
                                                   end_line=0, end_column=1,
                                                   law_headings=[]), [temp_equivalence_loyer_37,
                                                   temp_equivalence_loyer_33,
                                                   temp_equivalence_loyer_28,
                                                   temp_equivalence_loyer_24,
                                                   temp_equivalence_loyer_20,
                                                   temp_equivalence_loyer_15,
                                                   temp_equivalence_loyer_11,
                                                   temp_equivalence_loyer_7,
                                                   temp_equivalence_loyer_2],
                                                   temp_equivalence_loyer_1,
                                                   temp_equivalence_loyer)
    except EmptyError:
        temp_equivalence_loyer_41 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=995, start_column=12,
                                             end_line=995, end_column=29,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    equivalence_loyer = temp_equivalence_loyer_41
    try:
        temp_coefficient_prise_en_charge = calcul_apl_logement_foyer_dot_coefficient_prise_en_charge_d832_25_seuil
    except EmptyError:
        temp_coefficient_prise_en_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=994, start_column=12,
                                             end_line=994, end_column=39,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    coefficient_prise_en_charge = temp_coefficient_prise_en_charge
    try:
        temp_calcul_equivalence_loyer_minimale_dot_date_courante_2 = date_courante_12
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_date_courante_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1045,
                                             start_column=14, end_line=1045,
                                             end_column=61,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_date_courante_2 = temp_calcul_equivalence_loyer_minimale_dot_date_courante_2
    try:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_2 = ressources_menage_arrondies_4
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4809,
                                             start_column=14, end_line=4809,
                                             end_column=75,
                                             law_headings=["Article D842-15",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_2 = temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_2
    try:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_2 = True
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4808,
                                             start_column=14, end_line=4808,
                                             end_column=69,
                                             law_headings=["Article D842-15",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_2 = temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_2
    try:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_2 = calcul_nombre_parts_dot_n_nombre_parts_d832_25_1
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4819,
                                             start_column=14, end_line=4819,
                                             end_column=70,
                                             law_headings=["Article D842-15",
                                             "Section 3 : Logements-foyers",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_2 = temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_2
    result_11 = calcul_equivalence_loyer_minimale(CalculEquivalenceLoyerMinimaleIn(date_courante_in = calcul_equivalence_loyer_minimale_dot_date_courante_2,
                                                  ressources_menage_arrondies_in = calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_2,
                                                  condition_2_du_832_25_in = calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_2,
                                                  n_nombre_parts_d832_25_in = calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_2))
    calcul_equivalence_loyer_minimale_dot_montant_2 = result_11.montant
    try:
        try:
            def temp_montant_forfaitaire_charges(_:Unit):
                raise EmptyError
            def temp_montant_forfaitaire_charges_1(_:Unit):
                return False
            def temp_montant_forfaitaire_charges_2(_:Unit):
                def temp_montant_forfaitaire_charges_3(_:Unit):
                    if ((money_of_cents_string("3614") +
                        (money_of_cents_string("929") *
                        decimal_of_integer(nombre_personnes_a_charge_5))) >
                        (money_of_cents_string("3614") +
                        (money_of_cents_string("929") *
                        decimal_of_string("6.")))):
                        return (money_of_cents_string("3614") +
                            (money_of_cents_string("929") *
                            decimal_of_string("6.")))
                    else:
                        return (money_of_cents_string("3614") +
                            (money_of_cents_string("929") *
                            decimal_of_integer(nombre_personnes_a_charge_5)))
                def temp_montant_forfaitaire_charges_4(_:Unit):
                    match_arg_469 = residence_6
                    if match_arg_469.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_469.value
                        temp_montant_forfaitaire_charges_5 = True
                    elif match_arg_469.code == Collectivite_Code.Guyane:
                        _ = match_arg_469.value
                        temp_montant_forfaitaire_charges_5 = False
                    elif match_arg_469.code == Collectivite_Code.Martinique:
                        _ = match_arg_469.value
                        temp_montant_forfaitaire_charges_5 = True
                    elif match_arg_469.code == Collectivite_Code.LaReunion:
                        _ = match_arg_469.value
                        temp_montant_forfaitaire_charges_5 = True
                    elif match_arg_469.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_469.value
                        temp_montant_forfaitaire_charges_5 = True
                    elif match_arg_469.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_469.value
                        temp_montant_forfaitaire_charges_5 = True
                    elif match_arg_469.code == Collectivite_Code.Metropole:
                        _ = match_arg_469.value
                        temp_montant_forfaitaire_charges_5 = False
                    elif match_arg_469.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_469.value
                        temp_montant_forfaitaire_charges_5 = False
                    elif match_arg_469.code == Collectivite_Code.Mayotte:
                        _ = match_arg_469.value
                        temp_montant_forfaitaire_charges_5 = True
                    return (((date_courante_12 >=
                        date_of_numbers(2020,1,1)) and (date_courante_12 <
                        date_of_numbers(2020,10,1))) and
                        temp_montant_forfaitaire_charges_5)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_4,
                                      temp_montant_forfaitaire_charges_3)
            def temp_montant_forfaitaire_charges_6(_:Unit):
                def temp_montant_forfaitaire_charges_7(_:Unit):
                    if ((money_of_cents_string("3625") +
                        (money_of_cents_string("932") *
                        decimal_of_integer(nombre_personnes_a_charge_5))) >
                        (money_of_cents_string("3625") +
                        (money_of_cents_string("932") *
                        decimal_of_string("6.")))):
                        return (money_of_cents_string("3625") +
                            (money_of_cents_string("932") *
                            decimal_of_string("6.")))
                    else:
                        return (money_of_cents_string("3625") +
                            (money_of_cents_string("932") *
                            decimal_of_integer(nombre_personnes_a_charge_5)))
                def temp_montant_forfaitaire_charges_8(_:Unit):
                    match_arg_470 = residence_6
                    if match_arg_470.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_470.value
                        temp_montant_forfaitaire_charges_9 = True
                    elif match_arg_470.code == Collectivite_Code.Guyane:
                        _ = match_arg_470.value
                        temp_montant_forfaitaire_charges_9 = False
                    elif match_arg_470.code == Collectivite_Code.Martinique:
                        _ = match_arg_470.value
                        temp_montant_forfaitaire_charges_9 = True
                    elif match_arg_470.code == Collectivite_Code.LaReunion:
                        _ = match_arg_470.value
                        temp_montant_forfaitaire_charges_9 = True
                    elif match_arg_470.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_470.value
                        temp_montant_forfaitaire_charges_9 = True
                    elif match_arg_470.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_470.value
                        temp_montant_forfaitaire_charges_9 = True
                    elif match_arg_470.code == Collectivite_Code.Metropole:
                        _ = match_arg_470.value
                        temp_montant_forfaitaire_charges_9 = False
                    elif match_arg_470.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_470.value
                        temp_montant_forfaitaire_charges_9 = False
                    elif match_arg_470.code == Collectivite_Code.Mayotte:
                        _ = match_arg_470.value
                        temp_montant_forfaitaire_charges_9 = True
                    return (((date_courante_12 >=
                        date_of_numbers(2020,10,1)) and (date_courante_12 <
                        date_of_numbers(2021,10,1))) and
                        temp_montant_forfaitaire_charges_9)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_8,
                                      temp_montant_forfaitaire_charges_7)
            def temp_montant_forfaitaire_charges_10(_:Unit):
                try:
                    def temp_montant_forfaitaire_charges_11(_:Unit):
                        if ((money_of_cents_string("3640") +
                            (money_of_cents_string("936") *
                            decimal_of_integer(nombre_personnes_a_charge_5))) >
                            (money_of_cents_string("3640") +
                            (money_of_cents_string("936") *
                            decimal_of_string("6.")))):
                            return (money_of_cents_string("3640") +
                                (money_of_cents_string("936") *
                                decimal_of_string("6.")))
                        else:
                            return (money_of_cents_string("3640") +
                                (money_of_cents_string("936") *
                                decimal_of_integer(nombre_personnes_a_charge_5)))
                    def temp_montant_forfaitaire_charges_12(_:Unit):
                        match_arg_471 = residence_6
                        if match_arg_471.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_471.value
                            temp_montant_forfaitaire_charges_13 = True
                        elif match_arg_471.code == Collectivite_Code.Guyane:
                            _ = match_arg_471.value
                            temp_montant_forfaitaire_charges_13 = False
                        elif match_arg_471.code == Collectivite_Code.Martinique:
                            _ = match_arg_471.value
                            temp_montant_forfaitaire_charges_13 = True
                        elif match_arg_471.code == Collectivite_Code.LaReunion:
                            _ = match_arg_471.value
                            temp_montant_forfaitaire_charges_13 = True
                        elif match_arg_471.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_471.value
                            temp_montant_forfaitaire_charges_13 = True
                        elif match_arg_471.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_471.value
                            temp_montant_forfaitaire_charges_13 = True
                        elif match_arg_471.code == Collectivite_Code.Metropole:
                            _ = match_arg_471.value
                            temp_montant_forfaitaire_charges_13 = False
                        elif match_arg_471.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_471.value
                            temp_montant_forfaitaire_charges_13 = False
                        elif match_arg_471.code == Collectivite_Code.Mayotte:
                            _ = match_arg_471.value
                            temp_montant_forfaitaire_charges_13 = True
                        return (((date_courante_12 >=
                            date_of_numbers(2021,10,1)) and
                            (date_courante_12 <
                            date_of_numbers(2022,1,1))) and
                            temp_montant_forfaitaire_charges_13)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_montant_forfaitaire_charges_12,
                                          temp_montant_forfaitaire_charges_11)
                except EmptyError:
                    match_arg_472 = residence_6
                    if match_arg_472.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_472.value
                        temp_montant_forfaitaire_charges_14 = True
                    elif match_arg_472.code == Collectivite_Code.Guyane:
                        _ = match_arg_472.value
                        temp_montant_forfaitaire_charges_14 = False
                    elif match_arg_472.code == Collectivite_Code.Martinique:
                        _ = match_arg_472.value
                        temp_montant_forfaitaire_charges_14 = True
                    elif match_arg_472.code == Collectivite_Code.LaReunion:
                        _ = match_arg_472.value
                        temp_montant_forfaitaire_charges_14 = True
                    elif match_arg_472.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_472.value
                        temp_montant_forfaitaire_charges_14 = True
                    elif match_arg_472.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_472.value
                        temp_montant_forfaitaire_charges_14 = True
                    elif match_arg_472.code == Collectivite_Code.Metropole:
                        _ = match_arg_472.value
                        temp_montant_forfaitaire_charges_14 = False
                    elif match_arg_472.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_472.value
                        temp_montant_forfaitaire_charges_14 = False
                    elif match_arg_472.code == Collectivite_Code.Mayotte:
                        _ = match_arg_472.value
                        temp_montant_forfaitaire_charges_14 = True
                    if (((date_courante_12 >= date_of_numbers(2022,1,1)) and
                        (date_courante_12 < date_of_numbers(2022,7,1))) and
                        temp_montant_forfaitaire_charges_14):
                        if ((money_of_cents_string("3640") +
                            (money_of_cents_string("936") *
                            decimal_of_integer(nombre_personnes_a_charge_5))) >
                            (money_of_cents_string("3640") +
                            (money_of_cents_string("936") *
                            decimal_of_string("6.")))):
                            return (money_of_cents_string("3640") +
                                (money_of_cents_string("936") *
                                decimal_of_string("6.")))
                        else:
                            return (money_of_cents_string("3640") +
                                (money_of_cents_string("936") *
                                decimal_of_integer(nombre_personnes_a_charge_5)))
                    else:
                        raise EmptyError
            def temp_montant_forfaitaire_charges_15(_:Unit):
                def temp_montant_forfaitaire_charges_16(_:Unit):
                    if ((money_of_cents_string("3767") +
                        (money_of_cents_string("969") *
                        decimal_of_integer(nombre_personnes_a_charge_5))) >
                        (money_of_cents_string("3767") +
                        (money_of_cents_string("969") *
                        decimal_of_string("6.")))):
                        return (money_of_cents_string("3767") +
                            (money_of_cents_string("969") *
                            decimal_of_string("6.")))
                    else:
                        return (money_of_cents_string("3767") +
                            (money_of_cents_string("969") *
                            decimal_of_integer(nombre_personnes_a_charge_5)))
                def temp_montant_forfaitaire_charges_17(_:Unit):
                    match_arg_473 = residence_6
                    if match_arg_473.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_473.value
                        temp_montant_forfaitaire_charges_18 = True
                    elif match_arg_473.code == Collectivite_Code.Guyane:
                        _ = match_arg_473.value
                        temp_montant_forfaitaire_charges_18 = False
                    elif match_arg_473.code == Collectivite_Code.Martinique:
                        _ = match_arg_473.value
                        temp_montant_forfaitaire_charges_18 = True
                    elif match_arg_473.code == Collectivite_Code.LaReunion:
                        _ = match_arg_473.value
                        temp_montant_forfaitaire_charges_18 = True
                    elif match_arg_473.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_473.value
                        temp_montant_forfaitaire_charges_18 = True
                    elif match_arg_473.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_473.value
                        temp_montant_forfaitaire_charges_18 = True
                    elif match_arg_473.code == Collectivite_Code.Metropole:
                        _ = match_arg_473.value
                        temp_montant_forfaitaire_charges_18 = False
                    elif match_arg_473.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_473.value
                        temp_montant_forfaitaire_charges_18 = False
                    elif match_arg_473.code == Collectivite_Code.Mayotte:
                        _ = match_arg_473.value
                        temp_montant_forfaitaire_charges_18 = True
                    return (((date_courante_12 >=
                        date_of_numbers(2022,7,1)) and (date_courante_12 <
                        date_of_numbers(2023,1,1))) and
                        temp_montant_forfaitaire_charges_18)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_17,
                                      temp_montant_forfaitaire_charges_16)
            def temp_montant_forfaitaire_charges_19(_:Unit):
                def temp_montant_forfaitaire_charges_20(_:Unit):
                    return (money_of_cents_string("3767") +
                        (money_of_cents_string("969") *
                        multiplicateur_majoration_charges))
                def temp_montant_forfaitaire_charges_21(_:Unit):
                    match_arg_474 = residence_6
                    if match_arg_474.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_474.value
                        temp_montant_forfaitaire_charges_22 = True
                    elif match_arg_474.code == Collectivite_Code.Guyane:
                        _ = match_arg_474.value
                        temp_montant_forfaitaire_charges_22 = False
                    elif match_arg_474.code == Collectivite_Code.Martinique:
                        _ = match_arg_474.value
                        temp_montant_forfaitaire_charges_22 = True
                    elif match_arg_474.code == Collectivite_Code.LaReunion:
                        _ = match_arg_474.value
                        temp_montant_forfaitaire_charges_22 = True
                    elif match_arg_474.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_474.value
                        temp_montant_forfaitaire_charges_22 = True
                    elif match_arg_474.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_474.value
                        temp_montant_forfaitaire_charges_22 = True
                    elif match_arg_474.code == Collectivite_Code.Metropole:
                        _ = match_arg_474.value
                        temp_montant_forfaitaire_charges_22 = False
                    elif match_arg_474.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_474.value
                        temp_montant_forfaitaire_charges_22 = False
                    elif match_arg_474.code == Collectivite_Code.Mayotte:
                        _ = match_arg_474.value
                        temp_montant_forfaitaire_charges_22 = True
                    return ((date_courante_12 >=
                        date_of_numbers(2023,1,1)) and
                        temp_montant_forfaitaire_charges_22)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_21,
                                      temp_montant_forfaitaire_charges_20)
            temp_montant_forfaitaire_charges_23 = handle_default(SourcePosition(filename="",
                                                                 start_line=0,
                                                                 start_column=1,
                                                                 end_line=0, end_column=1,
                                                                 law_headings=[]), [temp_montant_forfaitaire_charges_19,
                                                                 temp_montant_forfaitaire_charges_15,
                                                                 temp_montant_forfaitaire_charges_10,
                                                                 temp_montant_forfaitaire_charges_6,
                                                                 temp_montant_forfaitaire_charges_2],
                                                                 temp_montant_forfaitaire_charges_1,
                                                                 temp_montant_forfaitaire_charges)
        except EmptyError:
            def temp_montant_forfaitaire_charges_24(_:Unit):
                raise EmptyError
            def temp_montant_forfaitaire_charges_25(_:Unit):
                return False
            def temp_montant_forfaitaire_charges_26(_:Unit):
                def temp_montant_forfaitaire_charges_27(_:Unit):
                    if (nombre_personnes_a_charge_5 ==
                        integer_of_string("0")):
                        return money_of_cents_string("5399")
                    else:
                        return (money_of_cents_string("5399") +
                            (money_of_cents_string("1224") *
                            decimal_of_integer(nombre_personnes_a_charge_5)))
                def temp_montant_forfaitaire_charges_28(_:Unit):
                    return ((date_courante_12 >=
                        date_of_numbers(2020,10,1)) and (date_courante_12 <
                        date_of_numbers(2021,10,1)))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_28,
                                      temp_montant_forfaitaire_charges_27)
            def temp_montant_forfaitaire_charges_29(_:Unit):
                def temp_montant_forfaitaire_charges_30(_:Unit):
                    if (nombre_personnes_a_charge_5 ==
                        integer_of_string("0")):
                        return money_of_cents_string("5422")
                    else:
                        return (money_of_cents_string("5422") +
                            (money_of_cents_string("1229") *
                            multiplicateur_majoration_charges))
                def temp_montant_forfaitaire_charges_31(_:Unit):
                    return ((date_courante_12 >=
                        date_of_numbers(2021,10,1)) and (date_courante_12 <
                        date_of_numbers(2022,7,1)))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_31,
                                      temp_montant_forfaitaire_charges_30)
            def temp_montant_forfaitaire_charges_32(_:Unit):
                def temp_montant_forfaitaire_charges_33(_:Unit):
                    if (nombre_personnes_a_charge_5 ==
                        integer_of_string("0")):
                        return money_of_cents_string("5612")
                    else:
                        return (money_of_cents_string("5612") +
                            (money_of_cents_string("1272") *
                            multiplicateur_majoration_charges))
                def temp_montant_forfaitaire_charges_34(_:Unit):
                    return (date_courante_12 >= date_of_numbers(2022,7,1))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_34,
                                      temp_montant_forfaitaire_charges_33)
            temp_montant_forfaitaire_charges_23 = handle_default(SourcePosition(filename="",
                                                                 start_line=0,
                                                                 start_column=1,
                                                                 end_line=0, end_column=1,
                                                                 law_headings=[]), [temp_montant_forfaitaire_charges_32,
                                                                 temp_montant_forfaitaire_charges_29,
                                                                 temp_montant_forfaitaire_charges_26],
                                                                 temp_montant_forfaitaire_charges_25,
                                                                 temp_montant_forfaitaire_charges_24)
    except EmptyError:
        temp_montant_forfaitaire_charges_23 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=996, start_column=12,
                                             end_line=996, end_column=39,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_charges = temp_montant_forfaitaire_charges_23
    def temp_traitement_aide_finale_minoration_forfaitaire_3(aide_finale_17:Money):
        try:
            if ((aide_finale_17 - montant_forfaitaire_d842_15) <
                money_of_cents_string("0")):
                return money_of_cents_string("0")
            else:
                return (aide_finale_17 - montant_forfaitaire_d842_15)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=1010,
                                                 start_column=10,
                                                 end_line=1010,
                                                 end_column=32,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_minoration_forfaitaire_3 = temp_traitement_aide_finale_minoration_forfaitaire_3
    try:
        temp_loyer_minimal = calcul_equivalence_loyer_minimale_dot_montant_2
    except EmptyError:
        temp_loyer_minimal = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=997, start_column=12,
                                             end_line=997, end_column=25,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    loyer_minimal = temp_loyer_minimal
    def temp_depense_nette_minimale(allocation_mensuelle_4:Money):
        try:
            return ((equivalence_loyer + montant_forfaitaire_charges) -
                allocation_mensuelle_4)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=986,
                                                 start_column=11,
                                                 end_line=986, end_column=33,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    depense_nette_minimale = temp_depense_nette_minimale
    try:
        temp_aide_finale_formule_3 = (((equivalence_loyer +
            montant_forfaitaire_charges) - loyer_minimal) *
            coefficient_prise_en_charge)
    except EmptyError:
        temp_aide_finale_formule_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1007,
                                             start_column=12, end_line=1007,
                                             end_column=31,
                                             law_headings=["Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    aide_finale_formule_3 = temp_aide_finale_formule_3
    def temp_abattement_depense_nette_minimale(allocation_mensuelle_5:Money):
        try:
            if (depense_nette_minimale(allocation_mensuelle_5) <
                montant_minimal_depense_nette_d842_17):
                return (montant_minimal_depense_nette_d842_17 -
                    depense_nette_minimale(allocation_mensuelle_5))
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=988,
                                                 start_column=11,
                                                 end_line=988, end_column=44,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    abattement_depense_nette_minimale = temp_abattement_depense_nette_minimale
    def temp_traitement_aide_finale_depense_nette_minimale(aide_finale_18:Money):
        try:
            if ((traitement_aide_finale_minoration_forfaitaire_3(aide_finale_18) -
                abattement_depense_nette_minimale(traitement_aide_finale_minoration_forfaitaire_3(
                                                  aide_finale_18))) <
                money_of_cents_string("0")):
                return money_of_cents_string("0")
            else:
                return (traitement_aide_finale_minoration_forfaitaire_3(
                    aide_finale_18) -
                    abattement_depense_nette_minimale(traitement_aide_finale_minoration_forfaitaire_3(
                                                      aide_finale_18)))
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=1011,
                                                 start_column=10,
                                                 end_line=1011,
                                                 end_column=32,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_depense_nette_minimale = temp_traitement_aide_finale_depense_nette_minimale
    def temp_traitement_aide_finale_redevance(aide_finale_19:Money):
        try:
            if (traitement_aide_finale_depense_nette_minimale(aide_finale_19) >
                redevance_1):
                return redevance_1
            else:
                return traitement_aide_finale_depense_nette_minimale(
                    aide_finale_19)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=1012,
                                                 start_column=10,
                                                 end_line=1012,
                                                 end_column=19,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_redevance = temp_traitement_aide_finale_redevance
    def temp_traitement_aide_finale_contributions_sociales_arrondi_3(aide_finale_20:Money):
        try:
            if ((money_round(((traitement_aide_finale_redevance(aide_finale_20) -
                contributions_sociales_dot_montant_3(traitement_aide_finale_redevance(
                                                     aide_finale_20))) -
                money_of_cents_string("50"))) +
                contributions_sociales_dot_montant_3(traitement_aide_finale_redevance(
                                                     aide_finale_20))) >=
                money_of_cents_string("0")):
                return (money_round(((traitement_aide_finale_redevance(
                    aide_finale_20) -
                    contributions_sociales_dot_montant_3(traitement_aide_finale_redevance(
                                                         aide_finale_20))) -
                    money_of_cents_string("50"))) +
                    contributions_sociales_dot_montant_3(traitement_aide_finale_redevance(
                                                         aide_finale_20)))
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=1013,
                                                 start_column=10,
                                                 end_line=1013,
                                                 end_column=40,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_contributions_sociales_arrondi_3 = temp_traitement_aide_finale_contributions_sociales_arrondi_3
    def temp_traitement_aide_finale_montee_en_charge_saint_pierre_miquelon_1(aide_finale_21:Money):
        try:
            return montee_en_charge_saint_pierre_miquelon(traitement_aide_finale_contributions_sociales_arrondi_3(
                                                          aide_finale_21),
                                                          residence_6,
                                                          date_courante_12)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=1020,
                                                 start_column=10,
                                                 end_line=1020,
                                                 end_column=48,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_montee_en_charge_saint_pierre_miquelon_1 = temp_traitement_aide_finale_montee_en_charge_saint_pierre_miquelon_1
    def temp_traitement_aide_finale_montant_minimal_3(aide_finale_22:Money):
        try:
            if (traitement_aide_finale_montee_en_charge_saint_pierre_miquelon_1(
                aide_finale_22) <
                montant_minimal_aide_d842_15):
                return money_of_cents_string("0")
            else:
                return traitement_aide_finale_montee_en_charge_saint_pierre_miquelon_1(
                    aide_finale_22)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=1021,
                                                 start_column=10,
                                                 end_line=1021,
                                                 end_column=25,
                                                 law_headings=["Secteur logement-foyer",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_montant_minimal_3 = temp_traitement_aide_finale_montant_minimal_3
    return CalculAllocationLogementFoyer(coefficient_prise_en_charge = coefficient_prise_en_charge,
        equivalence_loyer = equivalence_loyer,
        montant_forfaitaire_charges = montant_forfaitaire_charges,
        loyer_minimal = loyer_minimal,
        aide_finale_formule = aide_finale_formule_3,
        traitement_aide_finale = traitement_aide_finale_montant_minimal_3)

def calcul_allocation_logement_accession_propriete(calcul_allocation_logement_accession_propriete_in:CalculAllocationLogementAccessionProprieteIn):
    ressources_menage_arrondies_base = calcul_allocation_logement_accession_propriete_in.ressources_menage_arrondies_base_in
    nombre_personnes_a_charge_6 = calcul_allocation_logement_accession_propriete_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_6 = calcul_allocation_logement_accession_propriete_in.situation_familiale_calcul_apl_in
    zone_4 = calcul_allocation_logement_accession_propriete_in.zone_in
    residence_7 = calcul_allocation_logement_accession_propriete_in.residence_in
    date_courante_13 = calcul_allocation_logement_accession_propriete_in.date_courante_in
    mensualite_principale_1 = calcul_allocation_logement_accession_propriete_in.mensualite_principale_in
    situation_r822_11_13_17_1 = calcul_allocation_logement_accession_propriete_in.situation_r822_11_13_17_in
    date_signature_pret_2 = calcul_allocation_logement_accession_propriete_in.date_signature_pret_in
    type_travaux_logement_1 = calcul_allocation_logement_accession_propriete_in.type_travaux_logement_in
    local_habite_premiere_fois_beneficiaire_1 = calcul_allocation_logement_accession_propriete_in.local_habite_premiere_fois_beneficiaire_in
    date_entree_logement_1 = calcul_allocation_logement_accession_propriete_in.date_entree_logement_in
    charges_mensuelles_pret = calcul_allocation_logement_accession_propriete_in.charges_mensuelles_pret_in
    copropriete_1 = calcul_allocation_logement_accession_propriete_in.copropriete_in
    operations_logement_evolutifs_sociaux_accession_propriete_aidee__etat = calcul_allocation_logement_accession_propriete_in.operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat_in
    try:
        temp_taux_francs_vers_euros_1 = (decimal_of_string("1.") /
            decimal_of_string("6.55957"))
    except EmptyError:
        temp_taux_francs_vers_euros_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=896, start_column=11,
                                             end_line=896, end_column=33,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    taux_francs_vers_euros_1 = temp_taux_francs_vers_euros_1
    try:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_3 = nombre_personnes_a_charge_6
    except EmptyError:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4423,
                                             start_column=14, end_line=4423,
                                             end_column=59,
                                             law_headings=["Article D842-6",
                                             "Section 2 : Accession à la propriété",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_nombre_parts_dot_nombre_personnes_a_charge_3 = temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_3
    try:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_3 = situation_familiale_calcul_apl_6
    except EmptyError:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4425,
                                             start_column=14, end_line=4425,
                                             end_column=64,
                                             law_headings=["Article D842-6",
                                             "Section 2 : Accession à la propriété",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_nombre_parts_dot_situation_familiale_calcul_apl_3 = temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_3
    result_12 = calcul_nombre_parts_accession_propriete(CalculNombrePartsAccessionProprieteIn(nombre_personnes_a_charge_in = calcul_nombre_parts_dot_nombre_personnes_a_charge_3,
                                                        situation_familiale_calcul_apl_in = calcul_nombre_parts_dot_situation_familiale_calcul_apl_3))
    calcul_nombre_parts_dot_n_nombre_parts_d832_11_1 = result_12.n_nombre_parts_d832_11
    try:
        temp___12 = (date_courante_13 >= date_of_numbers(2021,10,1))
    except EmptyError:
        temp___12 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=965, start_column=13,
                                             end_line=965, end_column=42,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    if not (temp___12):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                              start_line=965,
                                              start_column=13, end_line=965,
                                              end_column=42,
                                              law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    try:
        temp_contributions_sociales_dot_date_courante_4 = date_courante_13
    except EmptyError:
        temp_contributions_sociales_dot_date_courante_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=959, start_column=14,
                                             end_line=959, end_column=50,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    contributions_sociales_dot_date_courante_4 = temp_contributions_sociales_dot_date_courante_4
    try:
        temp_contributions_sociales_dot_lieu_4 = residence_7
    except EmptyError:
        temp_contributions_sociales_dot_lieu_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=960, start_column=14,
                                             end_line=960, end_column=41,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    contributions_sociales_dot_lieu_4 = temp_contributions_sociales_dot_lieu_4
    result_13 = contributions_sociales_aides_personnelle_logement(ContributionsSocialesAidesPersonnelleLogementIn(date_courante_in = contributions_sociales_dot_date_courante_4,
                                                                  lieu_in = contributions_sociales_dot_lieu_4))
    contributions_sociales_dot_montant_4 = result_13.montant
    try:
        try:
            try:
                try:
                    try:
                        try:
                            def temp_multiplicateur_majoration_charges_10(_:Unit):
                                return decimal_of_string("6.")
                            def temp_multiplicateur_majoration_charges_11(_:Unit):
                                match_arg_475 = residence_7
                                if match_arg_475.code == Collectivite_Code.Guadeloupe:
                                    _ = match_arg_475.value
                                    temp_multiplicateur_majoration_charges_12 = True
                                elif match_arg_475.code == Collectivite_Code.Guyane:
                                    _ = match_arg_475.value
                                    temp_multiplicateur_majoration_charges_12 = False
                                elif match_arg_475.code == Collectivite_Code.Martinique:
                                    _ = match_arg_475.value
                                    temp_multiplicateur_majoration_charges_12 = True
                                elif match_arg_475.code == Collectivite_Code.LaReunion:
                                    _ = match_arg_475.value
                                    temp_multiplicateur_majoration_charges_12 = True
                                elif match_arg_475.code == Collectivite_Code.SaintBarthelemy:
                                    _ = match_arg_475.value
                                    temp_multiplicateur_majoration_charges_12 = True
                                elif match_arg_475.code == Collectivite_Code.SaintMartin:
                                    _ = match_arg_475.value
                                    temp_multiplicateur_majoration_charges_12 = True
                                elif match_arg_475.code == Collectivite_Code.Metropole:
                                    _ = match_arg_475.value
                                    temp_multiplicateur_majoration_charges_12 = False
                                elif match_arg_475.code == Collectivite_Code.SaintPierreEtMiquelon:
                                    _ = match_arg_475.value
                                    temp_multiplicateur_majoration_charges_12 = False
                                elif match_arg_475.code == Collectivite_Code.Mayotte:
                                    _ = match_arg_475.value
                                    temp_multiplicateur_majoration_charges_12 = True
                                return (((date_courante_13 >=
                                    date_of_numbers(2020,1,1)) and
                                    (date_courante_13 <
                                    date_of_numbers(2020,10,1))) and
                                    (temp_multiplicateur_majoration_charges_12 and
                                    (nombre_personnes_a_charge_6 >=
                                    integer_of_string("6"))))
                            temp_multiplicateur_majoration_charges_13 = handle_default(
                                SourcePosition(filename="", start_line=0,
                                start_column=1, end_line=0, end_column=1,
                                law_headings=[]), [],
                                temp_multiplicateur_majoration_charges_11,
                                temp_multiplicateur_majoration_charges_10)
                        except EmptyError:
                            match_arg_476 = residence_7
                            if match_arg_476.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_476.value
                                temp_multiplicateur_majoration_charges_14 = True
                            elif match_arg_476.code == Collectivite_Code.Guyane:
                                _ = match_arg_476.value
                                temp_multiplicateur_majoration_charges_14 = False
                            elif match_arg_476.code == Collectivite_Code.Martinique:
                                _ = match_arg_476.value
                                temp_multiplicateur_majoration_charges_14 = True
                            elif match_arg_476.code == Collectivite_Code.LaReunion:
                                _ = match_arg_476.value
                                temp_multiplicateur_majoration_charges_14 = True
                            elif match_arg_476.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_476.value
                                temp_multiplicateur_majoration_charges_14 = True
                            elif match_arg_476.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_476.value
                                temp_multiplicateur_majoration_charges_14 = True
                            elif match_arg_476.code == Collectivite_Code.Metropole:
                                _ = match_arg_476.value
                                temp_multiplicateur_majoration_charges_14 = False
                            elif match_arg_476.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_476.value
                                temp_multiplicateur_majoration_charges_14 = False
                            elif match_arg_476.code == Collectivite_Code.Mayotte:
                                _ = match_arg_476.value
                                temp_multiplicateur_majoration_charges_14 = True
                            if (((date_courante_13 >=
                                date_of_numbers(2020,10,1)) and
                                (date_courante_13 <
                                date_of_numbers(2021,10,1))) and
                                (temp_multiplicateur_majoration_charges_14 and
                                (nombre_personnes_a_charge_6 >=
                                integer_of_string("6")))):
                                temp_multiplicateur_majoration_charges_13 = decimal_of_string("6.")
                            else:
                                temp_multiplicateur_majoration_charges_13 = dead_value
                                raise EmptyError
                    except EmptyError:
                        match_arg_477 = residence_7
                        if match_arg_477.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_477.value
                            temp_multiplicateur_majoration_charges_15 = True
                        elif match_arg_477.code == Collectivite_Code.Guyane:
                            _ = match_arg_477.value
                            temp_multiplicateur_majoration_charges_15 = False
                        elif match_arg_477.code == Collectivite_Code.Martinique:
                            _ = match_arg_477.value
                            temp_multiplicateur_majoration_charges_15 = True
                        elif match_arg_477.code == Collectivite_Code.LaReunion:
                            _ = match_arg_477.value
                            temp_multiplicateur_majoration_charges_15 = True
                        elif match_arg_477.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_477.value
                            temp_multiplicateur_majoration_charges_15 = True
                        elif match_arg_477.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_477.value
                            temp_multiplicateur_majoration_charges_15 = True
                        elif match_arg_477.code == Collectivite_Code.Metropole:
                            _ = match_arg_477.value
                            temp_multiplicateur_majoration_charges_15 = False
                        elif match_arg_477.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_477.value
                            temp_multiplicateur_majoration_charges_15 = False
                        elif match_arg_477.code == Collectivite_Code.Mayotte:
                            _ = match_arg_477.value
                            temp_multiplicateur_majoration_charges_15 = True
                        if (((date_courante_13 >=
                            date_of_numbers(2021,10,1)) and
                            (date_courante_13 <
                            date_of_numbers(2022,1,1))) and
                            (temp_multiplicateur_majoration_charges_15 and
                            (nombre_personnes_a_charge_6 >=
                            integer_of_string("6")))):
                            temp_multiplicateur_majoration_charges_13 = decimal_of_string("6.")
                        else:
                            temp_multiplicateur_majoration_charges_13 = dead_value
                            raise EmptyError
                except EmptyError:
                    match_arg_478 = residence_7
                    if match_arg_478.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_478.value
                        temp_multiplicateur_majoration_charges_16 = True
                    elif match_arg_478.code == Collectivite_Code.Guyane:
                        _ = match_arg_478.value
                        temp_multiplicateur_majoration_charges_16 = False
                    elif match_arg_478.code == Collectivite_Code.Martinique:
                        _ = match_arg_478.value
                        temp_multiplicateur_majoration_charges_16 = True
                    elif match_arg_478.code == Collectivite_Code.LaReunion:
                        _ = match_arg_478.value
                        temp_multiplicateur_majoration_charges_16 = True
                    elif match_arg_478.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_478.value
                        temp_multiplicateur_majoration_charges_16 = True
                    elif match_arg_478.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_478.value
                        temp_multiplicateur_majoration_charges_16 = True
                    elif match_arg_478.code == Collectivite_Code.Metropole:
                        _ = match_arg_478.value
                        temp_multiplicateur_majoration_charges_16 = False
                    elif match_arg_478.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_478.value
                        temp_multiplicateur_majoration_charges_16 = False
                    elif match_arg_478.code == Collectivite_Code.Mayotte:
                        _ = match_arg_478.value
                        temp_multiplicateur_majoration_charges_16 = True
                    if (((date_courante_13 >= date_of_numbers(2022,1,1)) and
                        (date_courante_13 < date_of_numbers(2022,7,1))) and
                        (temp_multiplicateur_majoration_charges_16 and
                        (nombre_personnes_a_charge_6 >=
                        integer_of_string("6")))):
                        temp_multiplicateur_majoration_charges_13 = decimal_of_string("6.")
                    else:
                        temp_multiplicateur_majoration_charges_13 = dead_value
                        raise EmptyError
            except EmptyError:
                match_arg_479 = residence_7
                if match_arg_479.code == Collectivite_Code.Guadeloupe:
                    _ = match_arg_479.value
                    temp_multiplicateur_majoration_charges_17 = True
                elif match_arg_479.code == Collectivite_Code.Guyane:
                    _ = match_arg_479.value
                    temp_multiplicateur_majoration_charges_17 = False
                elif match_arg_479.code == Collectivite_Code.Martinique:
                    _ = match_arg_479.value
                    temp_multiplicateur_majoration_charges_17 = True
                elif match_arg_479.code == Collectivite_Code.LaReunion:
                    _ = match_arg_479.value
                    temp_multiplicateur_majoration_charges_17 = True
                elif match_arg_479.code == Collectivite_Code.SaintBarthelemy:
                    _ = match_arg_479.value
                    temp_multiplicateur_majoration_charges_17 = True
                elif match_arg_479.code == Collectivite_Code.SaintMartin:
                    _ = match_arg_479.value
                    temp_multiplicateur_majoration_charges_17 = True
                elif match_arg_479.code == Collectivite_Code.Metropole:
                    _ = match_arg_479.value
                    temp_multiplicateur_majoration_charges_17 = False
                elif match_arg_479.code == Collectivite_Code.SaintPierreEtMiquelon:
                    _ = match_arg_479.value
                    temp_multiplicateur_majoration_charges_17 = False
                elif match_arg_479.code == Collectivite_Code.Mayotte:
                    _ = match_arg_479.value
                    temp_multiplicateur_majoration_charges_17 = True
                if (((date_courante_13 >= date_of_numbers(2022,7,1)) and
                    (date_courante_13 < date_of_numbers(2023,1,1))) and
                    (temp_multiplicateur_majoration_charges_17 and
                    (nombre_personnes_a_charge_6 >=
                    integer_of_string("6")))):
                    temp_multiplicateur_majoration_charges_13 = decimal_of_string("6.")
                else:
                    temp_multiplicateur_majoration_charges_13 = dead_value
                    raise EmptyError
        except EmptyError:
            try:
                def temp_multiplicateur_majoration_charges_18(_:Unit):
                    return decimal_of_integer(nombre_personnes_a_charge_6)
                def temp_multiplicateur_majoration_charges_19(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2021,10,1)) and (date_courante_13 <
                        date_of_numbers(2022,7,1)))
                temp_multiplicateur_majoration_charges_13 = handle_default(
                    SourcePosition(filename="", start_line=0, start_column=1,
                    end_line=0, end_column=1, law_headings=[]), [],
                    temp_multiplicateur_majoration_charges_19,
                    temp_multiplicateur_majoration_charges_18)
            except EmptyError:
                if (date_courante_13 >=
                    date_of_numbers(2022,7,1)):
                    temp_multiplicateur_majoration_charges_13 = decimal_of_integer(nombre_personnes_a_charge_6)
                else:
                    temp_multiplicateur_majoration_charges_13 = dead_value
                    raise EmptyError
    except EmptyError:
        temp_multiplicateur_majoration_charges_13 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=907, start_column=11,
                                             end_line=907, end_column=44,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    multiplicateur_majoration_charges_1 = temp_multiplicateur_majoration_charges_13
    try:
        def temp_coefficient_d842_12(_:Unit):
            return decimal_of_string("16.25")
        def temp_coefficient_d842_12_1(_:Unit):
            return (date_courante_13 >= date_of_numbers(2019,10,1))
        temp_coefficient_d842_12_2 = handle_default(SourcePosition(filename="",
                                                    start_line=0,
                                                    start_column=1,
                                                    end_line=0, end_column=1,
                                                    law_headings=[]), [],
                                                    temp_coefficient_d842_12_1,
                                                    temp_coefficient_d842_12)
    except EmptyError:
        temp_coefficient_d842_12_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=905, start_column=11,
                                             end_line=905, end_column=30,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    coefficient_d842_12 = temp_coefficient_d842_12_2
    try:
        def temp_coefficient_d842_11(_:Unit):
            return decimal_of_string("0.0234")
        def temp_coefficient_d842_11_1(_:Unit):
            return (date_courante_13 >= date_of_numbers(2019,10,1))
        temp_coefficient_d842_11_2 = handle_default(SourcePosition(filename="",
                                                    start_line=0,
                                                    start_column=1,
                                                    end_line=0, end_column=1,
                                                    law_headings=[]), [],
                                                    temp_coefficient_d842_11_1,
                                                    temp_coefficient_d842_11)
    except EmptyError:
        temp_coefficient_d842_11_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=904, start_column=11,
                                             end_line=904, end_column=30,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    coefficient_d842_11 = temp_coefficient_d842_11_2
    try:
        def temp_montant_forfaitaire_d842_12(_:Unit):
            return money_of_cents_string("390000")
        def temp_montant_forfaitaire_d842_12_1(_:Unit):
            return (date_courante_13 >= date_of_numbers(2019,10,1))
        temp_montant_forfaitaire_d842_12_2 = handle_default(SourcePosition(filename="",
                                                            start_line=0,
                                                            start_column=1,
                                                            end_line=0, end_column=1,
                                                            law_headings=[]), [],
                                                            temp_montant_forfaitaire_d842_12_1,
                                                            temp_montant_forfaitaire_d842_12)
    except EmptyError:
        temp_montant_forfaitaire_d842_12_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=903, start_column=11,
                                             end_line=903, end_column=38,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_d842_12 = temp_montant_forfaitaire_d842_12_2
    try:
        def temp_montant_forfaitaire_d842_11(_:Unit):
            return money_of_cents_string("1500")
        def temp_montant_forfaitaire_d842_11_1(_:Unit):
            return (date_courante_13 >= date_of_numbers(2019,10,1))
        temp_montant_forfaitaire_d842_11_2 = handle_default(SourcePosition(filename="",
                                                            start_line=0,
                                                            start_column=1,
                                                            end_line=0, end_column=1,
                                                            law_headings=[]), [],
                                                            temp_montant_forfaitaire_d842_11_1,
                                                            temp_montant_forfaitaire_d842_11)
    except EmptyError:
        temp_montant_forfaitaire_d842_11_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=902, start_column=11,
                                             end_line=902, end_column=38,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_d842_11 = temp_montant_forfaitaire_d842_11_2
    try:
        def temp_montant_minimal_aide_d842_6(_:Unit):
            return money_of_cents_string("1000")
        def temp_montant_minimal_aide_d842_6_1(_:Unit):
            return (date_courante_13 >= date_of_numbers(2019,10,1))
        temp_montant_minimal_aide_d842_6_2 = handle_default(SourcePosition(filename="",
                                                            start_line=0,
                                                            start_column=1,
                                                            end_line=0, end_column=1,
                                                            law_headings=[]), [],
                                                            temp_montant_minimal_aide_d842_6_1,
                                                            temp_montant_minimal_aide_d842_6)
    except EmptyError:
        temp_montant_minimal_aide_d842_6_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=901, start_column=11,
                                             end_line=901, end_column=38,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    montant_minimal_aide_d842_6 = temp_montant_minimal_aide_d842_6_2
    try:
        def temp_montant_forfaitaire_d842_6(_:Unit):
            return money_of_cents_string("500")
        def temp_montant_forfaitaire_d842_6_1(_:Unit):
            return (date_courante_13 >= date_of_numbers(2019,10,1))
        temp_montant_forfaitaire_d842_6_2 = handle_default(SourcePosition(filename="",
                                                           start_line=0,
                                                           start_column=1,
                                                           end_line=0, end_column=1,
                                                           law_headings=[]), [],
                                                           temp_montant_forfaitaire_d842_6_1,
                                                           temp_montant_forfaitaire_d842_6)
    except EmptyError:
        temp_montant_forfaitaire_d842_6_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=893, start_column=11,
                                             end_line=893, end_column=37,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_d842_6 = temp_montant_forfaitaire_d842_6_2
    try:
        temp___13 = (date_signature_pret_2 >= date_of_numbers(1992,9,30))
    except EmptyError:
        temp___13 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=966, start_column=13,
                                             end_line=966, end_column=48,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    if not (temp___13):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                              start_line=966,
                                              start_column=13, end_line=966,
                                              end_column=48,
                                              law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    try:
        try:
            try:
                try:
                    try:
                        try:
                            def temp_condition_d842_11_3(_:Unit):
                                return False
                            def temp_condition_d842_11_3_1(_:Unit):
                                match_arg_480 = residence_7
                                if match_arg_480.code == Collectivite_Code.Guadeloupe:
                                    _ = match_arg_480.value
                                    temp_condition_d842_11_3_2 = False
                                elif match_arg_480.code == Collectivite_Code.Guyane:
                                    _ = match_arg_480.value
                                    temp_condition_d842_11_3_2 = False
                                elif match_arg_480.code == Collectivite_Code.Martinique:
                                    _ = match_arg_480.value
                                    temp_condition_d842_11_3_2 = False
                                elif match_arg_480.code == Collectivite_Code.LaReunion:
                                    _ = match_arg_480.value
                                    temp_condition_d842_11_3_2 = False
                                elif match_arg_480.code == Collectivite_Code.SaintBarthelemy:
                                    _ = match_arg_480.value
                                    temp_condition_d842_11_3_2 = True
                                elif match_arg_480.code == Collectivite_Code.SaintMartin:
                                    _ = match_arg_480.value
                                    temp_condition_d842_11_3_2 = True
                                elif match_arg_480.code == Collectivite_Code.Metropole:
                                    _ = match_arg_480.value
                                    temp_condition_d842_11_3_2 = False
                                elif match_arg_480.code == Collectivite_Code.SaintPierreEtMiquelon:
                                    _ = match_arg_480.value
                                    temp_condition_d842_11_3_2 = False
                                elif match_arg_480.code == Collectivite_Code.Mayotte:
                                    _ = match_arg_480.value
                                    temp_condition_d842_11_3_2 = False
                                return (((date_courante_13 >=
                                    date_of_numbers(2019,9,1)) and
                                    (date_courante_13 <
                                    date_of_numbers(2023,4,5))) and
                                    (temp_condition_d842_11_3_2 and
                                    operations_logement_evolutifs_sociaux_accession_propriete_aidee__etat))
                            temp_condition_d842_11_3_3 = handle_default(
                                SourcePosition(filename="", start_line=0,
                                start_column=1, end_line=0, end_column=1,
                                law_headings=[]), [],
                                temp_condition_d842_11_3_1,
                                temp_condition_d842_11_3)
                        except EmptyError:
                            match_arg_481 = residence_7
                            if match_arg_481.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_481.value
                                temp_condition_d842_11_3_4 = False
                            elif match_arg_481.code == Collectivite_Code.Guyane:
                                _ = match_arg_481.value
                                temp_condition_d842_11_3_4 = False
                            elif match_arg_481.code == Collectivite_Code.Martinique:
                                _ = match_arg_481.value
                                temp_condition_d842_11_3_4 = False
                            elif match_arg_481.code == Collectivite_Code.LaReunion:
                                _ = match_arg_481.value
                                temp_condition_d842_11_3_4 = False
                            elif match_arg_481.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_481.value
                                temp_condition_d842_11_3_4 = True
                            elif match_arg_481.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_481.value
                                temp_condition_d842_11_3_4 = True
                            elif match_arg_481.code == Collectivite_Code.Metropole:
                                _ = match_arg_481.value
                                temp_condition_d842_11_3_4 = False
                            elif match_arg_481.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_481.value
                                temp_condition_d842_11_3_4 = False
                            elif match_arg_481.code == Collectivite_Code.Mayotte:
                                _ = match_arg_481.value
                                temp_condition_d842_11_3_4 = False
                            if ((date_courante_13 >=
                                date_of_numbers(2023,4,5)) and
                                (temp_condition_d842_11_3_4 and
                                operations_logement_evolutifs_sociaux_accession_propriete_aidee__etat)):
                                temp_condition_d842_11_3_3 = False
                            else:
                                temp_condition_d842_11_3_3 = dead_value
                                raise EmptyError
                    except EmptyError:
                        match_arg_482 = residence_7
                        if match_arg_482.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_482.value
                            temp_condition_d842_11_3_5 = True
                        elif match_arg_482.code == Collectivite_Code.Guyane:
                            _ = match_arg_482.value
                            temp_condition_d842_11_3_5 = True
                        elif match_arg_482.code == Collectivite_Code.Martinique:
                            _ = match_arg_482.value
                            temp_condition_d842_11_3_5 = True
                        elif match_arg_482.code == Collectivite_Code.LaReunion:
                            _ = match_arg_482.value
                            temp_condition_d842_11_3_5 = True
                        elif match_arg_482.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_482.value
                            temp_condition_d842_11_3_5 = False
                        elif match_arg_482.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_482.value
                            temp_condition_d842_11_3_5 = False
                        elif match_arg_482.code == Collectivite_Code.Metropole:
                            _ = match_arg_482.value
                            temp_condition_d842_11_3_5 = False
                        elif match_arg_482.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_482.value
                            temp_condition_d842_11_3_5 = False
                        elif match_arg_482.code == Collectivite_Code.Mayotte:
                            _ = match_arg_482.value
                            temp_condition_d842_11_3_5 = True
                        if (((date_courante_13 >=
                            date_of_numbers(2019,9,1)) and
                            (date_courante_13 <
                            date_of_numbers(2023,4,5))) and
                            (temp_condition_d842_11_3_5 and
                            operations_logement_evolutifs_sociaux_accession_propriete_aidee__etat)):
                            temp_condition_d842_11_3_3 = False
                        else:
                            temp_condition_d842_11_3_3 = dead_value
                            raise EmptyError
                except EmptyError:
                    match_arg_483 = residence_7
                    if match_arg_483.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_483.value
                        temp_condition_d842_11_3_6 = True
                    elif match_arg_483.code == Collectivite_Code.Guyane:
                        _ = match_arg_483.value
                        temp_condition_d842_11_3_6 = True
                    elif match_arg_483.code == Collectivite_Code.Martinique:
                        _ = match_arg_483.value
                        temp_condition_d842_11_3_6 = True
                    elif match_arg_483.code == Collectivite_Code.LaReunion:
                        _ = match_arg_483.value
                        temp_condition_d842_11_3_6 = True
                    elif match_arg_483.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_483.value
                        temp_condition_d842_11_3_6 = False
                    elif match_arg_483.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_483.value
                        temp_condition_d842_11_3_6 = False
                    elif match_arg_483.code == Collectivite_Code.Metropole:
                        _ = match_arg_483.value
                        temp_condition_d842_11_3_6 = False
                    elif match_arg_483.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_483.value
                        temp_condition_d842_11_3_6 = False
                    elif match_arg_483.code == Collectivite_Code.Mayotte:
                        _ = match_arg_483.value
                        temp_condition_d842_11_3_6 = True
                    if ((date_courante_13 >= date_of_numbers(2023,4,5)) and
                        (temp_condition_d842_11_3_6 and
                        operations_logement_evolutifs_sociaux_accession_propriete_aidee__etat)):
                        temp_condition_d842_11_3_3 = False
                    else:
                        temp_condition_d842_11_3_3 = dead_value
                        raise EmptyError
            except EmptyError:
                match_arg_484 = type_travaux_logement_1
                if match_arg_484.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                    _ = match_arg_484.value
                    temp_condition_d842_11_3_7 = False
                elif match_arg_484.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                    _ = match_arg_484.value
                    temp_condition_d842_11_3_7 = False
                elif match_arg_484.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                    _ = match_arg_484.value
                    temp_condition_d842_11_3_7 = True
                elif match_arg_484.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                    _ = match_arg_484.value
                    temp_condition_d842_11_3_7 = False
                match_arg_485 = type_travaux_logement_1
                if match_arg_485.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                    _ = match_arg_485.value
                    temp_condition_d842_11_3_8 = True
                elif match_arg_485.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                    _ = match_arg_485.value
                    temp_condition_d842_11_3_8 = False
                elif match_arg_485.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                    _ = match_arg_485.value
                    temp_condition_d842_11_3_8 = False
                elif match_arg_485.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                    _ = match_arg_485.value
                    temp_condition_d842_11_3_8 = False
                match_arg_486 = type_travaux_logement_1
                if match_arg_486.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                    _ = match_arg_486.value
                    temp_condition_d842_11_3_9 = False
                elif match_arg_486.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                    _ = match_arg_486.value
                    temp_condition_d842_11_3_9 = False
                elif match_arg_486.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                    _ = match_arg_486.value
                    temp_condition_d842_11_3_9 = False
                elif match_arg_486.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                    _ = match_arg_486.value
                    temp_condition_d842_11_3_9 = True
                if ((temp_condition_d842_11_3_9 or
                    (temp_condition_d842_11_3_8 or
                    temp_condition_d842_11_3_7)) and
                    (date_signature_pret_2 >=
                    date_of_numbers(1999,7,1))):
                    temp_condition_d842_11_3_3 = True
                else:
                    temp_condition_d842_11_3_3 = dead_value
                    raise EmptyError
        except EmptyError:
            temp_condition_d842_11_3_3 = False
    except EmptyError:
        temp_condition_d842_11_3_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=906, start_column=11,
                                             end_line=906, end_column=30,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    condition_d842_11_3 = temp_condition_d842_11_3_3
    def temp_calcul_plafond_mensualite_d842_6_base(date_calcul:Date, nombre_personnes_a_charge_7:Integer):
        try:
            def temp_calcul_plafond_mensualite_d842_6_base_1(_:Unit):
                raise EmptyError
            def temp_calcul_plafond_mensualite_d842_6_base_2(_:Unit):
                return False
            def temp_calcul_plafond_mensualite_d842_6_base_3(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_4(_:Unit):
                    match_arg_487 = zone_4
                    if match_arg_487.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_487.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_488 = situation_familiale_calcul_apl_6
                            if match_arg_488.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_488.value
                                return money_of_cents_string("31476")
                            elif match_arg_488.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_488.value
                                return money_of_cents_string("37933")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("40787")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("41927")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("43106")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("44262")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("45200")
                                            else:
                                                return (money_of_cents_string("45200") +
                                                    (money_of_cents_string("3936") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_487.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_487.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_489 = situation_familiale_calcul_apl_6
                            if match_arg_489.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_489.value
                                return money_of_cents_string("27614")
                            elif match_arg_489.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_489.value
                                return money_of_cents_string("33853")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("36646")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("37915")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("39222")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("40510")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("43378")
                                            else:
                                                return (money_of_cents_string("43378") +
                                                    (money_of_cents_string("3771") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_487.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_487.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_490 = situation_familiale_calcul_apl_6
                            if match_arg_490.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_490.value
                                return money_of_cents_string("25904")
                            elif match_arg_490.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_490.value
                                return money_of_cents_string("31419")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("34255")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("35670")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("37107")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("38521")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("41392")
                                            else:
                                                return (money_of_cents_string("41392") +
                                                    (money_of_cents_string("3588") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_5(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and (date_calcul >=
                        date_of_numbers(2019,10,1)))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_5,
                                      temp_calcul_plafond_mensualite_d842_6_base_4)
            def temp_calcul_plafond_mensualite_d842_6_base_6(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_7(_:Unit):
                    match_arg_491 = zone_4
                    if match_arg_491.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_491.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_492 = situation_familiale_calcul_apl_6
                            if match_arg_492.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_492.value
                                return money_of_cents_string("31382")
                            elif match_arg_492.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_492.value
                                return money_of_cents_string("37820")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("40665")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("41801")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("42977")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("44130")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("45064")
                                            else:
                                                return (money_of_cents_string("45064") +
                                                    (money_of_cents_string("3924") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_491.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_491.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_493 = situation_familiale_calcul_apl_6
                            if match_arg_493.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_493.value
                                return money_of_cents_string("27531")
                            elif match_arg_493.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_493.value
                                return money_of_cents_string("33751")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("36536")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("37801")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("39105")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("40389")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("43248")
                                            else:
                                                return (money_of_cents_string("43248") +
                                                    (money_of_cents_string("3760") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_491.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_491.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_494 = situation_familiale_calcul_apl_6
                            if match_arg_494.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_494.value
                                return money_of_cents_string("25826")
                            elif match_arg_494.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_494.value
                                return money_of_cents_string("31325")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("34152")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("35564")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("36996")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("38406")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("41268")
                                            else:
                                                return (money_of_cents_string("41268") +
                                                    (money_of_cents_string("3578") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_8(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2017,10,1)) and (date_calcul <
                        date_of_numbers(2019,10,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_8,
                                      temp_calcul_plafond_mensualite_d842_6_base_7)
            def temp_calcul_plafond_mensualite_d842_6_base_9(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_10(_:Unit):
                    match_arg_495 = zone_4
                    if match_arg_495.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_495.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_496 = situation_familiale_calcul_apl_6
                            if match_arg_496.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_496.value
                                return money_of_cents_string("31148")
                            elif match_arg_496.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_496.value
                                return money_of_cents_string("37538")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("40362")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("41490")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("42657")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("43801")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("44729")
                                            else:
                                                return (money_of_cents_string("44729") +
                                                    (money_of_cents_string("3895") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_495.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_495.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_497 = situation_familiale_calcul_apl_6
                            if match_arg_497.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_497.value
                                return money_of_cents_string("27326")
                            elif match_arg_497.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_497.value
                                return money_of_cents_string("33500")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("36264")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("37520")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("38814")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("40088")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("42926")
                                            else:
                                                return (money_of_cents_string("42926") +
                                                    (money_of_cents_string("3732") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_495.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_495.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_498 = situation_familiale_calcul_apl_6
                            if match_arg_498.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_498.value
                                return money_of_cents_string("25634")
                            elif match_arg_498.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_498.value
                                return money_of_cents_string("31092")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("33898")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("35299")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("36721")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("38120")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("40961")
                                            else:
                                                return (money_of_cents_string("40961") +
                                                    (money_of_cents_string("3551") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_11(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2015,10,1)) and (date_calcul <
                        date_of_numbers(2017,10,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_11,
                                      temp_calcul_plafond_mensualite_d842_6_base_10)
            def temp_calcul_plafond_mensualite_d842_6_base_12(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_13(_:Unit):
                    match_arg_499 = zone_4
                    if match_arg_499.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_499.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_500 = situation_familiale_calcul_apl_6
                            if match_arg_500.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_500.value
                                return money_of_cents_string("31123")
                            elif match_arg_500.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_500.value
                                return money_of_cents_string("37508")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("40330")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("41457")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("42623")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("43766")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("44693")
                                            else:
                                                return (money_of_cents_string("44693") +
                                                    (money_of_cents_string("3892") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_499.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_499.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_501 = situation_familiale_calcul_apl_6
                            if match_arg_501.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_501.value
                                return money_of_cents_string("27304")
                            elif match_arg_501.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_501.value
                                return money_of_cents_string("33473")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("36235")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("37490")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("38783")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("40056")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("42892")
                                            else:
                                                return (money_of_cents_string("42892") +
                                                    (money_of_cents_string("3729") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_499.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_499.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_502 = situation_familiale_calcul_apl_6
                            if match_arg_502.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_502.value
                                return money_of_cents_string("25614")
                            elif match_arg_502.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_502.value
                                return money_of_cents_string("31067")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("33871")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("35271")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("36692")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("38090")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("40928")
                                            else:
                                                return (money_of_cents_string("40928") +
                                                    (money_of_cents_string("3548") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_14(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2014,10,1)) and (date_calcul <
                        date_of_numbers(2015,10,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_14,
                                      temp_calcul_plafond_mensualite_d842_6_base_13)
            def temp_calcul_plafond_mensualite_d842_6_base_15(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_16(_:Unit):
                    match_arg_503 = zone_4
                    if match_arg_503.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_503.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_504 = situation_familiale_calcul_apl_6
                            if match_arg_504.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_504.value
                                return money_of_cents_string("30947")
                            elif match_arg_504.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_504.value
                                return money_of_cents_string("37295")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("40101")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("41222")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("42381")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("43518")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("44440")
                                            else:
                                                return (money_of_cents_string("44440") +
                                                    (money_of_cents_string("3870") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_503.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_503.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_505 = situation_familiale_calcul_apl_6
                            if match_arg_505.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_505.value
                                return money_of_cents_string("27149")
                            elif match_arg_505.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_505.value
                                return money_of_cents_string("33283")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("36030")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("37278")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("38563")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("39829")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("42649")
                                            else:
                                                return (money_of_cents_string("42659") +
                                                    (money_of_cents_string("3708") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_503.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_503.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_506 = situation_familiale_calcul_apl_6
                            if match_arg_506.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_506.value
                                return money_of_cents_string("25469")
                            elif match_arg_506.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_506.value
                                return money_of_cents_string("30891")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("33679")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("35071")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("36484")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("37874")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("40696")
                                            else:
                                                return (money_of_cents_string("40696") +
                                                    (money_of_cents_string("3528") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_17(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2013,1,1)) and (date_calcul <
                        date_of_numbers(2014,10,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_17,
                                      temp_calcul_plafond_mensualite_d842_6_base_16)
            def temp_calcul_plafond_mensualite_d842_6_base_18(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_19(_:Unit):
                    match_arg_507 = zone_4
                    if match_arg_507.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_507.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_508 = situation_familiale_calcul_apl_6
                            if match_arg_508.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_508.value
                                return money_of_cents_string("30296")
                            elif match_arg_508.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_508.value
                                return money_of_cents_string("36510")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("39257")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("40354")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("41489")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("42602")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("43505")
                                            else:
                                                return (money_of_cents_string("43505") +
                                                    (money_of_cents_string("3789") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_507.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_507.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_509 = situation_familiale_calcul_apl_6
                            if match_arg_509.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_509.value
                                return money_of_cents_string("26578")
                            elif match_arg_509.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_509.value
                                return money_of_cents_string("32582")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("35272")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("36493")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("37751")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("38991")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("41751")
                                            else:
                                                return (money_of_cents_string("41751") +
                                                    (money_of_cents_string("3630") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_507.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_507.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_510 = situation_familiale_calcul_apl_6
                            if match_arg_510.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_510.value
                                return money_of_cents_string("24933")
                            elif match_arg_510.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_510.value
                                return money_of_cents_string("30241")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("32970")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("34333")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("35716")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("37077")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("39839")
                                            else:
                                                return (money_of_cents_string("39839") +
                                                    (money_of_cents_string("3454") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_20(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2012,1,1)) and (date_calcul <
                        date_of_numbers(2013,1,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_20,
                                      temp_calcul_plafond_mensualite_d842_6_base_19)
            def temp_calcul_plafond_mensualite_d842_6_base_21(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_22(_:Unit):
                    match_arg_511 = zone_4
                    if match_arg_511.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_511.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_512 = situation_familiale_calcul_apl_6
                            if match_arg_512.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_512.value
                                return money_of_cents_string("29996")
                            elif match_arg_512.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_512.value
                                return money_of_cents_string("36149")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("38868")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("39954")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("41078")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("42180")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("43074")
                                            else:
                                                return (money_of_cents_string("43074") +
                                                    (money_of_cents_string("3751") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_511.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_511.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_513 = situation_familiale_calcul_apl_6
                            if match_arg_513.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_513.value
                                return money_of_cents_string("26315")
                            elif match_arg_513.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_513.value
                                return money_of_cents_string("32259")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("34923")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("36132")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("37373")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("38605")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("41338")
                                            else:
                                                return (money_of_cents_string("41338") +
                                                    (money_of_cents_string("3594") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_511.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_511.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_514 = situation_familiale_calcul_apl_6
                            if match_arg_514.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_514.value
                                return money_of_cents_string("24686")
                            elif match_arg_514.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_514.value
                                return money_of_cents_string("29942")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("32644")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("33993")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("35362")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("36710")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("39445")
                                            else:
                                                return (money_of_cents_string("39445") +
                                                    (money_of_cents_string("3420") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_23(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2011,1,1)) and (date_calcul <
                        date_of_numbers(2012,1,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_23,
                                      temp_calcul_plafond_mensualite_d842_6_base_22)
            def temp_calcul_plafond_mensualite_d842_6_base_24(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_25(_:Unit):
                    match_arg_515 = zone_4
                    if match_arg_515.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_515.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_516 = situation_familiale_calcul_apl_6
                            if match_arg_516.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_516.value
                                return money_of_cents_string("29670")
                            elif match_arg_516.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_516.value
                                return money_of_cents_string("35757")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("38445")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("39519")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("40601")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("41721")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("42605")
                                            else:
                                                return (money_of_cents_string("42605") +
                                                    (money_of_cents_string("3710") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_515.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_515.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_517 = situation_familiale_calcul_apl_6
                            if match_arg_517.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_517.value
                                return money_of_cents_string("26029")
                            elif match_arg_517.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_517.value
                                return money_of_cents_string("31908")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("34643")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("35739")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("36970")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("38185")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("40888")
                                            else:
                                                return (money_of_cents_string("40888") +
                                                    (money_of_cents_string("3555") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_515.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_515.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_518 = situation_familiale_calcul_apl_6
                            if match_arg_518.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_518.value
                                return money_of_cents_string("24417")
                            elif match_arg_518.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_518.value
                                return money_of_cents_string("29616")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("32289")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("33623")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("34977")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("36311")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("39016")
                                            else:
                                                return (money_of_cents_string("39016") +
                                                    (money_of_cents_string("3383") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_26(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2010,1,1)) and (date_calcul <
                        date_of_numbers(2011,1,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_26,
                                      temp_calcul_plafond_mensualite_d842_6_base_25)
            def temp_calcul_plafond_mensualite_d842_6_base_27(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_28(_:Unit):
                    match_arg_519 = zone_4
                    if match_arg_519.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_519.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_520 = situation_familiale_calcul_apl_6
                            if match_arg_520.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_520.value
                                return money_of_cents_string("29575")
                            elif match_arg_520.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_520.value
                                return money_of_cents_string("35642")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("38322")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("39393")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("40501")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("41588")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("42469")
                                            else:
                                                return (money_of_cents_string("42469") +
                                                    (money_of_cents_string("3698") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_519.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_519.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_521 = situation_familiale_calcul_apl_6
                            if match_arg_521.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_521.value
                                return money_of_cents_string("25946")
                            elif match_arg_521.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_521.value
                                return money_of_cents_string("31806")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("34433")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("35625")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("36852")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("38063")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("40758")
                                            else:
                                                return (money_of_cents_string("40758") +
                                                    (money_of_cents_string("3544") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_519.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_519.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_522 = situation_familiale_calcul_apl_6
                            if match_arg_522.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_522.value
                                return money_of_cents_string("24339")
                            elif match_arg_522.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_522.value
                                return money_of_cents_string("29522")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("32186")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("33516")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("34865")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("36195")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("38892")
                                            else:
                                                return (money_of_cents_string("38892") +
                                                    (money_of_cents_string("3372") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_29(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2009,1,1)) and (date_calcul <
                        date_of_numbers(2010,1,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_29,
                                      temp_calcul_plafond_mensualite_d842_6_base_28)
            def temp_calcul_plafond_mensualite_d842_6_base_30(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_31(_:Unit):
                    match_arg_523 = zone_4
                    if match_arg_523.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_523.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_524 = situation_familiale_calcul_apl_6
                            if match_arg_524.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_524.value
                                return money_of_cents_string("28728")
                            elif match_arg_524.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_524.value
                                return money_of_cents_string("34621")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("37224")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("38264")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("39340")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("40396")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("41252")
                                            else:
                                                return (money_of_cents_string("41252") +
                                                    (money_of_cents_string("3592") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_523.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_523.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_525 = situation_familiale_calcul_apl_6
                            if match_arg_525.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_525.value
                                return money_of_cents_string("25203")
                            elif match_arg_525.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_525.value
                                return money_of_cents_string("30895")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("33446")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("34604")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("35796")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("36972")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("39590")
                                            else:
                                                return (money_of_cents_string("39590") +
                                                    (money_of_cents_string("3442") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_523.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_523.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_526 = situation_familiale_calcul_apl_6
                            if match_arg_526.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_526.value
                                return money_of_cents_string("23642")
                            elif match_arg_526.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_526.value
                                return money_of_cents_string("28676")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("31264")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("32556")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("33866")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("35158")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("37778")
                                            else:
                                                return (money_of_cents_string("37778") +
                                                    (money_of_cents_string("3275") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_32(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2008,1,1)) and (date_calcul <
                        date_of_numbers(2009,1,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_32,
                                      temp_calcul_plafond_mensualite_d842_6_base_31)
            def temp_calcul_plafond_mensualite_d842_6_base_33(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_34(_:Unit):
                    match_arg_527 = zone_4
                    if match_arg_527.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_527.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_528 = situation_familiale_calcul_apl_6
                            if match_arg_528.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_528.value
                                return money_of_cents_string("27956")
                            elif match_arg_528.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_528.value
                                return money_of_cents_string("33691")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("36224")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("37236")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("38283")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("39311")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("40144")
                                            else:
                                                return (money_of_cents_string("40144") +
                                                    (money_of_cents_string("3496") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_527.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_527.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_529 = situation_familiale_calcul_apl_6
                            if match_arg_529.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_529.value
                                return money_of_cents_string("24526")
                            elif match_arg_529.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_529.value
                                return money_of_cents_string("30065")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("32548")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("33675")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("34865")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("35979")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("38527")
                                            else:
                                                return (money_of_cents_string("38527") +
                                                    (money_of_cents_string("3350") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_527.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_527.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_530 = situation_familiale_calcul_apl_6
                            if match_arg_530.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_530.value
                                return money_of_cents_string("23007")
                            elif match_arg_530.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_530.value
                                return money_of_cents_string("27906")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("30424")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("31682")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("32956")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("34214")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("36733")
                                            else:
                                                return (money_of_cents_string("36733") +
                                                    (money_of_cents_string("3187") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_35(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2007,1,1)) and (date_calcul <
                        date_of_numbers(2008,1,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_35,
                                      temp_calcul_plafond_mensualite_d842_6_base_34)
            def temp_calcul_plafond_mensualite_d842_6_base_36(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_37(_:Unit):
                    match_arg_531 = zone_4
                    if match_arg_531.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_531.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_532 = situation_familiale_calcul_apl_6
                            if match_arg_532.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_532.value
                                return money_of_cents_string("27195")
                            elif match_arg_532.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_532.value
                                return money_of_cents_string("32773")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("35237")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("36222")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("37240")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("38240")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("39051")
                                            else:
                                                return (money_of_cents_string("39051") +
                                                    (money_of_cents_string("3401") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_531.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_531.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_533 = situation_familiale_calcul_apl_6
                            if match_arg_533.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_533.value
                                return money_of_cents_string("23858")
                            elif match_arg_533.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_533.value
                                return money_of_cents_string("29246")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("31661")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("32758")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("33886")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("34999")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("37478")
                                            else:
                                                return (money_of_cents_string("37478") +
                                                    (money_of_cents_string("3259") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_531.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_531.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_534 = situation_familiale_calcul_apl_6
                            if match_arg_534.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_534.value
                                return money_of_cents_string("22380")
                            elif match_arg_534.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_534.value
                                return money_of_cents_string("27146")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("29595")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("30819")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("32058")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("33282")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("35762")
                                            else:
                                                return (money_of_cents_string("35762") +
                                                    (money_of_cents_string("3100") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_38(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2005,9,1)) and (date_calcul <
                        date_of_numbers(2007,1,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_38,
                                      temp_calcul_plafond_mensualite_d842_6_base_37)
            def temp_calcul_plafond_mensualite_d842_6_base_39(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_40(_:Unit):
                    match_arg_535 = zone_4
                    if match_arg_535.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_535.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_536 = situation_familiale_calcul_apl_6
                            if match_arg_536.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_536.value
                                return money_of_cents_string("26714")
                            elif match_arg_536.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_536.value
                                return money_of_cents_string("32194")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("34614")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("35582")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("36582")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("37564")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("38361")
                                            else:
                                                return (money_of_cents_string("38361") +
                                                    (money_of_cents_string("3341") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_535.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_535.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_537 = situation_familiale_calcul_apl_6
                            if match_arg_537.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_537.value
                                return money_of_cents_string("23436")
                            elif match_arg_537.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_537.value
                                return money_of_cents_string("28729")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("31101")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("32179")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("33287")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("34380")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("36815")
                                            else:
                                                return (money_of_cents_string("36815") +
                                                    (money_of_cents_string("3201") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_535.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_535.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_538 = situation_familiale_calcul_apl_6
                            if match_arg_538.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_538.value
                                return money_of_cents_string("21984")
                            elif match_arg_538.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_538.value
                                return money_of_cents_string("26666")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("29072")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("30274")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("31491")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("32694")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("35130")
                                            else:
                                                return (money_of_cents_string("35130") +
                                                    (money_of_cents_string("3045") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_41(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2003,7,1)) and (date_calcul <
                        date_of_numbers(2005,9,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_41,
                                      temp_calcul_plafond_mensualite_d842_6_base_40)
            def temp_calcul_plafond_mensualite_d842_6_base_42(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_43(_:Unit):
                    match_arg_539 = zone_4
                    if match_arg_539.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_539.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_540 = situation_familiale_calcul_apl_6
                            if match_arg_540.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_540.value
                                return money_of_cents_string("26397")
                            elif match_arg_540.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_540.value
                                return money_of_cents_string("31812")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("34204")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("35160")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("36148")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("37119")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("37906")
                                            else:
                                                return (money_of_cents_string("37906") +
                                                    (money_of_cents_string("3301") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_539.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_539.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_541 = situation_familiale_calcul_apl_6
                            if match_arg_541.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_541.value
                                return money_of_cents_string("23158")
                            elif match_arg_541.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_541.value
                                return money_of_cents_string("28388")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("30732")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("31797")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("32892")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("33972")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("36378")
                                            else:
                                                return (money_of_cents_string("36378") +
                                                    (money_of_cents_string("3163") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_539.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_539.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_542 = situation_familiale_calcul_apl_6
                            if match_arg_542.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_542.value
                                return money_of_cents_string("21723")
                            elif match_arg_542.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_542.value
                                return money_of_cents_string("26350")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("28727")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("29915")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("31118")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("32306")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("34713")
                                            else:
                                                return (money_of_cents_string("34713") +
                                                    (money_of_cents_string("3009") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_44(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2002,7,1)) and (date_calcul <
                        date_of_numbers(2003,7,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_44,
                                      temp_calcul_plafond_mensualite_d842_6_base_43)
            def temp_calcul_plafond_mensualite_d842_6_base_45(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_46(_:Unit):
                    match_arg_543 = zone_4
                    if match_arg_543.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_543.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_544 = situation_familiale_calcul_apl_6
                            if match_arg_544.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_544.value
                                return money_of_cents_string("26084")
                            elif match_arg_544.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_544.value
                                return money_of_cents_string("31435")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("33798")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("34743")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("35719")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("36679")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("37457")
                                            else:
                                                return (money_of_cents_string("37457") +
                                                    (money_of_cents_string("3262") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_543.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_543.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_545 = situation_familiale_calcul_apl_6
                            if match_arg_545.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_545.value
                                return money_of_cents_string("22883")
                            elif match_arg_545.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_545.value
                                return money_of_cents_string("28051")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("30368")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("31420")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("32502")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("33569")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("35947")
                                            else:
                                                return (money_of_cents_string("35947") +
                                                    (money_of_cents_string("3125") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_543.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_543.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_546 = situation_familiale_calcul_apl_6
                            if match_arg_546.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_546.value
                                return money_of_cents_string("21465")
                            elif match_arg_546.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_546.value
                                return money_of_cents_string("26038")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                return money_of_cents_string("28386")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    return money_of_cents_string("29560")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        return money_of_cents_string("30749")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            return money_of_cents_string("31923")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                return money_of_cents_string("34301")
                                            else:
                                                return (money_of_cents_string("34301") +
                                                    (money_of_cents_string("2973") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                def temp_calcul_plafond_mensualite_d842_6_base_47(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2002,1,1)) and (date_calcul <
                        date_of_numbers(2002,7,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_47,
                                      temp_calcul_plafond_mensualite_d842_6_base_46)
            def temp_calcul_plafond_mensualite_d842_6_base_48(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_49(_:Unit):
                    match_arg_547 = zone_4
                    if match_arg_547.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_547.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_548 = situation_familiale_calcul_apl_6
                            if match_arg_548.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_548.value
                                temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("171100")
                            elif match_arg_548.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_548.value
                                temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("206200")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("221700")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("227900")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("234300")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("240600")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("245700")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_50 = (money_of_cents_string("245700") +
                                                    (money_of_cents_string("21400") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_547.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_547.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_549 = situation_familiale_calcul_apl_6
                            if match_arg_549.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_549.value
                                temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("150100")
                            elif match_arg_549.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_549.value
                                temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("184000")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("199200")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("206100")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("213200")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("220200")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("235800")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_50 = (money_of_cents_string("235800") +
                                                    (money_of_cents_string("20500") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_547.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_547.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_550 = situation_familiale_calcul_apl_6
                            if match_arg_550.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_550.value
                                temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("140800")
                            elif match_arg_550.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_550.value
                                temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("170800")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("186200")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("193900")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("201700")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("209400")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_50 = money_of_cents_string("225000")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_50 = (money_of_cents_string("225000") +
                                                    (money_of_cents_string("19500") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    return (temp_calcul_plafond_mensualite_d842_6_base_50 *
                        taux_francs_vers_euros_1)
                def temp_calcul_plafond_mensualite_d842_6_base_51(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2001,7,1)) and (date_calcul <
                        date_of_numbers(2002,1,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_51,
                                      temp_calcul_plafond_mensualite_d842_6_base_49)
            def temp_calcul_plafond_mensualite_d842_6_base_52(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_53(_:Unit):
                    match_arg_551 = zone_4
                    if match_arg_551.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_551.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_552 = situation_familiale_calcul_apl_6
                            if match_arg_552.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_552.value
                                temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("169100")
                            elif match_arg_552.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_552.value
                                temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("203800")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("219100")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("225200")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("231500")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("237700")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("242800")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_54 = (money_of_cents_string("242800") +
                                                    (money_of_cents_string("21100") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_551.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_551.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_553 = situation_familiale_calcul_apl_6
                            if match_arg_553.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_553.value
                                temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("148300")
                            elif match_arg_553.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_553.value
                                temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("181800")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("196800")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("203700")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("210700")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("217600")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("233000")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_54 = (money_of_cents_string("233000") +
                                                    (money_of_cents_string("20300") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_551.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_551.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_554 = situation_familiale_calcul_apl_6
                            if match_arg_554.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_554.value
                                temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("139100")
                            elif match_arg_554.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_554.value
                                temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("168800")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("184000")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("191600")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("199300")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("206900")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_54 = money_of_cents_string("222300")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_54 = (money_of_cents_string("222300") +
                                                    (money_of_cents_string("19300") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    return (temp_calcul_plafond_mensualite_d842_6_base_54 *
                        taux_francs_vers_euros_1)
                def temp_calcul_plafond_mensualite_d842_6_base_55(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(2000,7,1)) and (date_calcul <
                        date_of_numbers(2001,7,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_55,
                                      temp_calcul_plafond_mensualite_d842_6_base_53)
            def temp_calcul_plafond_mensualite_d842_6_base_56(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_57(_:Unit):
                    match_arg_555 = zone_4
                    if match_arg_555.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_555.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_556 = situation_familiale_calcul_apl_6
                            if match_arg_556.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_556.value
                                temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("167400")
                            elif match_arg_556.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_556.value
                                temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("201800")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("216900")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("223000")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("229200")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("235300")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("240400")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_58 = (money_of_cents_string("240400") +
                                                    (money_of_cents_string("20900") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_555.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_555.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_557 = situation_familiale_calcul_apl_6
                            if match_arg_557.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_557.value
                                temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("146800")
                            elif match_arg_557.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_557.value
                                temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("180000")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("194900")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("201700")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("208600")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("215400")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("230700")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_58 = (money_of_cents_string("230700") +
                                                    (money_of_cents_string("20100") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_555.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_555.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_558 = situation_familiale_calcul_apl_6
                            if match_arg_558.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_558.value
                                temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("137700")
                            elif match_arg_558.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_558.value
                                temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("167100")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("182200")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("189700")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("197300")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("204900")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_58 = money_of_cents_string("220100")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_58 = (money_of_cents_string("220100") +
                                                    (money_of_cents_string("19100") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    return (temp_calcul_plafond_mensualite_d842_6_base_58 *
                        taux_francs_vers_euros_1)
                def temp_calcul_plafond_mensualite_d842_6_base_59(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(1999,7,1)) and (date_calcul <
                        date_of_numbers(2000,7,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_59,
                                      temp_calcul_plafond_mensualite_d842_6_base_57)
            def temp_calcul_plafond_mensualite_d842_6_base_60(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_61(_:Unit):
                    match_arg_559 = zone_4
                    if match_arg_559.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_559.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_560 = situation_familiale_calcul_apl_6
                            if match_arg_560.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_560.value
                                temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("167200")
                            elif match_arg_560.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_560.value
                                temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("201600")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("216700")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("222800")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("229000")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("235100")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("240200")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_62 = (money_of_cents_string("240200") +
                                                    (money_of_cents_string("20900") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_559.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_559.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_561 = situation_familiale_calcul_apl_6
                            if match_arg_561.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_561.value
                                temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("146700")
                            elif match_arg_561.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_561.value
                                temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("179800")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("194700")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("201500")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("208400")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("215200")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("230500")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_62 = (money_of_cents_string("230500") +
                                                    (money_of_cents_string("20100") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_559.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_559.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_562 = situation_familiale_calcul_apl_6
                            if match_arg_562.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_562.value
                                temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("137600")
                            elif match_arg_562.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_562.value
                                temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("166900")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("182000")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("189500")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("197100")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("204700")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_62 = money_of_cents_string("219900")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_62 = (money_of_cents_string("219900") +
                                                    (money_of_cents_string("19100") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    return (temp_calcul_plafond_mensualite_d842_6_base_62 *
                        taux_francs_vers_euros_1)
                def temp_calcul_plafond_mensualite_d842_6_base_63(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(1998,7,1)) and (date_calcul <
                        date_of_numbers(1999,7,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_63,
                                      temp_calcul_plafond_mensualite_d842_6_base_61)
            def temp_calcul_plafond_mensualite_d842_6_base_64(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_65(_:Unit):
                    match_arg_563 = zone_4
                    if match_arg_563.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_563.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_564 = situation_familiale_calcul_apl_6
                            if match_arg_564.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_564.value
                                temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("163300")
                            elif match_arg_564.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_564.value
                                temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("196900")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("211600")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("217600")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("223600")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("229600")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("234600")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_66 = (money_of_cents_string("234600") +
                                                    (money_of_cents_string("20400") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_563.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_563.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_565 = situation_familiale_calcul_apl_6
                            if match_arg_565.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_565.value
                                temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("143300")
                            elif match_arg_565.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_565.value
                                temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("175600")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("190100")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("196600")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("203500")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("210200")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("225100")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_66 = (money_of_cents_string("225100") +
                                                    (money_of_cents_string("19600") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_563.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_563.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_566 = situation_familiale_calcul_apl_6
                            if match_arg_566.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_566.value
                                temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("134400")
                            elif match_arg_566.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_566.value
                                temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("163000")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("177700")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("185100")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("192500")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("199900")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_66 = money_of_cents_string("214700")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_66 = (money_of_cents_string("214700") +
                                                    (money_of_cents_string("18700") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    return (temp_calcul_plafond_mensualite_d842_6_base_66 *
                        taux_francs_vers_euros_1)
                def temp_calcul_plafond_mensualite_d842_6_base_67(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(1997,7,1)) and (date_calcul <
                        date_of_numbers(1998,7,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_67,
                                      temp_calcul_plafond_mensualite_d842_6_base_65)
            def temp_calcul_plafond_mensualite_d842_6_base_68(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_69(_:Unit):
                    match_arg_567 = zone_4
                    if match_arg_567.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_567.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_568 = situation_familiale_calcul_apl_6
                            if match_arg_568.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_568.value
                                temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("160400")
                            elif match_arg_568.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_568.value
                                temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("193400")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("207800")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("213700")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("219600")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("225500")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("230500")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_70 = (money_of_cents_string("230500") +
                                                    (money_of_cents_string("20000") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_567.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_567.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_569 = situation_familiale_calcul_apl_6
                            if match_arg_569.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_569.value
                                temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("140800")
                            elif match_arg_569.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_569.value
                                temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("172500")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("186700")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("193300")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("199900")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("206500")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("221100")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_70 = (money_of_cents_string("221100") +
                                                    (money_of_cents_string("19300") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_567.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_567.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_570 = situation_familiale_calcul_apl_6
                            if match_arg_570.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_570.value
                                temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("132000")
                            elif match_arg_570.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_570.value
                                temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("180100")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("174500")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("181800")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("189100")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("196400")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_70 = money_of_cents_string("210900")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_70 = (money_of_cents_string("210900") +
                                                    (money_of_cents_string("18400") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    return (temp_calcul_plafond_mensualite_d842_6_base_70 *
                        taux_francs_vers_euros_1)
                def temp_calcul_plafond_mensualite_d842_6_base_71(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(1994,7,1)) and (date_calcul <
                        date_of_numbers(1997,7,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_71,
                                      temp_calcul_plafond_mensualite_d842_6_base_69)
            def temp_calcul_plafond_mensualite_d842_6_base_72(_:Unit):
                def temp_calcul_plafond_mensualite_d842_6_base_73(_:Unit):
                    match_arg_571 = zone_4
                    if match_arg_571.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_571.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_572 = situation_familiale_calcul_apl_6
                            if match_arg_572.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_572.value
                                temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("158700")
                            elif match_arg_572.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_572.value
                                temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("191300")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("205500")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("211300")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("217100")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("222900")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("228000")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_74 = (money_of_cents_string("228000") +
                                                    (money_of_cents_string("19800") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_571.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_571.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_573 = situation_familiale_calcul_apl_6
                            if match_arg_573.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_573.value
                                temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("139300")
                            elif match_arg_573.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_573.value
                                temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("170600")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("184700")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("191200")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("197700")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("204200")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("218700")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_74 = (money_of_cents_string("218700") +
                                                    (money_of_cents_string("19100") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    elif match_arg_571.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_571.value
                        if (nombre_personnes_a_charge_7 ==
                            integer_of_string("0")):
                            match_arg_574 = situation_familiale_calcul_apl_6
                            if match_arg_574.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_574.value
                                temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("130600")
                            elif match_arg_574.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_574.value
                                temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("158400")
                        else:
                            if (nombre_personnes_a_charge_7 ==
                                integer_of_string("1")):
                                temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("172600")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("2")):
                                    temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("179800")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("3")):
                                        temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("187000")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("4")):
                                            temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("194200")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("5")):
                                                temp_calcul_plafond_mensualite_d842_6_base_74 = money_of_cents_string("208600")
                                            else:
                                                temp_calcul_plafond_mensualite_d842_6_base_74 = (money_of_cents_string("208600") +
                                                    (money_of_cents_string("18200") *
                                                    decimal_of_integer((nombre_personnes_a_charge_7 -
                                                    integer_of_string("5")))))
                    return (temp_calcul_plafond_mensualite_d842_6_base_74 *
                        taux_francs_vers_euros_1)
                def temp_calcul_plafond_mensualite_d842_6_base_75(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,1,1)) and ((date_calcul >=
                        date_of_numbers(1992,7,1)) and (date_calcul <
                        date_of_numbers(1994,7,1))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_calcul_plafond_mensualite_d842_6_base_75,
                                      temp_calcul_plafond_mensualite_d842_6_base_73)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [temp_calcul_plafond_mensualite_d842_6_base_72,
                                  temp_calcul_plafond_mensualite_d842_6_base_68,
                                  temp_calcul_plafond_mensualite_d842_6_base_64,
                                  temp_calcul_plafond_mensualite_d842_6_base_60,
                                  temp_calcul_plafond_mensualite_d842_6_base_56,
                                  temp_calcul_plafond_mensualite_d842_6_base_52,
                                  temp_calcul_plafond_mensualite_d842_6_base_48,
                                  temp_calcul_plafond_mensualite_d842_6_base_45,
                                  temp_calcul_plafond_mensualite_d842_6_base_42,
                                  temp_calcul_plafond_mensualite_d842_6_base_39,
                                  temp_calcul_plafond_mensualite_d842_6_base_36,
                                  temp_calcul_plafond_mensualite_d842_6_base_33,
                                  temp_calcul_plafond_mensualite_d842_6_base_30,
                                  temp_calcul_plafond_mensualite_d842_6_base_27,
                                  temp_calcul_plafond_mensualite_d842_6_base_24,
                                  temp_calcul_plafond_mensualite_d842_6_base_21,
                                  temp_calcul_plafond_mensualite_d842_6_base_18,
                                  temp_calcul_plafond_mensualite_d842_6_base_15,
                                  temp_calcul_plafond_mensualite_d842_6_base_12,
                                  temp_calcul_plafond_mensualite_d842_6_base_9,
                                  temp_calcul_plafond_mensualite_d842_6_base_6,
                                  temp_calcul_plafond_mensualite_d842_6_base_3],
                                  temp_calcul_plafond_mensualite_d842_6_base_2,
                                  temp_calcul_plafond_mensualite_d842_6_base_1)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=890,
                                                 start_column=10,
                                                 end_line=890, end_column=14,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    calcul_plafond_mensualite_d842_6_base = temp_calcul_plafond_mensualite_d842_6_base
    try:
        try:
            try:
                try:
                    def temp_montant_forfaitaire_charges_35(_:Unit):
                        raise EmptyError
                    def temp_montant_forfaitaire_charges_36(_:Unit):
                        return False
                    def temp_montant_forfaitaire_charges_37(_:Unit):
                        def temp_montant_forfaitaire_charges_38(_:Unit):
                            match_arg_575 = situation_familiale_calcul_apl_6
                            if match_arg_575.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_575.value
                                temp_montant_forfaitaire_charges_39 = money_of_cents_string("1858")
                            elif match_arg_575.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_575.value
                                temp_montant_forfaitaire_charges_39 = money_of_cents_string("3614")
                            match_arg_576 = situation_familiale_calcul_apl_6
                            if match_arg_576.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_576.value
                                temp_montant_forfaitaire_charges_40 = money_of_cents_string("1858")
                            elif match_arg_576.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_576.value
                                temp_montant_forfaitaire_charges_40 = money_of_cents_string("3614")
                            if ((temp_montant_forfaitaire_charges_40 +
                                (money_of_cents_string("929") *
                                decimal_of_integer(nombre_personnes_a_charge_6))) >
                                (temp_montant_forfaitaire_charges_39 +
                                (money_of_cents_string("929") *
                                decimal_of_string("6.")))):
                                match_arg_577 = situation_familiale_calcul_apl_6
                                if match_arg_577.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_577.value
                                    temp_montant_forfaitaire_charges_41 = money_of_cents_string("1858")
                                elif match_arg_577.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_577.value
                                    temp_montant_forfaitaire_charges_41 = money_of_cents_string("3614")
                                return (temp_montant_forfaitaire_charges_41 +
                                    (money_of_cents_string("929") *
                                    decimal_of_string("6.")))
                            else:
                                match_arg_578 = situation_familiale_calcul_apl_6
                                if match_arg_578.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_578.value
                                    temp_montant_forfaitaire_charges_42 = money_of_cents_string("1858")
                                elif match_arg_578.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_578.value
                                    temp_montant_forfaitaire_charges_42 = money_of_cents_string("3614")
                                return (temp_montant_forfaitaire_charges_42 +
                                    (money_of_cents_string("929") *
                                    decimal_of_integer(nombre_personnes_a_charge_6)))
                        def temp_montant_forfaitaire_charges_43(_:Unit):
                            match_arg_579 = residence_7
                            if match_arg_579.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_579.value
                                temp_montant_forfaitaire_charges_44 = True
                            elif match_arg_579.code == Collectivite_Code.Guyane:
                                _ = match_arg_579.value
                                temp_montant_forfaitaire_charges_44 = False
                            elif match_arg_579.code == Collectivite_Code.Martinique:
                                _ = match_arg_579.value
                                temp_montant_forfaitaire_charges_44 = True
                            elif match_arg_579.code == Collectivite_Code.LaReunion:
                                _ = match_arg_579.value
                                temp_montant_forfaitaire_charges_44 = True
                            elif match_arg_579.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_579.value
                                temp_montant_forfaitaire_charges_44 = True
                            elif match_arg_579.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_579.value
                                temp_montant_forfaitaire_charges_44 = True
                            elif match_arg_579.code == Collectivite_Code.Metropole:
                                _ = match_arg_579.value
                                temp_montant_forfaitaire_charges_44 = False
                            elif match_arg_579.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_579.value
                                temp_montant_forfaitaire_charges_44 = False
                            elif match_arg_579.code == Collectivite_Code.Mayotte:
                                _ = match_arg_579.value
                                temp_montant_forfaitaire_charges_44 = True
                            return (((date_courante_13 >=
                                date_of_numbers(2020,1,1)) and
                                (date_courante_13 <
                                date_of_numbers(2020,10,1))) and
                                temp_montant_forfaitaire_charges_44)
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_43,
                                              temp_montant_forfaitaire_charges_38)
                    def temp_montant_forfaitaire_charges_45(_:Unit):
                        def temp_montant_forfaitaire_charges_46(_:Unit):
                            match_arg_580 = situation_familiale_calcul_apl_6
                            if match_arg_580.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_580.value
                                temp_montant_forfaitaire_charges_47 = money_of_cents_string("1864")
                            elif match_arg_580.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_580.value
                                temp_montant_forfaitaire_charges_47 = money_of_cents_string("3625")
                            match_arg_581 = situation_familiale_calcul_apl_6
                            if match_arg_581.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_581.value
                                temp_montant_forfaitaire_charges_48 = money_of_cents_string("1864")
                            elif match_arg_581.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_581.value
                                temp_montant_forfaitaire_charges_48 = money_of_cents_string("3625")
                            if ((temp_montant_forfaitaire_charges_48 +
                                (money_of_cents_string("932") *
                                decimal_of_integer(nombre_personnes_a_charge_6))) >
                                (temp_montant_forfaitaire_charges_47 +
                                (money_of_cents_string("932") *
                                decimal_of_string("6.")))):
                                match_arg_582 = situation_familiale_calcul_apl_6
                                if match_arg_582.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_582.value
                                    temp_montant_forfaitaire_charges_49 = money_of_cents_string("1864")
                                elif match_arg_582.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_582.value
                                    temp_montant_forfaitaire_charges_49 = money_of_cents_string("3625")
                                return (temp_montant_forfaitaire_charges_49 +
                                    (money_of_cents_string("932") *
                                    decimal_of_string("6.")))
                            else:
                                match_arg_583 = situation_familiale_calcul_apl_6
                                if match_arg_583.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_583.value
                                    temp_montant_forfaitaire_charges_50 = money_of_cents_string("1864")
                                elif match_arg_583.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_583.value
                                    temp_montant_forfaitaire_charges_50 = money_of_cents_string("3625")
                                return (temp_montant_forfaitaire_charges_50 +
                                    (money_of_cents_string("932") *
                                    decimal_of_integer(nombre_personnes_a_charge_6)))
                        def temp_montant_forfaitaire_charges_51(_:Unit):
                            match_arg_584 = residence_7
                            if match_arg_584.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_584.value
                                temp_montant_forfaitaire_charges_52 = True
                            elif match_arg_584.code == Collectivite_Code.Guyane:
                                _ = match_arg_584.value
                                temp_montant_forfaitaire_charges_52 = False
                            elif match_arg_584.code == Collectivite_Code.Martinique:
                                _ = match_arg_584.value
                                temp_montant_forfaitaire_charges_52 = True
                            elif match_arg_584.code == Collectivite_Code.LaReunion:
                                _ = match_arg_584.value
                                temp_montant_forfaitaire_charges_52 = True
                            elif match_arg_584.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_584.value
                                temp_montant_forfaitaire_charges_52 = True
                            elif match_arg_584.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_584.value
                                temp_montant_forfaitaire_charges_52 = True
                            elif match_arg_584.code == Collectivite_Code.Metropole:
                                _ = match_arg_584.value
                                temp_montant_forfaitaire_charges_52 = False
                            elif match_arg_584.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_584.value
                                temp_montant_forfaitaire_charges_52 = False
                            elif match_arg_584.code == Collectivite_Code.Mayotte:
                                _ = match_arg_584.value
                                temp_montant_forfaitaire_charges_52 = True
                            return (((date_courante_13 >=
                                date_of_numbers(2020,10,1)) and
                                (date_courante_13 <
                                date_of_numbers(2021,10,1))) and
                                temp_montant_forfaitaire_charges_52)
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_51,
                                              temp_montant_forfaitaire_charges_46)
                    def temp_montant_forfaitaire_charges_53(_:Unit):
                        try:
                            def temp_montant_forfaitaire_charges_54(_:Unit):
                                match_arg_585 = situation_familiale_calcul_apl_6
                                if match_arg_585.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_585.value
                                    temp_montant_forfaitaire_charges_55 = money_of_cents_string("1872")
                                elif match_arg_585.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_585.value
                                    temp_montant_forfaitaire_charges_55 = money_of_cents_string("3640")
                                match_arg_586 = situation_familiale_calcul_apl_6
                                if match_arg_586.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_586.value
                                    temp_montant_forfaitaire_charges_56 = money_of_cents_string("1872")
                                elif match_arg_586.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_586.value
                                    temp_montant_forfaitaire_charges_56 = money_of_cents_string("3640")
                                if ((temp_montant_forfaitaire_charges_56 +
                                    (money_of_cents_string("936") *
                                    decimal_of_integer(nombre_personnes_a_charge_6))) >
                                    (temp_montant_forfaitaire_charges_55 +
                                    (money_of_cents_string("936") *
                                    decimal_of_string("6.")))):
                                    match_arg_587 = situation_familiale_calcul_apl_6
                                    if match_arg_587.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_587.value
                                        temp_montant_forfaitaire_charges_57 = money_of_cents_string("1872")
                                    elif match_arg_587.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_587.value
                                        temp_montant_forfaitaire_charges_57 = money_of_cents_string("3640")
                                    return (temp_montant_forfaitaire_charges_57 +
                                        (money_of_cents_string("936") *
                                        decimal_of_string("6.")))
                                else:
                                    match_arg_588 = situation_familiale_calcul_apl_6
                                    if match_arg_588.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_588.value
                                        temp_montant_forfaitaire_charges_58 = money_of_cents_string("1872")
                                    elif match_arg_588.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_588.value
                                        temp_montant_forfaitaire_charges_58 = money_of_cents_string("3640")
                                    return (temp_montant_forfaitaire_charges_58 +
                                        (money_of_cents_string("936") *
                                        decimal_of_integer(nombre_personnes_a_charge_6)))
                            def temp_montant_forfaitaire_charges_59(_:Unit):
                                match_arg_589 = residence_7
                                if match_arg_589.code == Collectivite_Code.Guadeloupe:
                                    _ = match_arg_589.value
                                    temp_montant_forfaitaire_charges_60 = True
                                elif match_arg_589.code == Collectivite_Code.Guyane:
                                    _ = match_arg_589.value
                                    temp_montant_forfaitaire_charges_60 = False
                                elif match_arg_589.code == Collectivite_Code.Martinique:
                                    _ = match_arg_589.value
                                    temp_montant_forfaitaire_charges_60 = True
                                elif match_arg_589.code == Collectivite_Code.LaReunion:
                                    _ = match_arg_589.value
                                    temp_montant_forfaitaire_charges_60 = True
                                elif match_arg_589.code == Collectivite_Code.SaintBarthelemy:
                                    _ = match_arg_589.value
                                    temp_montant_forfaitaire_charges_60 = True
                                elif match_arg_589.code == Collectivite_Code.SaintMartin:
                                    _ = match_arg_589.value
                                    temp_montant_forfaitaire_charges_60 = True
                                elif match_arg_589.code == Collectivite_Code.Metropole:
                                    _ = match_arg_589.value
                                    temp_montant_forfaitaire_charges_60 = False
                                elif match_arg_589.code == Collectivite_Code.SaintPierreEtMiquelon:
                                    _ = match_arg_589.value
                                    temp_montant_forfaitaire_charges_60 = False
                                elif match_arg_589.code == Collectivite_Code.Mayotte:
                                    _ = match_arg_589.value
                                    temp_montant_forfaitaire_charges_60 = True
                                return (((date_courante_13 >=
                                    date_of_numbers(2021,10,1)) and
                                    (date_courante_13 <
                                    date_of_numbers(2022,1,1))) and
                                    temp_montant_forfaitaire_charges_60)
                            return handle_default(SourcePosition(filename="",
                                                  start_line=0,
                                                  start_column=1,
                                                  end_line=0, end_column=1,
                                                  law_headings=[]), [],
                                                  temp_montant_forfaitaire_charges_59,
                                                  temp_montant_forfaitaire_charges_54)
                        except EmptyError:
                            match_arg_590 = residence_7
                            if match_arg_590.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_590.value
                                temp_montant_forfaitaire_charges_61 = True
                            elif match_arg_590.code == Collectivite_Code.Guyane:
                                _ = match_arg_590.value
                                temp_montant_forfaitaire_charges_61 = False
                            elif match_arg_590.code == Collectivite_Code.Martinique:
                                _ = match_arg_590.value
                                temp_montant_forfaitaire_charges_61 = True
                            elif match_arg_590.code == Collectivite_Code.LaReunion:
                                _ = match_arg_590.value
                                temp_montant_forfaitaire_charges_61 = True
                            elif match_arg_590.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_590.value
                                temp_montant_forfaitaire_charges_61 = True
                            elif match_arg_590.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_590.value
                                temp_montant_forfaitaire_charges_61 = True
                            elif match_arg_590.code == Collectivite_Code.Metropole:
                                _ = match_arg_590.value
                                temp_montant_forfaitaire_charges_61 = False
                            elif match_arg_590.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_590.value
                                temp_montant_forfaitaire_charges_61 = False
                            elif match_arg_590.code == Collectivite_Code.Mayotte:
                                _ = match_arg_590.value
                                temp_montant_forfaitaire_charges_61 = True
                            if (((date_courante_13 >=
                                date_of_numbers(2022,1,1)) and
                                (date_courante_13 <
                                date_of_numbers(2022,7,1))) and
                                temp_montant_forfaitaire_charges_61):
                                match_arg_591 = situation_familiale_calcul_apl_6
                                if match_arg_591.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_591.value
                                    temp_montant_forfaitaire_charges_62 = money_of_cents_string("1872")
                                elif match_arg_591.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_591.value
                                    temp_montant_forfaitaire_charges_62 = money_of_cents_string("3640")
                                match_arg_592 = situation_familiale_calcul_apl_6
                                if match_arg_592.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_592.value
                                    temp_montant_forfaitaire_charges_63 = money_of_cents_string("1872")
                                elif match_arg_592.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_592.value
                                    temp_montant_forfaitaire_charges_63 = money_of_cents_string("3640")
                                if ((temp_montant_forfaitaire_charges_63 +
                                    (money_of_cents_string("936") *
                                    decimal_of_integer(nombre_personnes_a_charge_6))) >
                                    (temp_montant_forfaitaire_charges_62 +
                                    (money_of_cents_string("936") *
                                    decimal_of_string("6.")))):
                                    match_arg_593 = situation_familiale_calcul_apl_6
                                    if match_arg_593.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_593.value
                                        temp_montant_forfaitaire_charges_64 = money_of_cents_string("1872")
                                    elif match_arg_593.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_593.value
                                        temp_montant_forfaitaire_charges_64 = money_of_cents_string("3640")
                                    return (temp_montant_forfaitaire_charges_64 +
                                        (money_of_cents_string("936") *
                                        decimal_of_string("6.")))
                                else:
                                    match_arg_594 = situation_familiale_calcul_apl_6
                                    if match_arg_594.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                        _ = match_arg_594.value
                                        temp_montant_forfaitaire_charges_65 = money_of_cents_string("1872")
                                    elif match_arg_594.code == SituationFamilialeCalculAPL_Code.Couple:
                                        _ = match_arg_594.value
                                        temp_montant_forfaitaire_charges_65 = money_of_cents_string("3640")
                                    return (temp_montant_forfaitaire_charges_65 +
                                        (money_of_cents_string("936") *
                                        decimal_of_integer(nombre_personnes_a_charge_6)))
                            else:
                                raise EmptyError
                    def temp_montant_forfaitaire_charges_66(_:Unit):
                        def temp_montant_forfaitaire_charges_67(_:Unit):
                            match_arg_595 = situation_familiale_calcul_apl_6
                            if match_arg_595.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_595.value
                                temp_montant_forfaitaire_charges_68 = money_of_cents_string("1938")
                            elif match_arg_595.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_595.value
                                temp_montant_forfaitaire_charges_68 = money_of_cents_string("3767")
                            match_arg_596 = situation_familiale_calcul_apl_6
                            if match_arg_596.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_596.value
                                temp_montant_forfaitaire_charges_69 = money_of_cents_string("1938")
                            elif match_arg_596.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_596.value
                                temp_montant_forfaitaire_charges_69 = money_of_cents_string("3767")
                            if ((temp_montant_forfaitaire_charges_69 +
                                (money_of_cents_string("969") *
                                decimal_of_integer(nombre_personnes_a_charge_6))) >
                                (temp_montant_forfaitaire_charges_68 +
                                (money_of_cents_string("969") *
                                decimal_of_string("6.")))):
                                match_arg_597 = situation_familiale_calcul_apl_6
                                if match_arg_597.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_597.value
                                    temp_montant_forfaitaire_charges_70 = money_of_cents_string("1938")
                                elif match_arg_597.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_597.value
                                    temp_montant_forfaitaire_charges_70 = money_of_cents_string("3767")
                                return (temp_montant_forfaitaire_charges_70 +
                                    (money_of_cents_string("969") *
                                    decimal_of_string("6.")))
                            else:
                                match_arg_598 = situation_familiale_calcul_apl_6
                                if match_arg_598.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_598.value
                                    temp_montant_forfaitaire_charges_71 = money_of_cents_string("1938")
                                elif match_arg_598.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_598.value
                                    temp_montant_forfaitaire_charges_71 = money_of_cents_string("3767")
                                return (temp_montant_forfaitaire_charges_71 +
                                    (money_of_cents_string("969") *
                                    decimal_of_integer(nombre_personnes_a_charge_6)))
                        def temp_montant_forfaitaire_charges_72(_:Unit):
                            match_arg_599 = residence_7
                            if match_arg_599.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_599.value
                                temp_montant_forfaitaire_charges_73 = True
                            elif match_arg_599.code == Collectivite_Code.Guyane:
                                _ = match_arg_599.value
                                temp_montant_forfaitaire_charges_73 = False
                            elif match_arg_599.code == Collectivite_Code.Martinique:
                                _ = match_arg_599.value
                                temp_montant_forfaitaire_charges_73 = True
                            elif match_arg_599.code == Collectivite_Code.LaReunion:
                                _ = match_arg_599.value
                                temp_montant_forfaitaire_charges_73 = True
                            elif match_arg_599.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_599.value
                                temp_montant_forfaitaire_charges_73 = True
                            elif match_arg_599.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_599.value
                                temp_montant_forfaitaire_charges_73 = True
                            elif match_arg_599.code == Collectivite_Code.Metropole:
                                _ = match_arg_599.value
                                temp_montant_forfaitaire_charges_73 = False
                            elif match_arg_599.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_599.value
                                temp_montant_forfaitaire_charges_73 = False
                            elif match_arg_599.code == Collectivite_Code.Mayotte:
                                _ = match_arg_599.value
                                temp_montant_forfaitaire_charges_73 = True
                            return (((date_courante_13 >=
                                date_of_numbers(2022,7,1)) and
                                (date_courante_13 <
                                date_of_numbers(2023,1,1))) and
                                temp_montant_forfaitaire_charges_73)
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_72,
                                              temp_montant_forfaitaire_charges_67)
                    def temp_montant_forfaitaire_charges_74(_:Unit):
                        def temp_montant_forfaitaire_charges_75(_:Unit):
                            match_arg_600 = situation_familiale_calcul_apl_6
                            if match_arg_600.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_600.value
                                temp_montant_forfaitaire_charges_76 = money_of_cents_string("1938")
                            elif match_arg_600.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_600.value
                                temp_montant_forfaitaire_charges_76 = money_of_cents_string("3767")
                            return (temp_montant_forfaitaire_charges_76 +
                                (money_of_cents_string("969") *
                                multiplicateur_majoration_charges_1))
                        def temp_montant_forfaitaire_charges_77(_:Unit):
                            match_arg_601 = residence_7
                            if match_arg_601.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_601.value
                                temp_montant_forfaitaire_charges_78 = True
                            elif match_arg_601.code == Collectivite_Code.Guyane:
                                _ = match_arg_601.value
                                temp_montant_forfaitaire_charges_78 = False
                            elif match_arg_601.code == Collectivite_Code.Martinique:
                                _ = match_arg_601.value
                                temp_montant_forfaitaire_charges_78 = True
                            elif match_arg_601.code == Collectivite_Code.LaReunion:
                                _ = match_arg_601.value
                                temp_montant_forfaitaire_charges_78 = True
                            elif match_arg_601.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_601.value
                                temp_montant_forfaitaire_charges_78 = True
                            elif match_arg_601.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_601.value
                                temp_montant_forfaitaire_charges_78 = True
                            elif match_arg_601.code == Collectivite_Code.Metropole:
                                _ = match_arg_601.value
                                temp_montant_forfaitaire_charges_78 = False
                            elif match_arg_601.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_601.value
                                temp_montant_forfaitaire_charges_78 = False
                            elif match_arg_601.code == Collectivite_Code.Mayotte:
                                _ = match_arg_601.value
                                temp_montant_forfaitaire_charges_78 = True
                            return ((date_courante_13 >=
                                date_of_numbers(2023,1,1)) and
                                (temp_montant_forfaitaire_charges_78 and
                                copropriete_1))
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_77,
                                              temp_montant_forfaitaire_charges_75)
                    temp_montant_forfaitaire_charges_79 = handle_default(
                        SourcePosition(filename="", start_line=0,
                        start_column=1, end_line=0, end_column=1,
                        law_headings=[]), [temp_montant_forfaitaire_charges_74,
                        temp_montant_forfaitaire_charges_66,
                        temp_montant_forfaitaire_charges_53,
                        temp_montant_forfaitaire_charges_45,
                        temp_montant_forfaitaire_charges_37],
                        temp_montant_forfaitaire_charges_36,
                        temp_montant_forfaitaire_charges_35)
                except EmptyError:
                    def temp_montant_forfaitaire_charges_80(_:Unit):
                        raise EmptyError
                    def temp_montant_forfaitaire_charges_81(_:Unit):
                        return False
                    def temp_montant_forfaitaire_charges_82(_:Unit):
                        def temp_montant_forfaitaire_charges_83(_:Unit):
                            if ((money_of_cents_string("3614") +
                                (money_of_cents_string("929") *
                                decimal_of_integer(nombre_personnes_a_charge_6))) >
                                (money_of_cents_string("3614") +
                                (money_of_cents_string("929") *
                                decimal_of_string("6.")))):
                                return (money_of_cents_string("3614") +
                                    (money_of_cents_string("929") *
                                    decimal_of_string("6.")))
                            else:
                                return (money_of_cents_string("3614") +
                                    (money_of_cents_string("929") *
                                    decimal_of_integer(nombre_personnes_a_charge_6)))
                        def temp_montant_forfaitaire_charges_84(_:Unit):
                            match_arg_602 = residence_7
                            if match_arg_602.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_602.value
                                temp_montant_forfaitaire_charges_85 = True
                            elif match_arg_602.code == Collectivite_Code.Guyane:
                                _ = match_arg_602.value
                                temp_montant_forfaitaire_charges_85 = False
                            elif match_arg_602.code == Collectivite_Code.Martinique:
                                _ = match_arg_602.value
                                temp_montant_forfaitaire_charges_85 = True
                            elif match_arg_602.code == Collectivite_Code.LaReunion:
                                _ = match_arg_602.value
                                temp_montant_forfaitaire_charges_85 = True
                            elif match_arg_602.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_602.value
                                temp_montant_forfaitaire_charges_85 = True
                            elif match_arg_602.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_602.value
                                temp_montant_forfaitaire_charges_85 = True
                            elif match_arg_602.code == Collectivite_Code.Metropole:
                                _ = match_arg_602.value
                                temp_montant_forfaitaire_charges_85 = False
                            elif match_arg_602.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_602.value
                                temp_montant_forfaitaire_charges_85 = False
                            elif match_arg_602.code == Collectivite_Code.Mayotte:
                                _ = match_arg_602.value
                                temp_montant_forfaitaire_charges_85 = True
                            return (((date_courante_13 >=
                                date_of_numbers(2020,1,1)) and
                                (date_courante_13 <
                                date_of_numbers(2020,10,1))) and
                                temp_montant_forfaitaire_charges_85)
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_84,
                                              temp_montant_forfaitaire_charges_83)
                    def temp_montant_forfaitaire_charges_86(_:Unit):
                        def temp_montant_forfaitaire_charges_87(_:Unit):
                            if ((money_of_cents_string("3625") +
                                (money_of_cents_string("932") *
                                decimal_of_integer(nombre_personnes_a_charge_6))) >
                                (money_of_cents_string("3625") +
                                (money_of_cents_string("932") *
                                decimal_of_string("6.")))):
                                return (money_of_cents_string("3625") +
                                    (money_of_cents_string("932") *
                                    decimal_of_string("6.")))
                            else:
                                return (money_of_cents_string("3625") +
                                    (money_of_cents_string("932") *
                                    decimal_of_integer(nombre_personnes_a_charge_6)))
                        def temp_montant_forfaitaire_charges_88(_:Unit):
                            match_arg_603 = residence_7
                            if match_arg_603.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_603.value
                                temp_montant_forfaitaire_charges_89 = True
                            elif match_arg_603.code == Collectivite_Code.Guyane:
                                _ = match_arg_603.value
                                temp_montant_forfaitaire_charges_89 = False
                            elif match_arg_603.code == Collectivite_Code.Martinique:
                                _ = match_arg_603.value
                                temp_montant_forfaitaire_charges_89 = True
                            elif match_arg_603.code == Collectivite_Code.LaReunion:
                                _ = match_arg_603.value
                                temp_montant_forfaitaire_charges_89 = True
                            elif match_arg_603.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_603.value
                                temp_montant_forfaitaire_charges_89 = True
                            elif match_arg_603.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_603.value
                                temp_montant_forfaitaire_charges_89 = True
                            elif match_arg_603.code == Collectivite_Code.Metropole:
                                _ = match_arg_603.value
                                temp_montant_forfaitaire_charges_89 = False
                            elif match_arg_603.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_603.value
                                temp_montant_forfaitaire_charges_89 = False
                            elif match_arg_603.code == Collectivite_Code.Mayotte:
                                _ = match_arg_603.value
                                temp_montant_forfaitaire_charges_89 = True
                            return (((date_courante_13 >=
                                date_of_numbers(2020,10,1)) and
                                (date_courante_13 <
                                date_of_numbers(2021,10,1))) and
                                temp_montant_forfaitaire_charges_89)
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_88,
                                              temp_montant_forfaitaire_charges_87)
                    def temp_montant_forfaitaire_charges_90(_:Unit):
                        try:
                            def temp_montant_forfaitaire_charges_91(_:Unit):
                                if ((money_of_cents_string("3640") +
                                    (money_of_cents_string("936") *
                                    decimal_of_integer(nombre_personnes_a_charge_6))) >
                                    (money_of_cents_string("3640") +
                                    (money_of_cents_string("936") *
                                    decimal_of_string("6.")))):
                                    return (money_of_cents_string("3640") +
                                        (money_of_cents_string("936") *
                                        decimal_of_string("6.")))
                                else:
                                    return (money_of_cents_string("3640") +
                                        (money_of_cents_string("936") *
                                        decimal_of_integer(nombre_personnes_a_charge_6)))
                            def temp_montant_forfaitaire_charges_92(_:Unit):
                                match_arg_604 = residence_7
                                if match_arg_604.code == Collectivite_Code.Guadeloupe:
                                    _ = match_arg_604.value
                                    temp_montant_forfaitaire_charges_93 = True
                                elif match_arg_604.code == Collectivite_Code.Guyane:
                                    _ = match_arg_604.value
                                    temp_montant_forfaitaire_charges_93 = False
                                elif match_arg_604.code == Collectivite_Code.Martinique:
                                    _ = match_arg_604.value
                                    temp_montant_forfaitaire_charges_93 = True
                                elif match_arg_604.code == Collectivite_Code.LaReunion:
                                    _ = match_arg_604.value
                                    temp_montant_forfaitaire_charges_93 = True
                                elif match_arg_604.code == Collectivite_Code.SaintBarthelemy:
                                    _ = match_arg_604.value
                                    temp_montant_forfaitaire_charges_93 = True
                                elif match_arg_604.code == Collectivite_Code.SaintMartin:
                                    _ = match_arg_604.value
                                    temp_montant_forfaitaire_charges_93 = True
                                elif match_arg_604.code == Collectivite_Code.Metropole:
                                    _ = match_arg_604.value
                                    temp_montant_forfaitaire_charges_93 = False
                                elif match_arg_604.code == Collectivite_Code.SaintPierreEtMiquelon:
                                    _ = match_arg_604.value
                                    temp_montant_forfaitaire_charges_93 = False
                                elif match_arg_604.code == Collectivite_Code.Mayotte:
                                    _ = match_arg_604.value
                                    temp_montant_forfaitaire_charges_93 = True
                                return (((date_courante_13 >=
                                    date_of_numbers(2021,10,1)) and
                                    (date_courante_13 <
                                    date_of_numbers(2022,1,1))) and
                                    temp_montant_forfaitaire_charges_93)
                            return handle_default(SourcePosition(filename="",
                                                  start_line=0,
                                                  start_column=1,
                                                  end_line=0, end_column=1,
                                                  law_headings=[]), [],
                                                  temp_montant_forfaitaire_charges_92,
                                                  temp_montant_forfaitaire_charges_91)
                        except EmptyError:
                            match_arg_605 = residence_7
                            if match_arg_605.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_605.value
                                temp_montant_forfaitaire_charges_94 = True
                            elif match_arg_605.code == Collectivite_Code.Guyane:
                                _ = match_arg_605.value
                                temp_montant_forfaitaire_charges_94 = False
                            elif match_arg_605.code == Collectivite_Code.Martinique:
                                _ = match_arg_605.value
                                temp_montant_forfaitaire_charges_94 = True
                            elif match_arg_605.code == Collectivite_Code.LaReunion:
                                _ = match_arg_605.value
                                temp_montant_forfaitaire_charges_94 = True
                            elif match_arg_605.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_605.value
                                temp_montant_forfaitaire_charges_94 = True
                            elif match_arg_605.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_605.value
                                temp_montant_forfaitaire_charges_94 = True
                            elif match_arg_605.code == Collectivite_Code.Metropole:
                                _ = match_arg_605.value
                                temp_montant_forfaitaire_charges_94 = False
                            elif match_arg_605.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_605.value
                                temp_montant_forfaitaire_charges_94 = False
                            elif match_arg_605.code == Collectivite_Code.Mayotte:
                                _ = match_arg_605.value
                                temp_montant_forfaitaire_charges_94 = True
                            if (((date_courante_13 >=
                                date_of_numbers(2022,1,1)) and
                                (date_courante_13 <
                                date_of_numbers(2022,7,1))) and
                                temp_montant_forfaitaire_charges_94):
                                if ((money_of_cents_string("3640") +
                                    (money_of_cents_string("936") *
                                    decimal_of_integer(nombre_personnes_a_charge_6))) >
                                    (money_of_cents_string("3640") +
                                    (money_of_cents_string("936") *
                                    decimal_of_string("6.")))):
                                    return (money_of_cents_string("3640") +
                                        (money_of_cents_string("936") *
                                        decimal_of_string("6.")))
                                else:
                                    return (money_of_cents_string("3640") +
                                        (money_of_cents_string("936") *
                                        decimal_of_integer(nombre_personnes_a_charge_6)))
                            else:
                                raise EmptyError
                    def temp_montant_forfaitaire_charges_95(_:Unit):
                        def temp_montant_forfaitaire_charges_96(_:Unit):
                            if ((money_of_cents_string("3767") +
                                (money_of_cents_string("969") *
                                decimal_of_integer(nombre_personnes_a_charge_6))) >
                                (money_of_cents_string("3767") +
                                (money_of_cents_string("969") *
                                decimal_of_string("6.")))):
                                return (money_of_cents_string("3767") +
                                    (money_of_cents_string("969") *
                                    decimal_of_string("6.")))
                            else:
                                return (money_of_cents_string("3767") +
                                    (money_of_cents_string("969") *
                                    decimal_of_integer(nombre_personnes_a_charge_6)))
                        def temp_montant_forfaitaire_charges_97(_:Unit):
                            match_arg_606 = residence_7
                            if match_arg_606.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_606.value
                                temp_montant_forfaitaire_charges_98 = True
                            elif match_arg_606.code == Collectivite_Code.Guyane:
                                _ = match_arg_606.value
                                temp_montant_forfaitaire_charges_98 = False
                            elif match_arg_606.code == Collectivite_Code.Martinique:
                                _ = match_arg_606.value
                                temp_montant_forfaitaire_charges_98 = True
                            elif match_arg_606.code == Collectivite_Code.LaReunion:
                                _ = match_arg_606.value
                                temp_montant_forfaitaire_charges_98 = True
                            elif match_arg_606.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_606.value
                                temp_montant_forfaitaire_charges_98 = True
                            elif match_arg_606.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_606.value
                                temp_montant_forfaitaire_charges_98 = True
                            elif match_arg_606.code == Collectivite_Code.Metropole:
                                _ = match_arg_606.value
                                temp_montant_forfaitaire_charges_98 = False
                            elif match_arg_606.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_606.value
                                temp_montant_forfaitaire_charges_98 = False
                            elif match_arg_606.code == Collectivite_Code.Mayotte:
                                _ = match_arg_606.value
                                temp_montant_forfaitaire_charges_98 = True
                            return (((date_courante_13 >=
                                date_of_numbers(2022,7,1)) and
                                (date_courante_13 <
                                date_of_numbers(2023,1,1))) and
                                temp_montant_forfaitaire_charges_98)
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_97,
                                              temp_montant_forfaitaire_charges_96)
                    def temp_montant_forfaitaire_charges_99(_:Unit):
                        def temp_montant_forfaitaire_charges_100(_:Unit):
                            return (money_of_cents_string("3767") +
                                (money_of_cents_string("969") *
                                multiplicateur_majoration_charges_1))
                        def temp_montant_forfaitaire_charges_101(_:Unit):
                            match_arg_607 = residence_7
                            if match_arg_607.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_607.value
                                temp_montant_forfaitaire_charges_102 = True
                            elif match_arg_607.code == Collectivite_Code.Guyane:
                                _ = match_arg_607.value
                                temp_montant_forfaitaire_charges_102 = False
                            elif match_arg_607.code == Collectivite_Code.Martinique:
                                _ = match_arg_607.value
                                temp_montant_forfaitaire_charges_102 = True
                            elif match_arg_607.code == Collectivite_Code.LaReunion:
                                _ = match_arg_607.value
                                temp_montant_forfaitaire_charges_102 = True
                            elif match_arg_607.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_607.value
                                temp_montant_forfaitaire_charges_102 = True
                            elif match_arg_607.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_607.value
                                temp_montant_forfaitaire_charges_102 = True
                            elif match_arg_607.code == Collectivite_Code.Metropole:
                                _ = match_arg_607.value
                                temp_montant_forfaitaire_charges_102 = False
                            elif match_arg_607.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_607.value
                                temp_montant_forfaitaire_charges_102 = False
                            elif match_arg_607.code == Collectivite_Code.Mayotte:
                                _ = match_arg_607.value
                                temp_montant_forfaitaire_charges_102 = True
                            return ((date_courante_13 >=
                                date_of_numbers(2023,1,1)) and
                                temp_montant_forfaitaire_charges_102)
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_montant_forfaitaire_charges_101,
                                              temp_montant_forfaitaire_charges_100)
                    temp_montant_forfaitaire_charges_79 = handle_default(
                        SourcePosition(filename="", start_line=0,
                        start_column=1, end_line=0, end_column=1,
                        law_headings=[]), [temp_montant_forfaitaire_charges_99,
                        temp_montant_forfaitaire_charges_95,
                        temp_montant_forfaitaire_charges_90,
                        temp_montant_forfaitaire_charges_86,
                        temp_montant_forfaitaire_charges_82],
                        temp_montant_forfaitaire_charges_81,
                        temp_montant_forfaitaire_charges_80)
            except EmptyError:
                def temp_montant_forfaitaire_charges_103(_:Unit):
                    raise EmptyError
                def temp_montant_forfaitaire_charges_104(_:Unit):
                    return False
                def temp_montant_forfaitaire_charges_105(_:Unit):
                    def temp_montant_forfaitaire_charges_106(_:Unit):
                        match_arg_608 = situation_familiale_calcul_apl_6
                        if match_arg_608.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_608.value
                            temp_montant_forfaitaire_charges_107 = money_of_cents_string("2699")
                        elif match_arg_608.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_608.value
                            temp_montant_forfaitaire_charges_107 = money_of_cents_string("5399")
                        return (temp_montant_forfaitaire_charges_107 +
                            (money_of_cents_string("1224") *
                            decimal_of_integer(nombre_personnes_a_charge_6)))
                    def temp_montant_forfaitaire_charges_108(_:Unit):
                        return (((date_courante_13 >=
                            date_of_numbers(2020,10,1)) and
                            (date_courante_13 <
                            date_of_numbers(2021,10,1))) and copropriete_1)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_montant_forfaitaire_charges_108,
                                          temp_montant_forfaitaire_charges_106)
                def temp_montant_forfaitaire_charges_109(_:Unit):
                    def temp_montant_forfaitaire_charges_110(_:Unit):
                        match_arg_609 = situation_familiale_calcul_apl_6
                        if match_arg_609.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_609.value
                            temp_montant_forfaitaire_charges_111 = money_of_cents_string("2710")
                        elif match_arg_609.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_609.value
                            temp_montant_forfaitaire_charges_111 = money_of_cents_string("5422")
                        return (temp_montant_forfaitaire_charges_111 +
                            (money_of_cents_string("1229") *
                            decimal_of_integer(nombre_personnes_a_charge_6)))
                    def temp_montant_forfaitaire_charges_112(_:Unit):
                        return (((date_courante_13 >=
                            date_of_numbers(2021,10,1)) and
                            (date_courante_13 <
                            date_of_numbers(2022,7,1))) and copropriete_1)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_montant_forfaitaire_charges_112,
                                          temp_montant_forfaitaire_charges_110)
                def temp_montant_forfaitaire_charges_113(_:Unit):
                    def temp_montant_forfaitaire_charges_114(_:Unit):
                        match_arg_610 = situation_familiale_calcul_apl_6
                        if match_arg_610.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_610.value
                            temp_montant_forfaitaire_charges_115 = money_of_cents_string("2805")
                        elif match_arg_610.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_610.value
                            temp_montant_forfaitaire_charges_115 = money_of_cents_string("5612")
                        return (temp_montant_forfaitaire_charges_115 +
                            (money_of_cents_string("1272") *
                            multiplicateur_majoration_charges_1))
                    def temp_montant_forfaitaire_charges_116(_:Unit):
                        return ((date_courante_13 >=
                            date_of_numbers(2022,7,1)) and copropriete_1)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_montant_forfaitaire_charges_116,
                                          temp_montant_forfaitaire_charges_114)
                temp_montant_forfaitaire_charges_79 = handle_default(
                    SourcePosition(filename="", start_line=0, start_column=1,
                    end_line=0, end_column=1,
                    law_headings=[]), [temp_montant_forfaitaire_charges_113,
                    temp_montant_forfaitaire_charges_109,
                    temp_montant_forfaitaire_charges_105],
                    temp_montant_forfaitaire_charges_104,
                    temp_montant_forfaitaire_charges_103)
        except EmptyError:
            def temp_montant_forfaitaire_charges_117(_:Unit):
                raise EmptyError
            def temp_montant_forfaitaire_charges_118(_:Unit):
                return False
            def temp_montant_forfaitaire_charges_119(_:Unit):
                def temp_montant_forfaitaire_charges_120(_:Unit):
                    if (nombre_personnes_a_charge_6 ==
                        integer_of_string("0")):
                        return money_of_cents_string("5399")
                    else:
                        return (money_of_cents_string("5399") +
                            (money_of_cents_string("1224") *
                            decimal_of_integer(nombre_personnes_a_charge_6)))
                def temp_montant_forfaitaire_charges_121(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2020,10,1)) and (date_courante_13 <
                        date_of_numbers(2021,10,1)))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_121,
                                      temp_montant_forfaitaire_charges_120)
            def temp_montant_forfaitaire_charges_122(_:Unit):
                def temp_montant_forfaitaire_charges_123(_:Unit):
                    if (nombre_personnes_a_charge_6 ==
                        integer_of_string("0")):
                        return money_of_cents_string("5422")
                    else:
                        return (money_of_cents_string("5422") +
                            (money_of_cents_string("1229") *
                            multiplicateur_majoration_charges_1))
                def temp_montant_forfaitaire_charges_124(_:Unit):
                    return ((date_courante_13 >=
                        date_of_numbers(2021,10,1)) and (date_courante_13 <
                        date_of_numbers(2022,7,1)))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_124,
                                      temp_montant_forfaitaire_charges_123)
            def temp_montant_forfaitaire_charges_125(_:Unit):
                def temp_montant_forfaitaire_charges_126(_:Unit):
                    if (nombre_personnes_a_charge_6 ==
                        integer_of_string("0")):
                        return money_of_cents_string("5612")
                    else:
                        return (money_of_cents_string("5612") +
                            (money_of_cents_string("1272") *
                            multiplicateur_majoration_charges_1))
                def temp_montant_forfaitaire_charges_127(_:Unit):
                    return (date_courante_13 >= date_of_numbers(2022,7,1))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_montant_forfaitaire_charges_127,
                                      temp_montant_forfaitaire_charges_126)
            temp_montant_forfaitaire_charges_79 = handle_default(SourcePosition(filename="",
                                                                 start_line=0,
                                                                 start_column=1,
                                                                 end_line=0, end_column=1,
                                                                 law_headings=[]), [temp_montant_forfaitaire_charges_125,
                                                                 temp_montant_forfaitaire_charges_122,
                                                                 temp_montant_forfaitaire_charges_119],
                                                                 temp_montant_forfaitaire_charges_118,
                                                                 temp_montant_forfaitaire_charges_117)
    except EmptyError:
        temp_montant_forfaitaire_charges_79 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=883, start_column=11,
                                             end_line=883, end_column=38,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_charges_1 = temp_montant_forfaitaire_charges_79
    try:
        def temp_seuil_minimal_ressources_menage(_:Unit):
            raise EmptyError
        def temp_seuil_minimal_ressources_menage_1(_:Unit):
            return False
        def temp_seuil_minimal_ressources_menage_2(_:Unit):
            def temp_seuil_minimal_ressources_menage_3(_:Unit):
                return montant_forfaitaire_d842_12
            def temp_seuil_minimal_ressources_menage_4(_:Unit):
                match_arg_611 = type_travaux_logement_1
                if match_arg_611.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                    _ = match_arg_611.value
                    temp_seuil_minimal_ressources_menage_5 = False
                elif match_arg_611.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                    _ = match_arg_611.value
                    temp_seuil_minimal_ressources_menage_5 = True
                elif match_arg_611.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                    _ = match_arg_611.value
                    temp_seuil_minimal_ressources_menage_5 = False
                elif match_arg_611.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                    _ = match_arg_611.value
                    temp_seuil_minimal_ressources_menage_5 = False
                return ((date_signature_pret_2 >
                    date_of_numbers(1994,9,30)) and
                    temp_seuil_minimal_ressources_menage_5)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_seuil_minimal_ressources_menage_4,
                                  temp_seuil_minimal_ressources_menage_3)
        def temp_seuil_minimal_ressources_menage_6(_:Unit):
            def temp_seuil_minimal_ressources_menage_7(_:Unit):
                return (mensualite_principale_1 * coefficient_d842_12)
            def temp_seuil_minimal_ressources_menage_8(_:Unit):
                match_arg_612 = type_travaux_logement_1
                if match_arg_612.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                    _ = match_arg_612.value
                    temp_seuil_minimal_ressources_menage_9 = False
                elif match_arg_612.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                    _ = match_arg_612.value
                    temp_seuil_minimal_ressources_menage_9 = False
                elif match_arg_612.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                    _ = match_arg_612.value
                    temp_seuil_minimal_ressources_menage_9 = True
                elif match_arg_612.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                    _ = match_arg_612.value
                    temp_seuil_minimal_ressources_menage_9 = False
                match_arg_613 = type_travaux_logement_1
                if match_arg_613.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                    _ = match_arg_613.value
                    temp_seuil_minimal_ressources_menage_10 = True
                elif match_arg_613.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                    _ = match_arg_613.value
                    temp_seuil_minimal_ressources_menage_10 = False
                elif match_arg_613.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                    _ = match_arg_613.value
                    temp_seuil_minimal_ressources_menage_10 = False
                elif match_arg_613.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                    _ = match_arg_613.value
                    temp_seuil_minimal_ressources_menage_10 = False
                match_arg_614 = type_travaux_logement_1
                if match_arg_614.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                    _ = match_arg_614.value
                    temp_seuil_minimal_ressources_menage_11 = False
                elif match_arg_614.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                    _ = match_arg_614.value
                    temp_seuil_minimal_ressources_menage_11 = False
                elif match_arg_614.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                    _ = match_arg_614.value
                    temp_seuil_minimal_ressources_menage_11 = False
                elif match_arg_614.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                    _ = match_arg_614.value
                    temp_seuil_minimal_ressources_menage_11 = True
                return (((date_signature_pret_2 >=
                    date_of_numbers(1992,9,30)) and (date_signature_pret_2 <=
                    date_of_numbers(1994,9,30))) or ((date_signature_pret_2 >
                    date_of_numbers(1994,9,30)) and
                    (temp_seuil_minimal_ressources_menage_11 or
                    (temp_seuil_minimal_ressources_menage_10 or
                    temp_seuil_minimal_ressources_menage_9))))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_seuil_minimal_ressources_menage_8,
                                  temp_seuil_minimal_ressources_menage_7)
        temp_seuil_minimal_ressources_menage_12 = handle_default(SourcePosition(filename="",
                                                                 start_line=0,
                                                                 start_column=1,
                                                                 end_line=0, end_column=1,
                                                                 law_headings=[]), [temp_seuil_minimal_ressources_menage_6,
                                                                 temp_seuil_minimal_ressources_menage_2],
                                                                 temp_seuil_minimal_ressources_menage_1,
                                                                 temp_seuil_minimal_ressources_menage)
    except EmptyError:
        temp_seuil_minimal_ressources_menage_12 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=895, start_column=11,
                                             end_line=895, end_column=42,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    seuil_minimal_ressources_menage = temp_seuil_minimal_ressources_menage_12
    def temp_traitement_aide_finale_minoration_forfaitaire_4(aide_finale_23:Money):
        try:
            if ((aide_finale_23 - montant_forfaitaire_d842_6) <
                money_of_cents_string("0")):
                return money_of_cents_string("0")
            else:
                return (aide_finale_23 - montant_forfaitaire_d842_6)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=921,
                                                 start_column=10,
                                                 end_line=921, end_column=32,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_minoration_forfaitaire_4 = temp_traitement_aide_finale_minoration_forfaitaire_4
    def temp_calcul_plafond_mensualite_d842_6_avec_copropriete(date_calcul_1:Date, nombre_personnes_a_charge_8:Integer):
        try:
            try:
                try:
                    try:
                        def temp_calcul_plafond_mensualite_d842_6_avec_copropriete_1(_:Unit):
                            return (calcul_plafond_mensualite_d842_6_base(
                                date_calcul_1, nombre_personnes_a_charge_8) *
                                decimal_of_string("0.75"))
                        def temp_calcul_plafond_mensualite_d842_6_avec_copropriete_2(_:Unit):
                            return (((date_courante_13 >=
                                date_of_numbers(2020,10,1)) and
                                (date_courante_13 <
                                date_of_numbers(2021,10,1))) and
                                copropriete_1)
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_calcul_plafond_mensualite_d842_6_avec_copropriete_2,
                                              temp_calcul_plafond_mensualite_d842_6_avec_copropriete_1)
                    except EmptyError:
                        if (((date_courante_13 >=
                            date_of_numbers(2021,10,1)) and
                            (date_courante_13 <
                            date_of_numbers(2022,7,1))) and
                            copropriete_1):
                            return (calcul_plafond_mensualite_d842_6_base(
                                date_calcul_1, nombre_personnes_a_charge_8) *
                                decimal_of_string("0.75"))
                        else:
                            raise EmptyError
                except EmptyError:
                    if ((date_courante_13 >= date_of_numbers(2022,7,1)) and
                        copropriete_1):
                        return (calcul_plafond_mensualite_d842_6_base(
                            date_calcul_1, nombre_personnes_a_charge_8) *
                            decimal_of_string("0.75"))
                    else:
                        raise EmptyError
            except EmptyError:
                if (date_courante_13 >=
                    date_of_numbers(2020,1,1)):
                    return calcul_plafond_mensualite_d842_6_base(date_calcul_1,
                                                                 nombre_personnes_a_charge_8)
                else:
                    raise EmptyError
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=891,
                                                 start_column=10,
                                                 end_line=891, end_column=26,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    calcul_plafond_mensualite_d842_6_avec_copropriete = temp_calcul_plafond_mensualite_d842_6_avec_copropriete
    def temp_depense_nette_minimale_1(allocation_mensuelle_6:Money):
        try:
            return ((charges_mensuelles_pret +
                montant_forfaitaire_charges_1) - allocation_mensuelle_6)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=897,
                                                 start_column=11,
                                                 end_line=897, end_column=33,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    depense_nette_minimale_1 = temp_depense_nette_minimale_1
    try:
        try:
            def temp_ressources_menage_arrondies_seuil(_:Unit):
                return ressources_menage_arrondies_base
            def temp_ressources_menage_arrondies_seuil_1(_:Unit):
                return situation_r822_11_13_17_1
            temp_ressources_menage_arrondies_seuil_2 = handle_default(
                SourcePosition(filename="", start_line=0, start_column=1,
                end_line=0, end_column=1, law_headings=[]), [],
                temp_ressources_menage_arrondies_seuil_1,
                temp_ressources_menage_arrondies_seuil)
        except EmptyError:
            if (ressources_menage_arrondies_base <=
                seuil_minimal_ressources_menage):
                temp_ressources_menage_arrondies_seuil_2 = (money_round(((seuil_minimal_ressources_menage +
                    money_of_cents_string("4999")) *
                    decimal_of_string("0.01"))) * decimal_of_string("100."))
            else:
                temp_ressources_menage_arrondies_seuil_2 = ressources_menage_arrondies_base
    except EmptyError:
        temp_ressources_menage_arrondies_seuil_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=865, start_column=10,
                                             end_line=865, end_column=15,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    ressources_menage_arrondies_seuil = temp_ressources_menage_arrondies_seuil_2
    def temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom(date_calcul_2:Date, nombre_personnes_a_charge_9:Integer):
        try:
            try:
                try:
                    try:
                        try:
                            try:
                                def temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_1(_:Unit):
                                    return calcul_plafond_mensualite_d842_6_avec_copropriete(
                                        date_calcul_2,
                                        integer_of_string("6"))
                                def temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_2(_:Unit):
                                    match_arg_615 = residence_7
                                    if match_arg_615.code == Collectivite_Code.Guadeloupe:
                                        _ = match_arg_615.value
                                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_3 = True
                                    elif match_arg_615.code == Collectivite_Code.Guyane:
                                        _ = match_arg_615.value
                                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_3 = False
                                    elif match_arg_615.code == Collectivite_Code.Martinique:
                                        _ = match_arg_615.value
                                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_3 = True
                                    elif match_arg_615.code == Collectivite_Code.LaReunion:
                                        _ = match_arg_615.value
                                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_3 = True
                                    elif match_arg_615.code == Collectivite_Code.SaintBarthelemy:
                                        _ = match_arg_615.value
                                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_3 = True
                                    elif match_arg_615.code == Collectivite_Code.SaintMartin:
                                        _ = match_arg_615.value
                                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_3 = True
                                    elif match_arg_615.code == Collectivite_Code.Metropole:
                                        _ = match_arg_615.value
                                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_3 = False
                                    elif match_arg_615.code == Collectivite_Code.SaintPierreEtMiquelon:
                                        _ = match_arg_615.value
                                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_3 = False
                                    elif match_arg_615.code == Collectivite_Code.Mayotte:
                                        _ = match_arg_615.value
                                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_3 = True
                                    return (((date_courante_13 >=
                                        date_of_numbers(2020,1,1)) and
                                        (date_courante_13 <
                                        date_of_numbers(2020,10,1))) and
                                        ((nombre_personnes_a_charge_9 >=
                                        integer_of_string("6")) and
                                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_3))
                                return handle_default(SourcePosition(filename="",
                                                      start_line=0,
                                                      start_column=1,
                                                      end_line=0, end_column=1,
                                                      law_headings=[]), [],
                                                      temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_2,
                                                      temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_1)
                            except EmptyError:
                                match_arg_616 = residence_7
                                if match_arg_616.code == Collectivite_Code.Guadeloupe:
                                    _ = match_arg_616.value
                                    temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_4 = True
                                elif match_arg_616.code == Collectivite_Code.Guyane:
                                    _ = match_arg_616.value
                                    temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_4 = False
                                elif match_arg_616.code == Collectivite_Code.Martinique:
                                    _ = match_arg_616.value
                                    temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_4 = True
                                elif match_arg_616.code == Collectivite_Code.LaReunion:
                                    _ = match_arg_616.value
                                    temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_4 = True
                                elif match_arg_616.code == Collectivite_Code.SaintBarthelemy:
                                    _ = match_arg_616.value
                                    temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_4 = True
                                elif match_arg_616.code == Collectivite_Code.SaintMartin:
                                    _ = match_arg_616.value
                                    temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_4 = True
                                elif match_arg_616.code == Collectivite_Code.Metropole:
                                    _ = match_arg_616.value
                                    temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_4 = False
                                elif match_arg_616.code == Collectivite_Code.SaintPierreEtMiquelon:
                                    _ = match_arg_616.value
                                    temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_4 = False
                                elif match_arg_616.code == Collectivite_Code.Mayotte:
                                    _ = match_arg_616.value
                                    temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_4 = True
                                if (((date_courante_13 >=
                                    date_of_numbers(2020,10,1)) and
                                    (date_courante_13 <
                                    date_of_numbers(2021,10,1))) and
                                    ((nombre_personnes_a_charge_9 >=
                                    integer_of_string("6")) and
                                    temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_4)):
                                    return calcul_plafond_mensualite_d842_6_avec_copropriete(
                                        date_calcul_2,
                                        integer_of_string("6"))
                                else:
                                    raise EmptyError
                        except EmptyError:
                            match_arg_617 = residence_7
                            if match_arg_617.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_617.value
                                temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_5 = True
                            elif match_arg_617.code == Collectivite_Code.Guyane:
                                _ = match_arg_617.value
                                temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_5 = False
                            elif match_arg_617.code == Collectivite_Code.Martinique:
                                _ = match_arg_617.value
                                temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_5 = True
                            elif match_arg_617.code == Collectivite_Code.LaReunion:
                                _ = match_arg_617.value
                                temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_5 = True
                            elif match_arg_617.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_617.value
                                temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_5 = True
                            elif match_arg_617.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_617.value
                                temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_5 = True
                            elif match_arg_617.code == Collectivite_Code.Metropole:
                                _ = match_arg_617.value
                                temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_5 = False
                            elif match_arg_617.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_617.value
                                temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_5 = False
                            elif match_arg_617.code == Collectivite_Code.Mayotte:
                                _ = match_arg_617.value
                                temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_5 = True
                            if (((date_courante_13 >=
                                date_of_numbers(2021,10,1)) and
                                (date_courante_13 <
                                date_of_numbers(2022,1,1))) and
                                ((nombre_personnes_a_charge_9 >=
                                integer_of_string("6")) and
                                temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_5)):
                                return calcul_plafond_mensualite_d842_6_avec_copropriete(
                                    date_calcul_2, integer_of_string("6"))
                            else:
                                raise EmptyError
                    except EmptyError:
                        match_arg_618 = residence_7
                        if match_arg_618.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_618.value
                            temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_6 = True
                        elif match_arg_618.code == Collectivite_Code.Guyane:
                            _ = match_arg_618.value
                            temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_6 = False
                        elif match_arg_618.code == Collectivite_Code.Martinique:
                            _ = match_arg_618.value
                            temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_6 = True
                        elif match_arg_618.code == Collectivite_Code.LaReunion:
                            _ = match_arg_618.value
                            temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_6 = True
                        elif match_arg_618.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_618.value
                            temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_6 = True
                        elif match_arg_618.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_618.value
                            temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_6 = True
                        elif match_arg_618.code == Collectivite_Code.Metropole:
                            _ = match_arg_618.value
                            temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_6 = False
                        elif match_arg_618.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_618.value
                            temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_6 = False
                        elif match_arg_618.code == Collectivite_Code.Mayotte:
                            _ = match_arg_618.value
                            temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_6 = True
                        if (((date_courante_13 >=
                            date_of_numbers(2022,1,1)) and
                            (date_courante_13 <
                            date_of_numbers(2022,7,1))) and
                            ((nombre_personnes_a_charge_9 >=
                            integer_of_string("6")) and
                            temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_6)):
                            return calcul_plafond_mensualite_d842_6_avec_copropriete(
                                date_calcul_2, integer_of_string("6"))
                        else:
                            raise EmptyError
                except EmptyError:
                    match_arg_619 = residence_7
                    if match_arg_619.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_619.value
                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_7 = True
                    elif match_arg_619.code == Collectivite_Code.Guyane:
                        _ = match_arg_619.value
                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_7 = False
                    elif match_arg_619.code == Collectivite_Code.Martinique:
                        _ = match_arg_619.value
                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_7 = True
                    elif match_arg_619.code == Collectivite_Code.LaReunion:
                        _ = match_arg_619.value
                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_7 = True
                    elif match_arg_619.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_619.value
                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_7 = True
                    elif match_arg_619.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_619.value
                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_7 = True
                    elif match_arg_619.code == Collectivite_Code.Metropole:
                        _ = match_arg_619.value
                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_7 = False
                    elif match_arg_619.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_619.value
                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_7 = False
                    elif match_arg_619.code == Collectivite_Code.Mayotte:
                        _ = match_arg_619.value
                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_7 = True
                    if (((date_courante_13 >= date_of_numbers(2022,7,1)) and
                        (date_courante_13 < date_of_numbers(2023,1,1))) and
                        ((nombre_personnes_a_charge_9 >=
                        integer_of_string("6")) and
                        temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom_7)):
                        return calcul_plafond_mensualite_d842_6_avec_copropriete(
                            date_calcul_2, integer_of_string("6"))
                    else:
                        raise EmptyError
            except EmptyError:
                if (date_courante_13 >=
                    date_of_numbers(2020,1,1)):
                    return calcul_plafond_mensualite_d842_6_avec_copropriete(
                        date_calcul_2, nombre_personnes_a_charge_9)
                else:
                    raise EmptyError
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=892,
                                                 start_column=10,
                                                 end_line=892, end_column=33,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom = temp_calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom
    try:
        temp_calcul_equivalence_loyer_minimale_dot_date_courante_3 = date_courante_13
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_date_courante_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=961, start_column=14,
                                             end_line=961, end_column=61,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_date_courante_3 = temp_calcul_equivalence_loyer_minimale_dot_date_courante_3
    try:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_3 = ressources_menage_arrondies_seuil
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4419,
                                             start_column=14, end_line=4419,
                                             end_column=75,
                                             law_headings=["Article D842-6",
                                             "Section 2 : Accession à la propriété",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_3 = temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_3
    try:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_3 = True
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4418,
                                             start_column=14, end_line=4418,
                                             end_column=69,
                                             law_headings=["Article D842-6",
                                             "Section 2 : Accession à la propriété",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_3 = temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_3
    try:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_3 = calcul_nombre_parts_dot_n_nombre_parts_d832_11_1
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4421,
                                             start_column=14, end_line=4421,
                                             end_column=70,
                                             law_headings=["Article D842-6",
                                             "Section 2 : Accession à la propriété",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_3 = temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_3
    result_14 = calcul_equivalence_loyer_minimale(CalculEquivalenceLoyerMinimaleIn(date_courante_in = calcul_equivalence_loyer_minimale_dot_date_courante_3,
                                                  ressources_menage_arrondies_in = calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_3,
                                                  condition_2_du_832_25_in = calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_3,
                                                  n_nombre_parts_d832_25_in = calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_3))
    calcul_equivalence_loyer_minimale_dot_montant_3 = result_14.montant
    try:
        temp_calcul_apl_logement_foyer_dot_residence_1 = residence_7
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_residence_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=940, start_column=14,
                                             end_line=940, end_column=49,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_residence_1 = temp_calcul_apl_logement_foyer_dot_residence_1
    try:
        temp_calcul_apl_logement_foyer_dot_logement_foyer_jeunes_travailleurs_1 = False
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_logement_foyer_jeunes_travailleurs_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=943, start_column=14,
                                             end_line=943, end_column=74,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_logement_foyer_jeunes_travailleurs_1 = temp_calcul_apl_logement_foyer_dot_logement_foyer_jeunes_travailleurs_1
    try:
        temp_calcul_apl_logement_foyer_dot_type_logement_foyer_1 = TypeLogementFoyer(TypeLogementFoyer_Code.ResidenceSociale,
            Unit())
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_type_logement_foyer_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=941, start_column=14,
                                             end_line=941, end_column=59,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_type_logement_foyer_1 = temp_calcul_apl_logement_foyer_dot_type_logement_foyer_1
    try:
        temp_calcul_apl_logement_foyer_dot_date_conventionnement_1 = date_of_numbers(1970,1,1)
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_date_conventionnement_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=945, start_column=14,
                                             end_line=945, end_column=61,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_date_conventionnement_1 = temp_calcul_apl_logement_foyer_dot_date_conventionnement_1
    try:
        temp_calcul_apl_logement_foyer_dot_ressources_menage_arrondies_1 = ressources_menage_arrondies_seuil
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_ressources_menage_arrondies_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=949, start_column=14,
                                             end_line=949, end_column=67,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_ressources_menage_arrondies_1 = temp_calcul_apl_logement_foyer_dot_ressources_menage_arrondies_1
    try:
        temp_calcul_apl_logement_foyer_dot_nombre_personnes_a_charge_1 = nombre_personnes_a_charge_6
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_nombre_personnes_a_charge_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=951, start_column=14,
                                             end_line=951, end_column=65,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_nombre_personnes_a_charge_1 = temp_calcul_apl_logement_foyer_dot_nombre_personnes_a_charge_1
    try:
        temp_calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl_1 = situation_familiale_calcul_apl_6
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=953, start_column=14,
                                             end_line=953, end_column=70,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl_1 = temp_calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl_1
    try:
        temp_calcul_apl_logement_foyer_dot_zone_1 = zone_4
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_zone_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=955, start_column=14,
                                             end_line=955, end_column=44,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_zone_1 = temp_calcul_apl_logement_foyer_dot_zone_1
    try:
        temp_calcul_apl_logement_foyer_dot_date_courante_1 = date_courante_13
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_date_courante_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=957, start_column=14,
                                             end_line=957, end_column=53,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_date_courante_1 = temp_calcul_apl_logement_foyer_dot_date_courante_1
    try:
        temp_calcul_apl_logement_foyer_dot_redevance_1 = money_of_cents_string("0")
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_redevance_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=947, start_column=14,
                                             end_line=947, end_column=49,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_redevance_1 = temp_calcul_apl_logement_foyer_dot_redevance_1
    def temp_calcul_apl_logement_foyer_dot_condition_2_du_832_25_1(_:Unit):
        return True
    calcul_apl_logement_foyer_dot_condition_2_du_832_25_1 = temp_calcul_apl_logement_foyer_dot_condition_2_du_832_25_1
    def temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_4(_:Unit):
        try:
            def temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_5(_:Unit):
                return True
            def temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_6(_:Unit):
                match_arg_620 = residence_7
                if match_arg_620.code == Collectivite_Code.Guadeloupe:
                    _ = match_arg_620.value
                    temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_7 = False
                elif match_arg_620.code == Collectivite_Code.Guyane:
                    _ = match_arg_620.value
                    temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_7 = False
                elif match_arg_620.code == Collectivite_Code.Martinique:
                    _ = match_arg_620.value
                    temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_7 = False
                elif match_arg_620.code == Collectivite_Code.LaReunion:
                    _ = match_arg_620.value
                    temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_7 = False
                elif match_arg_620.code == Collectivite_Code.SaintBarthelemy:
                    _ = match_arg_620.value
                    temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_7 = True
                elif match_arg_620.code == Collectivite_Code.SaintMartin:
                    _ = match_arg_620.value
                    temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_7 = True
                elif match_arg_620.code == Collectivite_Code.Metropole:
                    _ = match_arg_620.value
                    temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_7 = False
                elif match_arg_620.code == Collectivite_Code.SaintPierreEtMiquelon:
                    _ = match_arg_620.value
                    temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_7 = False
                elif match_arg_620.code == Collectivite_Code.Mayotte:
                    _ = match_arg_620.value
                    temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_7 = False
                return (((date_courante_13 >= date_of_numbers(2019,9,1)) and
                    (date_courante_13 < date_of_numbers(2023,4,5))) and
                    temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_7)
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_6,
                                  temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_5)
        except EmptyError:
            match_arg_621 = residence_7
            if match_arg_621.code == Collectivite_Code.Guadeloupe:
                _ = match_arg_621.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_8 = True
            elif match_arg_621.code == Collectivite_Code.Guyane:
                _ = match_arg_621.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_8 = True
            elif match_arg_621.code == Collectivite_Code.Martinique:
                _ = match_arg_621.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_8 = True
            elif match_arg_621.code == Collectivite_Code.LaReunion:
                _ = match_arg_621.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_8 = True
            elif match_arg_621.code == Collectivite_Code.SaintBarthelemy:
                _ = match_arg_621.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_8 = False
            elif match_arg_621.code == Collectivite_Code.SaintMartin:
                _ = match_arg_621.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_8 = False
            elif match_arg_621.code == Collectivite_Code.Metropole:
                _ = match_arg_621.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_8 = False
            elif match_arg_621.code == Collectivite_Code.SaintPierreEtMiquelon:
                _ = match_arg_621.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_8 = False
            elif match_arg_621.code == Collectivite_Code.Mayotte:
                _ = match_arg_621.value
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_8 = True
            if (((date_courante_13 >= date_of_numbers(2019,9,1)) and
                (date_courante_13 < date_of_numbers(2023,4,5))) and
                temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_8):
                return True
            else:
                raise EmptyError
    calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_1 = temp_calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_4
    def temp_calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_1(_:Unit):
        raise EmptyError
    calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_2 = temp_calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_1
    result_15 = calcul_aide_personnalisee_logement_foyer(CalculAidePersonnaliseeLogementFoyerIn(residence_in = calcul_apl_logement_foyer_dot_residence_1,
                                                         logement_foyer_jeunes_travailleurs_in = calcul_apl_logement_foyer_dot_logement_foyer_jeunes_travailleurs_1,
                                                         type_logement_foyer_in = calcul_apl_logement_foyer_dot_type_logement_foyer_1,
                                                         date_conventionnement_in = calcul_apl_logement_foyer_dot_date_conventionnement_1,
                                                         ressources_menage_arrondies_in = calcul_apl_logement_foyer_dot_ressources_menage_arrondies_1,
                                                         nombre_personnes_a_charge_in = calcul_apl_logement_foyer_dot_nombre_personnes_a_charge_1,
                                                         situation_familiale_calcul_apl_in = calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl_1,
                                                         zone_in = calcul_apl_logement_foyer_dot_zone_1,
                                                         date_courante_in = calcul_apl_logement_foyer_dot_date_courante_1,
                                                         redevance_in = calcul_apl_logement_foyer_dot_redevance_1,
                                                         condition_2_du_832_25_in = calcul_apl_logement_foyer_dot_condition_2_du_832_25_1,
                                                         limitation_majoration_personnes_a_charge_in = calcul_apl_logement_foyer_dot_limitation_majoration_personnes_a_charge_1,
                                                         n_nombre_parts_d832_25_in = calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_2))
    calcul_apl_logement_foyer_dot_coefficient_multiplicateur_d832_25_1 = result_15.coefficient_multiplicateur_d832_25
    calcul_apl_logement_foyer_dot_coefficient_r_d832_25_1 = result_15.coefficient_r_d832_25
    calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_3 = result_15.n_nombre_parts_d832_25
    calcul_apl_logement_foyer_dot_equivalence_loyer_eligible_1 = result_15.equivalence_loyer_eligible
    calcul_apl_logement_foyer_dot_plafond_equivalence_loyer_eligible_1 = result_15.plafond_equivalence_loyer_eligible
    calcul_apl_logement_foyer_dot_equivalence_loyer_minimale_1 = result_15.equivalence_loyer_minimale
    calcul_apl_logement_foyer_dot_coefficient_prise_en_charge_d832_25_seuil_1 = result_15.coefficient_prise_en_charge_d832_25
    calcul_apl_logement_foyer_dot_aide_finale_formule_1 = result_15.aide_finale_formule
    calcul_apl_logement_foyer_dot_traitement_aide_finale_montant_minimal_1 = result_15.traitement_aide_finale
    try:
        try:
            def temp_seuil_minimal_depense_nette_minimale(_:Unit):
                return (ressources_menage_arrondies_seuil *
                    coefficient_d842_11)
            def temp_seuil_minimal_depense_nette_minimale_1(_:Unit):
                return condition_d842_11_3
            temp_seuil_minimal_depense_nette_minimale_2 = handle_default(
                SourcePosition(filename="", start_line=0, start_column=1,
                end_line=0, end_column=1, law_headings=[]), [],
                temp_seuil_minimal_depense_nette_minimale_1,
                temp_seuil_minimal_depense_nette_minimale)
        except EmptyError:
            temp_seuil_minimal_depense_nette_minimale_2 = montant_forfaitaire_d842_11
    except EmptyError:
        temp_seuil_minimal_depense_nette_minimale_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=894, start_column=11,
                                             end_line=894, end_column=47,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    seuil_minimal_depense_nette_minimale = temp_seuil_minimal_depense_nette_minimale_2
    try:
        try:
            def temp_plafond_mensualite_d842_6(_:Unit):
                if (calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom(
                    date_signature_pret_2, nombre_personnes_a_charge_6) <
                    calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom(
                    date_entree_logement_1, nombre_personnes_a_charge_6)):
                    return calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom(
                        date_entree_logement_1, nombre_personnes_a_charge_6)
                else:
                    return calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom(
                        date_signature_pret_2, nombre_personnes_a_charge_6)
            def temp_plafond_mensualite_d842_6_1(_:Unit):
                return local_habite_premiere_fois_beneficiaire_1
            temp_plafond_mensualite_d842_6_2 = handle_default(SourcePosition(filename="",
                                                              start_line=0,
                                                              start_column=1,
                                                              end_line=0, end_column=1,
                                                              law_headings=[]), [],
                                                              temp_plafond_mensualite_d842_6_1,
                                                              temp_plafond_mensualite_d842_6)
        except EmptyError:
            temp_plafond_mensualite_d842_6_2 = calcul_plafond_mensualite_d842_6_avec_limitation_dom_tom(
                date_signature_pret_2, nombre_personnes_a_charge_6)
    except EmptyError:
        temp_plafond_mensualite_d842_6_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=886, start_column=11,
                                             end_line=886, end_column=36,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    plafond_mensualite_d842_6 = temp_plafond_mensualite_d842_6_2
    try:
        temp_mensualite_minimale_13 = calcul_equivalence_loyer_minimale_dot_montant_3
    except EmptyError:
        temp_mensualite_minimale_13 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=884, start_column=12,
                                             end_line=884, end_column=31,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    mensualite_minimale_1 = temp_mensualite_minimale_13
    try:
        temp_coefficient_prise_en_charge_1 = calcul_apl_logement_foyer_dot_coefficient_prise_en_charge_d832_25_seuil_1
    except EmptyError:
        temp_coefficient_prise_en_charge_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=885, start_column=12,
                                             end_line=885, end_column=39,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    coefficient_prise_en_charge_1 = temp_coefficient_prise_en_charge_1
    def temp_abattement_depense_nette_minimale_1(allocation_mensuelle_7:Money):
        try:
            if (depense_nette_minimale_1(allocation_mensuelle_7) <
                seuil_minimal_depense_nette_minimale):
                return (seuil_minimal_depense_nette_minimale -
                    depense_nette_minimale_1(allocation_mensuelle_7))
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=899,
                                                 start_column=11,
                                                 end_line=899, end_column=44,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    abattement_depense_nette_minimale_1 = temp_abattement_depense_nette_minimale_1
    try:
        if (mensualite_principale_1 >
            plafond_mensualite_d842_6):
            temp_mensualite_eligible_1 = plafond_mensualite_d842_6
        else:
            temp_mensualite_eligible_1 = mensualite_principale_1
    except EmptyError:
        temp_mensualite_eligible_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=882, start_column=12,
                                             end_line=882, end_column=31,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    mensualite_eligible_1 = temp_mensualite_eligible_1
    def temp_traitement_aide_finale_depense_nette_minimale_1(aide_finale_24:Money):
        try:
            if (traitement_aide_finale_minoration_forfaitaire_4(aide_finale_24) <
                abattement_depense_nette_minimale_1(traitement_aide_finale_minoration_forfaitaire_4(
                                                    aide_finale_24))):
                return money_of_cents_string("0")
            else:
                return (traitement_aide_finale_minoration_forfaitaire_4(
                    aide_finale_24) -
                    abattement_depense_nette_minimale_1(traitement_aide_finale_minoration_forfaitaire_4(
                                                        aide_finale_24)))
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=922,
                                                 start_column=10,
                                                 end_line=922, end_column=32,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_depense_nette_minimale_1 = temp_traitement_aide_finale_depense_nette_minimale_1
    try:
        temp_aide_finale_formule_4 = (((mensualite_eligible_1 +
            montant_forfaitaire_charges_1) - mensualite_minimale_1) *
            coefficient_prise_en_charge_1)
    except EmptyError:
        temp_aide_finale_formule_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=917, start_column=12,
                                             end_line=917, end_column=31,
                                             law_headings=["Secteur accession à la propriété",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    aide_finale_formule_4 = temp_aide_finale_formule_4
    def temp_traitement_aide_finale_contributions_sociales_arrondi_4(aide_finale_25:Money):
        try:
            if ((money_round(((traitement_aide_finale_depense_nette_minimale_1(
                aide_finale_25) -
                contributions_sociales_dot_montant_4(traitement_aide_finale_depense_nette_minimale_1(
                                                     aide_finale_25))) -
                money_of_cents_string("50"))) +
                contributions_sociales_dot_montant_4(traitement_aide_finale_depense_nette_minimale_1(
                                                     aide_finale_25))) >=
                money_of_cents_string("0")):
                return (money_round(((traitement_aide_finale_depense_nette_minimale_1(
                    aide_finale_25) -
                    contributions_sociales_dot_montant_4(traitement_aide_finale_depense_nette_minimale_1(
                                                         aide_finale_25))) -
                    money_of_cents_string("50"))) +
                    contributions_sociales_dot_montant_4(traitement_aide_finale_depense_nette_minimale_1(
                                                         aide_finale_25)))
            else:
                return money_of_cents_string("0")
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=923,
                                                 start_column=10,
                                                 end_line=923, end_column=40,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_contributions_sociales_arrondi_4 = temp_traitement_aide_finale_contributions_sociales_arrondi_4
    def temp_traitement_aide_finale_montee_en_charge_saint_pierre_miquelon_2(aide_finale_26:Money):
        try:
            return montee_en_charge_saint_pierre_miquelon(traitement_aide_finale_contributions_sociales_arrondi_4(
                                                          aide_finale_26),
                                                          residence_7,
                                                          date_courante_13)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=930,
                                                 start_column=10,
                                                 end_line=930, end_column=48,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_montee_en_charge_saint_pierre_miquelon_2 = temp_traitement_aide_finale_montee_en_charge_saint_pierre_miquelon_2
    def temp_traitement_aide_finale_montant_minimal_4(aide_finale_27:Money):
        try:
            if (traitement_aide_finale_montee_en_charge_saint_pierre_miquelon_2(
                aide_finale_27) <
                montant_minimal_aide_d842_6):
                return money_of_cents_string("0")
            else:
                return traitement_aide_finale_montee_en_charge_saint_pierre_miquelon_2(
                    aide_finale_27)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=931,
                                                 start_column=10,
                                                 end_line=931, end_column=25,
                                                 law_headings=["Secteur accession à la propriété",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_montant_minimal_4 = temp_traitement_aide_finale_montant_minimal_4
    return CalculAllocationLogementAccessionPropriete(mensualite_eligible = mensualite_eligible_1,
        mensualite_minimale = mensualite_minimale_1,
        coefficient_prise_en_charge = coefficient_prise_en_charge_1,
        aide_finale_formule = aide_finale_formule_4,
        traitement_aide_finale = traitement_aide_finale_montant_minimal_4)

def eligibilite_aides_personnelle_logement(eligibilite_aides_personnelle_logement_in:EligibiliteAidesPersonnelleLogementIn):
    menage = eligibilite_aides_personnelle_logement_in.menage_in
    demandeur = eligibilite_aides_personnelle_logement_in.demandeur_in
    date_courante_14 = eligibilite_aides_personnelle_logement_in.date_courante_in
    condition_logement_residence_principale = eligibilite_aides_personnelle_logement_in.condition_logement_residence_principale_in
    condition_logement_surface = eligibilite_aides_personnelle_logement_in.condition_logement_surface_in
    date_entree_vigueur_differee_cch = eligibilite_aides_personnelle_logement_in.date_entree_vigueur_differee_cch_in
    try:
        try:
            temp_date_entree_vigueur_differee_cch = date_entree_vigueur_differee_cch(
                Unit())
        except EmptyError:
            temp_date_entree_vigueur_differee_cch = date_of_numbers(2021,1,1)
    except EmptyError:
        temp_date_entree_vigueur_differee_cch = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=316, start_column=12,
                                             end_line=316, end_column=44,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    date_entree_vigueur_differee_cch_1 = temp_date_entree_vigueur_differee_cch
    try:
        temp_seuil_l822_3_parts_propriete = decimal_of_string("0.1")
    except EmptyError:
        temp_seuil_l822_3_parts_propriete = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=321, start_column=11,
                                             end_line=321, end_column=39,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    seuil_l822_3_parts_propriete = temp_seuil_l822_3_parts_propriete
    try:
        temp_seuil_l822_3_parts_usufruit = decimal_of_string("0.1")
    except EmptyError:
        temp_seuil_l822_3_parts_usufruit = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=322, start_column=11,
                                             end_line=322, end_column=38,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    seuil_l822_3_parts_usufruit = temp_seuil_l822_3_parts_usufruit
    try:
        match_arg_622 = menage.logement.usufruit
        if match_arg_622.code == ParentOuAutre_Code.DemandeurOuConjointOuParentOuViaPartsSocietes:
            parts = match_arg_622.value
            temp_usufruit_ou_propriete_famille = True
        elif match_arg_622.code == ParentOuAutre_Code.Autre:
            _ = match_arg_622.value
            temp_usufruit_ou_propriete_famille = False
        match_arg_623 = menage.logement.proprietaire
        if match_arg_623.code == ParentOuAutre_Code.DemandeurOuConjointOuParentOuViaPartsSocietes:
            parts_1 = match_arg_623.value
            temp_usufruit_ou_propriete_famille_1 = True
        elif match_arg_623.code == ParentOuAutre_Code.Autre:
            _ = match_arg_623.value
            temp_usufruit_ou_propriete_famille_1 = False
        temp_usufruit_ou_propriete_famille_2 = (temp_usufruit_ou_propriete_famille_1 or
            temp_usufruit_ou_propriete_famille)
    except EmptyError:
        temp_usufruit_ou_propriete_famille_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=320, start_column=11,
                                             end_line=320, end_column=40,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    usufruit_ou_propriete_famille = temp_usufruit_ou_propriete_famille_2
    try:
        match_arg_624 = menage.situation_familiale
        if match_arg_624.code == SituationFamiliale_Code.Celibataire:
            _ = match_arg_624.value
            temp_nombre_personnes_logement = integer_of_string("1")
        elif match_arg_624.code == SituationFamiliale_Code.Maries:
            _ = match_arg_624.value
            temp_nombre_personnes_logement = integer_of_string("2")
        elif match_arg_624.code == SituationFamiliale_Code.Pacses:
            _ = match_arg_624.value
            temp_nombre_personnes_logement = integer_of_string("2")
        elif match_arg_624.code == SituationFamiliale_Code.Concubins:
            _ = match_arg_624.value
            temp_nombre_personnes_logement = integer_of_string("2")
        elif match_arg_624.code == SituationFamiliale_Code.CelibataireSepareDeFait:
            _ = match_arg_624.value
            temp_nombre_personnes_logement = integer_of_string("1")
        elif match_arg_624.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
            _ = match_arg_624.value
            temp_nombre_personnes_logement = integer_of_string("2")
        temp_nombre_personnes_logement_1 = ((temp_nombre_personnes_logement +
            menage.nombre_autres_occupants_logement) +
            list_length(menage.personnes_a_charge))
    except EmptyError:
        temp_nombre_personnes_logement_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=317, start_column=11,
                                             end_line=317, end_column=36,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    nombre_personnes_logement = temp_nombre_personnes_logement_1
    try:
        try:
            try:
                def temp_septieme_alinea_l823_1_applicable(_:Unit):
                    return False
                def temp_septieme_alinea_l823_1_applicable_1(_:Unit):
                    match_arg_625 = menage.residence
                    if match_arg_625.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_625.value
                        return False
                    elif match_arg_625.code == Collectivite_Code.Guyane:
                        _ = match_arg_625.value
                        return False
                    elif match_arg_625.code == Collectivite_Code.Martinique:
                        _ = match_arg_625.value
                        return False
                    elif match_arg_625.code == Collectivite_Code.LaReunion:
                        _ = match_arg_625.value
                        return False
                    elif match_arg_625.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_625.value
                        return False
                    elif match_arg_625.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_625.value
                        return False
                    elif match_arg_625.code == Collectivite_Code.Metropole:
                        _ = match_arg_625.value
                        return False
                    elif match_arg_625.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_625.value
                        return False
                    elif match_arg_625.code == Collectivite_Code.Mayotte:
                        _ = match_arg_625.value
                        return True
                temp_septieme_alinea_l823_1_applicable_2 = handle_default(
                    SourcePosition(filename="", start_line=0, start_column=1,
                    end_line=0, end_column=1, law_headings=[]), [],
                    temp_septieme_alinea_l823_1_applicable_1,
                    temp_septieme_alinea_l823_1_applicable)
            except EmptyError:
                temp_septieme_alinea_l823_1_applicable_2 = True
        except EmptyError:
            temp_septieme_alinea_l823_1_applicable_2 = False
    except EmptyError:
        temp_septieme_alinea_l823_1_applicable_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=310, start_column=11,
                                             end_line=310, end_column=44,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    septieme_alinea_l823_1_applicable = temp_septieme_alinea_l823_1_applicable_2
    try:
        try:
            def temp_condition_non_ouverture_l822_9_decence_logement(_:Unit):
                return True
            def temp_condition_non_ouverture_l822_9_decence_logement_1(_:Unit):
                return not menage.logement.logement_decent_l89_462
            temp_condition_non_ouverture_l822_9_decence_logement_2 = handle_default(
                SourcePosition(filename="", start_line=0, start_column=1,
                end_line=0, end_column=1, law_headings=[]), [],
                temp_condition_non_ouverture_l822_9_decence_logement_1,
                temp_condition_non_ouverture_l822_9_decence_logement)
        except EmptyError:
            temp_condition_non_ouverture_l822_9_decence_logement_2 = False
    except EmptyError:
        temp_condition_non_ouverture_l822_9_decence_logement_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=308, start_column=11,
                                             end_line=308, end_column=58,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_non_ouverture_l822_9_decence_logement = temp_condition_non_ouverture_l822_9_decence_logement_2
    try:
        try:
            def temp_condition_non_ouverture_l822_8(_:Unit):
                return True
            def temp_condition_non_ouverture_l822_8_1(_:Unit):
                return menage.condition_rattache_foyer_fiscal_parent_ifi
            temp_condition_non_ouverture_l822_8_2 = handle_default(SourcePosition(filename="",
                                                                   start_line=0,
                                                                   start_column=1,
                                                                   end_line=0, end_column=1,
                                                                   law_headings=[]), [],
                                                                   temp_condition_non_ouverture_l822_8_1,
                                                                   temp_condition_non_ouverture_l822_8)
        except EmptyError:
            temp_condition_non_ouverture_l822_8_2 = False
    except EmptyError:
        temp_condition_non_ouverture_l822_8_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=307, start_column=11,
                                             end_line=307, end_column=41,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_non_ouverture_l822_8 = temp_condition_non_ouverture_l822_8_2
    try:
        try:
            temp_condition_logement_residence_principale = condition_logement_residence_principale(
                Unit())
        except EmptyError:
            try:
                def temp_condition_logement_residence_principale_1(_:Unit):
                    return True
                def temp_condition_logement_residence_principale_2(_:Unit):
                    return menage.logement.residence_principale
                temp_condition_logement_residence_principale = handle_default(
                    SourcePosition(filename="", start_line=0, start_column=1,
                    end_line=0, end_column=1, law_headings=[]), [],
                    temp_condition_logement_residence_principale_2,
                    temp_condition_logement_residence_principale_1)
            except EmptyError:
                temp_condition_logement_residence_principale = False
    except EmptyError:
        temp_condition_logement_residence_principale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=303, start_column=12,
                                             end_line=303, end_column=51,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_logement_residence_principale_1 = temp_condition_logement_residence_principale
    try:
        temp_ouverture_droits_retraite_dot_date_naissance_assure = demandeur.date_naissance
    except EmptyError:
        temp_ouverture_droits_retraite_dot_date_naissance_assure = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_sécurité_sociale.catala_fr",
                                             start_line=123, start_column=14,
                                             end_line=123, end_column=61,
                                             law_headings=["Article L161-17-2",
                                             "Paragraphe 1 : Information et simplification des démarches des assurés.",
                                             "Sous-section 4 : Assurance vieillesse",
                                             "Section 1 : Bénéficiaires",
                                             "Chapitre 1er : Dispositions relatives aux prestations",
                                             "Titre VI : Dispositions relatives aux prestations et aux soins - Contrôle médical - Tutelle aux prestations sociales",
                                             "Titre III: Titre III : Dispositions communes relatives au financement",
                                             "Partie législative",
                                             "Code de la sécurité sociale"]))
    ouverture_droits_retraite_dot_date_naissance_assure = temp_ouverture_droits_retraite_dot_date_naissance_assure
    result_16 = ouverture_droits_retraite(OuvertureDroitsRetraiteIn(date_naissance_assure_in = ouverture_droits_retraite_dot_date_naissance_assure))
    ouverture_droits_retraite_dot_age_ouverture_droit = result_16.age_ouverture_droit
    try:
        try:
            def temp_condition_nationalite(_:Unit):
                match_arg_626 = demandeur.nationalite
                if match_arg_626.code == Nationalite_Code.Francaise:
                    _ = match_arg_626.value
                    return False
                elif match_arg_626.code == Nationalite_Code.Etrangere:
                    conditions = match_arg_626.value
                    return conditions.satisfait_art_4_ordonnance_2002_mayotte
            def temp_condition_nationalite_1(_:Unit):
                match_arg_627 = menage.residence
                if match_arg_627.code == Collectivite_Code.Guadeloupe:
                    _ = match_arg_627.value
                    return False
                elif match_arg_627.code == Collectivite_Code.Guyane:
                    _ = match_arg_627.value
                    return False
                elif match_arg_627.code == Collectivite_Code.Martinique:
                    _ = match_arg_627.value
                    return False
                elif match_arg_627.code == Collectivite_Code.LaReunion:
                    _ = match_arg_627.value
                    return False
                elif match_arg_627.code == Collectivite_Code.SaintBarthelemy:
                    _ = match_arg_627.value
                    return False
                elif match_arg_627.code == Collectivite_Code.SaintMartin:
                    _ = match_arg_627.value
                    return False
                elif match_arg_627.code == Collectivite_Code.Metropole:
                    _ = match_arg_627.value
                    return False
                elif match_arg_627.code == Collectivite_Code.SaintPierreEtMiquelon:
                    _ = match_arg_627.value
                    return False
                elif match_arg_627.code == Collectivite_Code.Mayotte:
                    _ = match_arg_627.value
                    return True
            temp_condition_nationalite_2 = handle_default(SourcePosition(filename="",
                                                          start_line=0,
                                                          start_column=1,
                                                          end_line=0, end_column=1,
                                                          law_headings=[]), [],
                                                          temp_condition_nationalite_1,
                                                          temp_condition_nationalite)
        except EmptyError:
            match_arg_628 = demandeur.nationalite
            if match_arg_628.code == Nationalite_Code.Francaise:
                _ = match_arg_628.value
                temp_condition_nationalite_2 = True
            elif match_arg_628.code == Nationalite_Code.Etrangere:
                conditions_1 = match_arg_628.value
                temp_condition_nationalite_2 = conditions_1.satisfait_conditions_l512_2_code_securite_sociale
    except EmptyError:
        temp_condition_nationalite_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=302, start_column=11,
                                             end_line=302, end_column=32,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_nationalite = temp_condition_nationalite_2
    try:
        temp___14 = (date_courante_14 >= date_of_numbers(2018,4,1))
    except EmptyError:
        temp___14 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=366, start_column=13,
                                             end_line=366, end_column=42,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    if not (temp___14):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                              start_line=366,
                                              start_column=13, end_line=366,
                                              end_column=42,
                                              law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    try:
        def temp_plafond_individuel_l815_9_secu(_:Unit):
            raise EmptyError
        def temp_plafond_individuel_l815_9_secu_1(_:Unit):
            return False
        def temp_plafond_individuel_l815_9_secu_2(_:Unit):
            def temp_plafond_individuel_l815_9_secu_3(_:Unit):
                return money_of_cents_string("1088175")
            def temp_plafond_individuel_l815_9_secu_4(_:Unit):
                return ((date_courante_14 >= date_of_numbers(2021,1,1)) and
                    (date_courante_14 < date_of_numbers(2022,1,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_plafond_individuel_l815_9_secu_4,
                                  temp_plafond_individuel_l815_9_secu_3)
        def temp_plafond_individuel_l815_9_secu_5(_:Unit):
            def temp_plafond_individuel_l815_9_secu_6(_:Unit):
                return money_of_cents_string("1100144")
            def temp_plafond_individuel_l815_9_secu_7(_:Unit):
                return ((date_courante_14 >= date_of_numbers(2022,1,1)) and
                    (date_courante_14 < date_of_numbers(2023,1,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_plafond_individuel_l815_9_secu_7,
                                  temp_plafond_individuel_l815_9_secu_6)
        def temp_plafond_individuel_l815_9_secu_8(_:Unit):
            def temp_plafond_individuel_l815_9_secu_9(_:Unit):
                return money_of_cents_string("1153302")
            def temp_plafond_individuel_l815_9_secu_10(_:Unit):
                return (date_courante_14 >= date_of_numbers(2023,1,1))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_plafond_individuel_l815_9_secu_10,
                                  temp_plafond_individuel_l815_9_secu_9)
        def temp_plafond_individuel_l815_9_secu_11(_:Unit):
            def temp_plafond_individuel_l815_9_secu_12(_:Unit):
                return money_of_cents_string("1083840")
            def temp_plafond_individuel_l815_9_secu_13(_:Unit):
                return ((date_courante_14 >= date_of_numbers(2020,1,1)) and
                    (date_courante_14 < date_of_numbers(2021,1,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_plafond_individuel_l815_9_secu_13,
                                  temp_plafond_individuel_l815_9_secu_12)
        def temp_plafond_individuel_l815_9_secu_14(_:Unit):
            def temp_plafond_individuel_l815_9_secu_15(_:Unit):
                return money_of_cents_string("1041840")
            def temp_plafond_individuel_l815_9_secu_16(_:Unit):
                return ((date_courante_14 >= date_of_numbers(2019,1,1)) and
                    (date_courante_14 < date_of_numbers(2020,1,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_plafond_individuel_l815_9_secu_16,
                                  temp_plafond_individuel_l815_9_secu_15)
        def temp_plafond_individuel_l815_9_secu_17(_:Unit):
            def temp_plafond_individuel_l815_9_secu_18(_:Unit):
                return money_of_cents_string("999840")
            def temp_plafond_individuel_l815_9_secu_19(_:Unit):
                return ((date_courante_14 >= date_of_numbers(2018,4,1)) and
                    (date_courante_14 < date_of_numbers(2019,1,1)))
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_plafond_individuel_l815_9_secu_19,
                                  temp_plafond_individuel_l815_9_secu_18)
        temp_plafond_individuel_l815_9_secu_20 = handle_default(SourcePosition(filename="",
                                                                start_line=0,
                                                                start_column=1,
                                                                end_line=0, end_column=1,
                                                                law_headings=[]), [temp_plafond_individuel_l815_9_secu_17,
                                                                temp_plafond_individuel_l815_9_secu_14,
                                                                temp_plafond_individuel_l815_9_secu_11,
                                                                temp_plafond_individuel_l815_9_secu_8,
                                                                temp_plafond_individuel_l815_9_secu_5,
                                                                temp_plafond_individuel_l815_9_secu_2],
                                                                temp_plafond_individuel_l815_9_secu_1,
                                                                temp_plafond_individuel_l815_9_secu)
    except EmptyError:
        temp_plafond_individuel_l815_9_secu_20 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=325, start_column=11,
                                             end_line=325, end_column=41,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    plafond_individuel_l815_9_secu = temp_plafond_individuel_l815_9_secu_20
    try:
        try:
            try:
                def temp_condition_logement_location_tiers(_:Unit):
                    return True
                def temp_condition_logement_location_tiers_1(_:Unit):
                    match_arg_629 = menage.logement.loue_ou_sous_loue_a_des_tiers
                    if match_arg_629.code == LoueOuSousLoueADesTiers_Code.Non:
                        _ = match_arg_629.value
                        return True
                    elif match_arg_629.code == LoueOuSousLoueADesTiers_Code.Oui:
                        personne = match_arg_629.value
                        try:
                            temp_condition_logement_location_tiers_2 = personne.date_naissance_personne_sous_location
                        except EmptyError:
                            temp_condition_logement_location_tiers_2 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                                 start_line=225,
                                                                 start_column=30,
                                                                 end_line=225,
                                                                 end_column=76,
                                                                 law_headings=["Article L822-4",
                                                                 "Chapitre II : Conditions générales d'attribution",
                                                                 "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie législative",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_condition_logement_location_tiers_3 = date_courante_14
                        except EmptyError:
                            temp_condition_logement_location_tiers_3 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                                 start_line=226,
                                                                 start_column=29,
                                                                 end_line=226,
                                                                 end_column=42,
                                                                 law_headings=["Article L822-4",
                                                                 "Chapitre II : Conditions générales d'attribution",
                                                                 "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie législative",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_condition_logement_location_tiers_4 = duration_of_numbers(30,0,0)
                        except EmptyError:
                            temp_condition_logement_location_tiers_4 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                                 start_line=227,
                                                                 start_column=22,
                                                                 end_line=227,
                                                                 end_column=27,
                                                                 law_headings=["Article L822-4",
                                                                 "Chapitre II : Conditions générales d'attribution",
                                                                 "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie législative",
                                                                 "Code de la construction et de l'habitation"]))
                        return (verification_age_superieur_a(VerificationAgeSuperieurAIn(date_naissance_in = temp_condition_logement_location_tiers_2,
                                                             date_courante_in = temp_condition_logement_location_tiers_3,
                                                             annees_in = temp_condition_logement_location_tiers_4)).est_superieur or
                            personne.conforme_article_l442_1)
                temp_condition_logement_location_tiers_5 = handle_default(
                    SourcePosition(filename="", start_line=0, start_column=1,
                    end_line=0, end_column=1, law_headings=[]), [],
                    temp_condition_logement_location_tiers_1,
                    temp_condition_logement_location_tiers)
            except EmptyError:
                match_arg_630 = menage.logement.loue_ou_sous_loue_a_des_tiers
                if match_arg_630.code == LoueOuSousLoueADesTiers_Code.Non:
                    _ = match_arg_630.value
                    temp_condition_logement_location_tiers_6 = True
                elif match_arg_630.code == LoueOuSousLoueADesTiers_Code.Oui:
                    _ = match_arg_630.value
                    temp_condition_logement_location_tiers_6 = False
                if temp_condition_logement_location_tiers_6:
                    temp_condition_logement_location_tiers_5 = False
                else:
                    temp_condition_logement_location_tiers_5 = dead_value
                    raise EmptyError
        except EmptyError:
            temp_condition_logement_location_tiers_5 = False
    except EmptyError:
        temp_condition_logement_location_tiers_5 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=305, start_column=11,
                                             end_line=305, end_column=44,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_logement_location_tiers = temp_condition_logement_location_tiers_5
    try:
        temp_prestations_familiales_dot_date_courante = date_courante_14
    except EmptyError:
        temp_prestations_familiales_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=368, start_column=14,
                                             end_line=368, end_column=50,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    prestations_familiales_dot_date_courante = temp_prestations_familiales_dot_date_courante
    try:
        temp_prestations_familiales_dot_residence = menage.residence
    except EmptyError:
        temp_prestations_familiales_dot_residence = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=369, start_column=14,
                                             end_line=369, end_column=46,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    prestations_familiales_dot_residence = temp_prestations_familiales_dot_residence
    def temp_prestations_familiales_dot_age_l512_3_2(_:Unit):
        try:
            try:
                def temp_prestations_familiales_dot_age_l512_3_2_1(_:Unit):
                    return duration_of_numbers(22,0,0)
                def temp_prestations_familiales_dot_age_l512_3_2_2(_:Unit):
                    match_arg_631 = menage.residence
                    if match_arg_631.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_631.value
                        temp_prestations_familiales_dot_age_l512_3_2_3 = False
                    elif match_arg_631.code == Collectivite_Code.Guyane:
                        _ = match_arg_631.value
                        temp_prestations_familiales_dot_age_l512_3_2_3 = False
                    elif match_arg_631.code == Collectivite_Code.Martinique:
                        _ = match_arg_631.value
                        temp_prestations_familiales_dot_age_l512_3_2_3 = False
                    elif match_arg_631.code == Collectivite_Code.LaReunion:
                        _ = match_arg_631.value
                        temp_prestations_familiales_dot_age_l512_3_2_3 = False
                    elif match_arg_631.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_631.value
                        temp_prestations_familiales_dot_age_l512_3_2_3 = True
                    elif match_arg_631.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_631.value
                        temp_prestations_familiales_dot_age_l512_3_2_3 = True
                    elif match_arg_631.code == Collectivite_Code.Metropole:
                        _ = match_arg_631.value
                        temp_prestations_familiales_dot_age_l512_3_2_3 = False
                    elif match_arg_631.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_631.value
                        temp_prestations_familiales_dot_age_l512_3_2_3 = False
                    elif match_arg_631.code == Collectivite_Code.Mayotte:
                        _ = match_arg_631.value
                        temp_prestations_familiales_dot_age_l512_3_2_3 = False
                    return ((date_courante_14 >=
                        date_entree_vigueur_differee_cch_1) and
                        temp_prestations_familiales_dot_age_l512_3_2_3)
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_prestations_familiales_dot_age_l512_3_2_2,
                                      temp_prestations_familiales_dot_age_l512_3_2_1)
            except EmptyError:
                match_arg_632 = menage.residence
                if match_arg_632.code == Collectivite_Code.Guadeloupe:
                    _ = match_arg_632.value
                    temp_prestations_familiales_dot_age_l512_3_2_4 = True
                elif match_arg_632.code == Collectivite_Code.Guyane:
                    _ = match_arg_632.value
                    temp_prestations_familiales_dot_age_l512_3_2_4 = True
                elif match_arg_632.code == Collectivite_Code.Martinique:
                    _ = match_arg_632.value
                    temp_prestations_familiales_dot_age_l512_3_2_4 = True
                elif match_arg_632.code == Collectivite_Code.LaReunion:
                    _ = match_arg_632.value
                    temp_prestations_familiales_dot_age_l512_3_2_4 = True
                elif match_arg_632.code == Collectivite_Code.SaintBarthelemy:
                    _ = match_arg_632.value
                    temp_prestations_familiales_dot_age_l512_3_2_4 = False
                elif match_arg_632.code == Collectivite_Code.SaintMartin:
                    _ = match_arg_632.value
                    temp_prestations_familiales_dot_age_l512_3_2_4 = False
                elif match_arg_632.code == Collectivite_Code.Metropole:
                    _ = match_arg_632.value
                    temp_prestations_familiales_dot_age_l512_3_2_4 = False
                elif match_arg_632.code == Collectivite_Code.SaintPierreEtMiquelon:
                    _ = match_arg_632.value
                    temp_prestations_familiales_dot_age_l512_3_2_4 = False
                elif match_arg_632.code == Collectivite_Code.Mayotte:
                    _ = match_arg_632.value
                    temp_prestations_familiales_dot_age_l512_3_2_4 = True
                if temp_prestations_familiales_dot_age_l512_3_2_4:
                    return duration_of_numbers(22,0,0)
                else:
                    raise EmptyError
        except EmptyError:
            return duration_of_numbers(21,0,0)
    prestations_familiales_dot_age_l512_3_2 = temp_prestations_familiales_dot_age_l512_3_2
    result_17 = eligibilite_prestations_familiales(EligibilitePrestationsFamilialesIn(date_courante_in = prestations_familiales_dot_date_courante,
                                                   residence_in = prestations_familiales_dot_residence,
                                                   age_l512_3_2_in = prestations_familiales_dot_age_l512_3_2))
    prestations_familiales_dot_age_l512_3_2_1 = result_17.age_l512_3_2
    prestations_familiales_dot_droit_ouvert = result_17.droit_ouvert
    prestations_familiales_dot_conditions_hors_age = result_17.conditions_hors_age
    prestations_familiales_dot_regime_outre_mer_l751_1 = result_17.regime_outre_mer_l751_1
    try:
        temp___15 = (seuil_l822_3_parts_propriete < decimal_of_string("0.2"))
    except EmptyError:
        temp___15 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                             start_line=199, start_column=13,
                                             end_line=199, end_column=48,
                                             law_headings=["Article L822-3",
                                             "Chapitre II : Conditions générales d'attribution",
                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie législative",
                                             "Code de la construction et de l'habitation"]))
    if not (temp___15):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                              start_line=199,
                                              start_column=13, end_line=199,
                                              end_column=48,
                                              law_headings=["Article L822-3",
                                                           "Chapitre II : Conditions générales d'attribution",
                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie législative",
                                                           "Code de la construction et de l'habitation"]))
    try:
        temp___16 = (seuil_l822_3_parts_usufruit < decimal_of_string("0.2"))
    except EmptyError:
        temp___16 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                             start_line=200, start_column=13,
                                             end_line=200, end_column=47,
                                             law_headings=["Article L822-3",
                                             "Chapitre II : Conditions générales d'attribution",
                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie législative",
                                             "Code de la construction et de l'habitation"]))
    if not (temp___16):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                              start_line=200,
                                              start_column=13, end_line=200,
                                              end_column=47,
                                              law_headings=["Article L822-3",
                                                           "Chapitre II : Conditions générales d'attribution",
                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie législative",
                                                           "Code de la construction et de l'habitation"]))
    try:
        try:
            try:
                try:
                    def temp_condition_logement_mode_occupation(_:Unit):
                        return True
                    def temp_condition_logement_mode_occupation_1(_:Unit):
                        match_arg_633 = menage.logement.usufruit
                        if match_arg_633.code == ParentOuAutre_Code.DemandeurOuConjointOuParentOuViaPartsSocietes:
                            parts_2 = match_arg_633.value
                            temp_condition_logement_mode_occupation_2 = parts_2
                        elif match_arg_633.code == ParentOuAutre_Code.Autre:
                            _ = match_arg_633.value
                            temp_condition_logement_mode_occupation_2 = decimal_of_string("0.")
                        match_arg_634 = menage.logement.proprietaire
                        if match_arg_634.code == ParentOuAutre_Code.DemandeurOuConjointOuParentOuViaPartsSocietes:
                            parts_3 = match_arg_634.value
                            temp_condition_logement_mode_occupation_3 = parts_3
                        elif match_arg_634.code == ParentOuAutre_Code.Autre:
                            _ = match_arg_634.value
                            temp_condition_logement_mode_occupation_3 = decimal_of_string("0.")
                        return (usufruit_ou_propriete_famille and
                            ((temp_condition_logement_mode_occupation_3 <
                            seuil_l822_3_parts_propriete) and
                            (temp_condition_logement_mode_occupation_2 <
                            seuil_l822_3_parts_usufruit)))
                    temp_condition_logement_mode_occupation_4 = handle_default(
                        SourcePosition(filename="", start_line=0,
                        start_column=1, end_line=0, end_column=1,
                        law_headings=[]), [],
                        temp_condition_logement_mode_occupation_1,
                        temp_condition_logement_mode_occupation)
                except EmptyError:
                    match_arg_635 = menage.logement.mode_occupation
                    if match_arg_635.code == ModeOccupation_Code.Locataire:
                        _ = match_arg_635.value
                        temp_condition_logement_mode_occupation_5 = usufruit_ou_propriete_famille
                    elif match_arg_635.code == ModeOccupation_Code.ResidentLogementFoyer:
                        _ = match_arg_635.value
                        temp_condition_logement_mode_occupation_5 = False
                    elif match_arg_635.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        _ = match_arg_635.value
                        temp_condition_logement_mode_occupation_5 = False
                    elif match_arg_635.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_635.value
                        temp_condition_logement_mode_occupation_5 = False
                    elif match_arg_635.code == ModeOccupation_Code.LocationAccession:
                        _ = match_arg_635.value
                        temp_condition_logement_mode_occupation_5 = False
                    if temp_condition_logement_mode_occupation_5:
                        temp_condition_logement_mode_occupation_4 = False
                    else:
                        temp_condition_logement_mode_occupation_4 = dead_value
                        raise EmptyError
            except EmptyError:
                match_arg_636 = menage.logement.mode_occupation
                if match_arg_636.code == ModeOccupation_Code.Locataire:
                    _ = match_arg_636.value
                    temp_condition_logement_mode_occupation_6 = True
                elif match_arg_636.code == ModeOccupation_Code.ResidentLogementFoyer:
                    _ = match_arg_636.value
                    temp_condition_logement_mode_occupation_6 = True
                elif match_arg_636.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                    _ = match_arg_636.value
                    temp_condition_logement_mode_occupation_6 = menage.logement.residence_principale
                elif match_arg_636.code == ModeOccupation_Code.SousLocataire:
                    _ = match_arg_636.value
                    temp_condition_logement_mode_occupation_6 = True
                elif match_arg_636.code == ModeOccupation_Code.LocationAccession:
                    _ = match_arg_636.value
                    temp_condition_logement_mode_occupation_6 = True
                if temp_condition_logement_mode_occupation_6:
                    temp_condition_logement_mode_occupation_4 = True
                else:
                    temp_condition_logement_mode_occupation_4 = dead_value
                    raise EmptyError
        except EmptyError:
            temp_condition_logement_mode_occupation_4 = False
    except EmptyError:
        temp_condition_logement_mode_occupation_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=304, start_column=11,
                                             end_line=304, end_column=45,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_logement_mode_occupation = temp_condition_logement_mode_occupation_4
    try:
        try:
            temp_condition_logement_surface = condition_logement_surface(
                Unit())
        except EmptyError:
            try:
                try:
                    try:
                        def temp_condition_logement_surface_1(_:Unit):
                            return False
                        def temp_condition_logement_surface_2(_:Unit):
                            return (menage.personnes_agees_handicapees_foyer_r844_4 and
                                (nombre_personnes_logement >
                                integer_of_string("2")))
                        temp_condition_logement_surface = handle_default(
                            SourcePosition(filename="", start_line=0,
                            start_column=1, end_line=0, end_column=1,
                            law_headings=[]), [],
                            temp_condition_logement_surface_2,
                            temp_condition_logement_surface_1)
                    except EmptyError:
                        if (nombre_personnes_logement ==
                            integer_of_string("1")):
                            temp_condition_logement_surface_3 = integer_of_string("9")
                        else:
                            temp_condition_logement_surface_3 = integer_of_string("16")
                        if (menage.personnes_agees_handicapees_foyer_r844_4 and
                            (menage.logement.surface_m_carres >=
                            temp_condition_logement_surface_3)):
                            temp_condition_logement_surface = True
                        else:
                            temp_condition_logement_surface = dead_value
                            raise EmptyError
                except EmptyError:
                    match_arg_637 = menage.situation_familiale
                    if match_arg_637.code == SituationFamiliale_Code.Celibataire:
                        _ = match_arg_637.value
                        temp_condition_logement_surface_4 = integer_of_string("9")
                    elif match_arg_637.code == SituationFamiliale_Code.Maries:
                        _ = match_arg_637.value
                        temp_condition_logement_surface_4 = integer_of_string("16")
                    elif match_arg_637.code == SituationFamiliale_Code.Pacses:
                        _ = match_arg_637.value
                        temp_condition_logement_surface_4 = integer_of_string("16")
                    elif match_arg_637.code == SituationFamiliale_Code.Concubins:
                        _ = match_arg_637.value
                        temp_condition_logement_surface_4 = integer_of_string("16")
                    elif match_arg_637.code == SituationFamiliale_Code.CelibataireSepareDeFait:
                        _ = match_arg_637.value
                        temp_condition_logement_surface_4 = integer_of_string("9")
                    elif match_arg_637.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
                        _ = match_arg_637.value
                        temp_condition_logement_surface_4 = integer_of_string("16")
                    if (((temp_condition_logement_surface_4 +
                        ((menage.nombre_autres_occupants_logement +
                        list_length(menage.personnes_a_charge)) *
                        integer_of_string("9"))) >=
                        integer_of_string("70")) and
                        (nombre_personnes_logement >=
                        integer_of_string("8"))):
                        temp_condition_logement_surface_5 = (menage.logement.surface_m_carres >=
                            integer_of_string("70"))
                    else:
                        match_arg_638 = menage.situation_familiale
                        if match_arg_638.code == SituationFamiliale_Code.Celibataire:
                            _ = match_arg_638.value
                            temp_condition_logement_surface_6 = integer_of_string("9")
                        elif match_arg_638.code == SituationFamiliale_Code.Maries:
                            _ = match_arg_638.value
                            temp_condition_logement_surface_6 = integer_of_string("16")
                        elif match_arg_638.code == SituationFamiliale_Code.Pacses:
                            _ = match_arg_638.value
                            temp_condition_logement_surface_6 = integer_of_string("16")
                        elif match_arg_638.code == SituationFamiliale_Code.Concubins:
                            _ = match_arg_638.value
                            temp_condition_logement_surface_6 = integer_of_string("16")
                        elif match_arg_638.code == SituationFamiliale_Code.CelibataireSepareDeFait:
                            _ = match_arg_638.value
                            temp_condition_logement_surface_6 = integer_of_string("9")
                        elif match_arg_638.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
                            _ = match_arg_638.value
                            temp_condition_logement_surface_6 = integer_of_string("16")
                        temp_condition_logement_surface_5 = (menage.logement.surface_m_carres >=
                            (temp_condition_logement_surface_6 +
                            ((menage.nombre_autres_occupants_logement +
                            list_length(menage.personnes_a_charge)) *
                            integer_of_string("9"))))
                    if temp_condition_logement_surface_5:
                        temp_condition_logement_surface = True
                    else:
                        temp_condition_logement_surface = dead_value
                        raise EmptyError
            except EmptyError:
                temp_condition_logement_surface = False
    except EmptyError:
        temp_condition_logement_surface = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=306, start_column=12,
                                             end_line=306, end_column=38,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_logement_surface_1 = temp_condition_logement_surface
    try:
        temp_age_l161_17_2_secu = ouverture_droits_retraite_dot_age_ouverture_droit
    except EmptyError:
        temp_age_l161_17_2_secu = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=324, start_column=11,
                                             end_line=324, end_column=29,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    age_l161_17_2_secu = temp_age_l161_17_2_secu
    try:
        try:
            def temp_condition_ouverture_l822_10_peuplement_logement(_:Unit):
                return True
            def temp_condition_ouverture_l822_10_peuplement_logement_1(_:Unit):
                return condition_logement_surface_1
            temp_condition_ouverture_l822_10_peuplement_logement_2 = handle_default(
                SourcePosition(filename="", start_line=0, start_column=1,
                end_line=0, end_column=1, law_headings=[]), [],
                temp_condition_ouverture_l822_10_peuplement_logement_1,
                temp_condition_ouverture_l822_10_peuplement_logement)
        except EmptyError:
            temp_condition_ouverture_l822_10_peuplement_logement_2 = False
    except EmptyError:
        temp_condition_ouverture_l822_10_peuplement_logement_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=309, start_column=11,
                                             end_line=309, end_column=58,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_ouverture_l822_10_peuplement_logement = temp_condition_ouverture_l822_10_peuplement_logement_2
    try:
        temp_age_l351_8_1_secu = (age_l161_17_2_secu +
            duration_of_numbers(5,0,0))
    except EmptyError:
        temp_age_l351_8_1_secu = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=323, start_column=11,
                                             end_line=323, end_column=28,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    age_l351_8_1_secu = temp_age_l351_8_1_secu
    try:
        try:
            try:
                def temp_eligibilite_logement(_:Unit):
                    return False
                def temp_eligibilite_logement_1(_:Unit):
                    return (condition_non_ouverture_l822_8 or
                        condition_non_ouverture_l822_9_decence_logement)
                temp_eligibilite_logement_2 = handle_default(SourcePosition(filename="",
                                                             start_line=0,
                                                             start_column=1,
                                                             end_line=0, end_column=1,
                                                             law_headings=[]), [],
                                                             temp_eligibilite_logement_1,
                                                             temp_eligibilite_logement)
            except EmptyError:
                if (condition_logement_residence_principale_1 and
                    (condition_logement_mode_occupation and
                    (condition_logement_location_tiers and
                    condition_ouverture_l822_10_peuplement_logement))):
                    temp_eligibilite_logement_2 = True
                else:
                    temp_eligibilite_logement_2 = dead_value
                    raise EmptyError
        except EmptyError:
            temp_eligibilite_logement_2 = False
    except EmptyError:
        temp_eligibilite_logement_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=311, start_column=11,
                                             end_line=311, end_column=31,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_logement = temp_eligibilite_logement_2
    def temp_condition_2_r823_4(personne_a_charge:PersonneACharge):
        try:
            try:
                def temp_condition_2_r823_4_1(_:Unit):
                    return True
                def temp_condition_2_r823_4_2(_:Unit):
                    match_arg_639 = personne_a_charge
                    if match_arg_639.code == PersonneACharge_Code.EnfantACharge:
                        enfant_2 = match_arg_639.value
                        return False
                    elif match_arg_639.code == PersonneACharge_Code.AutrePersonneACharge:
                        parent = match_arg_639.value
                        try:
                            temp_condition_2_r823_4_3 = parent.date_naissance
                        except EmptyError:
                            temp_condition_2_r823_4_3 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=1181,
                                                                 start_column=38,
                                                                 end_line=1181,
                                                                 end_column=59,
                                                                 law_headings=["Article R823-4",
                                                                 "Section 1 : Calcul, liquidation et versement des aides",
                                                                 "Chapitre III : Modalités de liquidation et de versement",
                                                                 "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_condition_2_r823_4_4 = date_courante_14
                        except EmptyError:
                            temp_condition_2_r823_4_4 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=1182,
                                                                 start_column=37,
                                                                 end_line=1182,
                                                                 end_column=50,
                                                                 law_headings=["Article R823-4",
                                                                 "Section 1 : Calcul, liquidation et versement des aides",
                                                                 "Chapitre III : Modalités de liquidation et de versement",
                                                                 "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_condition_2_r823_4_5 = duration_of_numbers(65,0,0)
                        except EmptyError:
                            temp_condition_2_r823_4_5 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=1183,
                                                                 start_column=30,
                                                                 end_line=1183,
                                                                 end_column=35,
                                                                 law_headings=["Article R823-4",
                                                                 "Section 1 : Calcul, liquidation et versement des aides",
                                                                 "Chapitre III : Modalités de liquidation et de versement",
                                                                 "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        return ((parent.parente ==
                            Parente(Parente_Code.Ascendant, Unit())) and
                            ((parent.ressources <=
                            (plafond_individuel_l815_9_secu *
                            decimal_of_string("1.25"))) and
                            ((((parent.date_naissance + age_l351_8_1_secu) <=
                            date_courante_14) or
                            (parent.titulaire_allocation_personne_agee and
                            verification_age_inferieur_ou_egal_a(VerificationAgeInferieurOuEgalAIn(date_naissance_in = temp_condition_2_r823_4_3,
                                                                 date_courante_in = temp_condition_2_r823_4_4,
                                                                 annees_in = temp_condition_2_r823_4_5)).est_inferieur_ou_egal)) or
                            (((parent.date_naissance + age_l161_17_2_secu) <=
                            date_courante_14) and
                            parent.beneficiaire_l161_19_l351_8_l643_3_secu))))
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_condition_2_r823_4_2,
                                      temp_condition_2_r823_4_1)
            except EmptyError:
                return False
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=334,
                                                 start_column=12,
                                                 end_line=334, end_column=30,
                                                 law_headings=["Éligibilité aux aides personnelles au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    condition_2_r823_4 = temp_condition_2_r823_4
    try:
        try:
            def temp_eligibilite(_:Unit):
                return True
            def temp_eligibilite_1(_:Unit):
                return (condition_nationalite and
                    (condition_logement_mode_occupation and
                    eligibilite_logement))
            temp_eligibilite_2 = handle_default(SourcePosition(filename="",
                                                start_line=0, start_column=1,
                                                end_line=0, end_column=1,
                                                law_headings=[]), [],
                                                temp_eligibilite_1,
                                                temp_eligibilite)
        except EmptyError:
            temp_eligibilite_2 = False
    except EmptyError:
        temp_eligibilite_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=330, start_column=12,
                                             end_line=330, end_column=23,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite = temp_eligibilite_2
    def temp_prise_en_compte_personne_a_charge(personne_a_charge_1:PersonneACharge):
        try:
            def temp_prise_en_compte_personne_a_charge_1(_:Unit):
                return False
            def temp_prise_en_compte_personne_a_charge_2(_:Unit):
                return True
            def temp_prise_en_compte_personne_a_charge_3(_:Unit):
                try:
                    try:
                        try:
                            def temp_prise_en_compte_personne_a_charge_4(_:Unit):
                                return False
                            def temp_prise_en_compte_personne_a_charge_5(_:Unit):
                                match_arg_640 = personne_a_charge_1
                                if match_arg_640.code == PersonneACharge_Code.EnfantACharge:
                                    enfant_3 = match_arg_640.value
                                    match_arg_641 = enfant_3.obligation_scolaire
                                    if match_arg_641.code == SituationObligationScolaire_Code.Avant:
                                        _ = match_arg_641.value
                                        temp_prise_en_compte_personne_a_charge_6 = False
                                    elif match_arg_641.code == SituationObligationScolaire_Code.Pendant:
                                        _ = match_arg_641.value
                                        temp_prise_en_compte_personne_a_charge_6 = False
                                    elif match_arg_641.code == SituationObligationScolaire_Code.Apres:
                                        _ = match_arg_641.value
                                        temp_prise_en_compte_personne_a_charge_6 = True
                                    temp_prise_en_compte_personne_a_charge_7 = (temp_prise_en_compte_personne_a_charge_6 and
                                        (((enfant_3.date_de_naissance +
                                        prestations_familiales_dot_age_l512_3_2_1) >
                                        date_courante_14) and
                                        enfant_3.etudes_apprentissage_stage_formation_pro_impossibilite_travail))
                                elif match_arg_640.code == PersonneACharge_Code.AutrePersonneACharge:
                                    _ = match_arg_640.value
                                    temp_prise_en_compte_personne_a_charge_7 = False
                                match_arg_642 = menage.residence
                                if match_arg_642.code == Collectivite_Code.Guadeloupe:
                                    _ = match_arg_642.value
                                    temp_prise_en_compte_personne_a_charge_8 = False
                                elif match_arg_642.code == Collectivite_Code.Guyane:
                                    _ = match_arg_642.value
                                    temp_prise_en_compte_personne_a_charge_8 = False
                                elif match_arg_642.code == Collectivite_Code.Martinique:
                                    _ = match_arg_642.value
                                    temp_prise_en_compte_personne_a_charge_8 = False
                                elif match_arg_642.code == Collectivite_Code.LaReunion:
                                    _ = match_arg_642.value
                                    temp_prise_en_compte_personne_a_charge_8 = False
                                elif match_arg_642.code == Collectivite_Code.SaintBarthelemy:
                                    _ = match_arg_642.value
                                    temp_prise_en_compte_personne_a_charge_8 = True
                                elif match_arg_642.code == Collectivite_Code.SaintMartin:
                                    _ = match_arg_642.value
                                    temp_prise_en_compte_personne_a_charge_8 = True
                                elif match_arg_642.code == Collectivite_Code.Metropole:
                                    _ = match_arg_642.value
                                    temp_prise_en_compte_personne_a_charge_8 = False
                                elif match_arg_642.code == Collectivite_Code.SaintPierreEtMiquelon:
                                    _ = match_arg_642.value
                                    temp_prise_en_compte_personne_a_charge_8 = False
                                elif match_arg_642.code == Collectivite_Code.Mayotte:
                                    _ = match_arg_642.value
                                    temp_prise_en_compte_personne_a_charge_8 = False
                                return (temp_prise_en_compte_personne_a_charge_8 and
                                    temp_prise_en_compte_personne_a_charge_7)
                            return handle_default(SourcePosition(filename="",
                                                  start_line=0,
                                                  start_column=1,
                                                  end_line=0, end_column=1,
                                                  law_headings=[]), [],
                                                  temp_prise_en_compte_personne_a_charge_5,
                                                  temp_prise_en_compte_personne_a_charge_4)
                        except EmptyError:
                            match_arg_643 = personne_a_charge_1
                            if match_arg_643.code == PersonneACharge_Code.EnfantACharge:
                                enfant_4 = match_arg_643.value
                                match_arg_644 = enfant_4.obligation_scolaire
                                if match_arg_644.code == SituationObligationScolaire_Code.Avant:
                                    _ = match_arg_644.value
                                    temp_prise_en_compte_personne_a_charge_9 = False
                                elif match_arg_644.code == SituationObligationScolaire_Code.Pendant:
                                    _ = match_arg_644.value
                                    temp_prise_en_compte_personne_a_charge_9 = False
                                elif match_arg_644.code == SituationObligationScolaire_Code.Apres:
                                    _ = match_arg_644.value
                                    temp_prise_en_compte_personne_a_charge_9 = True
                                temp_prise_en_compte_personne_a_charge_10 = (temp_prise_en_compte_personne_a_charge_9 and
                                    (((enfant_4.date_de_naissance +
                                    prestations_familiales_dot_age_l512_3_2_1) >
                                    date_courante_14) and
                                    enfant_4.etudes_apprentissage_stage_formation_pro_impossibilite_travail))
                            elif match_arg_643.code == PersonneACharge_Code.AutrePersonneACharge:
                                _ = match_arg_643.value
                                temp_prise_en_compte_personne_a_charge_10 = False
                            match_arg_645 = menage.residence
                            if match_arg_645.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_645.value
                                temp_prise_en_compte_personne_a_charge_11 = True
                            elif match_arg_645.code == Collectivite_Code.Guyane:
                                _ = match_arg_645.value
                                temp_prise_en_compte_personne_a_charge_11 = True
                            elif match_arg_645.code == Collectivite_Code.Martinique:
                                _ = match_arg_645.value
                                temp_prise_en_compte_personne_a_charge_11 = True
                            elif match_arg_645.code == Collectivite_Code.LaReunion:
                                _ = match_arg_645.value
                                temp_prise_en_compte_personne_a_charge_11 = True
                            elif match_arg_645.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_645.value
                                temp_prise_en_compte_personne_a_charge_11 = False
                            elif match_arg_645.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_645.value
                                temp_prise_en_compte_personne_a_charge_11 = False
                            elif match_arg_645.code == Collectivite_Code.Metropole:
                                _ = match_arg_645.value
                                temp_prise_en_compte_personne_a_charge_11 = False
                            elif match_arg_645.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_645.value
                                temp_prise_en_compte_personne_a_charge_11 = False
                            elif match_arg_645.code == Collectivite_Code.Mayotte:
                                _ = match_arg_645.value
                                temp_prise_en_compte_personne_a_charge_11 = True
                            if (temp_prise_en_compte_personne_a_charge_11 and
                                temp_prise_en_compte_personne_a_charge_10):
                                return False
                            else:
                                raise EmptyError
                    except EmptyError:
                        match_arg_646 = personne_a_charge_1
                        if match_arg_646.code == PersonneACharge_Code.EnfantACharge:
                            enfant_5 = match_arg_646.value
                            match_arg_647 = enfant_5.nationalite
                            if match_arg_647.code == Nationalite_Code.Francaise:
                                _ = match_arg_647.value
                                temp_prise_en_compte_personne_a_charge_12 = False
                            elif match_arg_647.code == Nationalite_Code.Etrangere:
                                conditions_2 = match_arg_647.value
                                temp_prise_en_compte_personne_a_charge_12 = not conditions_2.satisfait_conditions_l512_2_code_securite_sociale
                        elif match_arg_646.code == PersonneACharge_Code.AutrePersonneACharge:
                            _ = match_arg_646.value
                            temp_prise_en_compte_personne_a_charge_12 = False
                        if (septieme_alinea_l823_1_applicable and
                            temp_prise_en_compte_personne_a_charge_12):
                            return False
                        else:
                            raise EmptyError
                except EmptyError:
                    match_arg_648 = personne_a_charge_1
                    if match_arg_648.code == PersonneACharge_Code.EnfantACharge:
                        enfant_6 = match_arg_648.value
                        temp_prise_en_compte_personne_a_charge_13 = prestations_familiales_dot_droit_ouvert(
                            EnfantPrestationsFamiliales(identifiant = enfant_6.identifiant,
                            obligation_scolaire = enfant_6.obligation_scolaire,
                            remuneration_mensuelle = enfant_6.remuneration_mensuelle,
                            date_de_naissance = enfant_6.date_de_naissance,
                            a_deja_ouvert_droit_aux_allocations_familiales = enfant_6.a_deja_ouvert_droit_aux_allocations_familiales))
                    elif match_arg_648.code == PersonneACharge_Code.AutrePersonneACharge:
                        parent_1 = match_arg_648.value
                        temp_prise_en_compte_personne_a_charge_13 = False
                    if temp_prise_en_compte_personne_a_charge_13:
                        return True
                    else:
                        raise EmptyError
            def temp_prise_en_compte_personne_a_charge_14(_:Unit):
                try:
                    def temp_prise_en_compte_personne_a_charge_15(_:Unit):
                        return True
                    def temp_prise_en_compte_personne_a_charge_16(_:Unit):
                        match_arg_649 = personne_a_charge_1
                        if match_arg_649.code == PersonneACharge_Code.EnfantACharge:
                            enfant_7 = match_arg_649.value
                            return False
                        elif match_arg_649.code == PersonneACharge_Code.AutrePersonneACharge:
                            parent_2 = match_arg_649.value
                            match_arg_650 = parent_2.parente
                            if match_arg_650.code == Parente_Code.Ascendant:
                                _ = match_arg_650.value
                                temp_prise_en_compte_personne_a_charge_17 = False
                            elif match_arg_650.code == Parente_Code.Descendant:
                                _ = match_arg_650.value
                                temp_prise_en_compte_personne_a_charge_17 = False
                            elif match_arg_650.code == Parente_Code.CollateralDeuxiemeTroisiemeDegre:
                                _ = match_arg_650.value
                                temp_prise_en_compte_personne_a_charge_17 = True
                            match_arg_651 = parent_2.parente
                            if match_arg_651.code == Parente_Code.Ascendant:
                                _ = match_arg_651.value
                                temp_prise_en_compte_personne_a_charge_18 = False
                            elif match_arg_651.code == Parente_Code.Descendant:
                                _ = match_arg_651.value
                                temp_prise_en_compte_personne_a_charge_18 = True
                            elif match_arg_651.code == Parente_Code.CollateralDeuxiemeTroisiemeDegre:
                                _ = match_arg_651.value
                                temp_prise_en_compte_personne_a_charge_18 = False
                            match_arg_652 = parent_2.parente
                            if match_arg_652.code == Parente_Code.Ascendant:
                                _ = match_arg_652.value
                                temp_prise_en_compte_personne_a_charge_19 = True
                            elif match_arg_652.code == Parente_Code.Descendant:
                                _ = match_arg_652.value
                                temp_prise_en_compte_personne_a_charge_19 = False
                            elif match_arg_652.code == Parente_Code.CollateralDeuxiemeTroisiemeDegre:
                                _ = match_arg_652.value
                                temp_prise_en_compte_personne_a_charge_19 = False
                            return ((temp_prise_en_compte_personne_a_charge_19 or
                                (temp_prise_en_compte_personne_a_charge_18 or
                                temp_prise_en_compte_personne_a_charge_17)) and
                                (parent_2.incapacite_80_pourcent_ou_restriction_emploi and
                                (parent_2.ressources <=
                                (plafond_individuel_l815_9_secu *
                                decimal_of_string("1.25")))))
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_prise_en_compte_personne_a_charge_16,
                                          temp_prise_en_compte_personne_a_charge_15)
                except EmptyError:
                    if condition_2_r823_4(personne_a_charge_1):
                        return True
                    else:
                        raise EmptyError
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [temp_prise_en_compte_personne_a_charge_14,
                                  temp_prise_en_compte_personne_a_charge_3],
                                  temp_prise_en_compte_personne_a_charge_2,
                                  temp_prise_en_compte_personne_a_charge_1)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=312,
                                                 start_column=11,
                                                 end_line=312, end_column=44,
                                                 law_headings=["Éligibilité aux aides personnelles au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    prise_en_compte_personne_a_charge = temp_prise_en_compte_personne_a_charge
    try:
        def temp_personnes_a_charge_prises_en_compte(personne_a_charge_2:PersonneACharge):
            return prise_en_compte_personne_a_charge(personne_a_charge_2)
        temp_personnes_a_charge_prises_en_compte_1 = list_filter(temp_personnes_a_charge_prises_en_compte,
            menage.personnes_a_charge)
    except EmptyError:
        temp_personnes_a_charge_prises_en_compte_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=314, start_column=11,
                                             end_line=314, end_column=46,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    personnes_a_charge_prises_en_compte = temp_personnes_a_charge_prises_en_compte_1
    try:
        def temp_coefficents_enfants_garde_alternee_pris_en_compte(personne_a_charge_3:PersonneACharge):
            match_arg_653 = personne_a_charge_3
            if match_arg_653.code == PersonneACharge_Code.EnfantACharge:
                enfant_8 = match_arg_653.value
                match_arg_654 = enfant_8.situation_garde_alternee
                if match_arg_654.code == SituationGardeAlternee_Code.PasDeGardeAlternee:
                    _ = match_arg_654.value
                    return False
                elif match_arg_654.code == SituationGardeAlternee_Code.GardeAlterneeCoefficientPriseEnCharge:
                    _ = match_arg_654.value
                    return True
            elif match_arg_653.code == PersonneACharge_Code.AutrePersonneACharge:
                _ = match_arg_653.value
                return False
        def temp_coefficents_enfants_garde_alternee_pris_en_compte_1(personne_a_charge_4:PersonneACharge):
            match_arg_655 = personne_a_charge_4
            if match_arg_655.code == PersonneACharge_Code.EnfantACharge:
                enfant_9 = match_arg_655.value
                match_arg_656 = enfant_9.situation_garde_alternee
                if match_arg_656.code == SituationGardeAlternee_Code.PasDeGardeAlternee:
                    _ = match_arg_656.value
                    return decimal_of_string("0.")
                elif match_arg_656.code == SituationGardeAlternee_Code.GardeAlterneeCoefficientPriseEnCharge:
                    coeff = match_arg_656.value
                    return coeff
            elif match_arg_655.code == PersonneACharge_Code.AutrePersonneACharge:
                _ = match_arg_655.value
                return decimal_of_string("0.")
        temp_coefficents_enfants_garde_alternee_pris_en_compte_2 = list_map(temp_coefficents_enfants_garde_alternee_pris_en_compte_1,
            list_filter(temp_coefficents_enfants_garde_alternee_pris_en_compte,
            personnes_a_charge_prises_en_compte))
    except EmptyError:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=332, start_column=12,
                                             end_line=332, end_column=61,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficents_enfants_garde_alternee_pris_en_compte = temp_coefficents_enfants_garde_alternee_pris_en_compte_2
    try:
        temp_nombre_personnes_a_charge_prises_en_compte = list_length(personnes_a_charge_prises_en_compte)
    except EmptyError:
        temp_nombre_personnes_a_charge_prises_en_compte = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=331, start_column=12,
                                             end_line=331, end_column=54,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    nombre_personnes_a_charge_prises_en_compte = temp_nombre_personnes_a_charge_prises_en_compte
    return EligibiliteAidesPersonnelleLogement(date_courante = date_courante_14,
        eligibilite = eligibilite,
        nombre_personnes_a_charge_prises_en_compte = nombre_personnes_a_charge_prises_en_compte,
        coefficents_enfants_garde_alternee_pris_en_compte = coefficents_enfants_garde_alternee_pris_en_compte,
        condition_2_r823_4 = condition_2_r823_4)

def calcul_allocation_logement_locatif(calcul_allocation_logement_locatif_in:CalculAllocationLogementLocatifIn):
    loyer_principal = calcul_allocation_logement_locatif_in.loyer_principal_in
    ressources_menage_arrondies_5 = calcul_allocation_logement_locatif_in.ressources_menage_arrondies_in
    beneficiaire_aide_adulte_ou_enfant_handicapes_1 = calcul_allocation_logement_locatif_in.beneficiaire_aide_adulte_ou_enfant_handicapes_in
    date_courante_15 = calcul_allocation_logement_locatif_in.date_courante_in
    nombre_personnes_a_charge_10 = calcul_allocation_logement_locatif_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_7 = calcul_allocation_logement_locatif_in.situation_familiale_calcul_apl_in
    zone_5 = calcul_allocation_logement_locatif_in.zone_in
    logement_est_chambre_1 = calcul_allocation_logement_locatif_in.logement_est_chambre_in
    agees_ou_handicap_adultes_hebergees_onereux_particuliers_1 = calcul_allocation_logement_locatif_in.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in
    type_aide_1 = calcul_allocation_logement_locatif_in.type_aide_in
    colocation_1 = calcul_allocation_logement_locatif_in.colocation_in
    reduction_loyer_solidarite_1 = calcul_allocation_logement_locatif_in.reduction_loyer_solidarite_in
    logement_meuble_d842_2_1 = calcul_allocation_logement_locatif_in.logement_meuble_d842_2_in
    residence_8 = calcul_allocation_logement_locatif_in.residence_in
    changement_logement_d842_4 = calcul_allocation_logement_locatif_in.changement_logement_d842_4_in
    try:
        temp_calcul_apl_locatif_dot_loyer_principal_base = loyer_principal
    except EmptyError:
        temp_calcul_apl_locatif_dot_loyer_principal_base = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4145,
                                             start_column=14, end_line=4145,
                                             end_column=48,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_loyer_principal_base = temp_calcul_apl_locatif_dot_loyer_principal_base
    try:
        temp_calcul_apl_locatif_dot_ressources_menage_arrondies = ressources_menage_arrondies_5
    except EmptyError:
        temp_calcul_apl_locatif_dot_ressources_menage_arrondies = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4147,
                                             start_column=14, end_line=4147,
                                             end_column=60,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_ressources_menage_arrondies = temp_calcul_apl_locatif_dot_ressources_menage_arrondies
    try:
        temp_calcul_apl_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes = beneficiaire_aide_adulte_ou_enfant_handicapes_1
    except EmptyError:
        temp_calcul_apl_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4149,
                                             start_column=14, end_line=4149,
                                             end_column=78,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes = temp_calcul_apl_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes
    try:
        temp_calcul_apl_locatif_dot_date_courante = date_courante_15
    except EmptyError:
        temp_calcul_apl_locatif_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4152,
                                             start_column=14, end_line=4152,
                                             end_column=46,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_date_courante = temp_calcul_apl_locatif_dot_date_courante
    try:
        temp_calcul_apl_locatif_dot_nombre_personnes_a_charge = nombre_personnes_a_charge_10
    except EmptyError:
        temp_calcul_apl_locatif_dot_nombre_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4154,
                                             start_column=14, end_line=4154,
                                             end_column=58,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_nombre_personnes_a_charge = temp_calcul_apl_locatif_dot_nombre_personnes_a_charge
    try:
        temp_calcul_apl_locatif_dot_situation_familiale_calcul_apl = situation_familiale_calcul_apl_7
    except EmptyError:
        temp_calcul_apl_locatif_dot_situation_familiale_calcul_apl = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4156,
                                             start_column=14, end_line=4156,
                                             end_column=63,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_situation_familiale_calcul_apl = temp_calcul_apl_locatif_dot_situation_familiale_calcul_apl
    try:
        temp_calcul_apl_locatif_dot_zone = zone_5
    except EmptyError:
        temp_calcul_apl_locatif_dot_zone = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4158,
                                             start_column=14, end_line=4158,
                                             end_column=37,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_zone = temp_calcul_apl_locatif_dot_zone
    try:
        temp_calcul_apl_locatif_dot_logement_est_chambre = logement_est_chambre_1
    except EmptyError:
        temp_calcul_apl_locatif_dot_logement_est_chambre = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4160,
                                             start_column=14, end_line=4160,
                                             end_column=53,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_logement_est_chambre = temp_calcul_apl_locatif_dot_logement_est_chambre
    try:
        temp_calcul_apl_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers = agees_ou_handicap_adultes_hebergees_onereux_particuliers_1
    except EmptyError:
        temp_calcul_apl_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4163, start_column=5,
                                             end_line=4164, end_column=63,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers = temp_calcul_apl_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers
    try:
        temp_calcul_apl_locatif_dot_type_aide = type_aide_1
    except EmptyError:
        temp_calcul_apl_locatif_dot_type_aide = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4167,
                                             start_column=14, end_line=4167,
                                             end_column=42,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_type_aide = temp_calcul_apl_locatif_dot_type_aide
    try:
        temp_calcul_apl_locatif_dot_colocation = colocation_1
    except EmptyError:
        temp_calcul_apl_locatif_dot_colocation = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4169,
                                             start_column=14, end_line=4169,
                                             end_column=43,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_colocation = temp_calcul_apl_locatif_dot_colocation
    try:
        temp_calcul_apl_locatif_dot_reduction_loyer_solidarite = reduction_loyer_solidarite_1
    except EmptyError:
        temp_calcul_apl_locatif_dot_reduction_loyer_solidarite = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4171,
                                             start_column=14, end_line=4171,
                                             end_column=59,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_reduction_loyer_solidarite = temp_calcul_apl_locatif_dot_reduction_loyer_solidarite
    try:
        temp_calcul_apl_locatif_dot_logement_meuble_d842_2 = logement_meuble_d842_2_1
    except EmptyError:
        temp_calcul_apl_locatif_dot_logement_meuble_d842_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4173,
                                             start_column=14, end_line=4173,
                                             end_column=55,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_logement_meuble_d842_2 = temp_calcul_apl_locatif_dot_logement_meuble_d842_2
    try:
        temp_calcul_apl_locatif_dot_residence = residence_8
    except EmptyError:
        temp_calcul_apl_locatif_dot_residence = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=4175,
                                             start_column=14, end_line=4175,
                                             end_column=42,
                                             law_headings=["Article D842-1",
                                             "Section 1 : Secteur locatif ordinaire",
                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                             "Titre IV : Allocations de Logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie réglementaire",
                                             "Code de la construction et de l'habitation"]))
    calcul_apl_locatif_dot_residence = temp_calcul_apl_locatif_dot_residence
    result_18 = calcul_aide_personnalisee_logement_locatif(CalculAidePersonnaliseeLogementLocatifIn(loyer_principal_base_in = calcul_apl_locatif_dot_loyer_principal_base,
                                                           ressources_menage_arrondies_in = calcul_apl_locatif_dot_ressources_menage_arrondies,
                                                           beneficiaire_aide_adulte_ou_enfant_handicapes_in = calcul_apl_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes,
                                                           date_courante_in = calcul_apl_locatif_dot_date_courante,
                                                           nombre_personnes_a_charge_in = calcul_apl_locatif_dot_nombre_personnes_a_charge,
                                                           situation_familiale_calcul_apl_in = calcul_apl_locatif_dot_situation_familiale_calcul_apl,
                                                           zone_in = calcul_apl_locatif_dot_zone,
                                                           logement_est_chambre_in = calcul_apl_locatif_dot_logement_est_chambre,
                                                           agees_ou_handicap_adultes_hebergees_onereux_particuliers_in = calcul_apl_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers,
                                                           type_aide_in = calcul_apl_locatif_dot_type_aide,
                                                           colocation_in = calcul_apl_locatif_dot_colocation,
                                                           reduction_loyer_solidarite_in = calcul_apl_locatif_dot_reduction_loyer_solidarite,
                                                           logement_meuble_d842_2_in = calcul_apl_locatif_dot_logement_meuble_d842_2,
                                                           residence_in = calcul_apl_locatif_dot_residence))
    calcul_apl_locatif_dot_montant_forfaitaire_charges_d823_16 = result_18.montant_forfaitaire_charges_d823_16
    calcul_apl_locatif_dot_plafond_loyer_d823_16_2 = result_18.plafond_loyer_d823_16_2
    calcul_apl_locatif_dot_participation_minimale = result_18.participation_minimale
    calcul_apl_locatif_dot_taux_composition_familiale = result_18.taux_composition_familiale
    calcul_apl_locatif_dot_participation_personnelle = result_18.participation_personnelle
    calcul_apl_locatif_dot_aide_finale_formule = result_18.aide_finale_formule
    calcul_apl_locatif_dot_traitement_aide_finale_montant_minimal = result_18.traitement_aide_finale
    try:
        temp_participation_personnelle_2 = calcul_apl_locatif_dot_participation_personnelle
    except EmptyError:
        temp_participation_personnelle_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=844, start_column=12,
                                             end_line=844, end_column=37,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    participation_personnelle_1 = temp_participation_personnelle_2
    try:
        temp_taux_composition_familiale_17 = calcul_apl_locatif_dot_taux_composition_familiale
    except EmptyError:
        temp_taux_composition_familiale_17 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=843, start_column=12,
                                             end_line=843, end_column=38,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    taux_composition_familiale_1 = temp_taux_composition_familiale_17
    try:
        temp_participation_minimale_12 = calcul_apl_locatif_dot_participation_minimale
    except EmptyError:
        temp_participation_minimale_12 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=842, start_column=12,
                                             end_line=842, end_column=34,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    participation_minimale_1 = temp_participation_minimale_12
    try:
        temp_plafond_loyer_d823_16_2_97 = calcul_apl_locatif_dot_plafond_loyer_d823_16_2
    except EmptyError:
        temp_plafond_loyer_d823_16_2_97 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=841, start_column=12,
                                             end_line=841, end_column=35,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    plafond_loyer_d823_16_2_1 = temp_plafond_loyer_d823_16_2_97
    try:
        temp_montant_forfaitaire_charges_d823_16_93 = calcul_apl_locatif_dot_montant_forfaitaire_charges_d823_16
    except EmptyError:
        temp_montant_forfaitaire_charges_d823_16_93 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=840, start_column=12,
                                             end_line=840, end_column=47,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    montant_forfaitaire_charges_d823_16_1 = temp_montant_forfaitaire_charges_d823_16_93
    def temp_traitement_aide_finale(aide_finale_28:Money):
        try:
            try:
                def temp_traitement_aide_finale_1(_:Unit):
                    return aide_finale_28
                def temp_traitement_aide_finale_2(_:Unit):
                    match_arg_657 = changement_logement_d842_4
                    if match_arg_657.code == ChangementLogementD8424_Code.Changement:
                        infos = match_arg_657.value
                        return (loyer_principal >=
                            infos.ancien_loyer_principal)
                    elif match_arg_657.code == ChangementLogementD8424_Code.PasDeChangement:
                        _ = match_arg_657.value
                        return False
                return handle_default(SourcePosition(filename="",
                                      start_line=0, start_column=1,
                                      end_line=0, end_column=1,
                                      law_headings=[]), [],
                                      temp_traitement_aide_finale_2,
                                      temp_traitement_aide_finale_1)
            except EmptyError:
                return calcul_apl_locatif_dot_traitement_aide_finale_montant_minimal(
                    aide_finale_28)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=838,
                                                 start_column=12,
                                                 end_line=838, end_column=34,
                                                 law_headings=["Secteur locatif",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale = temp_traitement_aide_finale
    try:
        try:
            def temp_aide_finale_formule_5(_:Unit):
                match_arg_658 = changement_logement_d842_4
                if match_arg_658.code == ChangementLogementD8424_Code.Changement:
                    infos_1 = match_arg_658.value
                    return (loyer_principal -
                        (infos_1.ancien_loyer_principal -
                        infos_1.ancienne_allocation_logement))
                elif match_arg_658.code == ChangementLogementD8424_Code.PasDeChangement:
                    _ = match_arg_658.value
                    return money_of_cents_string("0")
            def temp_aide_finale_formule_6(_:Unit):
                match_arg_659 = changement_logement_d842_4
                if match_arg_659.code == ChangementLogementD8424_Code.Changement:
                    infos_2 = match_arg_659.value
                    return (loyer_principal >=
                        infos_2.ancien_loyer_principal)
                elif match_arg_659.code == ChangementLogementD8424_Code.PasDeChangement:
                    _ = match_arg_659.value
                    return False
            temp_aide_finale_formule_7 = handle_default(SourcePosition(filename="",
                                                        start_line=0,
                                                        start_column=1,
                                                        end_line=0, end_column=1,
                                                        law_headings=[]), [],
                                                        temp_aide_finale_formule_6,
                                                        temp_aide_finale_formule_5)
        except EmptyError:
            temp_aide_finale_formule_7 = calcul_apl_locatif_dot_aide_finale_formule
    except EmptyError:
        temp_aide_finale_formule_7 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=837, start_column=12,
                                             end_line=837, end_column=31,
                                             law_headings=["Secteur locatif",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    aide_finale_formule_5 = temp_aide_finale_formule_7
    return CalculAllocationLogementLocatif(aide_finale_formule = aide_finale_formule_5,
        traitement_aide_finale = traitement_aide_finale,
        montant_forfaitaire_charges_d823_16 = montant_forfaitaire_charges_d823_16_1,
        plafond_loyer_d823_16_2 = plafond_loyer_d823_16_2_1,
        participation_minimale = participation_minimale_1,
        taux_composition_familiale = taux_composition_familiale_1,
        participation_personnelle = participation_personnelle_1)

def calcul_aide_personnalisee_logement(calcul_aide_personnalisee_logement_in:CalculAidePersonnaliseeLogementIn):
    mode_occupation_1 = calcul_aide_personnalisee_logement_in.mode_occupation_in
    type_aide_2 = calcul_aide_personnalisee_logement_in.type_aide_in
    ressources_menage_sans_arrondi = calcul_aide_personnalisee_logement_in.ressources_menage_sans_arrondi_in
    situation_familiale = calcul_aide_personnalisee_logement_in.situation_familiale_in
    nombre_personnes_a_charge_11 = calcul_aide_personnalisee_logement_in.nombre_personnes_a_charge_in
    zone_6 = calcul_aide_personnalisee_logement_in.zone_in
    date_courante_16 = calcul_aide_personnalisee_logement_in.date_courante_in
    residence_9 = calcul_aide_personnalisee_logement_in.residence_in
    try:
        match_arg_660 = mode_occupation_1
        if match_arg_660.code == ModeOccupation_Code.Locataire:
            location = match_arg_660.value
            temp_categorie_calcul_apl = CategorieCalculAPL(CategorieCalculAPL_Code.Location,
                location)
        elif match_arg_660.code == ModeOccupation_Code.ResidentLogementFoyer:
            logementfoyer = match_arg_660.value
            temp_categorie_calcul_apl = CategorieCalculAPL(CategorieCalculAPL_Code.LogementFoyer,
                logementfoyer)
        elif match_arg_660.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
            proprietaire = match_arg_660.value
            temp_categorie_calcul_apl = CategorieCalculAPL(CategorieCalculAPL_Code.AccessionPropriete,
                proprietaire)
        elif match_arg_660.code == ModeOccupation_Code.SousLocataire:
            location_1 = match_arg_660.value
            temp_categorie_calcul_apl = CategorieCalculAPL(CategorieCalculAPL_Code.Location,
                location_1)
        elif match_arg_660.code == ModeOccupation_Code.LocationAccession:
            proprietaire_1 = match_arg_660.value
            temp_categorie_calcul_apl = CategorieCalculAPL(CategorieCalculAPL_Code.AccessionPropriete,
                proprietaire_1)
    except EmptyError:
        temp_categorie_calcul_apl = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=789, start_column=11,
                                             end_line=789, end_column=31,
                                             law_headings=["Tous secteurs",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    categorie_calcul_apl = temp_categorie_calcul_apl
    try:
        temp_ressources_menage_avec_arrondi = arrondi_centaine_superieure(
            ressources_menage_sans_arrondi)
    except EmptyError:
        temp_ressources_menage_avec_arrondi = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=782, start_column=10,
                                             end_line=782, end_column=22,
                                             law_headings=["Tous secteurs",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    ressources_menage_avec_arrondi = temp_ressources_menage_avec_arrondi
    try:
        match_arg_661 = situation_familiale
        if match_arg_661.code == SituationFamiliale_Code.Celibataire:
            _ = match_arg_661.value
            temp_situation_familiale_calcul_apl = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.PersonneSeule,
                Unit())
        elif match_arg_661.code == SituationFamiliale_Code.Maries:
            _ = match_arg_661.value
            temp_situation_familiale_calcul_apl = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                Unit())
        elif match_arg_661.code == SituationFamiliale_Code.Pacses:
            _ = match_arg_661.value
            temp_situation_familiale_calcul_apl = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                Unit())
        elif match_arg_661.code == SituationFamiliale_Code.Concubins:
            _ = match_arg_661.value
            temp_situation_familiale_calcul_apl = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                Unit())
        elif match_arg_661.code == SituationFamiliale_Code.CelibataireSepareDeFait:
            _ = match_arg_661.value
            temp_situation_familiale_calcul_apl = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.PersonneSeule,
                Unit())
        elif match_arg_661.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
            _ = match_arg_661.value
            temp_situation_familiale_calcul_apl = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                Unit())
    except EmptyError:
        temp_situation_familiale_calcul_apl = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=790, start_column=11,
                                             end_line=790, end_column=41,
                                             law_headings=["Tous secteurs",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    situation_familiale_calcul_apl_8 = temp_situation_familiale_calcul_apl
    try:
        match_arg_662 = categorie_calcul_apl
        if match_arg_662.code == CategorieCalculAPL_Code.Location:
            location_2 = match_arg_662.value
            try:
                temp_sous_calcul_traitement = residence_9
            except EmptyError:
                temp_sous_calcul_traitement = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1464,
                                                     start_column=25,
                                                     end_line=1464,
                                                     end_column=34,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_1 = location_2.logement_meuble_d842_2
            except EmptyError:
                temp_sous_calcul_traitement_1 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1463,
                                                     start_column=38,
                                                     end_line=1463,
                                                     end_column=69,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                match_arg_663 = location_2.bailleur
                if match_arg_663.code == TypeBailleur_Code.BailleurSocial:
                    bailleur = match_arg_663.value
                    temp_sous_calcul_traitement_2 = bailleur.reduction_loyer_solidarite_percue
                elif match_arg_663.code == TypeBailleur_Code.BailleurPriveAvecConventionnementSocial:
                    _ = match_arg_663.value
                    temp_sous_calcul_traitement_2 = money_of_cents_string("0")
                elif match_arg_663.code == TypeBailleur_Code.BailleurPrive:
                    _ = match_arg_663.value
                    temp_sous_calcul_traitement_2 = money_of_cents_string("0")
            except EmptyError:
                temp_sous_calcul_traitement_2 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1459,
                                                     start_column=16,
                                                     end_line=1462,
                                                     end_column=39,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_3 = location_2.colocation
            except EmptyError:
                temp_sous_calcul_traitement_3 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1454,
                                                     start_column=26,
                                                     end_line=1454,
                                                     end_column=45,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_4 = type_aide_2
            except EmptyError:
                temp_sous_calcul_traitement_4 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1457,
                                                     start_column=25,
                                                     end_line=1457,
                                                     end_column=34,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_5 = location_2.agees_ou_handicap_adultes_hebergees_onereux_particuliers
            except EmptyError:
                temp_sous_calcul_traitement_5 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1456,
                                                     start_column=15,
                                                     end_line=1456,
                                                     end_column=80,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_6 = location_2.logement_est_chambre
            except EmptyError:
                temp_sous_calcul_traitement_6 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1453,
                                                     start_column=36,
                                                     end_line=1453,
                                                     end_column=65,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_7 = zone_6
            except EmptyError:
                temp_sous_calcul_traitement_7 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1447,
                                                     start_column=20,
                                                     end_line=1447,
                                                     end_column=24,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_8 = situation_familiale_calcul_apl_8
            except EmptyError:
                temp_sous_calcul_traitement_8 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1449,
                                                     start_column=46,
                                                     end_line=1449,
                                                     end_column=76,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_9 = nombre_personnes_a_charge_11
            except EmptyError:
                temp_sous_calcul_traitement_9 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1446,
                                                     start_column=41,
                                                     end_line=1446,
                                                     end_column=66,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_10 = date_courante_16
            except EmptyError:
                temp_sous_calcul_traitement_10 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1448,
                                                     start_column=29,
                                                     end_line=1448,
                                                     end_column=42,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_11 = location_2.beneficiaire_aide_adulte_ou_enfant_handicapes
            except EmptyError:
                temp_sous_calcul_traitement_11 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1452,
                                                     start_column=15,
                                                     end_line=1452,
                                                     end_column=69,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_12 = ressources_menage_avec_arrondi
            except EmptyError:
                temp_sous_calcul_traitement_12 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1445,
                                                     start_column=43,
                                                     end_line=1445,
                                                     end_column=60,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_13 = location_2.loyer_principal
            except EmptyError:
                temp_sous_calcul_traitement_13 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1450,
                                                     start_column=31,
                                                     end_line=1450,
                                                     end_column=55,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            def temp_sous_calcul_traitement_14(param0:Money):
                try:
                    temp_sous_calcul_traitement_15 = location_2.loyer_principal
                except EmptyError:
                    temp_sous_calcul_traitement_15 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1450,
                                                         start_column=31,
                                                         end_line=1450,
                                                         end_column=55,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_16 = ressources_menage_avec_arrondi
                except EmptyError:
                    temp_sous_calcul_traitement_16 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1445,
                                                         start_column=43,
                                                         end_line=1445,
                                                         end_column=60,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_17 = location_2.beneficiaire_aide_adulte_ou_enfant_handicapes
                except EmptyError:
                    temp_sous_calcul_traitement_17 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1452,
                                                         start_column=15,
                                                         end_line=1452,
                                                         end_column=69,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_18 = date_courante_16
                except EmptyError:
                    temp_sous_calcul_traitement_18 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1448,
                                                         start_column=29,
                                                         end_line=1448,
                                                         end_column=42,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_19 = nombre_personnes_a_charge_11
                except EmptyError:
                    temp_sous_calcul_traitement_19 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1446,
                                                         start_column=41,
                                                         end_line=1446,
                                                         end_column=66,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_20 = situation_familiale_calcul_apl_8
                except EmptyError:
                    temp_sous_calcul_traitement_20 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1449,
                                                         start_column=46,
                                                         end_line=1449,
                                                         end_column=76,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_21 = zone_6
                except EmptyError:
                    temp_sous_calcul_traitement_21 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1447,
                                                         start_column=20,
                                                         end_line=1447,
                                                         end_column=24,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_22 = location_2.logement_est_chambre
                except EmptyError:
                    temp_sous_calcul_traitement_22 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1453,
                                                         start_column=36,
                                                         end_line=1453,
                                                         end_column=65,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_23 = location_2.agees_ou_handicap_adultes_hebergees_onereux_particuliers
                except EmptyError:
                    temp_sous_calcul_traitement_23 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1456,
                                                         start_column=15,
                                                         end_line=1456,
                                                         end_column=80,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_24 = type_aide_2
                except EmptyError:
                    temp_sous_calcul_traitement_24 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1457,
                                                         start_column=25,
                                                         end_line=1457,
                                                         end_column=34,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_25 = location_2.colocation
                except EmptyError:
                    temp_sous_calcul_traitement_25 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1454,
                                                         start_column=26,
                                                         end_line=1454,
                                                         end_column=45,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    match_arg_664 = location_2.bailleur
                    if match_arg_664.code == TypeBailleur_Code.BailleurSocial:
                        bailleur_1 = match_arg_664.value
                        temp_sous_calcul_traitement_26 = bailleur_1.reduction_loyer_solidarite_percue
                    elif match_arg_664.code == TypeBailleur_Code.BailleurPriveAvecConventionnementSocial:
                        _ = match_arg_664.value
                        temp_sous_calcul_traitement_26 = money_of_cents_string("0")
                    elif match_arg_664.code == TypeBailleur_Code.BailleurPrive:
                        _ = match_arg_664.value
                        temp_sous_calcul_traitement_26 = money_of_cents_string("0")
                except EmptyError:
                    temp_sous_calcul_traitement_26 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1459,
                                                         start_column=16,
                                                         end_line=1462,
                                                         end_column=39,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_27 = location_2.logement_meuble_d842_2
                except EmptyError:
                    temp_sous_calcul_traitement_27 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1463,
                                                         start_column=38,
                                                         end_line=1463,
                                                         end_column=69,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_28 = residence_9
                except EmptyError:
                    temp_sous_calcul_traitement_28 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1464,
                                                         start_column=25,
                                                         end_line=1464,
                                                         end_column=34,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                return calcul_aide_personnalisee_logement_locatif(CalculAidePersonnaliseeLogementLocatifIn(loyer_principal_base_in = temp_sous_calcul_traitement_15,
                                                                  ressources_menage_arrondies_in = temp_sous_calcul_traitement_16,
                                                                  beneficiaire_aide_adulte_ou_enfant_handicapes_in = temp_sous_calcul_traitement_17,
                                                                  date_courante_in = temp_sous_calcul_traitement_18,
                                                                  nombre_personnes_a_charge_in = temp_sous_calcul_traitement_19,
                                                                  situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_20,
                                                                  zone_in = temp_sous_calcul_traitement_21,
                                                                  logement_est_chambre_in = temp_sous_calcul_traitement_22,
                                                                  agees_ou_handicap_adultes_hebergees_onereux_particuliers_in = temp_sous_calcul_traitement_23,
                                                                  type_aide_in = temp_sous_calcul_traitement_24,
                                                                  colocation_in = temp_sous_calcul_traitement_25,
                                                                  reduction_loyer_solidarite_in = temp_sous_calcul_traitement_26,
                                                                  logement_meuble_d842_2_in = temp_sous_calcul_traitement_27,
                                                                  residence_in = temp_sous_calcul_traitement_28)).traitement_aide_finale(
                    param0)
            temp_sous_calcul_traitement_29 = TraitementFormuleAideFinale(aide_finale_formule = calcul_aide_personnalisee_logement_locatif(
                CalculAidePersonnaliseeLogementLocatifIn(loyer_principal_base_in = temp_sous_calcul_traitement_13,
                ressources_menage_arrondies_in = temp_sous_calcul_traitement_12,
                beneficiaire_aide_adulte_ou_enfant_handicapes_in = temp_sous_calcul_traitement_11,
                date_courante_in = temp_sous_calcul_traitement_10,
                nombre_personnes_a_charge_in = temp_sous_calcul_traitement_9,
                situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_8,
                zone_in = temp_sous_calcul_traitement_7,
                logement_est_chambre_in = temp_sous_calcul_traitement_6,
                agees_ou_handicap_adultes_hebergees_onereux_particuliers_in = temp_sous_calcul_traitement_5,
                type_aide_in = temp_sous_calcul_traitement_4,
                colocation_in = temp_sous_calcul_traitement_3,
                reduction_loyer_solidarite_in = temp_sous_calcul_traitement_2,
                logement_meuble_d842_2_in = temp_sous_calcul_traitement_1,
                residence_in = temp_sous_calcul_traitement)).aide_finale_formule,
                traitement_aide_finale = temp_sous_calcul_traitement_14)
        elif match_arg_662.code == CategorieCalculAPL_Code.AccessionPropriete:
            proprietaire_2 = match_arg_662.value
            try:
                temp_sous_calcul_traitement_30 = residence_9
            except EmptyError:
                temp_sous_calcul_traitement_30 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1515,
                                                     start_column=26,
                                                     end_line=1515,
                                                     end_column=35,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_31 = date_courante_16
            except EmptyError:
                temp_sous_calcul_traitement_31 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1503,
                                                     start_column=30,
                                                     end_line=1503,
                                                     end_column=43,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_32 = proprietaire_2.anciennete_logement
            except EmptyError:
                temp_sous_calcul_traitement_32 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1514,
                                                     start_column=36,
                                                     end_line=1514,
                                                     end_column=68,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_33 = proprietaire_2.pret.type_pret
            except EmptyError:
                temp_sous_calcul_traitement_33 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1513,
                                                     start_column=26,
                                                     end_line=1513,
                                                     end_column=53,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_34 = zone_6
            except EmptyError:
                temp_sous_calcul_traitement_34 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1502,
                                                     start_column=21,
                                                     end_line=1502,
                                                     end_column=25,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_35 = proprietaire_2.situation_r822_11_13_17
            except EmptyError:
                temp_sous_calcul_traitement_35 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1512,
                                                     start_column=40,
                                                     end_line=1512,
                                                     end_column=76,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_36 = proprietaire_2.copropriete
            except EmptyError:
                temp_sous_calcul_traitement_36 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1511,
                                                     start_column=28,
                                                     end_line=1511,
                                                     end_column=52,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_37 = proprietaire_2.date_entree_logement
            except EmptyError:
                temp_sous_calcul_traitement_37 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1510,
                                                     start_column=37,
                                                     end_line=1510,
                                                     end_column=70,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_38 = proprietaire_2.local_habite_premiere_fois_beneficiaire
            except EmptyError:
                temp_sous_calcul_traitement_38 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1509,
                                                     start_column=14,
                                                     end_line=1509,
                                                     end_column=66,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_39 = proprietaire_2.pret.date_signature
            except EmptyError:
                temp_sous_calcul_traitement_39 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1507,
                                                     start_column=36,
                                                     end_line=1507,
                                                     end_column=68,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_40 = proprietaire_2.type_travaux_logement_d832_15
            except EmptyError:
                temp_sous_calcul_traitement_40 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1506,
                                                     start_column=38,
                                                     end_line=1506,
                                                     end_column=80,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_41 = situation_familiale_calcul_apl_8
            except EmptyError:
                temp_sous_calcul_traitement_41 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1504,
                                                     start_column=47,
                                                     end_line=1504,
                                                     end_column=77,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_42 = nombre_personnes_a_charge_11
            except EmptyError:
                temp_sous_calcul_traitement_42 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1501,
                                                     start_column=42,
                                                     end_line=1501,
                                                     end_column=67,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_43 = ressources_menage_avec_arrondi
            except EmptyError:
                temp_sous_calcul_traitement_43 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1500,
                                                     start_column=44,
                                                     end_line=1500,
                                                     end_column=61,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_44 = proprietaire_2.mensualite_principale
            except EmptyError:
                temp_sous_calcul_traitement_44 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1505,
                                                     start_column=38,
                                                     end_line=1505,
                                                     end_column=72,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            def temp_sous_calcul_traitement_45(param0_1:Money):
                try:
                    temp_sous_calcul_traitement_46 = proprietaire_2.mensualite_principale
                except EmptyError:
                    temp_sous_calcul_traitement_46 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1505,
                                                         start_column=38,
                                                         end_line=1505,
                                                         end_column=72,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_47 = ressources_menage_avec_arrondi
                except EmptyError:
                    temp_sous_calcul_traitement_47 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1500,
                                                         start_column=44,
                                                         end_line=1500,
                                                         end_column=61,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_48 = nombre_personnes_a_charge_11
                except EmptyError:
                    temp_sous_calcul_traitement_48 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1501,
                                                         start_column=42,
                                                         end_line=1501,
                                                         end_column=67,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_49 = situation_familiale_calcul_apl_8
                except EmptyError:
                    temp_sous_calcul_traitement_49 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1504,
                                                         start_column=47,
                                                         end_line=1504,
                                                         end_column=77,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_50 = proprietaire_2.type_travaux_logement_d832_15
                except EmptyError:
                    temp_sous_calcul_traitement_50 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1506,
                                                         start_column=38,
                                                         end_line=1506,
                                                         end_column=80,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_51 = proprietaire_2.pret.date_signature
                except EmptyError:
                    temp_sous_calcul_traitement_51 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1507,
                                                         start_column=36,
                                                         end_line=1507,
                                                         end_column=68,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_52 = proprietaire_2.local_habite_premiere_fois_beneficiaire
                except EmptyError:
                    temp_sous_calcul_traitement_52 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1509,
                                                         start_column=14,
                                                         end_line=1509,
                                                         end_column=66,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_53 = proprietaire_2.date_entree_logement
                except EmptyError:
                    temp_sous_calcul_traitement_53 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1510,
                                                         start_column=37,
                                                         end_line=1510,
                                                         end_column=70,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_54 = proprietaire_2.copropriete
                except EmptyError:
                    temp_sous_calcul_traitement_54 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1511,
                                                         start_column=28,
                                                         end_line=1511,
                                                         end_column=52,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_55 = proprietaire_2.situation_r822_11_13_17
                except EmptyError:
                    temp_sous_calcul_traitement_55 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1512,
                                                         start_column=40,
                                                         end_line=1512,
                                                         end_column=76,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_56 = zone_6
                except EmptyError:
                    temp_sous_calcul_traitement_56 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1502,
                                                         start_column=21,
                                                         end_line=1502,
                                                         end_column=25,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_57 = proprietaire_2.pret.type_pret
                except EmptyError:
                    temp_sous_calcul_traitement_57 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1513,
                                                         start_column=26,
                                                         end_line=1513,
                                                         end_column=53,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_58 = proprietaire_2.anciennete_logement
                except EmptyError:
                    temp_sous_calcul_traitement_58 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1514,
                                                         start_column=36,
                                                         end_line=1514,
                                                         end_column=68,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_59 = date_courante_16
                except EmptyError:
                    temp_sous_calcul_traitement_59 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1503,
                                                         start_column=30,
                                                         end_line=1503,
                                                         end_column=43,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_60 = residence_9
                except EmptyError:
                    temp_sous_calcul_traitement_60 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1515,
                                                         start_column=26,
                                                         end_line=1515,
                                                         end_column=35,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                return calcul_aide_personnalisee_logement_accession_propriete(
                    CalculAidePersonnaliseeLogementAccessionProprieteIn(mensualite_principale_in = temp_sous_calcul_traitement_46,
                    ressources_menage_arrondies_in = temp_sous_calcul_traitement_47,
                    nombre_personnes_a_charge_in = temp_sous_calcul_traitement_48,
                    situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_49,
                    type_travaux_logement_in = temp_sous_calcul_traitement_50,
                    date_signature_pret_in = temp_sous_calcul_traitement_51,
                    local_habite_premiere_fois_beneficiaire_in = temp_sous_calcul_traitement_52,
                    date_entree_logement_in = temp_sous_calcul_traitement_53,
                    copropriete_in = temp_sous_calcul_traitement_54,
                    situation_r822_11_13_17_in = temp_sous_calcul_traitement_55,
                    zone_in = temp_sous_calcul_traitement_56,
                    type_pret_in = temp_sous_calcul_traitement_57,
                    anciennete_logement_in = temp_sous_calcul_traitement_58,
                    date_courante_in = temp_sous_calcul_traitement_59,
                    residence_in = temp_sous_calcul_traitement_60)).traitement_aide_finale(
                    param0_1)
            temp_sous_calcul_traitement_29 = TraitementFormuleAideFinale(aide_finale_formule = calcul_aide_personnalisee_logement_accession_propriete(
                CalculAidePersonnaliseeLogementAccessionProprieteIn(mensualite_principale_in = temp_sous_calcul_traitement_44,
                ressources_menage_arrondies_in = temp_sous_calcul_traitement_43,
                nombre_personnes_a_charge_in = temp_sous_calcul_traitement_42,
                situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_41,
                type_travaux_logement_in = temp_sous_calcul_traitement_40,
                date_signature_pret_in = temp_sous_calcul_traitement_39,
                local_habite_premiere_fois_beneficiaire_in = temp_sous_calcul_traitement_38,
                date_entree_logement_in = temp_sous_calcul_traitement_37,
                copropriete_in = temp_sous_calcul_traitement_36,
                situation_r822_11_13_17_in = temp_sous_calcul_traitement_35,
                zone_in = temp_sous_calcul_traitement_34,
                type_pret_in = temp_sous_calcul_traitement_33,
                anciennete_logement_in = temp_sous_calcul_traitement_32,
                date_courante_in = temp_sous_calcul_traitement_31,
                residence_in = temp_sous_calcul_traitement_30)).aide_finale_formule,
                traitement_aide_finale = temp_sous_calcul_traitement_45)
        elif match_arg_662.code == CategorieCalculAPL_Code.LogementFoyer:
            logement_foyer_ = match_arg_662.value
            def temp_sous_calcul_traitement_61(_:Unit):
                raise EmptyError
            def temp_sous_calcul_traitement_62(_:Unit):
                raise EmptyError
            def temp_sous_calcul_traitement_63(_:Unit):
                raise EmptyError
            try:
                temp_sous_calcul_traitement_64 = logement_foyer_.redevance
            except EmptyError:
                temp_sous_calcul_traitement_64 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1485,
                                                     start_column=25,
                                                     end_line=1485,
                                                     end_column=50,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_65 = date_courante_16
            except EmptyError:
                temp_sous_calcul_traitement_65 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1483,
                                                     start_column=29,
                                                     end_line=1483,
                                                     end_column=42,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_66 = zone_6
            except EmptyError:
                temp_sous_calcul_traitement_66 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1481,
                                                     start_column=20,
                                                     end_line=1481,
                                                     end_column=24,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_67 = situation_familiale_calcul_apl_8
            except EmptyError:
                temp_sous_calcul_traitement_67 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1484,
                                                     start_column=46,
                                                     end_line=1484,
                                                     end_column=76,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_68 = nombre_personnes_a_charge_11
            except EmptyError:
                temp_sous_calcul_traitement_68 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1478,
                                                     start_column=41,
                                                     end_line=1478,
                                                     end_column=66,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_69 = ressources_menage_avec_arrondi
            except EmptyError:
                temp_sous_calcul_traitement_69 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1477,
                                                     start_column=43,
                                                     end_line=1477,
                                                     end_column=60,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_70 = logement_foyer_.date_conventionnement
            except EmptyError:
                temp_sous_calcul_traitement_70 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1487,
                                                     start_column=37,
                                                     end_line=1487,
                                                     end_column=74,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_71 = logement_foyer_.type
            except EmptyError:
                temp_sous_calcul_traitement_71 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1486,
                                                     start_column=35,
                                                     end_line=1486,
                                                     end_column=55,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_72 = logement_foyer_.logement_foyer_jeunes_travailleurs
            except EmptyError:
                temp_sous_calcul_traitement_72 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1480,
                                                     start_column=13,
                                                     end_line=1480,
                                                     end_column=63,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            try:
                temp_sous_calcul_traitement_73 = residence_9
            except EmptyError:
                temp_sous_calcul_traitement_73 = dead_value
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1482,
                                                     start_column=25,
                                                     end_line=1482,
                                                     end_column=34,
                                                     law_headings=["Article D823-9",
                                                     "Section 1 : Calcul, liquidation et versement des aides",
                                                     "Chapitre III : Modalités de liquidation et de versement",
                                                     "Titre II : Dispositions communes aux aides personnelles au logement",
                                                     "Livre VIII : Aides personnelles au logement",
                                                     "Partie réglementaire",
                                                     "Code de la construction et de l'habitation"]))
            def temp_sous_calcul_traitement_74(param0_2:Money):
                try:
                    temp_sous_calcul_traitement_75 = residence_9
                except EmptyError:
                    temp_sous_calcul_traitement_75 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1482,
                                                         start_column=25,
                                                         end_line=1482,
                                                         end_column=34,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_76 = logement_foyer_.logement_foyer_jeunes_travailleurs
                except EmptyError:
                    temp_sous_calcul_traitement_76 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1480,
                                                         start_column=13,
                                                         end_line=1480,
                                                         end_column=63,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_77 = logement_foyer_.type
                except EmptyError:
                    temp_sous_calcul_traitement_77 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1486,
                                                         start_column=35,
                                                         end_line=1486,
                                                         end_column=55,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_78 = logement_foyer_.date_conventionnement
                except EmptyError:
                    temp_sous_calcul_traitement_78 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1487,
                                                         start_column=37,
                                                         end_line=1487,
                                                         end_column=74,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_79 = ressources_menage_avec_arrondi
                except EmptyError:
                    temp_sous_calcul_traitement_79 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1477,
                                                         start_column=43,
                                                         end_line=1477,
                                                         end_column=60,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_80 = nombre_personnes_a_charge_11
                except EmptyError:
                    temp_sous_calcul_traitement_80 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1478,
                                                         start_column=41,
                                                         end_line=1478,
                                                         end_column=66,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_81 = situation_familiale_calcul_apl_8
                except EmptyError:
                    temp_sous_calcul_traitement_81 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1484,
                                                         start_column=46,
                                                         end_line=1484,
                                                         end_column=76,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_82 = zone_6
                except EmptyError:
                    temp_sous_calcul_traitement_82 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1481,
                                                         start_column=20,
                                                         end_line=1481,
                                                         end_column=24,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_83 = date_courante_16
                except EmptyError:
                    temp_sous_calcul_traitement_83 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1483,
                                                         start_column=29,
                                                         end_line=1483,
                                                         end_column=42,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_84 = logement_foyer_.redevance
                except EmptyError:
                    temp_sous_calcul_traitement_84 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1485,
                                                         start_column=25,
                                                         end_line=1485,
                                                         end_column=50,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                def temp_sous_calcul_traitement_85(_:Unit):
                    raise EmptyError
                def temp_sous_calcul_traitement_86(_:Unit):
                    raise EmptyError
                def temp_sous_calcul_traitement_87(_:Unit):
                    raise EmptyError
                return calcul_aide_personnalisee_logement_foyer(CalculAidePersonnaliseeLogementFoyerIn(residence_in = temp_sous_calcul_traitement_75,
                                                                logement_foyer_jeunes_travailleurs_in = temp_sous_calcul_traitement_76,
                                                                type_logement_foyer_in = temp_sous_calcul_traitement_77,
                                                                date_conventionnement_in = temp_sous_calcul_traitement_78,
                                                                ressources_menage_arrondies_in = temp_sous_calcul_traitement_79,
                                                                nombre_personnes_a_charge_in = temp_sous_calcul_traitement_80,
                                                                situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_81,
                                                                zone_in = temp_sous_calcul_traitement_82,
                                                                date_courante_in = temp_sous_calcul_traitement_83,
                                                                redevance_in = temp_sous_calcul_traitement_84,
                                                                condition_2_du_832_25_in = temp_sous_calcul_traitement_85,
                                                                limitation_majoration_personnes_a_charge_in = temp_sous_calcul_traitement_86,
                                                                n_nombre_parts_d832_25_in = temp_sous_calcul_traitement_87)).traitement_aide_finale(
                    param0_2)
            temp_sous_calcul_traitement_29 = TraitementFormuleAideFinale(aide_finale_formule = calcul_aide_personnalisee_logement_foyer(
                CalculAidePersonnaliseeLogementFoyerIn(residence_in = temp_sous_calcul_traitement_73,
                logement_foyer_jeunes_travailleurs_in = temp_sous_calcul_traitement_72,
                type_logement_foyer_in = temp_sous_calcul_traitement_71,
                date_conventionnement_in = temp_sous_calcul_traitement_70,
                ressources_menage_arrondies_in = temp_sous_calcul_traitement_69,
                nombre_personnes_a_charge_in = temp_sous_calcul_traitement_68,
                situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_67,
                zone_in = temp_sous_calcul_traitement_66,
                date_courante_in = temp_sous_calcul_traitement_65,
                redevance_in = temp_sous_calcul_traitement_64,
                condition_2_du_832_25_in = temp_sous_calcul_traitement_63,
                limitation_majoration_personnes_a_charge_in = temp_sous_calcul_traitement_62,
                n_nombre_parts_d832_25_in = temp_sous_calcul_traitement_61)).aide_finale_formule,
                traitement_aide_finale = temp_sous_calcul_traitement_74)
    except EmptyError:
        temp_sous_calcul_traitement_29 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=792, start_column=11,
                                             end_line=792, end_column=33,
                                             law_headings=["Tous secteurs",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    sous_calcul_traitement = temp_sous_calcul_traitement_29
    def temp_traitement_aide_finale_3(arg:Money):
        try:
            return sous_calcul_traitement.traitement_aide_finale(arg)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=795,
                                                 start_column=12,
                                                 end_line=795, end_column=34,
                                                 law_headings=["Tous secteurs",
                                                 "Calcul du montant de l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_1 = temp_traitement_aide_finale_3
    try:
        temp_aide_finale_formule_8 = sous_calcul_traitement.aide_finale_formule
    except EmptyError:
        temp_aide_finale_formule_8 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=794, start_column=12,
                                             end_line=794, end_column=31,
                                             law_headings=["Tous secteurs",
                                             "Calcul du montant de l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    aide_finale_formule_6 = temp_aide_finale_formule_8
    return CalculAidePersonnaliseeLogement(aide_finale_formule = aide_finale_formule_6,
        traitement_aide_finale = traitement_aide_finale_1)

def eligibilite_prime_de_demenagement(eligibilite_prime_de_demenagement_in:EligibilitePrimeDeDemenagementIn):
    informations = eligibilite_prime_de_demenagement_in.informations_in
    date_emmenagement = eligibilite_prime_de_demenagement_in.date_emmenagement_in
    menage_1 = eligibilite_prime_de_demenagement_in.menage_in
    demandeur_1 = eligibilite_prime_de_demenagement_in.demandeur_in
    date_courante_17 = eligibilite_prime_de_demenagement_in.date_courante_in
    depenses_justifiees_reellement_engagees = eligibilite_prime_de_demenagement_in.depenses_justifiees_reellement_engagees_in
    try:
        temp_delai_apres_emmenagement_l823_8_2 = duration_of_numbers(0,6,0)
    except EmptyError:
        temp_delai_apres_emmenagement_l823_8_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=477, start_column=11,
                                             end_line=477, end_column=44,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    delai_apres_emmenagement_l823_8_2 = temp_delai_apres_emmenagement_l823_8_2
    try:
        try:
            def temp_condition_rang_enfant(_:Unit):
                return True
            def temp_condition_rang_enfant_1(_:Unit):
                def temp_condition_rang_enfant_2(personne_a_charge_5:PersonneACharge):
                    match_arg_665 = personne_a_charge_5
                    if match_arg_665.code == PersonneACharge_Code.EnfantACharge:
                        _ = match_arg_665.value
                        return True
                    elif match_arg_665.code == PersonneACharge_Code.AutrePersonneACharge:
                        _ = match_arg_665.value
                        return False
                return ((list_length(list_filter(temp_condition_rang_enfant_2,
                    menage_1.personnes_a_charge)) +
                    informations.nombre_enfants_a_naitre_apres_troisieme_mois_grossesse) >=
                    integer_of_string("3"))
            temp_condition_rang_enfant_3 = handle_default(SourcePosition(filename="",
                                                          start_line=0,
                                                          start_column=1,
                                                          end_line=0, end_column=1,
                                                          law_headings=[]), [],
                                                          temp_condition_rang_enfant_1,
                                                          temp_condition_rang_enfant)
        except EmptyError:
            temp_condition_rang_enfant_3 = False
    except EmptyError:
        temp_condition_rang_enfant_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=475, start_column=11,
                                             end_line=475, end_column=32,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_rang_enfant = temp_condition_rang_enfant_3
    try:
        temp___17 = (date_courante_17 >= date_of_numbers(2019,10,1))
    except EmptyError:
        temp___17 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=496, start_column=13,
                                             end_line=496, end_column=42,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    if not (temp___17):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                              start_line=496,
                                              start_column=13, end_line=496,
                                              end_column=42,
                                              law_headings=["Éligibilité à la prime de déménagement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    try:
        temp_base_mensuelle_allocations_familiales_dot_date_courante = date_courante_17
    except EmptyError:
        temp_base_mensuelle_allocations_familiales_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=492, start_column=14,
                                             end_line=492, end_column=65,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    base_mensuelle_allocations_familiales_dot_date_courante = temp_base_mensuelle_allocations_familiales_dot_date_courante
    result_19 = base_mensuelle_allocations_familiales(BaseMensuelleAllocationsFamilialesIn(date_courante_in = base_mensuelle_allocations_familiales_dot_date_courante))
    base_mensuelle_allocations_familiales_dot_montant = result_19.montant
    try:
        temp_eligibilite_apl_dot_menage = menage_1
    except EmptyError:
        temp_eligibilite_apl_dot_menage = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=488, start_column=14,
                                             end_line=488, end_column=36,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_apl_dot_menage = temp_eligibilite_apl_dot_menage
    try:
        temp_eligibilite_apl_dot_demandeur = demandeur_1
    except EmptyError:
        temp_eligibilite_apl_dot_demandeur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=489, start_column=14,
                                             end_line=489, end_column=39,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_apl_dot_demandeur = temp_eligibilite_apl_dot_demandeur
    try:
        temp_eligibilite_apl_dot_date_courante = date_courante_17
    except EmptyError:
        temp_eligibilite_apl_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=490, start_column=14,
                                             end_line=490, end_column=43,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_apl_dot_date_courante = temp_eligibilite_apl_dot_date_courante
    def temp_eligibilite_apl_dot_condition_logement_residence_principale(_:Unit):
        raise EmptyError
    eligibilite_apl_dot_condition_logement_residence_principale = temp_eligibilite_apl_dot_condition_logement_residence_principale
    def temp_eligibilite_apl_dot_condition_logement_surface(_:Unit):
        raise EmptyError
    eligibilite_apl_dot_condition_logement_surface = temp_eligibilite_apl_dot_condition_logement_surface
    def temp_eligibilite_apl_dot_date_entree_vigueur_differee_cch(_:Unit):
        raise EmptyError
    eligibilite_apl_dot_date_entree_vigueur_differee_cch = temp_eligibilite_apl_dot_date_entree_vigueur_differee_cch
    result_20 = eligibilite_aides_personnelle_logement(EligibiliteAidesPersonnelleLogementIn(menage_in = eligibilite_apl_dot_menage,
                                                       demandeur_in = eligibilite_apl_dot_demandeur,
                                                       date_courante_in = eligibilite_apl_dot_date_courante,
                                                       condition_logement_residence_principale_in = eligibilite_apl_dot_condition_logement_residence_principale,
                                                       condition_logement_surface_in = eligibilite_apl_dot_condition_logement_surface,
                                                       date_entree_vigueur_differee_cch_in = eligibilite_apl_dot_date_entree_vigueur_differee_cch))
    eligibilite_apl_dot_date_courante_1 = result_20.date_courante
    eligibilite_apl_dot_eligibilite = result_20.eligibilite
    eligibilite_apl_dot_nombre_personnes_a_charge_prises_en_compte = result_20.nombre_personnes_a_charge_prises_en_compte
    eligibilite_apl_dot_coefficents_enfants_garde_alternee_pris_en_compte = result_20.coefficents_enfants_garde_alternee_pris_en_compte
    eligibilite_apl_dot_condition_2_r823_4 = result_20.condition_2_r823_4
    try:
        try:
            def temp_condition_periode_demenagement(_:Unit):
                return True
            def temp_condition_periode_demenagement_1(_:Unit):
                match_arg_666 = informations.date_naissance_troisieme_enfant_ou_dernier_si_plus
                if match_arg_666.code == DateNaissanceTroisiemeOuDernierPlusEnfant_Code.MoinsDeTroisEnfants:
                    _ = match_arg_666.value
                    return False
                elif match_arg_666.code == DateNaissanceTroisiemeOuDernierPlusEnfant_Code.PlusDeTroisEnfants:
                    date_naissance_ou_grossesse = match_arg_666.value
                    match_arg_667 = date_naissance_ou_grossesse
                    if match_arg_667.code == DateDeNaissanceOuMoisDeGrossesse_Code.DateDeNaissance:
                        date_naissance_2 = match_arg_667.value
                        return (date_courante_17 <=
                            (first_day_of_month((date_naissance_2 +
                            duration_of_numbers(2,0,0))) +
                            duration_of_numbers(0,0,-1)))
                    elif match_arg_667.code == DateDeNaissanceOuMoisDeGrossesse_Code.AvantPremierJourMoisCivilTroisiemeMoisDeGrossesse:
                        _ = match_arg_667.value
                        return False
                    elif match_arg_667.code == DateDeNaissanceOuMoisDeGrossesse_Code.ApresPremierJourMoisCivilTroisiemeMoisDeGrossesse:
                        _ = match_arg_667.value
                        return True
            temp_condition_periode_demenagement_2 = handle_default(SourcePosition(filename="",
                                                                   start_line=0,
                                                                   start_column=1,
                                                                   end_line=0, end_column=1,
                                                                   law_headings=[]), [],
                                                                   temp_condition_periode_demenagement_1,
                                                                   temp_condition_periode_demenagement)
        except EmptyError:
            temp_condition_periode_demenagement_2 = False
    except EmptyError:
        temp_condition_periode_demenagement_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=476, start_column=11,
                                             end_line=476, end_column=41,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_periode_demenagement = temp_condition_periode_demenagement_2
    try:
        def temp_plafond_d823_22(_:Unit):
            def temp_plafond_d823_22_1(personne_a_charge_6:PersonneACharge):
                match_arg_668 = personne_a_charge_6
                if match_arg_668.code == PersonneACharge_Code.EnfantACharge:
                    _ = match_arg_668.value
                    return True
                elif match_arg_668.code == PersonneACharge_Code.AutrePersonneACharge:
                    _ = match_arg_668.value
                    return False
            if (list_length(list_filter(temp_plafond_d823_22_1,
                menage_1.personnes_a_charge)) >
                integer_of_string("3")):
                def temp_plafond_d823_22_2(personne_a_charge_7:PersonneACharge):
                    match_arg_669 = personne_a_charge_7
                    if match_arg_669.code == PersonneACharge_Code.EnfantACharge:
                        _ = match_arg_669.value
                        return True
                    elif match_arg_669.code == PersonneACharge_Code.AutrePersonneACharge:
                        _ = match_arg_669.value
                        return False
                temp_plafond_d823_22_3 = (base_mensuelle_allocations_familiales_dot_montant *
                    (decimal_of_integer((list_length(list_filter(temp_plafond_d823_22_2,
                    menage_1.personnes_a_charge)) -
                    integer_of_string("3"))) * decimal_of_string("0.2")))
            else:
                temp_plafond_d823_22_3 = money_of_cents_string("0")
            return ((base_mensuelle_allocations_familiales_dot_montant *
                decimal_of_string("2.4")) + temp_plafond_d823_22_3)
        def temp_plafond_d823_22_4(_:Unit):
            return (date_courante_17 >= date_of_numbers(2019,10,1))
        temp_plafond_d823_22_5 = handle_default(SourcePosition(filename="",
                                                start_line=0, start_column=1,
                                                end_line=0, end_column=1,
                                                law_headings=[]), [],
                                                temp_plafond_d823_22_4,
                                                temp_plafond_d823_22)
    except EmptyError:
        temp_plafond_d823_22_5 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=478, start_column=11,
                                             end_line=478, end_column=26,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    plafond_d823_22 = temp_plafond_d823_22_5
    try:
        try:
            try:
                try:
                    try:
                        def temp_eligibilite_3(_:Unit):
                            return False
                        def temp_eligibilite_4(_:Unit):
                            match_arg_670 = menage_1.residence
                            if match_arg_670.code == Collectivite_Code.Guadeloupe:
                                _ = match_arg_670.value
                                temp_eligibilite_5 = False
                            elif match_arg_670.code == Collectivite_Code.Guyane:
                                _ = match_arg_670.value
                                temp_eligibilite_5 = False
                            elif match_arg_670.code == Collectivite_Code.Martinique:
                                _ = match_arg_670.value
                                temp_eligibilite_5 = False
                            elif match_arg_670.code == Collectivite_Code.LaReunion:
                                _ = match_arg_670.value
                                temp_eligibilite_5 = False
                            elif match_arg_670.code == Collectivite_Code.SaintBarthelemy:
                                _ = match_arg_670.value
                                temp_eligibilite_5 = False
                            elif match_arg_670.code == Collectivite_Code.SaintMartin:
                                _ = match_arg_670.value
                                temp_eligibilite_5 = False
                            elif match_arg_670.code == Collectivite_Code.Metropole:
                                _ = match_arg_670.value
                                temp_eligibilite_5 = False
                            elif match_arg_670.code == Collectivite_Code.SaintPierreEtMiquelon:
                                _ = match_arg_670.value
                                temp_eligibilite_5 = False
                            elif match_arg_670.code == Collectivite_Code.Mayotte:
                                _ = match_arg_670.value
                                temp_eligibilite_5 = True
                            return ((date_courante_17 >=
                                date_of_numbers(2022,1,1)) and
                                temp_eligibilite_5)
                        temp_eligibilite_6 = handle_default(SourcePosition(filename="",
                                                            start_line=0,
                                                            start_column=1,
                                                            end_line=0, end_column=1,
                                                            law_headings=[]), [],
                                                            temp_eligibilite_4,
                                                            temp_eligibilite_3)
                    except EmptyError:
                        match_arg_671 = menage_1.residence
                        if match_arg_671.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_671.value
                            temp_eligibilite_7 = False
                        elif match_arg_671.code == Collectivite_Code.Guyane:
                            _ = match_arg_671.value
                            temp_eligibilite_7 = False
                        elif match_arg_671.code == Collectivite_Code.Martinique:
                            _ = match_arg_671.value
                            temp_eligibilite_7 = False
                        elif match_arg_671.code == Collectivite_Code.LaReunion:
                            _ = match_arg_671.value
                            temp_eligibilite_7 = False
                        elif match_arg_671.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_671.value
                            temp_eligibilite_7 = False
                        elif match_arg_671.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_671.value
                            temp_eligibilite_7 = False
                        elif match_arg_671.code == Collectivite_Code.Metropole:
                            _ = match_arg_671.value
                            temp_eligibilite_7 = False
                        elif match_arg_671.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_671.value
                            temp_eligibilite_7 = True
                        elif match_arg_671.code == Collectivite_Code.Mayotte:
                            _ = match_arg_671.value
                            temp_eligibilite_7 = False
                        if ((date_courante_17 >=
                            date_of_numbers(2022,1,1)) and
                            temp_eligibilite_7):
                            temp_eligibilite_6 = False
                        else:
                            temp_eligibilite_6 = dead_value
                            raise EmptyError
                except EmptyError:
                    match_arg_672 = menage_1.residence
                    if match_arg_672.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_672.value
                        temp_eligibilite_8 = False
                    elif match_arg_672.code == Collectivite_Code.Guyane:
                        _ = match_arg_672.value
                        temp_eligibilite_8 = False
                    elif match_arg_672.code == Collectivite_Code.Martinique:
                        _ = match_arg_672.value
                        temp_eligibilite_8 = False
                    elif match_arg_672.code == Collectivite_Code.LaReunion:
                        _ = match_arg_672.value
                        temp_eligibilite_8 = False
                    elif match_arg_672.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_672.value
                        temp_eligibilite_8 = False
                    elif match_arg_672.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_672.value
                        temp_eligibilite_8 = False
                    elif match_arg_672.code == Collectivite_Code.Metropole:
                        _ = match_arg_672.value
                        temp_eligibilite_8 = False
                    elif match_arg_672.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_672.value
                        temp_eligibilite_8 = False
                    elif match_arg_672.code == Collectivite_Code.Mayotte:
                        _ = match_arg_672.value
                        temp_eligibilite_8 = True
                    if temp_eligibilite_8:
                        temp_eligibilite_6 = False
                    else:
                        temp_eligibilite_6 = dead_value
                        raise EmptyError
            except EmptyError:
                if (eligibilite_apl_dot_eligibilite and
                    (condition_rang_enfant and
                    (condition_periode_demenagement and
                    ((eligibilite_apl_dot_date_courante_1 -
                    date_emmenagement) <=
                    delai_apres_emmenagement_l823_8_2)))):
                    temp_eligibilite_6 = True
                else:
                    temp_eligibilite_6 = dead_value
                    raise EmptyError
        except EmptyError:
            temp_eligibilite_6 = False
    except EmptyError:
        temp_eligibilite_6 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=484, start_column=12,
                                             end_line=484, end_column=23,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_1 = temp_eligibilite_6
    try:
        if eligibilite_1:
            if (depenses_justifiees_reellement_engagees <=
                plafond_d823_22):
                temp_montant_prime_demenagement = depenses_justifiees_reellement_engagees
            else:
                temp_montant_prime_demenagement = plafond_d823_22
        else:
            temp_montant_prime_demenagement = money_of_cents_string("0")
    except EmptyError:
        temp_montant_prime_demenagement = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=485, start_column=12,
                                             end_line=485, end_column=38,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    montant_prime_demenagement = temp_montant_prime_demenagement
    return EligibilitePrimeDeDemenagement(eligibilite = eligibilite_1,
        montant_prime_demenagement = montant_prime_demenagement)

def eligibilite_allocation_logement(eligibilite_allocation_logement_in:EligibiliteAllocationLogementIn):
    date_courante_18 = eligibilite_allocation_logement_in.date_courante_in
    menage_2 = eligibilite_allocation_logement_in.menage_in
    demandeur_2 = eligibilite_allocation_logement_in.demandeur_in
    beneficie_aide_personnalisee_logement = eligibilite_allocation_logement_in.beneficie_aide_personnalisee_logement_in
    try:
        temp_duree_l841_1_3 = duration_of_numbers(5,0,0)
    except EmptyError:
        temp_duree_l841_1_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=429, start_column=11,
                                             end_line=429, end_column=25,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    duree_l841_1_3 = temp_duree_l841_1_3
    try:
        temp_prestations_familiales_dot_date_courante_1 = date_courante_18
    except EmptyError:
        temp_prestations_familiales_dot_date_courante_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=445, start_column=14,
                                             end_line=445, end_column=50,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    prestations_familiales_dot_date_courante_1 = temp_prestations_familiales_dot_date_courante_1
    try:
        temp_prestations_familiales_dot_residence_1 = menage_2.residence
    except EmptyError:
        temp_prestations_familiales_dot_residence_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=446, start_column=14,
                                             end_line=446, end_column=46,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    prestations_familiales_dot_residence_1 = temp_prestations_familiales_dot_residence_1
    def temp_prestations_familiales_dot_age_l512_3_2_5(_:Unit):
        raise EmptyError
    prestations_familiales_dot_age_l512_3_2_2 = temp_prestations_familiales_dot_age_l512_3_2_5
    result_21 = eligibilite_prestations_familiales(EligibilitePrestationsFamilialesIn(date_courante_in = prestations_familiales_dot_date_courante_1,
                                                   residence_in = prestations_familiales_dot_residence_1,
                                                   age_l512_3_2_in = prestations_familiales_dot_age_l512_3_2_2))
    prestations_familiales_dot_age_l512_3_2_3 = result_21.age_l512_3_2
    prestations_familiales_dot_droit_ouvert_1 = result_21.droit_ouvert
    prestations_familiales_dot_conditions_hors_age_1 = result_21.conditions_hors_age
    prestations_familiales_dot_regime_outre_mer_l751_1_1 = result_21.regime_outre_mer_l751_1
    try:
        try:
            try:
                try:
                    def temp_l_841_1_6_applicable(_:Unit):
                        return False
                    def temp_l_841_1_6_applicable_1(_:Unit):
                        match_arg_673 = menage_2.residence
                        if match_arg_673.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_673.value
                            return False
                        elif match_arg_673.code == Collectivite_Code.Guyane:
                            _ = match_arg_673.value
                            return False
                        elif match_arg_673.code == Collectivite_Code.Martinique:
                            _ = match_arg_673.value
                            return False
                        elif match_arg_673.code == Collectivite_Code.LaReunion:
                            _ = match_arg_673.value
                            return False
                        elif match_arg_673.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_673.value
                            return True
                        elif match_arg_673.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_673.value
                            return True
                        elif match_arg_673.code == Collectivite_Code.Metropole:
                            _ = match_arg_673.value
                            return False
                        elif match_arg_673.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_673.value
                            return False
                        elif match_arg_673.code == Collectivite_Code.Mayotte:
                            _ = match_arg_673.value
                            return False
                    temp_l_841_1_6_applicable_2 = handle_default(SourcePosition(filename="",
                                                                 start_line=0,
                                                                 start_column=1,
                                                                 end_line=0, end_column=1,
                                                                 law_headings=[]), [],
                                                                 temp_l_841_1_6_applicable_1,
                                                                 temp_l_841_1_6_applicable)
                except EmptyError:
                    match_arg_674 = menage_2.residence
                    if match_arg_674.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_674.value
                        temp_l_841_1_6_applicable_3 = True
                    elif match_arg_674.code == Collectivite_Code.Guyane:
                        _ = match_arg_674.value
                        temp_l_841_1_6_applicable_3 = True
                    elif match_arg_674.code == Collectivite_Code.Martinique:
                        _ = match_arg_674.value
                        temp_l_841_1_6_applicable_3 = True
                    elif match_arg_674.code == Collectivite_Code.LaReunion:
                        _ = match_arg_674.value
                        temp_l_841_1_6_applicable_3 = True
                    elif match_arg_674.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_674.value
                        temp_l_841_1_6_applicable_3 = False
                    elif match_arg_674.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_674.value
                        temp_l_841_1_6_applicable_3 = False
                    elif match_arg_674.code == Collectivite_Code.Metropole:
                        _ = match_arg_674.value
                        temp_l_841_1_6_applicable_3 = False
                    elif match_arg_674.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_674.value
                        temp_l_841_1_6_applicable_3 = False
                    elif match_arg_674.code == Collectivite_Code.Mayotte:
                        _ = match_arg_674.value
                        temp_l_841_1_6_applicable_3 = True
                    if temp_l_841_1_6_applicable_3:
                        temp_l_841_1_6_applicable_2 = False
                    else:
                        temp_l_841_1_6_applicable_2 = dead_value
                        raise EmptyError
            except EmptyError:
                temp_l_841_1_6_applicable_2 = True
        except EmptyError:
            temp_l_841_1_6_applicable_2 = False
    except EmptyError:
        temp_l_841_1_6_applicable_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=426, start_column=11,
                                             end_line=426, end_column=31,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    l_841_1_6_applicable = temp_l_841_1_6_applicable_2
    try:
        try:
            try:
                try:
                    def temp_l_841_1_2_applicable(_:Unit):
                        return False
                    def temp_l_841_1_2_applicable_1(_:Unit):
                        match_arg_675 = menage_2.residence
                        if match_arg_675.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_675.value
                            return False
                        elif match_arg_675.code == Collectivite_Code.Guyane:
                            _ = match_arg_675.value
                            return False
                        elif match_arg_675.code == Collectivite_Code.Martinique:
                            _ = match_arg_675.value
                            return False
                        elif match_arg_675.code == Collectivite_Code.LaReunion:
                            _ = match_arg_675.value
                            return False
                        elif match_arg_675.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_675.value
                            return True
                        elif match_arg_675.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_675.value
                            return True
                        elif match_arg_675.code == Collectivite_Code.Metropole:
                            _ = match_arg_675.value
                            return False
                        elif match_arg_675.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_675.value
                            return False
                        elif match_arg_675.code == Collectivite_Code.Mayotte:
                            _ = match_arg_675.value
                            return False
                    temp_l_841_1_2_applicable_2 = handle_default(SourcePosition(filename="",
                                                                 start_line=0,
                                                                 start_column=1,
                                                                 end_line=0, end_column=1,
                                                                 law_headings=[]), [],
                                                                 temp_l_841_1_2_applicable_1,
                                                                 temp_l_841_1_2_applicable)
                except EmptyError:
                    match_arg_676 = menage_2.residence
                    if match_arg_676.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_676.value
                        temp_l_841_1_2_applicable_3 = True
                    elif match_arg_676.code == Collectivite_Code.Guyane:
                        _ = match_arg_676.value
                        temp_l_841_1_2_applicable_3 = True
                    elif match_arg_676.code == Collectivite_Code.Martinique:
                        _ = match_arg_676.value
                        temp_l_841_1_2_applicable_3 = True
                    elif match_arg_676.code == Collectivite_Code.LaReunion:
                        _ = match_arg_676.value
                        temp_l_841_1_2_applicable_3 = True
                    elif match_arg_676.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_676.value
                        temp_l_841_1_2_applicable_3 = False
                    elif match_arg_676.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_676.value
                        temp_l_841_1_2_applicable_3 = False
                    elif match_arg_676.code == Collectivite_Code.Metropole:
                        _ = match_arg_676.value
                        temp_l_841_1_2_applicable_3 = False
                    elif match_arg_676.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_676.value
                        temp_l_841_1_2_applicable_3 = False
                    elif match_arg_676.code == Collectivite_Code.Mayotte:
                        _ = match_arg_676.value
                        temp_l_841_1_2_applicable_3 = True
                    if temp_l_841_1_2_applicable_3:
                        temp_l_841_1_2_applicable_2 = False
                    else:
                        temp_l_841_1_2_applicable_2 = dead_value
                        raise EmptyError
            except EmptyError:
                temp_l_841_1_2_applicable_2 = True
        except EmptyError:
            temp_l_841_1_2_applicable_2 = False
    except EmptyError:
        temp_l_841_1_2_applicable_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=425, start_column=11,
                                             end_line=425, end_column=31,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    l_841_1_2_applicable = temp_l_841_1_2_applicable_2
    try:
        try:
            try:
                try:
                    def temp_l_841_1_1_applicable(_:Unit):
                        return False
                    def temp_l_841_1_1_applicable_1(_:Unit):
                        match_arg_677 = menage_2.residence
                        if match_arg_677.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_677.value
                            return False
                        elif match_arg_677.code == Collectivite_Code.Guyane:
                            _ = match_arg_677.value
                            return False
                        elif match_arg_677.code == Collectivite_Code.Martinique:
                            _ = match_arg_677.value
                            return False
                        elif match_arg_677.code == Collectivite_Code.LaReunion:
                            _ = match_arg_677.value
                            return False
                        elif match_arg_677.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_677.value
                            return True
                        elif match_arg_677.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_677.value
                            return True
                        elif match_arg_677.code == Collectivite_Code.Metropole:
                            _ = match_arg_677.value
                            return False
                        elif match_arg_677.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_677.value
                            return False
                        elif match_arg_677.code == Collectivite_Code.Mayotte:
                            _ = match_arg_677.value
                            return False
                    temp_l_841_1_1_applicable_2 = handle_default(SourcePosition(filename="",
                                                                 start_line=0,
                                                                 start_column=1,
                                                                 end_line=0, end_column=1,
                                                                 law_headings=[]), [],
                                                                 temp_l_841_1_1_applicable_1,
                                                                 temp_l_841_1_1_applicable)
                except EmptyError:
                    match_arg_678 = menage_2.residence
                    if match_arg_678.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_678.value
                        temp_l_841_1_1_applicable_3 = True
                    elif match_arg_678.code == Collectivite_Code.Guyane:
                        _ = match_arg_678.value
                        temp_l_841_1_1_applicable_3 = True
                    elif match_arg_678.code == Collectivite_Code.Martinique:
                        _ = match_arg_678.value
                        temp_l_841_1_1_applicable_3 = True
                    elif match_arg_678.code == Collectivite_Code.LaReunion:
                        _ = match_arg_678.value
                        temp_l_841_1_1_applicable_3 = True
                    elif match_arg_678.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_678.value
                        temp_l_841_1_1_applicable_3 = False
                    elif match_arg_678.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_678.value
                        temp_l_841_1_1_applicable_3 = False
                    elif match_arg_678.code == Collectivite_Code.Metropole:
                        _ = match_arg_678.value
                        temp_l_841_1_1_applicable_3 = False
                    elif match_arg_678.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_678.value
                        temp_l_841_1_1_applicable_3 = False
                    elif match_arg_678.code == Collectivite_Code.Mayotte:
                        _ = match_arg_678.value
                        temp_l_841_1_1_applicable_3 = True
                    if temp_l_841_1_1_applicable_3:
                        temp_l_841_1_1_applicable_2 = False
                    else:
                        temp_l_841_1_1_applicable_2 = dead_value
                        raise EmptyError
            except EmptyError:
                temp_l_841_1_1_applicable_2 = True
        except EmptyError:
            temp_l_841_1_1_applicable_2 = False
    except EmptyError:
        temp_l_841_1_1_applicable_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=424, start_column=11,
                                             end_line=424, end_column=31,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    l_841_1_1_applicable = temp_l_841_1_1_applicable_2
    try:
        try:
            try:
                try:
                    try:
                        def temp_condition_accession_propriete(_:Unit):
                            return True
                        def temp_condition_accession_propriete_1(_:Unit):
                            match_arg_679 = menage_2.logement.mode_occupation
                            if match_arg_679.code == ModeOccupation_Code.Locataire:
                                _ = match_arg_679.value
                                return False
                            elif match_arg_679.code == ModeOccupation_Code.ResidentLogementFoyer:
                                _ = match_arg_679.value
                                return False
                            elif match_arg_679.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                                proprietaire_3 = match_arg_679.value
                                match_arg_680 = proprietaire_3.type_travaux_logement_r842_5
                                if match_arg_680.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                                    _ = match_arg_680.value
                                    temp_condition_accession_propriete_2 = False
                                elif match_arg_680.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                                    _ = match_arg_680.value
                                    temp_condition_accession_propriete_2 = False
                                elif match_arg_680.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                                    _ = match_arg_680.value
                                    temp_condition_accession_propriete_2 = True
                                elif match_arg_680.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                                    _ = match_arg_680.value
                                    temp_condition_accession_propriete_2 = False
                                match_arg_681 = proprietaire_3.pret.titulaire_pret
                                if match_arg_681.code == TitulairePret_Code.Demandeur:
                                    _ = match_arg_681.value
                                    temp_condition_accession_propriete_3 = True
                                elif match_arg_681.code == TitulairePret_Code.VendeurQuandDemandeurAContratLocationAccession:
                                    _ = match_arg_681.value
                                    temp_condition_accession_propriete_3 = False
                                return (temp_condition_accession_propriete_3 and
                                    temp_condition_accession_propriete_2)
                            elif match_arg_679.code == ModeOccupation_Code.SousLocataire:
                                _ = match_arg_679.value
                                return False
                            elif match_arg_679.code == ModeOccupation_Code.LocationAccession:
                                _ = match_arg_679.value
                                return False
                        temp_condition_accession_propriete_4 = handle_default(
                            SourcePosition(filename="", start_line=0,
                            start_column=1, end_line=0, end_column=1,
                            law_headings=[]), [],
                            temp_condition_accession_propriete_1,
                            temp_condition_accession_propriete)
                    except EmptyError:
                        match_arg_682 = menage_2.logement.mode_occupation
                        if match_arg_682.code == ModeOccupation_Code.Locataire:
                            _ = match_arg_682.value
                            temp_condition_accession_propriete_5 = False
                        elif match_arg_682.code == ModeOccupation_Code.ResidentLogementFoyer:
                            _ = match_arg_682.value
                            temp_condition_accession_propriete_5 = False
                        elif match_arg_682.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                            proprietaire_4 = match_arg_682.value
                            match_arg_683 = proprietaire_4.type_travaux_logement_r842_5
                            if match_arg_683.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                                _ = match_arg_683.value
                                temp_condition_accession_propriete_6 = False
                            elif match_arg_683.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                                _ = match_arg_683.value
                                temp_condition_accession_propriete_6 = True
                            elif match_arg_683.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                                _ = match_arg_683.value
                                temp_condition_accession_propriete_6 = False
                            elif match_arg_683.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                                _ = match_arg_683.value
                                temp_condition_accession_propriete_6 = False
                            match_arg_684 = proprietaire_4.pret.titulaire_pret
                            if match_arg_684.code == TitulairePret_Code.Demandeur:
                                _ = match_arg_684.value
                                temp_condition_accession_propriete_7 = True
                            elif match_arg_684.code == TitulairePret_Code.VendeurQuandDemandeurAContratLocationAccession:
                                _ = match_arg_684.value
                                temp_condition_accession_propriete_7 = False
                            temp_condition_accession_propriete_5 = (temp_condition_accession_propriete_7 and
                                temp_condition_accession_propriete_6)
                        elif match_arg_682.code == ModeOccupation_Code.SousLocataire:
                            _ = match_arg_682.value
                            temp_condition_accession_propriete_5 = False
                        elif match_arg_682.code == ModeOccupation_Code.LocationAccession:
                            _ = match_arg_682.value
                            temp_condition_accession_propriete_5 = False
                        if temp_condition_accession_propriete_5:
                            temp_condition_accession_propriete_4 = True
                        else:
                            temp_condition_accession_propriete_4 = dead_value
                            raise EmptyError
                except EmptyError:
                    match_arg_685 = menage_2.logement.mode_occupation
                    if match_arg_685.code == ModeOccupation_Code.Locataire:
                        _ = match_arg_685.value
                        temp_condition_accession_propriete_8 = False
                    elif match_arg_685.code == ModeOccupation_Code.ResidentLogementFoyer:
                        _ = match_arg_685.value
                        temp_condition_accession_propriete_8 = False
                    elif match_arg_685.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        proprietaire_5 = match_arg_685.value
                        match_arg_686 = proprietaire_5.type_travaux_logement_r842_5
                        if match_arg_686.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                            _ = match_arg_686.value
                            temp_condition_accession_propriete_9 = True
                        elif match_arg_686.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                            _ = match_arg_686.value
                            temp_condition_accession_propriete_9 = False
                        elif match_arg_686.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                            _ = match_arg_686.value
                            temp_condition_accession_propriete_9 = False
                        elif match_arg_686.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                            _ = match_arg_686.value
                            temp_condition_accession_propriete_9 = False
                        match_arg_687 = proprietaire_5.type_travaux_logement_r842_5
                        if match_arg_687.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                            _ = match_arg_687.value
                            temp_condition_accession_propriete_10 = False
                        elif match_arg_687.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                            _ = match_arg_687.value
                            temp_condition_accession_propriete_10 = False
                        elif match_arg_687.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                            _ = match_arg_687.value
                            temp_condition_accession_propriete_10 = False
                        elif match_arg_687.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                            _ = match_arg_687.value
                            temp_condition_accession_propriete_10 = True
                        match_arg_688 = proprietaire_5.pret.titulaire_pret
                        if match_arg_688.code == TitulairePret_Code.Demandeur:
                            _ = match_arg_688.value
                            temp_condition_accession_propriete_11 = True
                        elif match_arg_688.code == TitulairePret_Code.VendeurQuandDemandeurAContratLocationAccession:
                            _ = match_arg_688.value
                            temp_condition_accession_propriete_11 = False
                        temp_condition_accession_propriete_8 = (temp_condition_accession_propriete_11 and
                            (temp_condition_accession_propriete_10 or
                            temp_condition_accession_propriete_9))
                    elif match_arg_685.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_685.value
                        temp_condition_accession_propriete_8 = False
                    elif match_arg_685.code == ModeOccupation_Code.LocationAccession:
                        _ = match_arg_685.value
                        temp_condition_accession_propriete_8 = False
                    if temp_condition_accession_propriete_8:
                        temp_condition_accession_propriete_4 = True
                    else:
                        temp_condition_accession_propriete_4 = dead_value
                        raise EmptyError
            except EmptyError:
                match_arg_689 = menage_2.logement.mode_occupation
                if match_arg_689.code == ModeOccupation_Code.Locataire:
                    _ = match_arg_689.value
                    temp_condition_accession_propriete_12 = True
                elif match_arg_689.code == ModeOccupation_Code.ResidentLogementFoyer:
                    _ = match_arg_689.value
                    temp_condition_accession_propriete_12 = True
                elif match_arg_689.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                    _ = match_arg_689.value
                    temp_condition_accession_propriete_12 = False
                elif match_arg_689.code == ModeOccupation_Code.SousLocataire:
                    _ = match_arg_689.value
                    temp_condition_accession_propriete_12 = True
                elif match_arg_689.code == ModeOccupation_Code.LocationAccession:
                    _ = match_arg_689.value
                    temp_condition_accession_propriete_12 = True
                if temp_condition_accession_propriete_12:
                    temp_condition_accession_propriete_4 = True
                else:
                    temp_condition_accession_propriete_4 = dead_value
                    raise EmptyError
        except EmptyError:
            temp_condition_accession_propriete_4 = False
    except EmptyError:
        temp_condition_accession_propriete_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=423, start_column=11,
                                             end_line=423, end_column=40,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_accession_propriete = temp_condition_accession_propriete_4
    try:
        match_arg_690 = menage_2.logement.mode_occupation
        if match_arg_690.code == ModeOccupation_Code.Locataire:
            _ = match_arg_690.value
            temp___18 = False
        elif match_arg_690.code == ModeOccupation_Code.ResidentLogementFoyer:
            _ = match_arg_690.value
            temp___18 = False
        elif match_arg_690.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
            _ = match_arg_690.value
            temp___18 = True
        elif match_arg_690.code == ModeOccupation_Code.SousLocataire:
            _ = match_arg_690.value
            temp___18 = False
        elif match_arg_690.code == ModeOccupation_Code.LocationAccession:
            _ = match_arg_690.value
            temp___18 = False
        temp___19 = not (demandeur_2.personne_hebergee_centre_soin_l_L162_22_3_securite_sociale and
            (temp___18 or
            demandeur_2.magistrat_fonctionnaire_centre_interets_materiels_familiaux_hors_mayotte))
    except EmptyError:
        temp___19 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                             start_line=1150,
                                             start_column=13, end_line=1155,
                                             end_column=81,
                                             law_headings=["Article L841-3",
                                             "Chapitre Ier : Champ d'application",
                                             "Titre IV : Allocations de logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie législative",
                                             "Code de la construction et de l'habitation"]))
    if not (temp___19):
        raise AssertionFailure(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                              start_line=1150,
                                              start_column=13, end_line=1155,
                                              end_column=81,
                                              law_headings=["Article L841-3",
                                                           "Chapitre Ier : Champ d'application",
                                                           "Titre IV : Allocations de logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie législative",
                                                           "Code de la construction et de l'habitation"]))
    try:
        temp_eligibilite_commune_dot_menage = menage_2
    except EmptyError:
        temp_eligibilite_commune_dot_menage = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=448, start_column=14,
                                             end_line=448, end_column=40,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_commune_dot_menage = temp_eligibilite_commune_dot_menage
    try:
        temp_eligibilite_commune_dot_demandeur = demandeur_2
    except EmptyError:
        temp_eligibilite_commune_dot_demandeur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=449, start_column=14,
                                             end_line=449, end_column=43,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_commune_dot_demandeur = temp_eligibilite_commune_dot_demandeur
    try:
        temp_eligibilite_commune_dot_date_courante = date_courante_18
    except EmptyError:
        temp_eligibilite_commune_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=450, start_column=14,
                                             end_line=450, end_column=47,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_commune_dot_date_courante = temp_eligibilite_commune_dot_date_courante
    def temp_eligibilite_commune_dot_condition_logement_residence_principale(_:Unit):
        def temp_eligibilite_commune_dot_condition_logement_residence_principale_1(_:Unit):
            return True
        def temp_eligibilite_commune_dot_condition_logement_residence_principale_2(_:Unit):
            match_arg_691 = menage_2.logement.mode_occupation
            if match_arg_691.code == ModeOccupation_Code.Locataire:
                _ = match_arg_691.value
                return False
            elif match_arg_691.code == ModeOccupation_Code.ResidentLogementFoyer:
                logement_foyer = match_arg_691.value
                return logement_foyer.construit_application_loi_1957_12_III
            elif match_arg_691.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                _ = match_arg_691.value
                return False
            elif match_arg_691.code == ModeOccupation_Code.SousLocataire:
                _ = match_arg_691.value
                return False
            elif match_arg_691.code == ModeOccupation_Code.LocationAccession:
                _ = match_arg_691.value
                return False
        return handle_default(SourcePosition(filename="", start_line=0,
                              start_column=1, end_line=0, end_column=1,
                              law_headings=[]), [],
                              temp_eligibilite_commune_dot_condition_logement_residence_principale_2,
                              temp_eligibilite_commune_dot_condition_logement_residence_principale_1)
    eligibilite_commune_dot_condition_logement_residence_principale = temp_eligibilite_commune_dot_condition_logement_residence_principale
    def temp_eligibilite_commune_dot_condition_logement_surface(_:Unit):
        def temp_eligibilite_commune_dot_condition_logement_surface_1(_:Unit):
            return True
        def temp_eligibilite_commune_dot_condition_logement_surface_2(_:Unit):
            match_arg_692 = menage_2.logement.mode_occupation
            if match_arg_692.code == ModeOccupation_Code.Locataire:
                _ = match_arg_692.value
                return False
            elif match_arg_692.code == ModeOccupation_Code.ResidentLogementFoyer:
                logement_foyer_1 = match_arg_692.value
                return logement_foyer_1.construit_application_loi_1957_12_III
            elif match_arg_692.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                _ = match_arg_692.value
                return False
            elif match_arg_692.code == ModeOccupation_Code.SousLocataire:
                _ = match_arg_692.value
                return False
            elif match_arg_692.code == ModeOccupation_Code.LocationAccession:
                _ = match_arg_692.value
                return False
        return handle_default(SourcePosition(filename="", start_line=0,
                              start_column=1, end_line=0, end_column=1,
                              law_headings=[]), [],
                              temp_eligibilite_commune_dot_condition_logement_surface_2,
                              temp_eligibilite_commune_dot_condition_logement_surface_1)
    eligibilite_commune_dot_condition_logement_surface = temp_eligibilite_commune_dot_condition_logement_surface
    def temp_eligibilite_commune_dot_date_entree_vigueur_differee_cch(_:Unit):
        raise EmptyError
    eligibilite_commune_dot_date_entree_vigueur_differee_cch = temp_eligibilite_commune_dot_date_entree_vigueur_differee_cch
    result_22 = eligibilite_aides_personnelle_logement(EligibiliteAidesPersonnelleLogementIn(menage_in = eligibilite_commune_dot_menage,
                                                       demandeur_in = eligibilite_commune_dot_demandeur,
                                                       date_courante_in = eligibilite_commune_dot_date_courante,
                                                       condition_logement_residence_principale_in = eligibilite_commune_dot_condition_logement_residence_principale,
                                                       condition_logement_surface_in = eligibilite_commune_dot_condition_logement_surface,
                                                       date_entree_vigueur_differee_cch_in = eligibilite_commune_dot_date_entree_vigueur_differee_cch))
    eligibilite_commune_dot_date_courante_1 = result_22.date_courante
    eligibilite_commune_dot_eligibilite = result_22.eligibilite
    eligibilite_commune_dot_nombre_personnes_a_charge_prises_en_compte = result_22.nombre_personnes_a_charge_prises_en_compte
    eligibilite_commune_dot_coefficents_enfants_garde_alternee_pris_en_compte = result_22.coefficents_enfants_garde_alternee_pris_en_compte
    eligibilite_commune_dot_condition_2_r823_4 = result_22.condition_2_r823_4
    try:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_3 = eligibilite_commune_dot_coefficents_enfants_garde_alternee_pris_en_compte
    except EmptyError:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=439, start_column=12,
                                             end_line=439, end_column=61,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficents_enfants_garde_alternee_pris_en_compte_1 = temp_coefficents_enfants_garde_alternee_pris_en_compte_3
    try:
        temp_nombre_personnes_a_charge_prises_en_compte_1 = eligibilite_commune_dot_nombre_personnes_a_charge_prises_en_compte
    except EmptyError:
        temp_nombre_personnes_a_charge_prises_en_compte_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=438, start_column=12,
                                             end_line=438, end_column=54,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    nombre_personnes_a_charge_prises_en_compte_1 = temp_nombre_personnes_a_charge_prises_en_compte_1
    try:
        if (not eligibilite_commune_dot_eligibilite or
            not condition_accession_propriete):
            temp_eligibilite_dispositions_communes = TypeEligibiliteAllocationLogement(TypeEligibiliteAllocationLogement_Code.PasEligible,
                Unit())
        else:
            temp_eligibilite_dispositions_communes = TypeEligibiliteAllocationLogement(TypeEligibiliteAllocationLogement_Code.AllocationLogementSociale,
                Unit())
    except EmptyError:
        temp_eligibilite_dispositions_communes = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=436, start_column=10,
                                             end_line=436, end_column=31,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_dispositions_communes = temp_eligibilite_dispositions_communes
    try:
        try:
            try:
                try:
                    try:
                        try:
                            try:
                                try:
                                    try:
                                        try:
                                            try:
                                                def temp_eligibilite_allocation_logement_familiale(_:Unit):
                                                    return True
                                                def temp_eligibilite_allocation_logement_familiale_1(_:Unit):
                                                    match_arg_693 = menage_2.residence
                                                    if match_arg_693.code == Collectivite_Code.Guadeloupe:
                                                        _ = match_arg_693.value
                                                        temp_eligibilite_allocation_logement_familiale_2 = False
                                                    elif match_arg_693.code == Collectivite_Code.Guyane:
                                                        _ = match_arg_693.value
                                                        temp_eligibilite_allocation_logement_familiale_2 = False
                                                    elif match_arg_693.code == Collectivite_Code.Martinique:
                                                        _ = match_arg_693.value
                                                        temp_eligibilite_allocation_logement_familiale_2 = False
                                                    elif match_arg_693.code == Collectivite_Code.LaReunion:
                                                        _ = match_arg_693.value
                                                        temp_eligibilite_allocation_logement_familiale_2 = False
                                                    elif match_arg_693.code == Collectivite_Code.SaintBarthelemy:
                                                        _ = match_arg_693.value
                                                        temp_eligibilite_allocation_logement_familiale_2 = True
                                                    elif match_arg_693.code == Collectivite_Code.SaintMartin:
                                                        _ = match_arg_693.value
                                                        temp_eligibilite_allocation_logement_familiale_2 = True
                                                    elif match_arg_693.code == Collectivite_Code.Metropole:
                                                        _ = match_arg_693.value
                                                        temp_eligibilite_allocation_logement_familiale_2 = False
                                                    elif match_arg_693.code == Collectivite_Code.SaintPierreEtMiquelon:
                                                        _ = match_arg_693.value
                                                        temp_eligibilite_allocation_logement_familiale_2 = False
                                                    elif match_arg_693.code == Collectivite_Code.Mayotte:
                                                        _ = match_arg_693.value
                                                        temp_eligibilite_allocation_logement_familiale_2 = False
                                                    return (temp_eligibilite_allocation_logement_familiale_2 and
                                                        demandeur_2.est_non_salarie_agricole_l781_8_l_781_46_code_rural)
                                                temp_eligibilite_allocation_logement_familiale_3 = handle_default(
                                                    SourcePosition(filename="",
                                                    start_line=0,
                                                    start_column=1,
                                                    end_line=0, end_column=1,
                                                    law_headings=[]), [],
                                                    temp_eligibilite_allocation_logement_familiale_1,
                                                    temp_eligibilite_allocation_logement_familiale)
                                            except EmptyError:
                                                def temp_eligibilite_allocation_logement_familiale_4(personne_a_charge_8:PersonneACharge):
                                                    match_arg_694 = personne_a_charge_8
                                                    if match_arg_694.code == PersonneACharge_Code.EnfantACharge:
                                                        enfant_10 = match_arg_694.value
                                                        return prestations_familiales_dot_droit_ouvert_1(
                                                            EnfantPrestationsFamiliales(identifiant = enfant_10.identifiant,
                                                            obligation_scolaire = enfant_10.obligation_scolaire,
                                                            remuneration_mensuelle = enfant_10.remuneration_mensuelle,
                                                            date_de_naissance = enfant_10.date_de_naissance,
                                                            a_deja_ouvert_droit_aux_allocations_familiales = enfant_10.a_deja_ouvert_droit_aux_allocations_familiales))
                                                    elif match_arg_694.code == PersonneACharge_Code.AutrePersonneACharge:
                                                        _ = match_arg_694.value
                                                        return False
                                                match_arg_695 = menage_2.residence
                                                if match_arg_695.code == Collectivite_Code.Guadeloupe:
                                                    _ = match_arg_695.value
                                                    temp_eligibilite_allocation_logement_familiale_5 = False
                                                elif match_arg_695.code == Collectivite_Code.Guyane:
                                                    _ = match_arg_695.value
                                                    temp_eligibilite_allocation_logement_familiale_5 = False
                                                elif match_arg_695.code == Collectivite_Code.Martinique:
                                                    _ = match_arg_695.value
                                                    temp_eligibilite_allocation_logement_familiale_5 = False
                                                elif match_arg_695.code == Collectivite_Code.LaReunion:
                                                    _ = match_arg_695.value
                                                    temp_eligibilite_allocation_logement_familiale_5 = False
                                                elif match_arg_695.code == Collectivite_Code.SaintBarthelemy:
                                                    _ = match_arg_695.value
                                                    temp_eligibilite_allocation_logement_familiale_5 = True
                                                elif match_arg_695.code == Collectivite_Code.SaintMartin:
                                                    _ = match_arg_695.value
                                                    temp_eligibilite_allocation_logement_familiale_5 = True
                                                elif match_arg_695.code == Collectivite_Code.Metropole:
                                                    _ = match_arg_695.value
                                                    temp_eligibilite_allocation_logement_familiale_5 = False
                                                elif match_arg_695.code == Collectivite_Code.SaintPierreEtMiquelon:
                                                    _ = match_arg_695.value
                                                    temp_eligibilite_allocation_logement_familiale_5 = False
                                                elif match_arg_695.code == Collectivite_Code.Mayotte:
                                                    _ = match_arg_695.value
                                                    temp_eligibilite_allocation_logement_familiale_5 = False
                                                if (temp_eligibilite_allocation_logement_familiale_5 and
                                                    (list_length(list_filter(temp_eligibilite_allocation_logement_familiale_4,
                                                    menage_2.personnes_a_charge)) >=
                                                    integer_of_string("1"))):
                                                    temp_eligibilite_allocation_logement_familiale_3 = True
                                                else:
                                                    temp_eligibilite_allocation_logement_familiale_3 = dead_value
                                                    raise EmptyError
                                        except EmptyError:
                                            match_arg_696 = menage_2.residence
                                            if match_arg_696.code == Collectivite_Code.Guadeloupe:
                                                _ = match_arg_696.value
                                                temp_eligibilite_allocation_logement_familiale_6 = True
                                            elif match_arg_696.code == Collectivite_Code.Guyane:
                                                _ = match_arg_696.value
                                                temp_eligibilite_allocation_logement_familiale_6 = True
                                            elif match_arg_696.code == Collectivite_Code.Martinique:
                                                _ = match_arg_696.value
                                                temp_eligibilite_allocation_logement_familiale_6 = True
                                            elif match_arg_696.code == Collectivite_Code.LaReunion:
                                                _ = match_arg_696.value
                                                temp_eligibilite_allocation_logement_familiale_6 = True
                                            elif match_arg_696.code == Collectivite_Code.SaintBarthelemy:
                                                _ = match_arg_696.value
                                                temp_eligibilite_allocation_logement_familiale_6 = False
                                            elif match_arg_696.code == Collectivite_Code.SaintMartin:
                                                _ = match_arg_696.value
                                                temp_eligibilite_allocation_logement_familiale_6 = False
                                            elif match_arg_696.code == Collectivite_Code.Metropole:
                                                _ = match_arg_696.value
                                                temp_eligibilite_allocation_logement_familiale_6 = False
                                            elif match_arg_696.code == Collectivite_Code.SaintPierreEtMiquelon:
                                                _ = match_arg_696.value
                                                temp_eligibilite_allocation_logement_familiale_6 = False
                                            elif match_arg_696.code == Collectivite_Code.Mayotte:
                                                _ = match_arg_696.value
                                                temp_eligibilite_allocation_logement_familiale_6 = True
                                            if (temp_eligibilite_allocation_logement_familiale_6 and
                                                demandeur_2.est_non_salarie_agricole_l781_8_l_781_46_code_rural):
                                                temp_eligibilite_allocation_logement_familiale_3 = True
                                            else:
                                                temp_eligibilite_allocation_logement_familiale_3 = dead_value
                                                raise EmptyError
                                    except EmptyError:
                                        def temp_eligibilite_allocation_logement_familiale_7(personne_a_charge_9:PersonneACharge):
                                            match_arg_697 = personne_a_charge_9
                                            if match_arg_697.code == PersonneACharge_Code.EnfantACharge:
                                                enfant_11 = match_arg_697.value
                                                return prestations_familiales_dot_droit_ouvert_1(
                                                    EnfantPrestationsFamiliales(identifiant = enfant_11.identifiant,
                                                    obligation_scolaire = enfant_11.obligation_scolaire,
                                                    remuneration_mensuelle = enfant_11.remuneration_mensuelle,
                                                    date_de_naissance = enfant_11.date_de_naissance,
                                                    a_deja_ouvert_droit_aux_allocations_familiales = enfant_11.a_deja_ouvert_droit_aux_allocations_familiales))
                                            elif match_arg_697.code == PersonneACharge_Code.AutrePersonneACharge:
                                                _ = match_arg_697.value
                                                return False
                                        match_arg_698 = menage_2.residence
                                        if match_arg_698.code == Collectivite_Code.Guadeloupe:
                                            _ = match_arg_698.value
                                            temp_eligibilite_allocation_logement_familiale_8 = True
                                        elif match_arg_698.code == Collectivite_Code.Guyane:
                                            _ = match_arg_698.value
                                            temp_eligibilite_allocation_logement_familiale_8 = True
                                        elif match_arg_698.code == Collectivite_Code.Martinique:
                                            _ = match_arg_698.value
                                            temp_eligibilite_allocation_logement_familiale_8 = True
                                        elif match_arg_698.code == Collectivite_Code.LaReunion:
                                            _ = match_arg_698.value
                                            temp_eligibilite_allocation_logement_familiale_8 = True
                                        elif match_arg_698.code == Collectivite_Code.SaintBarthelemy:
                                            _ = match_arg_698.value
                                            temp_eligibilite_allocation_logement_familiale_8 = False
                                        elif match_arg_698.code == Collectivite_Code.SaintMartin:
                                            _ = match_arg_698.value
                                            temp_eligibilite_allocation_logement_familiale_8 = False
                                        elif match_arg_698.code == Collectivite_Code.Metropole:
                                            _ = match_arg_698.value
                                            temp_eligibilite_allocation_logement_familiale_8 = False
                                        elif match_arg_698.code == Collectivite_Code.SaintPierreEtMiquelon:
                                            _ = match_arg_698.value
                                            temp_eligibilite_allocation_logement_familiale_8 = False
                                        elif match_arg_698.code == Collectivite_Code.Mayotte:
                                            _ = match_arg_698.value
                                            temp_eligibilite_allocation_logement_familiale_8 = True
                                        if (temp_eligibilite_allocation_logement_familiale_8 and
                                            (list_length(list_filter(temp_eligibilite_allocation_logement_familiale_7,
                                            menage_2.personnes_a_charge)) >=
                                            integer_of_string("1"))):
                                            temp_eligibilite_allocation_logement_familiale_3 = True
                                        else:
                                            temp_eligibilite_allocation_logement_familiale_3 = dead_value
                                            raise EmptyError
                                except EmptyError:
                                    match_arg_699 = menage_2.situation_familiale
                                    if match_arg_699.code == SituationFamiliale_Code.Celibataire:
                                        _ = match_arg_699.value
                                        temp_eligibilite_allocation_logement_familiale_9 = ((list_length(menage_2.personnes_a_charge) ==
                                            integer_of_string("0")) and
                                            menage_2.enfant_a_naitre_apres_quatrieme_mois_grossesse)
                                    elif match_arg_699.code == SituationFamiliale_Code.Maries:
                                        _ = match_arg_699.value
                                        temp_eligibilite_allocation_logement_familiale_9 = False
                                    elif match_arg_699.code == SituationFamiliale_Code.Pacses:
                                        _ = match_arg_699.value
                                        temp_eligibilite_allocation_logement_familiale_9 = False
                                    elif match_arg_699.code == SituationFamiliale_Code.Concubins:
                                        _ = match_arg_699.value
                                        temp_eligibilite_allocation_logement_familiale_9 = False
                                    elif match_arg_699.code == SituationFamiliale_Code.CelibataireSepareDeFait:
                                        _ = match_arg_699.value
                                        temp_eligibilite_allocation_logement_familiale_9 = False
                                    elif match_arg_699.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
                                        _ = match_arg_699.value
                                        temp_eligibilite_allocation_logement_familiale_9 = False
                                    if (l_841_1_6_applicable and
                                        temp_eligibilite_allocation_logement_familiale_9):
                                        temp_eligibilite_allocation_logement_familiale_3 = True
                                    else:
                                        temp_eligibilite_allocation_logement_familiale_3 = dead_value
                                        raise EmptyError
                            except EmptyError:
                                def temp_eligibilite_allocation_logement_familiale_10(personne_a_charge_10:PersonneACharge):
                                    match_arg_700 = personne_a_charge_10
                                    if match_arg_700.code == PersonneACharge_Code.EnfantACharge:
                                        enfant_12 = match_arg_700.value
                                        return False
                                    elif match_arg_700.code == PersonneACharge_Code.AutrePersonneACharge:
                                        parent_3 = match_arg_700.value
                                        return (parent_3.ascendant_descendant_collateral_deuxieme_troisieme_degre and
                                            parent_3.incapacite_80_pourcent_ou_restriction_emploi)
                                if (list_length(list_filter(temp_eligibilite_allocation_logement_familiale_10,
                                    menage_2.personnes_a_charge)) >=
                                    integer_of_string("1")):
                                    temp_eligibilite_allocation_logement_familiale_3 = True
                                else:
                                    temp_eligibilite_allocation_logement_familiale_3 = dead_value
                                    raise EmptyError
                        except EmptyError:
                            def temp_eligibilite_allocation_logement_familiale_11(personne_a_charge_11:PersonneACharge):
                                return eligibilite_commune_dot_condition_2_r823_4(
                                    personne_a_charge_11)
                            if (list_length(list_filter(temp_eligibilite_allocation_logement_familiale_11,
                                menage_2.personnes_a_charge)) >=
                                integer_of_string("1")):
                                temp_eligibilite_allocation_logement_familiale_3 = True
                            else:
                                temp_eligibilite_allocation_logement_familiale_3 = dead_value
                                raise EmptyError
                    except EmptyError:
                        match_arg_701 = menage_2.situation_familiale
                        if match_arg_701.code == SituationFamiliale_Code.Celibataire:
                            _ = match_arg_701.value
                            temp_eligibilite_allocation_logement_familiale_12 = False
                        elif match_arg_701.code == SituationFamiliale_Code.Maries:
                            date_mariage = match_arg_701.value
                            temp_eligibilite_allocation_logement_familiale_12 = (date_courante_18 <=
                                (date_mariage + duree_l841_1_3))
                        elif match_arg_701.code == SituationFamiliale_Code.Pacses:
                            _ = match_arg_701.value
                            temp_eligibilite_allocation_logement_familiale_12 = False
                        elif match_arg_701.code == SituationFamiliale_Code.Concubins:
                            _ = match_arg_701.value
                            temp_eligibilite_allocation_logement_familiale_12 = False
                        elif match_arg_701.code == SituationFamiliale_Code.CelibataireSepareDeFait:
                            _ = match_arg_701.value
                            temp_eligibilite_allocation_logement_familiale_12 = False
                        elif match_arg_701.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
                            _ = match_arg_701.value
                            temp_eligibilite_allocation_logement_familiale_12 = False
                        def temp_eligibilite_allocation_logement_familiale_13(personne_a_charge_12:PersonneACharge):
                            match_arg_702 = personne_a_charge_12
                            if match_arg_702.code == PersonneACharge_Code.EnfantACharge:
                                enfant_13 = match_arg_702.value
                                return not prestations_familiales_dot_droit_ouvert_1(
                                    EnfantPrestationsFamiliales(identifiant = enfant_13.identifiant,
                                    obligation_scolaire = enfant_13.obligation_scolaire,
                                    remuneration_mensuelle = enfant_13.remuneration_mensuelle,
                                    date_de_naissance = enfant_13.date_de_naissance,
                                    a_deja_ouvert_droit_aux_allocations_familiales = enfant_13.a_deja_ouvert_droit_aux_allocations_familiales))
                            elif match_arg_702.code == PersonneACharge_Code.AutrePersonneACharge:
                                _ = match_arg_702.value
                                return False
                        if ((list_length(list_filter(temp_eligibilite_allocation_logement_familiale_13,
                            menage_2.personnes_a_charge)) ==
                            integer_of_string("0")) and
                            temp_eligibilite_allocation_logement_familiale_12):
                            temp_eligibilite_allocation_logement_familiale_3 = True
                        else:
                            temp_eligibilite_allocation_logement_familiale_3 = dead_value
                            raise EmptyError
                except EmptyError:
                    def temp_eligibilite_allocation_logement_familiale_14(personne_a_charge_13:PersonneACharge):
                        match_arg_703 = personne_a_charge_13
                        if match_arg_703.code == PersonneACharge_Code.EnfantACharge:
                            enfant_14 = match_arg_703.value
                            return prestations_familiales_dot_droit_ouvert_1(
                                EnfantPrestationsFamiliales(identifiant = enfant_14.identifiant,
                                obligation_scolaire = enfant_14.obligation_scolaire,
                                remuneration_mensuelle = enfant_14.remuneration_mensuelle,
                                date_de_naissance = enfant_14.date_de_naissance,
                                a_deja_ouvert_droit_aux_allocations_familiales = enfant_14.a_deja_ouvert_droit_aux_allocations_familiales))
                        elif match_arg_703.code == PersonneACharge_Code.AutrePersonneACharge:
                            _ = match_arg_703.value
                            return False
                    if (l_841_1_2_applicable and
                        (list_length(list_filter(temp_eligibilite_allocation_logement_familiale_14,
                        menage_2.personnes_a_charge)) ==
                        integer_of_string("1"))):
                        temp_eligibilite_allocation_logement_familiale_3 = True
                    else:
                        temp_eligibilite_allocation_logement_familiale_3 = dead_value
                        raise EmptyError
            except EmptyError:
                def temp_eligibilite_allocation_logement_familiale_15(acc:bool, prestation:PrestationRecue):
                    return (acc or ((prestation ==
                        PrestationRecue(PrestationRecue_Code.AllocationsFamiliales,
                        Unit())) or ((prestation ==
                        PrestationRecue(PrestationRecue_Code.ComplementFamilial,
                        Unit())) or ((prestation ==
                        PrestationRecue(PrestationRecue_Code.AllocationSoutienFamilial,
                        Unit())) or (prestation ==
                        PrestationRecue(PrestationRecue_Code.AllocationSoutienEnfantHandicape,
                        Unit()))))))
                if (l_841_1_1_applicable and
                    list_fold_left(temp_eligibilite_allocation_logement_familiale_15,
                                   False, menage_2.prestations_recues)):
                    temp_eligibilite_allocation_logement_familiale_3 = True
                else:
                    temp_eligibilite_allocation_logement_familiale_3 = dead_value
                    raise EmptyError
        except EmptyError:
            temp_eligibilite_allocation_logement_familiale_3 = False
    except EmptyError:
        temp_eligibilite_allocation_logement_familiale_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=428, start_column=11,
                                             end_line=428, end_column=52,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_allocation_logement_familiale = temp_eligibilite_allocation_logement_familiale_3
    try:
        def temp_eligibilite_l841_2(_:Unit):
            if ((eligibilite_dispositions_communes ==
                TypeEligibiliteAllocationLogement(TypeEligibiliteAllocationLogement_Code.PasEligible,
                Unit())) or
                beneficie_aide_personnalisee_logement):
                return TypeEligibiliteAllocationLogement(TypeEligibiliteAllocationLogement_Code.PasEligible,
                    Unit())
            else:
                if eligibilite_allocation_logement_familiale:
                    return TypeEligibiliteAllocationLogement(TypeEligibiliteAllocationLogement_Code.AllocationLogementFamiliale,
                        Unit())
                else:
                    return TypeEligibiliteAllocationLogement(TypeEligibiliteAllocationLogement_Code.AllocationLogementSociale,
                        Unit())
        def temp_eligibilite_l841_2_1(_:Unit):
            return True
        def temp_eligibilite_l841_2_2(_:Unit):
            def temp_eligibilite_l841_2_3(_:Unit):
                return TypeEligibiliteAllocationLogement(TypeEligibiliteAllocationLogement_Code.AllocationLogementSociale,
                    Unit())
            def temp_eligibilite_l841_2_4(_:Unit):
                return demandeur_2.personne_hebergee_centre_soin_l_L162_22_3_securite_sociale
            return handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [],
                                  temp_eligibilite_l841_2_4,
                                  temp_eligibilite_l841_2_3)
        def temp_eligibilite_l841_2_5(_:Unit):
            try:
                try:
                    def temp_eligibilite_l841_2_6(_:Unit):
                        return TypeEligibiliteAllocationLogement(TypeEligibiliteAllocationLogement_Code.PasEligible,
                            Unit())
                    def temp_eligibilite_l841_2_7(_:Unit):
                        match_arg_704 = menage_2.residence
                        if match_arg_704.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_704.value
                            temp_eligibilite_l841_2_8 = False
                        elif match_arg_704.code == Collectivite_Code.Guyane:
                            _ = match_arg_704.value
                            temp_eligibilite_l841_2_8 = False
                        elif match_arg_704.code == Collectivite_Code.Martinique:
                            _ = match_arg_704.value
                            temp_eligibilite_l841_2_8 = False
                        elif match_arg_704.code == Collectivite_Code.LaReunion:
                            _ = match_arg_704.value
                            temp_eligibilite_l841_2_8 = False
                        elif match_arg_704.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_704.value
                            temp_eligibilite_l841_2_8 = False
                        elif match_arg_704.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_704.value
                            temp_eligibilite_l841_2_8 = False
                        elif match_arg_704.code == Collectivite_Code.Metropole:
                            _ = match_arg_704.value
                            temp_eligibilite_l841_2_8 = False
                        elif match_arg_704.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_704.value
                            temp_eligibilite_l841_2_8 = False
                        elif match_arg_704.code == Collectivite_Code.Mayotte:
                            _ = match_arg_704.value
                            temp_eligibilite_l841_2_8 = True
                        return (temp_eligibilite_l841_2_8 and
                            demandeur_2.magistrat_fonctionnaire_centre_interets_materiels_familiaux_hors_mayotte)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_eligibilite_l841_2_7,
                                          temp_eligibilite_l841_2_6)
                except EmptyError:
                    match_arg_705 = menage_2.logement.mode_occupation
                    if match_arg_705.code == ModeOccupation_Code.Locataire:
                        _ = match_arg_705.value
                        temp_eligibilite_l841_2_9 = False
                    elif match_arg_705.code == ModeOccupation_Code.ResidentLogementFoyer:
                        _ = match_arg_705.value
                        temp_eligibilite_l841_2_9 = False
                    elif match_arg_705.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        proprietaire_6 = match_arg_705.value
                        match_arg_706 = proprietaire_6.pret.accord_financement_representant_Etat_outre_mer
                        if match_arg_706.code == AccordFinancementRepresentantEtatOutreMer_Code.Accord:
                            date_accord = match_arg_706.value
                            temp_eligibilite_l841_2_10 = (date_accord <=
                                date_of_numbers(2018,12,31))
                        elif match_arg_706.code == AccordFinancementRepresentantEtatOutreMer_Code.PasdAccord:
                            _ = match_arg_706.value
                            temp_eligibilite_l841_2_10 = False
                        temp_eligibilite_l841_2_9 = ((proprietaire_6.pret.date_signature >
                            date_of_numbers(2017,12,31)) or
                            ((proprietaire_6.pret.date_signature >
                            date_of_numbers(2019,12,31)) and
                            temp_eligibilite_l841_2_10))
                    elif match_arg_705.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_705.value
                        temp_eligibilite_l841_2_9 = False
                    elif match_arg_705.code == ModeOccupation_Code.LocationAccession:
                        _ = match_arg_705.value
                        temp_eligibilite_l841_2_9 = False
                    match_arg_707 = menage_2.residence
                    if match_arg_707.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_707.value
                        temp_eligibilite_l841_2_11 = True
                    elif match_arg_707.code == Collectivite_Code.Guyane:
                        _ = match_arg_707.value
                        temp_eligibilite_l841_2_11 = True
                    elif match_arg_707.code == Collectivite_Code.Martinique:
                        _ = match_arg_707.value
                        temp_eligibilite_l841_2_11 = True
                    elif match_arg_707.code == Collectivite_Code.LaReunion:
                        _ = match_arg_707.value
                        temp_eligibilite_l841_2_11 = True
                    elif match_arg_707.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_707.value
                        temp_eligibilite_l841_2_11 = False
                    elif match_arg_707.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_707.value
                        temp_eligibilite_l841_2_11 = False
                    elif match_arg_707.code == Collectivite_Code.Metropole:
                        _ = match_arg_707.value
                        temp_eligibilite_l841_2_11 = False
                    elif match_arg_707.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_707.value
                        temp_eligibilite_l841_2_11 = False
                    elif match_arg_707.code == Collectivite_Code.Mayotte:
                        _ = match_arg_707.value
                        temp_eligibilite_l841_2_11 = True
                    if (temp_eligibilite_l841_2_11 and
                        temp_eligibilite_l841_2_9):
                        return TypeEligibiliteAllocationLogement(TypeEligibiliteAllocationLogement_Code.PasEligible,
                            Unit())
                    else:
                        raise EmptyError
            except EmptyError:
                match_arg_708 = menage_2.logement.mode_occupation
                if match_arg_708.code == ModeOccupation_Code.Locataire:
                    _ = match_arg_708.value
                    temp_eligibilite_l841_2_12 = False
                elif match_arg_708.code == ModeOccupation_Code.ResidentLogementFoyer:
                    _ = match_arg_708.value
                    temp_eligibilite_l841_2_12 = False
                elif match_arg_708.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                    proprietaire_7 = match_arg_708.value
                    temp_eligibilite_l841_2_12 = (proprietaire_7.pret.date_signature >
                        date_of_numbers(2017,12,31))
                elif match_arg_708.code == ModeOccupation_Code.SousLocataire:
                    _ = match_arg_708.value
                    temp_eligibilite_l841_2_12 = False
                elif match_arg_708.code == ModeOccupation_Code.LocationAccession:
                    _ = match_arg_708.value
                    temp_eligibilite_l841_2_12 = False
                if temp_eligibilite_l841_2_12:
                    return TypeEligibiliteAllocationLogement(TypeEligibiliteAllocationLogement_Code.PasEligible,
                        Unit())
                else:
                    raise EmptyError
        temp_eligibilite_l841_2_13 = handle_default(SourcePosition(filename="",
                                                    start_line=0,
                                                    start_column=1,
                                                    end_line=0, end_column=1,
                                                    law_headings=[]), [temp_eligibilite_l841_2_5,
                                                    temp_eligibilite_l841_2_2],
                                                    temp_eligibilite_l841_2_1,
                                                    temp_eligibilite_l841_2)
    except EmptyError:
        temp_eligibilite_l841_2_13 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=437, start_column=10,
                                             end_line=437, end_column=16,
                                             law_headings=["Éligibilité aux allocations de logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_l841_2 = temp_eligibilite_l841_2_13
    return EligibiliteAllocationLogement(eligibilite = eligibilite_l841_2,
        nombre_personnes_a_charge_prises_en_compte = nombre_personnes_a_charge_prises_en_compte_1,
        coefficents_enfants_garde_alternee_pris_en_compte = coefficents_enfants_garde_alternee_pris_en_compte_1)

def eligibilite_aide_personnalisee_logement(eligibilite_aide_personnalisee_logement_in:EligibiliteAidePersonnaliseeLogementIn):
    menage_3 = eligibilite_aide_personnalisee_logement_in.menage_in
    demandeur_3 = eligibilite_aide_personnalisee_logement_in.demandeur_in
    date_courante_19 = eligibilite_aide_personnalisee_logement_in.date_courante_in
    def temp_caracteristiques_pret_l831_1_1(pret:Pret):
        try:
            try:
                try:
                    def temp_caracteristiques_pret_l831_1_1_1(_:Unit):
                        return True
                    def temp_caracteristiques_pret_l831_1_1_2(_:Unit):
                        match_arg_709 = pret.type_pret
                        if match_arg_709.code == TypePret_Code.D331_32:
                            _ = match_arg_709.value
                            temp_caracteristiques_pret_l831_1_1_3 = False
                        elif match_arg_709.code == TypePret_Code.D331_63_64:
                            _ = match_arg_709.value
                            temp_caracteristiques_pret_l831_1_1_3 = False
                        elif match_arg_709.code == TypePret_Code.D331_59_8:
                            _ = match_arg_709.value
                            temp_caracteristiques_pret_l831_1_1_3 = False
                        elif match_arg_709.code == TypePret_Code.D331_76_1:
                            _ = match_arg_709.value
                            temp_caracteristiques_pret_l831_1_1_3 = True
                        elif match_arg_709.code == TypePret_Code.Autre:
                            _ = match_arg_709.value
                            temp_caracteristiques_pret_l831_1_1_3 = False
                        match_arg_710 = pret.type_pret
                        if match_arg_710.code == TypePret_Code.D331_32:
                            _ = match_arg_710.value
                            temp_caracteristiques_pret_l831_1_1_4 = False
                        elif match_arg_710.code == TypePret_Code.D331_63_64:
                            _ = match_arg_710.value
                            temp_caracteristiques_pret_l831_1_1_4 = False
                        elif match_arg_710.code == TypePret_Code.D331_59_8:
                            _ = match_arg_710.value
                            temp_caracteristiques_pret_l831_1_1_4 = True
                        elif match_arg_710.code == TypePret_Code.D331_76_1:
                            _ = match_arg_710.value
                            temp_caracteristiques_pret_l831_1_1_4 = False
                        elif match_arg_710.code == TypePret_Code.Autre:
                            _ = match_arg_710.value
                            temp_caracteristiques_pret_l831_1_1_4 = False
                        match_arg_711 = pret.titulaire_pret
                        if match_arg_711.code == TitulairePret_Code.Demandeur:
                            _ = match_arg_711.value
                            temp_caracteristiques_pret_l831_1_1_5 = False
                        elif match_arg_711.code == TitulairePret_Code.VendeurQuandDemandeurAContratLocationAccession:
                            _ = match_arg_711.value
                            temp_caracteristiques_pret_l831_1_1_5 = True
                        return (temp_caracteristiques_pret_l831_1_1_5 and
                            (temp_caracteristiques_pret_l831_1_1_4 or
                            temp_caracteristiques_pret_l831_1_1_3))
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_caracteristiques_pret_l831_1_1_2,
                                          temp_caracteristiques_pret_l831_1_1_1)
                except EmptyError:
                    match_arg_712 = pret.type_pret
                    if match_arg_712.code == TypePret_Code.D331_32:
                        _ = match_arg_712.value
                        temp_caracteristiques_pret_l831_1_1_6 = False
                    elif match_arg_712.code == TypePret_Code.D331_63_64:
                        _ = match_arg_712.value
                        temp_caracteristiques_pret_l831_1_1_6 = True
                    elif match_arg_712.code == TypePret_Code.D331_59_8:
                        _ = match_arg_712.value
                        temp_caracteristiques_pret_l831_1_1_6 = False
                    elif match_arg_712.code == TypePret_Code.D331_76_1:
                        _ = match_arg_712.value
                        temp_caracteristiques_pret_l831_1_1_6 = False
                    elif match_arg_712.code == TypePret_Code.Autre:
                        _ = match_arg_712.value
                        temp_caracteristiques_pret_l831_1_1_6 = False
                    match_arg_713 = pret.type_pret
                    if match_arg_713.code == TypePret_Code.D331_32:
                        _ = match_arg_713.value
                        temp_caracteristiques_pret_l831_1_1_7 = True
                    elif match_arg_713.code == TypePret_Code.D331_63_64:
                        _ = match_arg_713.value
                        temp_caracteristiques_pret_l831_1_1_7 = False
                    elif match_arg_713.code == TypePret_Code.D331_59_8:
                        _ = match_arg_713.value
                        temp_caracteristiques_pret_l831_1_1_7 = False
                    elif match_arg_713.code == TypePret_Code.D331_76_1:
                        _ = match_arg_713.value
                        temp_caracteristiques_pret_l831_1_1_7 = False
                    elif match_arg_713.code == TypePret_Code.Autre:
                        _ = match_arg_713.value
                        temp_caracteristiques_pret_l831_1_1_7 = False
                    match_arg_714 = pret.titulaire_pret
                    if match_arg_714.code == TitulairePret_Code.Demandeur:
                        _ = match_arg_714.value
                        temp_caracteristiques_pret_l831_1_1_8 = True
                    elif match_arg_714.code == TitulairePret_Code.VendeurQuandDemandeurAContratLocationAccession:
                        _ = match_arg_714.value
                        temp_caracteristiques_pret_l831_1_1_8 = False
                    if (temp_caracteristiques_pret_l831_1_1_8 and
                        (temp_caracteristiques_pret_l831_1_1_7 or
                        temp_caracteristiques_pret_l831_1_1_6)):
                        return True
                    else:
                        raise EmptyError
            except EmptyError:
                return False
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=383,
                                                 start_column=11,
                                                 end_line=383, end_column=41,
                                                 law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    caracteristiques_pret_l831_1_1 = temp_caracteristiques_pret_l831_1_1
    def temp_caracteristiques_pret_l831_1_6(pret_1:Pret):
        try:
            return False
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=384,
                                                 start_column=11,
                                                 end_line=384, end_column=41,
                                                 law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                 "Déclarations des champs d'application",
                                                 "Prologue : aides au logement"]))
    caracteristiques_pret_l831_1_6 = temp_caracteristiques_pret_l831_1_6
    try:
        temp_eligibilite_commune_dot_menage_1 = menage_3
    except EmptyError:
        temp_eligibilite_commune_dot_menage_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=395, start_column=14,
                                             end_line=395, end_column=40,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_commune_dot_menage_1 = temp_eligibilite_commune_dot_menage_1
    try:
        temp_eligibilite_commune_dot_demandeur_1 = demandeur_3
    except EmptyError:
        temp_eligibilite_commune_dot_demandeur_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=396, start_column=14,
                                             end_line=396, end_column=43,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_commune_dot_demandeur_1 = temp_eligibilite_commune_dot_demandeur_1
    try:
        temp_eligibilite_commune_dot_date_courante_1 = date_courante_19
    except EmptyError:
        temp_eligibilite_commune_dot_date_courante_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=397, start_column=14,
                                             end_line=397, end_column=47,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_commune_dot_date_courante_2 = temp_eligibilite_commune_dot_date_courante_1
    def temp_eligibilite_commune_dot_condition_logement_residence_principale_3(_:Unit):
        raise EmptyError
    eligibilite_commune_dot_condition_logement_residence_principale_1 = temp_eligibilite_commune_dot_condition_logement_residence_principale_3
    def temp_eligibilite_commune_dot_condition_logement_surface_3(_:Unit):
        raise EmptyError
    eligibilite_commune_dot_condition_logement_surface_1 = temp_eligibilite_commune_dot_condition_logement_surface_3
    def temp_eligibilite_commune_dot_date_entree_vigueur_differee_cch_1(_:Unit):
        def temp_eligibilite_commune_dot_date_entree_vigueur_differee_cch_2(_:Unit):
            return date_of_numbers(2021,5,1)
        def temp_eligibilite_commune_dot_date_entree_vigueur_differee_cch_3(_:Unit):
            match_arg_715 = menage_3.logement.mode_occupation
            if match_arg_715.code == ModeOccupation_Code.Locataire:
                _ = match_arg_715.value
                return False
            elif match_arg_715.code == ModeOccupation_Code.ResidentLogementFoyer:
                _ = match_arg_715.value
                return False
            elif match_arg_715.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                _ = match_arg_715.value
                return True
            elif match_arg_715.code == ModeOccupation_Code.SousLocataire:
                _ = match_arg_715.value
                return False
            elif match_arg_715.code == ModeOccupation_Code.LocationAccession:
                _ = match_arg_715.value
                return False
        return handle_default(SourcePosition(filename="", start_line=0,
                              start_column=1, end_line=0, end_column=1,
                              law_headings=[]), [],
                              temp_eligibilite_commune_dot_date_entree_vigueur_differee_cch_3,
                              temp_eligibilite_commune_dot_date_entree_vigueur_differee_cch_2)
    eligibilite_commune_dot_date_entree_vigueur_differee_cch_1 = temp_eligibilite_commune_dot_date_entree_vigueur_differee_cch_1
    result_23 = eligibilite_aides_personnelle_logement(EligibiliteAidesPersonnelleLogementIn(menage_in = eligibilite_commune_dot_menage_1,
                                                       demandeur_in = eligibilite_commune_dot_demandeur_1,
                                                       date_courante_in = eligibilite_commune_dot_date_courante_2,
                                                       condition_logement_residence_principale_in = eligibilite_commune_dot_condition_logement_residence_principale_1,
                                                       condition_logement_surface_in = eligibilite_commune_dot_condition_logement_surface_1,
                                                       date_entree_vigueur_differee_cch_in = eligibilite_commune_dot_date_entree_vigueur_differee_cch_1))
    eligibilite_commune_dot_date_courante_3 = result_23.date_courante
    eligibilite_commune_dot_eligibilite_1 = result_23.eligibilite
    eligibilite_commune_dot_nombre_personnes_a_charge_prises_en_compte_1 = result_23.nombre_personnes_a_charge_prises_en_compte
    eligibilite_commune_dot_coefficents_enfants_garde_alternee_pris_en_compte_1 = result_23.coefficents_enfants_garde_alternee_pris_en_compte
    eligibilite_commune_dot_condition_2_r823_4_1 = result_23.condition_2_r823_4
    try:
        try:
            def temp_logement_situe_commune_desequilibre_l831_2(_:Unit):
                return True
            def temp_logement_situe_commune_desequilibre_l831_2_1(_:Unit):
                match_arg_716 = menage_3.logement.zone
                if match_arg_716.code == ZoneDHabitation_Code.Zone1:
                    _ = match_arg_716.value
                    temp_logement_situe_commune_desequilibre_l831_2_2 = False
                elif match_arg_716.code == ZoneDHabitation_Code.Zone2:
                    _ = match_arg_716.value
                    temp_logement_situe_commune_desequilibre_l831_2_2 = False
                elif match_arg_716.code == ZoneDHabitation_Code.Zone3:
                    _ = match_arg_716.value
                    temp_logement_situe_commune_desequilibre_l831_2_2 = True
                return ((date_courante_19 >= date_of_numbers(2019,10,1)) and
                    temp_logement_situe_commune_desequilibre_l831_2_2)
            temp_logement_situe_commune_desequilibre_l831_2_3 = handle_default(
                SourcePosition(filename="", start_line=0, start_column=1,
                end_line=0, end_column=1, law_headings=[]), [],
                temp_logement_situe_commune_desequilibre_l831_2_1,
                temp_logement_situe_commune_desequilibre_l831_2)
        except EmptyError:
            temp_logement_situe_commune_desequilibre_l831_2_3 = False
    except EmptyError:
        temp_logement_situe_commune_desequilibre_l831_2_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=380, start_column=11,
                                             end_line=380, end_column=53,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    logement_situe_commune_desequilibre_l831_2 = temp_logement_situe_commune_desequilibre_l831_2_3
    try:
        def temp_condition_logement_bailleur(_:Unit):
            return False
        def temp_condition_logement_bailleur_1(_:Unit):
            return True
        def temp_condition_logement_bailleur_2(_:Unit):
            try:
                try:
                    def temp_condition_logement_bailleur_3(_:Unit):
                        return True
                    def temp_condition_logement_bailleur_4(_:Unit):
                        match_arg_717 = menage_3.logement.mode_occupation
                        if match_arg_717.code == ModeOccupation_Code.Locataire:
                            _ = match_arg_717.value
                            return False
                        elif match_arg_717.code == ModeOccupation_Code.ResidentLogementFoyer:
                            _ = match_arg_717.value
                            return False
                        elif match_arg_717.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                            _ = match_arg_717.value
                            return False
                        elif match_arg_717.code == ModeOccupation_Code.SousLocataire:
                            _ = match_arg_717.value
                            return False
                        elif match_arg_717.code == ModeOccupation_Code.LocationAccession:
                            propriete = match_arg_717.value
                            return caracteristiques_pret_l831_1_6(propriete.pret)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_condition_logement_bailleur_4,
                                          temp_condition_logement_bailleur_3)
                except EmptyError:
                    match_arg_718 = menage_3.logement.mode_occupation
                    if match_arg_718.code == ModeOccupation_Code.Locataire:
                        location_3 = match_arg_718.value
                        match_arg_719 = location_3.bailleur
                        if match_arg_719.code == TypeBailleur_Code.BailleurSocial:
                            convention = match_arg_719.value
                            temp_condition_logement_bailleur_5 = convention.conventionne_livre_III_titre_V_chap_III
                        elif match_arg_719.code == TypeBailleur_Code.BailleurPriveAvecConventionnementSocial:
                            convention_1 = match_arg_719.value
                            temp_condition_logement_bailleur_5 = convention_1.conventionne_livre_III_titre_II_chap_I_sec_3
                        elif match_arg_719.code == TypeBailleur_Code.BailleurPrive:
                            _ = match_arg_719.value
                            temp_condition_logement_bailleur_5 = False
                    elif match_arg_718.code == ModeOccupation_Code.ResidentLogementFoyer:
                        _ = match_arg_718.value
                        temp_condition_logement_bailleur_5 = False
                    elif match_arg_718.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        _ = match_arg_718.value
                        temp_condition_logement_bailleur_5 = False
                    elif match_arg_718.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_718.value
                        temp_condition_logement_bailleur_5 = False
                    elif match_arg_718.code == ModeOccupation_Code.LocationAccession:
                        _ = match_arg_718.value
                        temp_condition_logement_bailleur_5 = False
                    if temp_condition_logement_bailleur_5:
                        return True
                    else:
                        raise EmptyError
            except EmptyError:
                match_arg_720 = menage_3.logement.mode_occupation
                if match_arg_720.code == ModeOccupation_Code.Locataire:
                    _ = match_arg_720.value
                    temp_condition_logement_bailleur_6 = False
                elif match_arg_720.code == ModeOccupation_Code.ResidentLogementFoyer:
                    _ = match_arg_720.value
                    temp_condition_logement_bailleur_6 = False
                elif match_arg_720.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                    propriete_1 = match_arg_720.value
                    temp_condition_logement_bailleur_6 = caracteristiques_pret_l831_1_1(
                        propriete_1.pret)
                elif match_arg_720.code == ModeOccupation_Code.SousLocataire:
                    _ = match_arg_720.value
                    temp_condition_logement_bailleur_6 = False
                elif match_arg_720.code == ModeOccupation_Code.LocationAccession:
                    _ = match_arg_720.value
                    temp_condition_logement_bailleur_6 = False
                if temp_condition_logement_bailleur_6:
                    return True
                else:
                    raise EmptyError
        def temp_condition_logement_bailleur_7(_:Unit):
            try:
                try:
                    def temp_condition_logement_bailleur_8(_:Unit):
                        return False
                    def temp_condition_logement_bailleur_9(_:Unit):
                        match_arg_721 = menage_3.logement.mode_occupation
                        if match_arg_721.code == ModeOccupation_Code.Locataire:
                            _ = match_arg_721.value
                            temp_condition_logement_bailleur_10 = False
                        elif match_arg_721.code == ModeOccupation_Code.ResidentLogementFoyer:
                            logement_foyer_2 = match_arg_721.value
                            match_arg_722 = logement_foyer_2.type
                            if match_arg_722.code == TypeLogementFoyer_Code.LogementPersonnesAgeesOuHandicapees:
                                _ = match_arg_722.value
                                temp_condition_logement_bailleur_10 = False
                            elif match_arg_722.code == TypeLogementFoyer_Code.ResidenceSociale:
                                _ = match_arg_722.value
                                temp_condition_logement_bailleur_10 = False
                            elif match_arg_722.code == TypeLogementFoyer_Code.FoyerJeunesTravailleursOuMigrantsConventionneL353_2Avant1995:
                                _ = match_arg_722.value
                                temp_condition_logement_bailleur_10 = True
                            elif match_arg_722.code == TypeLogementFoyer_Code.Autre:
                                _ = match_arg_722.value
                                temp_condition_logement_bailleur_10 = False
                        elif match_arg_721.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                            _ = match_arg_721.value
                            temp_condition_logement_bailleur_10 = False
                        elif match_arg_721.code == ModeOccupation_Code.SousLocataire:
                            _ = match_arg_721.value
                            temp_condition_logement_bailleur_10 = False
                        elif match_arg_721.code == ModeOccupation_Code.LocationAccession:
                            _ = match_arg_721.value
                            temp_condition_logement_bailleur_10 = False
                        match_arg_723 = menage_3.residence
                        if match_arg_723.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_723.value
                            temp_condition_logement_bailleur_11 = True
                        elif match_arg_723.code == Collectivite_Code.Guyane:
                            _ = match_arg_723.value
                            temp_condition_logement_bailleur_11 = True
                        elif match_arg_723.code == Collectivite_Code.Martinique:
                            _ = match_arg_723.value
                            temp_condition_logement_bailleur_11 = True
                        elif match_arg_723.code == Collectivite_Code.LaReunion:
                            _ = match_arg_723.value
                            temp_condition_logement_bailleur_11 = True
                        elif match_arg_723.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_723.value
                            temp_condition_logement_bailleur_11 = False
                        elif match_arg_723.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_723.value
                            temp_condition_logement_bailleur_11 = False
                        elif match_arg_723.code == Collectivite_Code.Metropole:
                            _ = match_arg_723.value
                            temp_condition_logement_bailleur_11 = False
                        elif match_arg_723.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_723.value
                            temp_condition_logement_bailleur_11 = False
                        elif match_arg_723.code == Collectivite_Code.Mayotte:
                            _ = match_arg_723.value
                            temp_condition_logement_bailleur_11 = True
                        return (((date_courante_19 >=
                            date_of_numbers(2023,4,5)) and
                            temp_condition_logement_bailleur_11) and
                            temp_condition_logement_bailleur_10)
                    return handle_default(SourcePosition(filename="",
                                          start_line=0, start_column=1,
                                          end_line=0, end_column=1,
                                          law_headings=[]), [],
                                          temp_condition_logement_bailleur_9,
                                          temp_condition_logement_bailleur_8)
                except EmptyError:
                    match_arg_724 = menage_3.logement.mode_occupation
                    if match_arg_724.code == ModeOccupation_Code.Locataire:
                        _ = match_arg_724.value
                        temp_condition_logement_bailleur_12 = False
                    elif match_arg_724.code == ModeOccupation_Code.ResidentLogementFoyer:
                        logement_foyer_3 = match_arg_724.value
                        match_arg_725 = logement_foyer_3.type
                        if match_arg_725.code == TypeLogementFoyer_Code.LogementPersonnesAgeesOuHandicapees:
                            _ = match_arg_725.value
                            temp_condition_logement_bailleur_12 = False
                        elif match_arg_725.code == TypeLogementFoyer_Code.ResidenceSociale:
                            _ = match_arg_725.value
                            temp_condition_logement_bailleur_12 = False
                        elif match_arg_725.code == TypeLogementFoyer_Code.FoyerJeunesTravailleursOuMigrantsConventionneL353_2Avant1995:
                            _ = match_arg_725.value
                            temp_condition_logement_bailleur_12 = False
                        elif match_arg_725.code == TypeLogementFoyer_Code.Autre:
                            _ = match_arg_725.value
                            temp_condition_logement_bailleur_12 = True
                    elif match_arg_724.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        _ = match_arg_724.value
                        temp_condition_logement_bailleur_12 = False
                    elif match_arg_724.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_724.value
                        temp_condition_logement_bailleur_12 = False
                    elif match_arg_724.code == ModeOccupation_Code.LocationAccession:
                        _ = match_arg_724.value
                        temp_condition_logement_bailleur_12 = False
                    if temp_condition_logement_bailleur_12:
                        return False
                    else:
                        raise EmptyError
            except EmptyError:
                try:
                    try:
                        def temp_condition_logement_bailleur_13(_:Unit):
                            return True
                        def temp_condition_logement_bailleur_14(_:Unit):
                            match_arg_726 = menage_3.logement.mode_occupation
                            if match_arg_726.code == ModeOccupation_Code.Locataire:
                                _ = match_arg_726.value
                                return False
                            elif match_arg_726.code == ModeOccupation_Code.ResidentLogementFoyer:
                                logement_foyer_4 = match_arg_726.value
                                return logement_foyer_4.remplit_conditions_r832_21
                            elif match_arg_726.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                                _ = match_arg_726.value
                                return False
                            elif match_arg_726.code == ModeOccupation_Code.SousLocataire:
                                _ = match_arg_726.value
                                return False
                            elif match_arg_726.code == ModeOccupation_Code.LocationAccession:
                                _ = match_arg_726.value
                                return False
                        return handle_default(SourcePosition(filename="",
                                              start_line=0, start_column=1,
                                              end_line=0, end_column=1,
                                              law_headings=[]), [],
                                              temp_condition_logement_bailleur_14,
                                              temp_condition_logement_bailleur_13)
                    except EmptyError:
                        match_arg_727 = menage_3.logement.mode_occupation
                        if match_arg_727.code == ModeOccupation_Code.Locataire:
                            _ = match_arg_727.value
                            temp_condition_logement_bailleur_15 = False
                        elif match_arg_727.code == ModeOccupation_Code.ResidentLogementFoyer:
                            location_4 = match_arg_727.value
                            temp_condition_logement_bailleur_15 = location_4.conventionne_selon_regles_drom
                        elif match_arg_727.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                            _ = match_arg_727.value
                            temp_condition_logement_bailleur_15 = False
                        elif match_arg_727.code == ModeOccupation_Code.SousLocataire:
                            _ = match_arg_727.value
                            temp_condition_logement_bailleur_15 = False
                        elif match_arg_727.code == ModeOccupation_Code.LocationAccession:
                            _ = match_arg_727.value
                            temp_condition_logement_bailleur_15 = False
                        match_arg_728 = menage_3.residence
                        if match_arg_728.code == Collectivite_Code.Guadeloupe:
                            _ = match_arg_728.value
                            temp_condition_logement_bailleur_16 = True
                        elif match_arg_728.code == Collectivite_Code.Guyane:
                            _ = match_arg_728.value
                            temp_condition_logement_bailleur_16 = True
                        elif match_arg_728.code == Collectivite_Code.Martinique:
                            _ = match_arg_728.value
                            temp_condition_logement_bailleur_16 = True
                        elif match_arg_728.code == Collectivite_Code.LaReunion:
                            _ = match_arg_728.value
                            temp_condition_logement_bailleur_16 = True
                        elif match_arg_728.code == Collectivite_Code.SaintBarthelemy:
                            _ = match_arg_728.value
                            temp_condition_logement_bailleur_16 = False
                        elif match_arg_728.code == Collectivite_Code.SaintMartin:
                            _ = match_arg_728.value
                            temp_condition_logement_bailleur_16 = False
                        elif match_arg_728.code == Collectivite_Code.Metropole:
                            _ = match_arg_728.value
                            temp_condition_logement_bailleur_16 = False
                        elif match_arg_728.code == Collectivite_Code.SaintPierreEtMiquelon:
                            _ = match_arg_728.value
                            temp_condition_logement_bailleur_16 = False
                        elif match_arg_728.code == Collectivite_Code.Mayotte:
                            _ = match_arg_728.value
                            temp_condition_logement_bailleur_16 = True
                        if (temp_condition_logement_bailleur_16 and
                            temp_condition_logement_bailleur_15):
                            return True
                        else:
                            raise EmptyError
                except EmptyError:
                    match_arg_729 = menage_3.logement.mode_occupation
                    if match_arg_729.code == ModeOccupation_Code.Locataire:
                        _ = match_arg_729.value
                        temp_condition_logement_bailleur_17 = False
                    elif match_arg_729.code == ModeOccupation_Code.ResidentLogementFoyer:
                        location_5 = match_arg_729.value
                        temp_condition_logement_bailleur_17 = location_5.conventionne_livre_III_titre_V_chap_III
                    elif match_arg_729.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        _ = match_arg_729.value
                        temp_condition_logement_bailleur_17 = False
                    elif match_arg_729.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_729.value
                        temp_condition_logement_bailleur_17 = False
                    elif match_arg_729.code == ModeOccupation_Code.LocationAccession:
                        _ = match_arg_729.value
                        temp_condition_logement_bailleur_17 = False
                    if temp_condition_logement_bailleur_17:
                        return True
                    else:
                        raise EmptyError
        temp_condition_logement_bailleur_18 = handle_default(SourcePosition(filename="",
                                                             start_line=0,
                                                             start_column=1,
                                                             end_line=0, end_column=1,
                                                             law_headings=[]), [temp_condition_logement_bailleur_7,
                                                             temp_condition_logement_bailleur_2],
                                                             temp_condition_logement_bailleur_1,
                                                             temp_condition_logement_bailleur)
    except EmptyError:
        temp_condition_logement_bailleur_18 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=381, start_column=11,
                                             end_line=381, end_column=38,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_logement_bailleur = temp_condition_logement_bailleur_18
    try:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_4 = eligibilite_commune_dot_coefficents_enfants_garde_alternee_pris_en_compte_1
    except EmptyError:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=390, start_column=12,
                                             end_line=390, end_column=61,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    coefficents_enfants_garde_alternee_pris_en_compte_2 = temp_coefficents_enfants_garde_alternee_pris_en_compte_4
    try:
        temp_nombre_personnes_a_charge_prises_en_compte_2 = eligibilite_commune_dot_nombre_personnes_a_charge_prises_en_compte_1
    except EmptyError:
        temp_nombre_personnes_a_charge_prises_en_compte_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=389, start_column=12,
                                             end_line=389, end_column=54,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    nombre_personnes_a_charge_prises_en_compte_2 = temp_nombre_personnes_a_charge_prises_en_compte_2
    try:
        try:
            try:
                try:
                    def temp_condition_logement_pret(_:Unit):
                        return True
                    def temp_condition_logement_pret_1(_:Unit):
                        match_arg_730 = menage_3.logement.mode_occupation
                        if match_arg_730.code == ModeOccupation_Code.Locataire:
                            _ = match_arg_730.value
                            return False
                        elif match_arg_730.code == ModeOccupation_Code.ResidentLogementFoyer:
                            _ = match_arg_730.value
                            return False
                        elif match_arg_730.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                            propriete_2 = match_arg_730.value
                            match_arg_731 = propriete_2.anciennete_logement
                            if match_arg_731.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_731.value
                                temp_condition_logement_pret_2 = False
                            elif match_arg_731.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_731.value
                                temp_condition_logement_pret_2 = True
                            return ((propriete_2.pret.date_signature >=
                                date_of_numbers(2018,1,1)) and
                                ((propriete_2.pret.date_signature <
                                date_of_numbers(2020,1,1)) and
                                (temp_condition_logement_pret_2 and
                                logement_situe_commune_desequilibre_l831_2)))
                        elif match_arg_730.code == ModeOccupation_Code.SousLocataire:
                            _ = match_arg_730.value
                            return False
                        elif match_arg_730.code == ModeOccupation_Code.LocationAccession:
                            propriete_3 = match_arg_730.value
                            match_arg_732 = propriete_3.anciennete_logement
                            if match_arg_732.code == NeufOuAncien_Code.Neuf:
                                _ = match_arg_732.value
                                temp_condition_logement_pret_3 = False
                            elif match_arg_732.code == NeufOuAncien_Code.Ancien:
                                _ = match_arg_732.value
                                temp_condition_logement_pret_3 = True
                            return ((propriete_3.pret.date_signature >=
                                date_of_numbers(2018,1,1)) and
                                ((propriete_3.pret.date_signature <
                                date_of_numbers(2020,1,1)) and
                                (temp_condition_logement_pret_3 and
                                logement_situe_commune_desequilibre_l831_2)))
                    temp_condition_logement_pret_4 = handle_default(SourcePosition(filename="",
                                                                    start_line=0,
                                                                    start_column=1,
                                                                    end_line=0, end_column=1,
                                                                    law_headings=[]), [],
                                                                    temp_condition_logement_pret_1,
                                                                    temp_condition_logement_pret)
                except EmptyError:
                    match_arg_733 = menage_3.logement.mode_occupation
                    if match_arg_733.code == ModeOccupation_Code.Locataire:
                        _ = match_arg_733.value
                        temp_condition_logement_pret_5 = False
                    elif match_arg_733.code == ModeOccupation_Code.ResidentLogementFoyer:
                        _ = match_arg_733.value
                        temp_condition_logement_pret_5 = False
                    elif match_arg_733.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        propriete_4 = match_arg_733.value
                        temp_condition_logement_pret_5 = (propriete_4.pret.date_signature >=
                            date_of_numbers(2017,12,31))
                    elif match_arg_733.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_733.value
                        temp_condition_logement_pret_5 = False
                    elif match_arg_733.code == ModeOccupation_Code.LocationAccession:
                        propriete_5 = match_arg_733.value
                        temp_condition_logement_pret_5 = (propriete_5.pret.date_signature >=
                            date_of_numbers(2017,12,31))
                    if temp_condition_logement_pret_5:
                        temp_condition_logement_pret_4 = False
                    else:
                        temp_condition_logement_pret_4 = dead_value
                        raise EmptyError
            except EmptyError:
                temp_condition_logement_pret_4 = True
        except EmptyError:
            temp_condition_logement_pret_4 = False
    except EmptyError:
        temp_condition_logement_pret_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=382, start_column=11,
                                             end_line=382, end_column=34,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    condition_logement_pret = temp_condition_logement_pret_4
    try:
        try:
            try:
                def temp_eligibilite_9(_:Unit):
                    return False
                def temp_eligibilite_10(_:Unit):
                    match_arg_734 = menage_3.residence
                    if match_arg_734.code == Collectivite_Code.Guadeloupe:
                        _ = match_arg_734.value
                        temp_eligibilite_11 = False
                    elif match_arg_734.code == Collectivite_Code.Guyane:
                        _ = match_arg_734.value
                        temp_eligibilite_11 = False
                    elif match_arg_734.code == Collectivite_Code.Martinique:
                        _ = match_arg_734.value
                        temp_eligibilite_11 = False
                    elif match_arg_734.code == Collectivite_Code.LaReunion:
                        _ = match_arg_734.value
                        temp_eligibilite_11 = False
                    elif match_arg_734.code == Collectivite_Code.SaintBarthelemy:
                        _ = match_arg_734.value
                        temp_eligibilite_11 = False
                    elif match_arg_734.code == Collectivite_Code.SaintMartin:
                        _ = match_arg_734.value
                        temp_eligibilite_11 = False
                    elif match_arg_734.code == Collectivite_Code.Metropole:
                        _ = match_arg_734.value
                        temp_eligibilite_11 = False
                    elif match_arg_734.code == Collectivite_Code.SaintPierreEtMiquelon:
                        _ = match_arg_734.value
                        temp_eligibilite_11 = True
                    elif match_arg_734.code == Collectivite_Code.Mayotte:
                        _ = match_arg_734.value
                        temp_eligibilite_11 = False
                    return ((date_courante_19 >=
                        date_of_numbers(2021,1,1)) and temp_eligibilite_11)
                temp_eligibilite_12 = handle_default(SourcePosition(filename="",
                                                     start_line=0,
                                                     start_column=1,
                                                     end_line=0, end_column=1,
                                                     law_headings=[]), [],
                                                     temp_eligibilite_10,
                                                     temp_eligibilite_9)
            except EmptyError:
                if (condition_logement_bailleur and
                    (condition_logement_pret and
                    eligibilite_commune_dot_eligibilite_1)):
                    temp_eligibilite_12 = True
                else:
                    temp_eligibilite_12 = dead_value
                    raise EmptyError
        except EmptyError:
            temp_eligibilite_12 = False
    except EmptyError:
        temp_eligibilite_12 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=388, start_column=12,
                                             end_line=388, end_column=23,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                             "Déclarations des champs d'application",
                                             "Prologue : aides au logement"]))
    eligibilite_2 = temp_eligibilite_12
    return EligibiliteAidePersonnaliseeLogement(date_courante = date_courante_19,
        eligibilite = eligibilite_2,
        nombre_personnes_a_charge_prises_en_compte = nombre_personnes_a_charge_prises_en_compte_2,
        coefficents_enfants_garde_alternee_pris_en_compte = coefficents_enfants_garde_alternee_pris_en_compte_2)

def calcul_allocation_logement(calcul_allocation_logement_in:CalculAllocationLogementIn):
    mode_occupation_2 = calcul_allocation_logement_in.mode_occupation_in
    ressources_menage_sans_arrondi_1 = calcul_allocation_logement_in.ressources_menage_sans_arrondi_in
    situation_familiale_1 = calcul_allocation_logement_in.situation_familiale_in
    nombre_personnes_a_charge_12 = calcul_allocation_logement_in.nombre_personnes_a_charge_in
    zone_7 = calcul_allocation_logement_in.zone_in
    date_courante_20 = calcul_allocation_logement_in.date_courante_in
    type_aide_3 = calcul_allocation_logement_in.type_aide_in
    residence_10 = calcul_allocation_logement_in.residence_in
    try:
        match_arg_735 = mode_occupation_2
        if match_arg_735.code == ModeOccupation_Code.Locataire:
            location_6 = match_arg_735.value
            temp_categorie_calcul_apl_1 = CategorieCalculAPL(CategorieCalculAPL_Code.Location,
                location_6)
        elif match_arg_735.code == ModeOccupation_Code.ResidentLogementFoyer:
            logementfoyer_1 = match_arg_735.value
            temp_categorie_calcul_apl_1 = CategorieCalculAPL(CategorieCalculAPL_Code.LogementFoyer,
                logementfoyer_1)
        elif match_arg_735.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
            proprietaire_8 = match_arg_735.value
            temp_categorie_calcul_apl_1 = CategorieCalculAPL(CategorieCalculAPL_Code.AccessionPropriete,
                proprietaire_8)
        elif match_arg_735.code == ModeOccupation_Code.SousLocataire:
            location_7 = match_arg_735.value
            temp_categorie_calcul_apl_1 = CategorieCalculAPL(CategorieCalculAPL_Code.Location,
                location_7)
        elif match_arg_735.code == ModeOccupation_Code.LocationAccession:
            proprietaire_9 = match_arg_735.value
            temp_categorie_calcul_apl_1 = CategorieCalculAPL(CategorieCalculAPL_Code.AccessionPropriete,
                proprietaire_9)
    except EmptyError:
        temp_categorie_calcul_apl_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1067,
                                             start_column=11, end_line=1067,
                                             end_column=31,
                                             law_headings=["Tous secteurs",
                                             "Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    categorie_calcul_apl_1 = temp_categorie_calcul_apl_1
    try:
        temp_ressources_menage_avec_arrondi_1 = arrondi_centaine_superieure(
            ressources_menage_sans_arrondi_1)
    except EmptyError:
        temp_ressources_menage_avec_arrondi_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1059,
                                             start_column=10, end_line=1059,
                                             end_column=22,
                                             law_headings=["Tous secteurs",
                                             "Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    ressources_menage_avec_arrondi_1 = temp_ressources_menage_avec_arrondi_1
    try:
        match_arg_736 = situation_familiale_1
        if match_arg_736.code == SituationFamiliale_Code.Celibataire:
            _ = match_arg_736.value
            temp_situation_familiale_calcul_apl_1 = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.PersonneSeule,
                Unit())
        elif match_arg_736.code == SituationFamiliale_Code.Maries:
            _ = match_arg_736.value
            temp_situation_familiale_calcul_apl_1 = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                Unit())
        elif match_arg_736.code == SituationFamiliale_Code.Pacses:
            _ = match_arg_736.value
            temp_situation_familiale_calcul_apl_1 = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                Unit())
        elif match_arg_736.code == SituationFamiliale_Code.Concubins:
            _ = match_arg_736.value
            temp_situation_familiale_calcul_apl_1 = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                Unit())
        elif match_arg_736.code == SituationFamiliale_Code.CelibataireSepareDeFait:
            _ = match_arg_736.value
            temp_situation_familiale_calcul_apl_1 = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.PersonneSeule,
                Unit())
        elif match_arg_736.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
            _ = match_arg_736.value
            temp_situation_familiale_calcul_apl_1 = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                Unit())
    except EmptyError:
        temp_situation_familiale_calcul_apl_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1068,
                                             start_column=11, end_line=1068,
                                             end_column=41,
                                             law_headings=["Tous secteurs",
                                             "Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    situation_familiale_calcul_apl_9 = temp_situation_familiale_calcul_apl_1
    try:
        try:
            def temp_sous_calcul_traitement_88(_:Unit):
                match_arg_737 = categorie_calcul_apl_1
                if match_arg_737.code == CategorieCalculAPL_Code.Location:
                    _ = match_arg_737.value
                    return TraitementFormuleAideFinale(aide_finale_formule = money_of_cents_string("0"),
                        traitement_aide_finale = traitement_nul_tout_le_temps)
                elif match_arg_737.code == CategorieCalculAPL_Code.AccessionPropriete:
                    _ = match_arg_737.value
                    return TraitementFormuleAideFinale(aide_finale_formule = money_of_cents_string("0"),
                        traitement_aide_finale = traitement_nul_tout_le_temps)
                elif match_arg_737.code == CategorieCalculAPL_Code.LogementFoyer:
                    logement_foyer__1 = match_arg_737.value
                    try:
                        temp_sous_calcul_traitement_89 = ChangementLogementD8424(ChangementLogementD8424_Code.PasDeChangement,
                            Unit())
                    except EmptyError:
                        temp_sous_calcul_traitement_89 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6547,
                                                             start_column=42,
                                                             end_line=6547,
                                                             end_column=57,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_90 = residence_10
                    except EmptyError:
                        temp_sous_calcul_traitement_90 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6519,
                                                             start_column=25,
                                                             end_line=6519,
                                                             end_column=34,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_91 = logement_foyer__1.logement_meuble_d842_2
                    except EmptyError:
                        temp_sous_calcul_traitement_91 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6546,
                                                             start_column=38,
                                                             end_line=6546,
                                                             end_column=76,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_92 = money_of_cents_string("0")
                    except EmptyError:
                        temp_sous_calcul_traitement_92 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6545,
                                                             start_column=42,
                                                             end_line=6545,
                                                             end_column=45,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_93 = logement_foyer__1.colocation
                    except EmptyError:
                        temp_sous_calcul_traitement_93 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6537,
                                                             start_column=26,
                                                             end_line=6537,
                                                             end_column=52,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_94 = type_aide_3
                    except EmptyError:
                        temp_sous_calcul_traitement_94 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6541,
                                                             start_column=25,
                                                             end_line=6541,
                                                             end_column=34,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_95 = False
                    except EmptyError:
                        temp_sous_calcul_traitement_95 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6540,
                                                             start_column=72,
                                                             end_line=6540,
                                                             end_column=76,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_96 = logement_foyer__1.logement_est_chambre
                    except EmptyError:
                        temp_sous_calcul_traitement_96 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6536,
                                                             start_column=36,
                                                             end_line=6536,
                                                             end_column=72,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_97 = zone_7
                    except EmptyError:
                        temp_sous_calcul_traitement_97 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6522,
                                                             start_column=20,
                                                             end_line=6522,
                                                             end_column=24,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_98 = situation_familiale_calcul_apl_9
                    except EmptyError:
                        temp_sous_calcul_traitement_98 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6524,
                                                             start_column=46,
                                                             end_line=6524,
                                                             end_column=76,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_99 = nombre_personnes_a_charge_12
                    except EmptyError:
                        temp_sous_calcul_traitement_99 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6521,
                                                             start_column=41,
                                                             end_line=6521,
                                                             end_column=66,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_100 = date_courante_20
                    except EmptyError:
                        temp_sous_calcul_traitement_100 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6523,
                                                             start_column=29,
                                                             end_line=6523,
                                                             end_column=42,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_101 = logement_foyer__1.beneficiaire_aide_adulte_ou_enfant_handicapes
                    except EmptyError:
                        temp_sous_calcul_traitement_101 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6528,
                                                             start_column=15,
                                                             end_line=6528,
                                                             end_column=76,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_102 = ressources_menage_avec_arrondi_1
                    except EmptyError:
                        temp_sous_calcul_traitement_102 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6520,
                                                             start_column=43,
                                                             end_line=6520,
                                                             end_column=60,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_103 = logement_foyer__1.redevance
                    except EmptyError:
                        temp_sous_calcul_traitement_103 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=6526,
                                                             start_column=31,
                                                             end_line=6526,
                                                             end_column=56,
                                                             law_headings=["Article D863-7",
                                                             "Sous-section III : Modalités de liquidation et de versement",
                                                             "Section II : Dispositions communes aux aides personnelles au logement",
                                                             "Chapitre III : Saint-Pierre-et-Miquelon",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    def temp_sous_calcul_traitement_104(param0_3:Money):
                        try:
                            temp_sous_calcul_traitement_105 = logement_foyer__1.redevance
                        except EmptyError:
                            temp_sous_calcul_traitement_105 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6526,
                                                                 start_column=31,
                                                                 end_line=6526,
                                                                 end_column=56,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_106 = ressources_menage_avec_arrondi_1
                        except EmptyError:
                            temp_sous_calcul_traitement_106 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6520,
                                                                 start_column=43,
                                                                 end_line=6520,
                                                                 end_column=60,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_107 = logement_foyer__1.beneficiaire_aide_adulte_ou_enfant_handicapes
                        except EmptyError:
                            temp_sous_calcul_traitement_107 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6528,
                                                                 start_column=15,
                                                                 end_line=6528,
                                                                 end_column=76,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_108 = date_courante_20
                        except EmptyError:
                            temp_sous_calcul_traitement_108 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6523,
                                                                 start_column=29,
                                                                 end_line=6523,
                                                                 end_column=42,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_109 = nombre_personnes_a_charge_12
                        except EmptyError:
                            temp_sous_calcul_traitement_109 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6521,
                                                                 start_column=41,
                                                                 end_line=6521,
                                                                 end_column=66,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_110 = situation_familiale_calcul_apl_9
                        except EmptyError:
                            temp_sous_calcul_traitement_110 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6524,
                                                                 start_column=46,
                                                                 end_line=6524,
                                                                 end_column=76,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_111 = zone_7
                        except EmptyError:
                            temp_sous_calcul_traitement_111 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6522,
                                                                 start_column=20,
                                                                 end_line=6522,
                                                                 end_column=24,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_112 = logement_foyer__1.logement_est_chambre
                        except EmptyError:
                            temp_sous_calcul_traitement_112 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6536,
                                                                 start_column=36,
                                                                 end_line=6536,
                                                                 end_column=72,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_113 = False
                        except EmptyError:
                            temp_sous_calcul_traitement_113 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6540,
                                                                 start_column=72,
                                                                 end_line=6540,
                                                                 end_column=76,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_114 = type_aide_3
                        except EmptyError:
                            temp_sous_calcul_traitement_114 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6541,
                                                                 start_column=25,
                                                                 end_line=6541,
                                                                 end_column=34,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_115 = logement_foyer__1.colocation
                        except EmptyError:
                            temp_sous_calcul_traitement_115 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6537,
                                                                 start_column=26,
                                                                 end_line=6537,
                                                                 end_column=52,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_116 = money_of_cents_string("0")
                        except EmptyError:
                            temp_sous_calcul_traitement_116 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6545,
                                                                 start_column=42,
                                                                 end_line=6545,
                                                                 end_column=45,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_117 = logement_foyer__1.logement_meuble_d842_2
                        except EmptyError:
                            temp_sous_calcul_traitement_117 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6546,
                                                                 start_column=38,
                                                                 end_line=6546,
                                                                 end_column=76,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_118 = residence_10
                        except EmptyError:
                            temp_sous_calcul_traitement_118 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6519,
                                                                 start_column=25,
                                                                 end_line=6519,
                                                                 end_column=34,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        try:
                            temp_sous_calcul_traitement_119 = ChangementLogementD8424(ChangementLogementD8424_Code.PasDeChangement,
                                Unit())
                        except EmptyError:
                            temp_sous_calcul_traitement_119 = dead_value
                            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                                 start_line=6547,
                                                                 start_column=42,
                                                                 end_line=6547,
                                                                 end_column=57,
                                                                 law_headings=["Article D863-7",
                                                                 "Sous-section III : Modalités de liquidation et de versement",
                                                                 "Section II : Dispositions communes aux aides personnelles au logement",
                                                                 "Chapitre III : Saint-Pierre-et-Miquelon",
                                                                 "Livre VIII : Aides personnelles au logement",
                                                                 "Partie réglementaire",
                                                                 "Code de la construction et de l'habitation"]))
                        return calcul_allocation_logement_locatif(CalculAllocationLogementLocatifIn(loyer_principal_in = temp_sous_calcul_traitement_105,
                                                                  ressources_menage_arrondies_in = temp_sous_calcul_traitement_106,
                                                                  beneficiaire_aide_adulte_ou_enfant_handicapes_in = temp_sous_calcul_traitement_107,
                                                                  date_courante_in = temp_sous_calcul_traitement_108,
                                                                  nombre_personnes_a_charge_in = temp_sous_calcul_traitement_109,
                                                                  situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_110,
                                                                  zone_in = temp_sous_calcul_traitement_111,
                                                                  logement_est_chambre_in = temp_sous_calcul_traitement_112,
                                                                  agees_ou_handicap_adultes_hebergees_onereux_particuliers_in = temp_sous_calcul_traitement_113,
                                                                  type_aide_in = temp_sous_calcul_traitement_114,
                                                                  colocation_in = temp_sous_calcul_traitement_115,
                                                                  reduction_loyer_solidarite_in = temp_sous_calcul_traitement_116,
                                                                  logement_meuble_d842_2_in = temp_sous_calcul_traitement_117,
                                                                  residence_in = temp_sous_calcul_traitement_118,
                                                                  changement_logement_d842_4_in = temp_sous_calcul_traitement_119)).traitement_aide_finale(
                            param0_3)
                    return TraitementFormuleAideFinale(aide_finale_formule = calcul_allocation_logement_locatif(
                        CalculAllocationLogementLocatifIn(loyer_principal_in = temp_sous_calcul_traitement_103,
                        ressources_menage_arrondies_in = temp_sous_calcul_traitement_102,
                        beneficiaire_aide_adulte_ou_enfant_handicapes_in = temp_sous_calcul_traitement_101,
                        date_courante_in = temp_sous_calcul_traitement_100,
                        nombre_personnes_a_charge_in = temp_sous_calcul_traitement_99,
                        situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_98,
                        zone_in = temp_sous_calcul_traitement_97,
                        logement_est_chambre_in = temp_sous_calcul_traitement_96,
                        agees_ou_handicap_adultes_hebergees_onereux_particuliers_in = temp_sous_calcul_traitement_95,
                        type_aide_in = temp_sous_calcul_traitement_94,
                        colocation_in = temp_sous_calcul_traitement_93,
                        reduction_loyer_solidarite_in = temp_sous_calcul_traitement_92,
                        logement_meuble_d842_2_in = temp_sous_calcul_traitement_91,
                        residence_in = temp_sous_calcul_traitement_90,
                        changement_logement_d842_4_in = temp_sous_calcul_traitement_89)).aide_finale_formule,
                        traitement_aide_finale = temp_sous_calcul_traitement_104)
            def temp_sous_calcul_traitement_120(_:Unit):
                match_arg_738 = categorie_calcul_apl_1
                if match_arg_738.code == CategorieCalculAPL_Code.Location:
                    _ = match_arg_738.value
                    temp_sous_calcul_traitement_121 = False
                elif match_arg_738.code == CategorieCalculAPL_Code.AccessionPropriete:
                    _ = match_arg_738.value
                    temp_sous_calcul_traitement_121 = False
                elif match_arg_738.code == CategorieCalculAPL_Code.LogementFoyer:
                    _ = match_arg_738.value
                    temp_sous_calcul_traitement_121 = True
                match_arg_739 = residence_10
                if match_arg_739.code == Collectivite_Code.Guadeloupe:
                    _ = match_arg_739.value
                    temp_sous_calcul_traitement_122 = False
                elif match_arg_739.code == Collectivite_Code.Guyane:
                    _ = match_arg_739.value
                    temp_sous_calcul_traitement_122 = False
                elif match_arg_739.code == Collectivite_Code.Martinique:
                    _ = match_arg_739.value
                    temp_sous_calcul_traitement_122 = False
                elif match_arg_739.code == Collectivite_Code.LaReunion:
                    _ = match_arg_739.value
                    temp_sous_calcul_traitement_122 = False
                elif match_arg_739.code == Collectivite_Code.SaintBarthelemy:
                    _ = match_arg_739.value
                    temp_sous_calcul_traitement_122 = False
                elif match_arg_739.code == Collectivite_Code.SaintMartin:
                    _ = match_arg_739.value
                    temp_sous_calcul_traitement_122 = False
                elif match_arg_739.code == Collectivite_Code.Metropole:
                    _ = match_arg_739.value
                    temp_sous_calcul_traitement_122 = False
                elif match_arg_739.code == Collectivite_Code.SaintPierreEtMiquelon:
                    _ = match_arg_739.value
                    temp_sous_calcul_traitement_122 = True
                elif match_arg_739.code == Collectivite_Code.Mayotte:
                    _ = match_arg_739.value
                    temp_sous_calcul_traitement_122 = False
                return (temp_sous_calcul_traitement_122 and
                    temp_sous_calcul_traitement_121)
            temp_sous_calcul_traitement_123 = handle_default(SourcePosition(filename="",
                                                             start_line=0,
                                                             start_column=1,
                                                             end_line=0, end_column=1,
                                                             law_headings=[]), [],
                                                             temp_sous_calcul_traitement_120,
                                                             temp_sous_calcul_traitement_88)
        except EmptyError:
            match_arg_740 = categorie_calcul_apl_1
            if match_arg_740.code == CategorieCalculAPL_Code.Location:
                location_8 = match_arg_740.value
                try:
                    temp_sous_calcul_traitement_124 = location_8.changement_logement_d842_4
                except EmptyError:
                    temp_sous_calcul_traitement_124 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1554,
                                                         start_column=42,
                                                         end_line=1554,
                                                         end_column=77,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_125 = residence_10
                except EmptyError:
                    temp_sous_calcul_traitement_125 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1534,
                                                         start_column=25,
                                                         end_line=1534,
                                                         end_column=34,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_126 = location_8.logement_meuble_d842_2
                except EmptyError:
                    temp_sous_calcul_traitement_126 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1553,
                                                         start_column=38,
                                                         end_line=1553,
                                                         end_column=69,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    match_arg_741 = location_8.bailleur
                    if match_arg_741.code == TypeBailleur_Code.BailleurSocial:
                        bailleur_2 = match_arg_741.value
                        temp_sous_calcul_traitement_127 = bailleur_2.reduction_loyer_solidarite_percue
                    elif match_arg_741.code == TypeBailleur_Code.BailleurPriveAvecConventionnementSocial:
                        _ = match_arg_741.value
                        temp_sous_calcul_traitement_127 = money_of_cents_string("0")
                    elif match_arg_741.code == TypeBailleur_Code.BailleurPrive:
                        _ = match_arg_741.value
                        temp_sous_calcul_traitement_127 = money_of_cents_string("0")
                except EmptyError:
                    temp_sous_calcul_traitement_127 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1549,
                                                         start_column=16,
                                                         end_line=1552,
                                                         end_column=39,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_128 = location_8.colocation
                except EmptyError:
                    temp_sous_calcul_traitement_128 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1544,
                                                         start_column=26,
                                                         end_line=1544,
                                                         end_column=45,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_129 = type_aide_3
                except EmptyError:
                    temp_sous_calcul_traitement_129 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1547,
                                                         start_column=25,
                                                         end_line=1547,
                                                         end_column=34,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_130 = location_8.agees_ou_handicap_adultes_hebergees_onereux_particuliers
                except EmptyError:
                    temp_sous_calcul_traitement_130 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1546,
                                                         start_column=15,
                                                         end_line=1546,
                                                         end_column=80,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_131 = location_8.logement_est_chambre
                except EmptyError:
                    temp_sous_calcul_traitement_131 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1543,
                                                         start_column=36,
                                                         end_line=1543,
                                                         end_column=65,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_132 = zone_7
                except EmptyError:
                    temp_sous_calcul_traitement_132 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1537,
                                                         start_column=20,
                                                         end_line=1537,
                                                         end_column=24,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_133 = situation_familiale_calcul_apl_9
                except EmptyError:
                    temp_sous_calcul_traitement_133 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1539,
                                                         start_column=46,
                                                         end_line=1539,
                                                         end_column=76,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_134 = nombre_personnes_a_charge_12
                except EmptyError:
                    temp_sous_calcul_traitement_134 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1536,
                                                         start_column=41,
                                                         end_line=1536,
                                                         end_column=66,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_135 = date_courante_20
                except EmptyError:
                    temp_sous_calcul_traitement_135 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1538,
                                                         start_column=29,
                                                         end_line=1538,
                                                         end_column=42,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_136 = location_8.beneficiaire_aide_adulte_ou_enfant_handicapes
                except EmptyError:
                    temp_sous_calcul_traitement_136 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1542,
                                                         start_column=15,
                                                         end_line=1542,
                                                         end_column=69,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_137 = ressources_menage_avec_arrondi_1
                except EmptyError:
                    temp_sous_calcul_traitement_137 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1535,
                                                         start_column=43,
                                                         end_line=1535,
                                                         end_column=60,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_138 = location_8.loyer_principal
                except EmptyError:
                    temp_sous_calcul_traitement_138 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1540,
                                                         start_column=31,
                                                         end_line=1540,
                                                         end_column=55,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                def temp_sous_calcul_traitement_139(param0_4:Money):
                    try:
                        temp_sous_calcul_traitement_140 = location_8.loyer_principal
                    except EmptyError:
                        temp_sous_calcul_traitement_140 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1540,
                                                             start_column=31,
                                                             end_line=1540,
                                                             end_column=55,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_141 = ressources_menage_avec_arrondi_1
                    except EmptyError:
                        temp_sous_calcul_traitement_141 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1535,
                                                             start_column=43,
                                                             end_line=1535,
                                                             end_column=60,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_142 = location_8.beneficiaire_aide_adulte_ou_enfant_handicapes
                    except EmptyError:
                        temp_sous_calcul_traitement_142 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1542,
                                                             start_column=15,
                                                             end_line=1542,
                                                             end_column=69,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_143 = date_courante_20
                    except EmptyError:
                        temp_sous_calcul_traitement_143 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1538,
                                                             start_column=29,
                                                             end_line=1538,
                                                             end_column=42,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_144 = nombre_personnes_a_charge_12
                    except EmptyError:
                        temp_sous_calcul_traitement_144 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1536,
                                                             start_column=41,
                                                             end_line=1536,
                                                             end_column=66,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_145 = situation_familiale_calcul_apl_9
                    except EmptyError:
                        temp_sous_calcul_traitement_145 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1539,
                                                             start_column=46,
                                                             end_line=1539,
                                                             end_column=76,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_146 = zone_7
                    except EmptyError:
                        temp_sous_calcul_traitement_146 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1537,
                                                             start_column=20,
                                                             end_line=1537,
                                                             end_column=24,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_147 = location_8.logement_est_chambre
                    except EmptyError:
                        temp_sous_calcul_traitement_147 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1543,
                                                             start_column=36,
                                                             end_line=1543,
                                                             end_column=65,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_148 = location_8.agees_ou_handicap_adultes_hebergees_onereux_particuliers
                    except EmptyError:
                        temp_sous_calcul_traitement_148 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1546,
                                                             start_column=15,
                                                             end_line=1546,
                                                             end_column=80,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_149 = type_aide_3
                    except EmptyError:
                        temp_sous_calcul_traitement_149 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1547,
                                                             start_column=25,
                                                             end_line=1547,
                                                             end_column=34,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_150 = location_8.colocation
                    except EmptyError:
                        temp_sous_calcul_traitement_150 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1544,
                                                             start_column=26,
                                                             end_line=1544,
                                                             end_column=45,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        match_arg_742 = location_8.bailleur
                        if match_arg_742.code == TypeBailleur_Code.BailleurSocial:
                            bailleur_3 = match_arg_742.value
                            temp_sous_calcul_traitement_151 = bailleur_3.reduction_loyer_solidarite_percue
                        elif match_arg_742.code == TypeBailleur_Code.BailleurPriveAvecConventionnementSocial:
                            _ = match_arg_742.value
                            temp_sous_calcul_traitement_151 = money_of_cents_string("0")
                        elif match_arg_742.code == TypeBailleur_Code.BailleurPrive:
                            _ = match_arg_742.value
                            temp_sous_calcul_traitement_151 = money_of_cents_string("0")
                    except EmptyError:
                        temp_sous_calcul_traitement_151 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1549,
                                                             start_column=16,
                                                             end_line=1552,
                                                             end_column=39,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_152 = location_8.logement_meuble_d842_2
                    except EmptyError:
                        temp_sous_calcul_traitement_152 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1553,
                                                             start_column=38,
                                                             end_line=1553,
                                                             end_column=69,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_153 = residence_10
                    except EmptyError:
                        temp_sous_calcul_traitement_153 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1534,
                                                             start_column=25,
                                                             end_line=1534,
                                                             end_column=34,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_154 = location_8.changement_logement_d842_4
                    except EmptyError:
                        temp_sous_calcul_traitement_154 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1554,
                                                             start_column=42,
                                                             end_line=1554,
                                                             end_column=77,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    return calcul_allocation_logement_locatif(CalculAllocationLogementLocatifIn(loyer_principal_in = temp_sous_calcul_traitement_140,
                                                              ressources_menage_arrondies_in = temp_sous_calcul_traitement_141,
                                                              beneficiaire_aide_adulte_ou_enfant_handicapes_in = temp_sous_calcul_traitement_142,
                                                              date_courante_in = temp_sous_calcul_traitement_143,
                                                              nombre_personnes_a_charge_in = temp_sous_calcul_traitement_144,
                                                              situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_145,
                                                              zone_in = temp_sous_calcul_traitement_146,
                                                              logement_est_chambre_in = temp_sous_calcul_traitement_147,
                                                              agees_ou_handicap_adultes_hebergees_onereux_particuliers_in = temp_sous_calcul_traitement_148,
                                                              type_aide_in = temp_sous_calcul_traitement_149,
                                                              colocation_in = temp_sous_calcul_traitement_150,
                                                              reduction_loyer_solidarite_in = temp_sous_calcul_traitement_151,
                                                              logement_meuble_d842_2_in = temp_sous_calcul_traitement_152,
                                                              residence_in = temp_sous_calcul_traitement_153,
                                                              changement_logement_d842_4_in = temp_sous_calcul_traitement_154)).traitement_aide_finale(
                        param0_4)
                temp_sous_calcul_traitement_123 = TraitementFormuleAideFinale(aide_finale_formule = calcul_allocation_logement_locatif(
                    CalculAllocationLogementLocatifIn(loyer_principal_in = temp_sous_calcul_traitement_138,
                    ressources_menage_arrondies_in = temp_sous_calcul_traitement_137,
                    beneficiaire_aide_adulte_ou_enfant_handicapes_in = temp_sous_calcul_traitement_136,
                    date_courante_in = temp_sous_calcul_traitement_135,
                    nombre_personnes_a_charge_in = temp_sous_calcul_traitement_134,
                    situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_133,
                    zone_in = temp_sous_calcul_traitement_132,
                    logement_est_chambre_in = temp_sous_calcul_traitement_131,
                    agees_ou_handicap_adultes_hebergees_onereux_particuliers_in = temp_sous_calcul_traitement_130,
                    type_aide_in = temp_sous_calcul_traitement_129,
                    colocation_in = temp_sous_calcul_traitement_128,
                    reduction_loyer_solidarite_in = temp_sous_calcul_traitement_127,
                    logement_meuble_d842_2_in = temp_sous_calcul_traitement_126,
                    residence_in = temp_sous_calcul_traitement_125,
                    changement_logement_d842_4_in = temp_sous_calcul_traitement_124)).aide_finale_formule,
                    traitement_aide_finale = temp_sous_calcul_traitement_139)
            elif match_arg_740.code == CategorieCalculAPL_Code.AccessionPropriete:
                proprietaire_10 = match_arg_740.value
                try:
                    temp_sous_calcul_traitement_155 = proprietaire_10.operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat
                except EmptyError:
                    temp_sous_calcul_traitement_155 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1596,
                                                         start_column=11,
                                                         end_line=1597,
                                                         end_column=81,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_156 = proprietaire_10.copropriete
                except EmptyError:
                    temp_sous_calcul_traitement_156 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1607,
                                                         start_column=28,
                                                         end_line=1607,
                                                         end_column=52,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_157 = proprietaire_10.charges_mensuelles_pret
                except EmptyError:
                    temp_sous_calcul_traitement_157 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1601,
                                                         start_column=40,
                                                         end_line=1601,
                                                         end_column=76,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_158 = proprietaire_10.date_entree_logement
                except EmptyError:
                    temp_sous_calcul_traitement_158 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1606,
                                                         start_column=37,
                                                         end_line=1606,
                                                         end_column=70,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_159 = proprietaire_10.local_habite_premiere_fois_beneficiaire
                except EmptyError:
                    temp_sous_calcul_traitement_159 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1605,
                                                         start_column=14,
                                                         end_line=1605,
                                                         end_column=66,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_160 = proprietaire_10.type_travaux_logement_r842_5
                except EmptyError:
                    temp_sous_calcul_traitement_160 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1602,
                                                         start_column=38,
                                                         end_line=1602,
                                                         end_column=79,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_161 = proprietaire_10.pret.date_signature
                except EmptyError:
                    temp_sous_calcul_traitement_161 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1603,
                                                         start_column=36,
                                                         end_line=1603,
                                                         end_column=68,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_162 = proprietaire_10.situation_r822_11_13_17
                except EmptyError:
                    temp_sous_calcul_traitement_162 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1608,
                                                         start_column=40,
                                                         end_line=1608,
                                                         end_column=76,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_163 = proprietaire_10.mensualite_principale
                except EmptyError:
                    temp_sous_calcul_traitement_163 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1600,
                                                         start_column=38,
                                                         end_line=1600,
                                                         end_column=72,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_164 = date_courante_20
                except EmptyError:
                    temp_sous_calcul_traitement_164 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1598,
                                                         start_column=30,
                                                         end_line=1598,
                                                         end_column=43,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_165 = residence_10
                except EmptyError:
                    temp_sous_calcul_traitement_165 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1594,
                                                         start_column=26,
                                                         end_line=1594,
                                                         end_column=35,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_166 = zone_7
                except EmptyError:
                    temp_sous_calcul_traitement_166 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1593,
                                                         start_column=21,
                                                         end_line=1593,
                                                         end_column=25,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_167 = situation_familiale_calcul_apl_9
                except EmptyError:
                    temp_sous_calcul_traitement_167 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1599,
                                                         start_column=47,
                                                         end_line=1599,
                                                         end_column=77,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_168 = nombre_personnes_a_charge_12
                except EmptyError:
                    temp_sous_calcul_traitement_168 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1592,
                                                         start_column=42,
                                                         end_line=1592,
                                                         end_column=67,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_169 = ressources_menage_avec_arrondi_1
                except EmptyError:
                    temp_sous_calcul_traitement_169 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1591,
                                                         start_column=44,
                                                         end_line=1591,
                                                         end_column=61,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                def temp_sous_calcul_traitement_170(param0_5:Money):
                    try:
                        temp_sous_calcul_traitement_171 = ressources_menage_avec_arrondi_1
                    except EmptyError:
                        temp_sous_calcul_traitement_171 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1591,
                                                             start_column=44,
                                                             end_line=1591,
                                                             end_column=61,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_172 = nombre_personnes_a_charge_12
                    except EmptyError:
                        temp_sous_calcul_traitement_172 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1592,
                                                             start_column=42,
                                                             end_line=1592,
                                                             end_column=67,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_173 = situation_familiale_calcul_apl_9
                    except EmptyError:
                        temp_sous_calcul_traitement_173 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1599,
                                                             start_column=47,
                                                             end_line=1599,
                                                             end_column=77,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_174 = zone_7
                    except EmptyError:
                        temp_sous_calcul_traitement_174 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1593,
                                                             start_column=21,
                                                             end_line=1593,
                                                             end_column=25,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_175 = residence_10
                    except EmptyError:
                        temp_sous_calcul_traitement_175 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1594,
                                                             start_column=26,
                                                             end_line=1594,
                                                             end_column=35,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_176 = date_courante_20
                    except EmptyError:
                        temp_sous_calcul_traitement_176 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1598,
                                                             start_column=30,
                                                             end_line=1598,
                                                             end_column=43,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_177 = proprietaire_10.mensualite_principale
                    except EmptyError:
                        temp_sous_calcul_traitement_177 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1600,
                                                             start_column=38,
                                                             end_line=1600,
                                                             end_column=72,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_178 = proprietaire_10.situation_r822_11_13_17
                    except EmptyError:
                        temp_sous_calcul_traitement_178 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1608,
                                                             start_column=40,
                                                             end_line=1608,
                                                             end_column=76,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_179 = proprietaire_10.pret.date_signature
                    except EmptyError:
                        temp_sous_calcul_traitement_179 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1603,
                                                             start_column=36,
                                                             end_line=1603,
                                                             end_column=68,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_180 = proprietaire_10.type_travaux_logement_r842_5
                    except EmptyError:
                        temp_sous_calcul_traitement_180 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1602,
                                                             start_column=38,
                                                             end_line=1602,
                                                             end_column=79,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_181 = proprietaire_10.local_habite_premiere_fois_beneficiaire
                    except EmptyError:
                        temp_sous_calcul_traitement_181 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1605,
                                                             start_column=14,
                                                             end_line=1605,
                                                             end_column=66,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_182 = proprietaire_10.date_entree_logement
                    except EmptyError:
                        temp_sous_calcul_traitement_182 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1606,
                                                             start_column=37,
                                                             end_line=1606,
                                                             end_column=70,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_183 = proprietaire_10.charges_mensuelles_pret
                    except EmptyError:
                        temp_sous_calcul_traitement_183 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1601,
                                                             start_column=40,
                                                             end_line=1601,
                                                             end_column=76,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_184 = proprietaire_10.copropriete
                    except EmptyError:
                        temp_sous_calcul_traitement_184 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1607,
                                                             start_column=28,
                                                             end_line=1607,
                                                             end_column=52,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_185 = proprietaire_10.operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat
                    except EmptyError:
                        temp_sous_calcul_traitement_185 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1596,
                                                             start_column=11,
                                                             end_line=1597,
                                                             end_column=81,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    return calcul_allocation_logement_accession_propriete(
                        CalculAllocationLogementAccessionProprieteIn(ressources_menage_arrondies_base_in = temp_sous_calcul_traitement_171,
                        nombre_personnes_a_charge_in = temp_sous_calcul_traitement_172,
                        situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_173,
                        zone_in = temp_sous_calcul_traitement_174,
                        residence_in = temp_sous_calcul_traitement_175,
                        date_courante_in = temp_sous_calcul_traitement_176,
                        mensualite_principale_in = temp_sous_calcul_traitement_177,
                        situation_r822_11_13_17_in = temp_sous_calcul_traitement_178,
                        date_signature_pret_in = temp_sous_calcul_traitement_179,
                        type_travaux_logement_in = temp_sous_calcul_traitement_180,
                        local_habite_premiere_fois_beneficiaire_in = temp_sous_calcul_traitement_181,
                        date_entree_logement_in = temp_sous_calcul_traitement_182,
                        charges_mensuelles_pret_in = temp_sous_calcul_traitement_183,
                        copropriete_in = temp_sous_calcul_traitement_184,
                        operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat_in = temp_sous_calcul_traitement_185)).traitement_aide_finale(
                        param0_5)
                temp_sous_calcul_traitement_123 = TraitementFormuleAideFinale(aide_finale_formule = calcul_allocation_logement_accession_propriete(
                    CalculAllocationLogementAccessionProprieteIn(ressources_menage_arrondies_base_in = temp_sous_calcul_traitement_169,
                    nombre_personnes_a_charge_in = temp_sous_calcul_traitement_168,
                    situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_167,
                    zone_in = temp_sous_calcul_traitement_166,
                    residence_in = temp_sous_calcul_traitement_165,
                    date_courante_in = temp_sous_calcul_traitement_164,
                    mensualite_principale_in = temp_sous_calcul_traitement_163,
                    situation_r822_11_13_17_in = temp_sous_calcul_traitement_162,
                    date_signature_pret_in = temp_sous_calcul_traitement_161,
                    type_travaux_logement_in = temp_sous_calcul_traitement_160,
                    local_habite_premiere_fois_beneficiaire_in = temp_sous_calcul_traitement_159,
                    date_entree_logement_in = temp_sous_calcul_traitement_158,
                    charges_mensuelles_pret_in = temp_sous_calcul_traitement_157,
                    copropriete_in = temp_sous_calcul_traitement_156,
                    operations_logement_evolutifs_sociaux_accession_propriete_aidee_Etat_in = temp_sous_calcul_traitement_155)).aide_finale_formule,
                    traitement_aide_finale = temp_sous_calcul_traitement_170)
            elif match_arg_740.code == CategorieCalculAPL_Code.LogementFoyer:
                logement_foyer__2 = match_arg_740.value
                try:
                    temp_sous_calcul_traitement_186 = logement_foyer__2.categorie_equivalence_loyer_d842_16
                except EmptyError:
                    temp_sous_calcul_traitement_186 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1577,
                                                         start_column=13,
                                                         end_line=1577,
                                                         end_column=64,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_187 = date_courante_20
                except EmptyError:
                    temp_sous_calcul_traitement_187 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1571,
                                                         start_column=29,
                                                         end_line=1571,
                                                         end_column=42,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_188 = zone_7
                except EmptyError:
                    temp_sous_calcul_traitement_188 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1570,
                                                         start_column=20,
                                                         end_line=1570,
                                                         end_column=24,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_189 = situation_familiale_calcul_apl_9
                except EmptyError:
                    temp_sous_calcul_traitement_189 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1572,
                                                         start_column=46,
                                                         end_line=1572,
                                                         end_column=76,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_190 = nombre_personnes_a_charge_12
                except EmptyError:
                    temp_sous_calcul_traitement_190 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1568,
                                                         start_column=41,
                                                         end_line=1568,
                                                         end_column=66,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_191 = ressources_menage_avec_arrondi_1
                except EmptyError:
                    temp_sous_calcul_traitement_191 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1567,
                                                         start_column=43,
                                                         end_line=1567,
                                                         end_column=60,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_192 = logement_foyer__2.redevance
                except EmptyError:
                    temp_sous_calcul_traitement_192 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1575,
                                                         start_column=25,
                                                         end_line=1575,
                                                         end_column=50,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_193 = residence_10
                except EmptyError:
                    temp_sous_calcul_traitement_193 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1569,
                                                         start_column=25,
                                                         end_line=1569,
                                                         end_column=34,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_194 = logement_foyer__2.date_conventionnement
                except EmptyError:
                    temp_sous_calcul_traitement_194 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1579,
                                                         start_column=37,
                                                         end_line=1579,
                                                         end_column=74,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_195 = logement_foyer__2.logement_foyer_jeunes_travailleurs
                except EmptyError:
                    temp_sous_calcul_traitement_195 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1574,
                                                         start_column=13,
                                                         end_line=1574,
                                                         end_column=63,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                try:
                    temp_sous_calcul_traitement_196 = logement_foyer__2.type
                except EmptyError:
                    temp_sous_calcul_traitement_196 = dead_value
                    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1578,
                                                         start_column=35,
                                                         end_line=1578,
                                                         end_column=55,
                                                         law_headings=["Article D823-9",
                                                         "Section 1 : Calcul, liquidation et versement des aides",
                                                         "Chapitre III : Modalités de liquidation et de versement",
                                                         "Titre II : Dispositions communes aux aides personnelles au logement",
                                                         "Livre VIII : Aides personnelles au logement",
                                                         "Partie réglementaire",
                                                         "Code de la construction et de l'habitation"]))
                def temp_sous_calcul_traitement_197(param0_6:Money):
                    try:
                        temp_sous_calcul_traitement_198 = logement_foyer__2.type
                    except EmptyError:
                        temp_sous_calcul_traitement_198 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1578,
                                                             start_column=35,
                                                             end_line=1578,
                                                             end_column=55,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_199 = logement_foyer__2.logement_foyer_jeunes_travailleurs
                    except EmptyError:
                        temp_sous_calcul_traitement_199 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1574,
                                                             start_column=13,
                                                             end_line=1574,
                                                             end_column=63,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_200 = logement_foyer__2.date_conventionnement
                    except EmptyError:
                        temp_sous_calcul_traitement_200 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1579,
                                                             start_column=37,
                                                             end_line=1579,
                                                             end_column=74,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_201 = residence_10
                    except EmptyError:
                        temp_sous_calcul_traitement_201 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1569,
                                                             start_column=25,
                                                             end_line=1569,
                                                             end_column=34,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_202 = logement_foyer__2.redevance
                    except EmptyError:
                        temp_sous_calcul_traitement_202 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1575,
                                                             start_column=25,
                                                             end_line=1575,
                                                             end_column=50,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_203 = ressources_menage_avec_arrondi_1
                    except EmptyError:
                        temp_sous_calcul_traitement_203 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1567,
                                                             start_column=43,
                                                             end_line=1567,
                                                             end_column=60,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_204 = nombre_personnes_a_charge_12
                    except EmptyError:
                        temp_sous_calcul_traitement_204 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1568,
                                                             start_column=41,
                                                             end_line=1568,
                                                             end_column=66,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_205 = situation_familiale_calcul_apl_9
                    except EmptyError:
                        temp_sous_calcul_traitement_205 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1572,
                                                             start_column=46,
                                                             end_line=1572,
                                                             end_column=76,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_206 = zone_7
                    except EmptyError:
                        temp_sous_calcul_traitement_206 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1570,
                                                             start_column=20,
                                                             end_line=1570,
                                                             end_column=24,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_207 = date_courante_20
                    except EmptyError:
                        temp_sous_calcul_traitement_207 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1571,
                                                             start_column=29,
                                                             end_line=1571,
                                                             end_column=42,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    try:
                        temp_sous_calcul_traitement_208 = logement_foyer__2.categorie_equivalence_loyer_d842_16
                    except EmptyError:
                        temp_sous_calcul_traitement_208 = dead_value
                        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1577,
                                                             start_column=13,
                                                             end_line=1577,
                                                             end_column=64,
                                                             law_headings=["Article D823-9",
                                                             "Section 1 : Calcul, liquidation et versement des aides",
                                                             "Chapitre III : Modalités de liquidation et de versement",
                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                             "Livre VIII : Aides personnelles au logement",
                                                             "Partie réglementaire",
                                                             "Code de la construction et de l'habitation"]))
                    return calcul_allocation_logement_foyer(CalculAllocationLogementFoyerIn(type_logement_foyer_in = temp_sous_calcul_traitement_198,
                                                            logement_foyer_jeunes_travailleurs_in = temp_sous_calcul_traitement_199,
                                                            date_conventionnement_in = temp_sous_calcul_traitement_200,
                                                            residence_in = temp_sous_calcul_traitement_201,
                                                            redevance_in = temp_sous_calcul_traitement_202,
                                                            ressources_menage_arrondies_in = temp_sous_calcul_traitement_203,
                                                            nombre_personnes_a_charge_in = temp_sous_calcul_traitement_204,
                                                            situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_205,
                                                            zone_in = temp_sous_calcul_traitement_206,
                                                            date_courante_in = temp_sous_calcul_traitement_207,
                                                            categorie_equivalence_loyer_d842_16_in = temp_sous_calcul_traitement_208)).traitement_aide_finale(
                        param0_6)
                temp_sous_calcul_traitement_123 = TraitementFormuleAideFinale(aide_finale_formule = calcul_allocation_logement_foyer(
                    CalculAllocationLogementFoyerIn(type_logement_foyer_in = temp_sous_calcul_traitement_196,
                    logement_foyer_jeunes_travailleurs_in = temp_sous_calcul_traitement_195,
                    date_conventionnement_in = temp_sous_calcul_traitement_194,
                    residence_in = temp_sous_calcul_traitement_193,
                    redevance_in = temp_sous_calcul_traitement_192,
                    ressources_menage_arrondies_in = temp_sous_calcul_traitement_191,
                    nombre_personnes_a_charge_in = temp_sous_calcul_traitement_190,
                    situation_familiale_calcul_apl_in = temp_sous_calcul_traitement_189,
                    zone_in = temp_sous_calcul_traitement_188,
                    date_courante_in = temp_sous_calcul_traitement_187,
                    categorie_equivalence_loyer_d842_16_in = temp_sous_calcul_traitement_186)).aide_finale_formule,
                    traitement_aide_finale = temp_sous_calcul_traitement_197)
    except EmptyError:
        temp_sous_calcul_traitement_123 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1070,
                                             start_column=11, end_line=1070,
                                             end_column=33,
                                             law_headings=["Tous secteurs",
                                             "Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    sous_calcul_traitement_1 = temp_sous_calcul_traitement_123
    def temp_traitement_aide_finale_4(arg_1:Money):
        try:
            return sous_calcul_traitement_1.traitement_aide_finale(arg_1)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=1073,
                                                 start_column=12,
                                                 end_line=1073,
                                                 end_column=34,
                                                 law_headings=["Tous secteurs",
                                                 "Secteur logement-foyer",
                                                 "Calcul du montant de l'allocation logement",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_2 = temp_traitement_aide_finale_4
    try:
        temp_aide_finale_formule_9 = sous_calcul_traitement_1.aide_finale_formule
    except EmptyError:
        temp_aide_finale_formule_9 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1072,
                                             start_column=12, end_line=1072,
                                             end_column=31,
                                             law_headings=["Tous secteurs",
                                             "Secteur logement-foyer",
                                             "Calcul du montant de l'allocation logement",
                                             "Prologue : aides au logement"]))
    aide_finale_formule_7 = temp_aide_finale_formule_9
    return CalculAllocationLogement(aide_finale_formule = aide_finale_formule_7,
        traitement_aide_finale = traitement_aide_finale_2)

def calculette_aides_au_logement(calculette_aides_au_logement_in:CalculetteAidesAuLogementIn):
    menage_4 = calculette_aides_au_logement_in.menage_in
    demandeur_4 = calculette_aides_au_logement_in.demandeur_in
    date_courante_21 = calculette_aides_au_logement_in.date_courante_in
    ressources_menage_prises_en_compte = calculette_aides_au_logement_in.ressources_menage_prises_en_compte_in
    try:
        temp_eligibilite_allocation_logement_dot_date_courante = date_courante_21
    except EmptyError:
        temp_eligibilite_allocation_logement_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1153,
                                             start_column=14, end_line=1153,
                                             end_column=59,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    eligibilite_allocation_logement_dot_date_courante = temp_eligibilite_allocation_logement_dot_date_courante
    try:
        temp_eligibilite_allocation_logement_dot_menage = menage_4
    except EmptyError:
        temp_eligibilite_allocation_logement_dot_menage = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1145,
                                             start_column=14, end_line=1145,
                                             end_column=52,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    eligibilite_allocation_logement_dot_menage = temp_eligibilite_allocation_logement_dot_menage
    try:
        temp_eligibilite_allocation_logement_dot_demandeur = demandeur_4
    except EmptyError:
        temp_eligibilite_allocation_logement_dot_demandeur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1149,
                                             start_column=14, end_line=1149,
                                             end_column=55,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    eligibilite_allocation_logement_dot_demandeur = temp_eligibilite_allocation_logement_dot_demandeur
    try:
        temp_eligibilite_allocation_logement_dot_beneficie_aide_personnalisee_logement = False
    except EmptyError:
        temp_eligibilite_allocation_logement_dot_beneficie_aide_personnalisee_logement = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                             start_line=1065, start_column=5,
                                             end_line=1065, end_column=74,
                                             law_headings=["Article L841-2",
                                             "Chapitre Ier : Champ d'application",
                                             "Titre IV : Allocations de logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie législative",
                                             "Code de la construction et de l'habitation"]))
    eligibilite_allocation_logement_dot_beneficie_aide_personnalisee_logement = temp_eligibilite_allocation_logement_dot_beneficie_aide_personnalisee_logement
    result_24 = eligibilite_allocation_logement(EligibiliteAllocationLogementIn(date_courante_in = eligibilite_allocation_logement_dot_date_courante,
                                                menage_in = eligibilite_allocation_logement_dot_menage,
                                                demandeur_in = eligibilite_allocation_logement_dot_demandeur,
                                                beneficie_aide_personnalisee_logement_in = eligibilite_allocation_logement_dot_beneficie_aide_personnalisee_logement))
    eligibilite_allocation_logement_dot_eligibilite_l841_2 = result_24.eligibilite
    eligibilite_allocation_logement_dot_nombre_personnes_a_charge_prises_en_compte = result_24.nombre_personnes_a_charge_prises_en_compte
    eligibilite_allocation_logement_dot_coefficents_enfants_garde_alternee_pris_en_compte = result_24.coefficents_enfants_garde_alternee_pris_en_compte
    try:
        temp_eligibilite_aide_personnalisee_logement_dot_menage = menage_4
    except EmptyError:
        temp_eligibilite_aide_personnalisee_logement_dot_menage = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1143,
                                             start_column=14, end_line=1143,
                                             end_column=60,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    eligibilite_aide_personnalisee_logement_dot_menage = temp_eligibilite_aide_personnalisee_logement_dot_menage
    try:
        temp_eligibilite_aide_personnalisee_logement_dot_demandeur = demandeur_4
    except EmptyError:
        temp_eligibilite_aide_personnalisee_logement_dot_demandeur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1147,
                                             start_column=14, end_line=1147,
                                             end_column=63,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    eligibilite_aide_personnalisee_logement_dot_demandeur = temp_eligibilite_aide_personnalisee_logement_dot_demandeur
    try:
        temp_eligibilite_aide_personnalisee_logement_dot_date_courante = date_courante_21
    except EmptyError:
        temp_eligibilite_aide_personnalisee_logement_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1151,
                                             start_column=14, end_line=1151,
                                             end_column=67,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    eligibilite_aide_personnalisee_logement_dot_date_courante = temp_eligibilite_aide_personnalisee_logement_dot_date_courante
    result_25 = eligibilite_aide_personnalisee_logement(EligibiliteAidePersonnaliseeLogementIn(menage_in = eligibilite_aide_personnalisee_logement_dot_menage,
                                                        demandeur_in = eligibilite_aide_personnalisee_logement_dot_demandeur,
                                                        date_courante_in = eligibilite_aide_personnalisee_logement_dot_date_courante))
    eligibilite_aide_personnalisee_logement_dot_date_courante_1 = result_25.date_courante
    eligibilite_aide_personnalisee_logement_dot_eligibilite = result_25.eligibilite
    eligibilite_aide_personnalisee_logement_dot_nombre_personnes_a_charge_prises_en_compte = result_25.nombre_personnes_a_charge_prises_en_compte
    eligibilite_aide_personnalisee_logement_dot_coefficents_enfants_garde_alternee_pris_en_compte = result_25.coefficents_enfants_garde_alternee_pris_en_compte
    try:
        temp_calcul_allocation_logement_dot_mode_occupation = menage_4.logement.mode_occupation
    except EmptyError:
        temp_calcul_allocation_logement_dot_mode_occupation = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1157,
                                             start_column=14, end_line=1157,
                                             end_column=56,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_mode_occupation = temp_calcul_allocation_logement_dot_mode_occupation
    try:
        temp_calcul_allocation_logement_dot_ressources_menage_sans_arrondi = ressources_menage_prises_en_compte
    except EmptyError:
        temp_calcul_allocation_logement_dot_ressources_menage_sans_arrondi = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1161,
                                             start_column=14, end_line=1161,
                                             end_column=58,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_ressources_menage_sans_arrondi = temp_calcul_allocation_logement_dot_ressources_menage_sans_arrondi
    try:
        temp_calcul_allocation_logement_dot_situation_familiale = menage_4.situation_familiale
    except EmptyError:
        temp_calcul_allocation_logement_dot_situation_familiale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1165,
                                             start_column=14, end_line=1165,
                                             end_column=60,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_situation_familiale = temp_calcul_allocation_logement_dot_situation_familiale
    try:
        temp_calcul_allocation_logement_dot_nombre_personnes_a_charge = eligibilite_allocation_logement_dot_nombre_personnes_a_charge_prises_en_compte
    except EmptyError:
        temp_calcul_allocation_logement_dot_nombre_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1172,
                                             start_column=14, end_line=1172,
                                             end_column=66,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_nombre_personnes_a_charge = temp_calcul_allocation_logement_dot_nombre_personnes_a_charge
    try:
        temp_calcul_allocation_logement_dot_zone = menage_4.logement.zone
    except EmptyError:
        temp_calcul_allocation_logement_dot_zone = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1176,
                                             start_column=14, end_line=1176,
                                             end_column=45,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_zone = temp_calcul_allocation_logement_dot_zone
    try:
        temp_calcul_allocation_logement_dot_date_courante = date_courante_21
    except EmptyError:
        temp_calcul_allocation_logement_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1180,
                                             start_column=14, end_line=1180,
                                             end_column=54,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_date_courante = temp_calcul_allocation_logement_dot_date_courante
    try:
        match_arg_743 = eligibilite_allocation_logement_dot_eligibilite_l841_2
        if match_arg_743.code == TypeEligibiliteAllocationLogement_Code.PasEligible:
            _ = match_arg_743.value
            temp_calcul_allocation_logement_dot_type_aide = TypeAidesPersonnelleLogement(TypeAidesPersonnelleLogement_Code.AllocationLogementSociale,
                Unit())
        elif match_arg_743.code == TypeEligibiliteAllocationLogement_Code.AllocationLogementFamiliale:
            _ = match_arg_743.value
            temp_calcul_allocation_logement_dot_type_aide = TypeAidesPersonnelleLogement(TypeAidesPersonnelleLogement_Code.AllocationLogementFamiliale,
                Unit())
        elif match_arg_743.code == TypeEligibiliteAllocationLogement_Code.AllocationLogementSociale:
            _ = match_arg_743.value
            temp_calcul_allocation_logement_dot_type_aide = TypeAidesPersonnelleLogement(TypeAidesPersonnelleLogement_Code.AllocationLogementSociale,
                Unit())
    except EmptyError:
        temp_calcul_allocation_logement_dot_type_aide = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                             start_line=1081,
                                             start_column=14, end_line=1081,
                                             end_column=50,
                                             law_headings=["Article L841-2",
                                             "Chapitre Ier : Champ d'application",
                                             "Titre IV : Allocations de logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie législative",
                                             "Code de la construction et de l'habitation"]))
    calcul_allocation_logement_dot_type_aide = temp_calcul_allocation_logement_dot_type_aide
    try:
        temp_calcul_allocation_logement_dot_residence = menage_4.residence
    except EmptyError:
        temp_calcul_allocation_logement_dot_residence = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1184,
                                             start_column=14, end_line=1184,
                                             end_column=50,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_residence = temp_calcul_allocation_logement_dot_residence
    result_26 = calcul_allocation_logement(CalculAllocationLogementIn(mode_occupation_in = calcul_allocation_logement_dot_mode_occupation,
                                           ressources_menage_sans_arrondi_in = calcul_allocation_logement_dot_ressources_menage_sans_arrondi,
                                           situation_familiale_in = calcul_allocation_logement_dot_situation_familiale,
                                           nombre_personnes_a_charge_in = calcul_allocation_logement_dot_nombre_personnes_a_charge,
                                           zone_in = calcul_allocation_logement_dot_zone,
                                           date_courante_in = calcul_allocation_logement_dot_date_courante,
                                           type_aide_in = calcul_allocation_logement_dot_type_aide,
                                           residence_in = calcul_allocation_logement_dot_residence))
    calcul_allocation_logement_dot_aide_finale_formule = result_26.aide_finale_formule
    calcul_allocation_logement_dot_traitement_aide_finale = result_26.traitement_aide_finale
    try:
        temp_calcul_aide_personnalisee_logement_dot_mode_occupation = menage_4.logement.mode_occupation
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_mode_occupation = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1155,
                                             start_column=14, end_line=1155,
                                             end_column=64,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_mode_occupation = temp_calcul_aide_personnalisee_logement_dot_mode_occupation
    try:
        temp_calcul_aide_personnalisee_logement_dot_type_aide = TypeAidesPersonnelleLogement(TypeAidesPersonnelleLogement_Code.AidePersonnaliseeLogement,
            Unit())
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_type_aide = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                             start_line=1079,
                                             start_column=14, end_line=1079,
                                             end_column=58,
                                             law_headings=["Article L841-2",
                                             "Chapitre Ier : Champ d'application",
                                             "Titre IV : Allocations de logement",
                                             "Livre VIII : Aides personnelles au logement",
                                             "Partie législative",
                                             "Code de la construction et de l'habitation"]))
    calcul_aide_personnalisee_logement_dot_type_aide = temp_calcul_aide_personnalisee_logement_dot_type_aide
    try:
        temp_calcul_aide_personnalisee_logement_dot_ressources_menage_sans_arrondi = ressources_menage_prises_en_compte
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_ressources_menage_sans_arrondi = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1159,
                                             start_column=14, end_line=1159,
                                             end_column=66,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_ressources_menage_sans_arrondi = temp_calcul_aide_personnalisee_logement_dot_ressources_menage_sans_arrondi
    try:
        temp_calcul_aide_personnalisee_logement_dot_situation_familiale = menage_4.situation_familiale
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_situation_familiale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1163,
                                             start_column=14, end_line=1163,
                                             end_column=68,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_situation_familiale = temp_calcul_aide_personnalisee_logement_dot_situation_familiale
    try:
        temp_calcul_aide_personnalisee_logement_dot_nombre_personnes_a_charge = eligibilite_aide_personnalisee_logement_dot_nombre_personnes_a_charge_prises_en_compte
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_nombre_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1168, start_column=5,
                                             end_line=1168, end_column=65,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_nombre_personnes_a_charge = temp_calcul_aide_personnalisee_logement_dot_nombre_personnes_a_charge
    try:
        temp_calcul_aide_personnalisee_logement_dot_zone = menage_4.logement.zone
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_zone = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1174,
                                             start_column=14, end_line=1174,
                                             end_column=53,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_zone = temp_calcul_aide_personnalisee_logement_dot_zone
    try:
        temp_calcul_aide_personnalisee_logement_dot_date_courante = date_courante_21
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1178,
                                             start_column=14, end_line=1178,
                                             end_column=62,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_date_courante = temp_calcul_aide_personnalisee_logement_dot_date_courante
    try:
        temp_calcul_aide_personnalisee_logement_dot_residence = menage_4.residence
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_residence = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1182,
                                             start_column=14, end_line=1182,
                                             end_column=58,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_residence = temp_calcul_aide_personnalisee_logement_dot_residence
    result_27 = calcul_aide_personnalisee_logement(CalculAidePersonnaliseeLogementIn(mode_occupation_in = calcul_aide_personnalisee_logement_dot_mode_occupation,
                                                   type_aide_in = calcul_aide_personnalisee_logement_dot_type_aide,
                                                   ressources_menage_sans_arrondi_in = calcul_aide_personnalisee_logement_dot_ressources_menage_sans_arrondi,
                                                   situation_familiale_in = calcul_aide_personnalisee_logement_dot_situation_familiale,
                                                   nombre_personnes_a_charge_in = calcul_aide_personnalisee_logement_dot_nombre_personnes_a_charge,
                                                   zone_in = calcul_aide_personnalisee_logement_dot_zone,
                                                   date_courante_in = calcul_aide_personnalisee_logement_dot_date_courante,
                                                   residence_in = calcul_aide_personnalisee_logement_dot_residence))
    calcul_aide_personnalisee_logement_dot_aide_finale_formule = result_27.aide_finale_formule
    calcul_aide_personnalisee_logement_dot_traitement_aide_finale = result_27.traitement_aide_finale
    try:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_5 = eligibilite_aide_personnalisee_logement_dot_coefficents_enfants_garde_alternee_pris_en_compte
    except EmptyError:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_5 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1139,
                                             start_column=12, end_line=1139,
                                             end_column=61,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    coefficents_enfants_garde_alternee_pris_en_compte_3 = temp_coefficents_enfants_garde_alternee_pris_en_compte_5
    try:
        match_arg_744 = eligibilite_allocation_logement_dot_eligibilite_l841_2
        if match_arg_744.code == TypeEligibiliteAllocationLogement_Code.PasEligible:
            _ = match_arg_744.value
            temp_eligibilite_13 = False
        elif match_arg_744.code == TypeEligibiliteAllocationLogement_Code.AllocationLogementFamiliale:
            _ = match_arg_744.value
            temp_eligibilite_13 = True
        elif match_arg_744.code == TypeEligibiliteAllocationLogement_Code.AllocationLogementSociale:
            _ = match_arg_744.value
            temp_eligibilite_13 = True
        temp_eligibilite_14 = (eligibilite_aide_personnalisee_logement_dot_eligibilite or
            temp_eligibilite_13)
    except EmptyError:
        temp_eligibilite_14 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1135,
                                             start_column=12, end_line=1135,
                                             end_column=23,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    eligibilite_3 = temp_eligibilite_14
    def temp_traitement_aide_finale_5(aide_finale_29:Money):
        try:
            if not eligibilite_3:
                return aide_finale_29
            else:
                match_arg_745 = eligibilite_allocation_logement_dot_eligibilite_l841_2
                if match_arg_745.code == TypeEligibiliteAllocationLogement_Code.PasEligible:
                    _ = match_arg_745.value
                    temp_traitement_aide_finale_6 = True
                elif match_arg_745.code == TypeEligibiliteAllocationLogement_Code.AllocationLogementFamiliale:
                    _ = match_arg_745.value
                    temp_traitement_aide_finale_6 = False
                elif match_arg_745.code == TypeEligibiliteAllocationLogement_Code.AllocationLogementSociale:
                    _ = match_arg_745.value
                    temp_traitement_aide_finale_6 = False
                if (eligibilite_aide_personnalisee_logement_dot_eligibilite and
                    not temp_traitement_aide_finale_6):
                    if (calcul_aide_personnalisee_logement_dot_traitement_aide_finale(
                        aide_finale_29) >
                        calcul_allocation_logement_dot_traitement_aide_finale(
                        aide_finale_29)):
                        return calcul_aide_personnalisee_logement_dot_traitement_aide_finale(
                            aide_finale_29)
                    else:
                        return calcul_allocation_logement_dot_traitement_aide_finale(
                            aide_finale_29)
                else:
                    if eligibilite_aide_personnalisee_logement_dot_eligibilite:
                        return calcul_aide_personnalisee_logement_dot_traitement_aide_finale(
                            aide_finale_29)
                    else:
                        return calcul_allocation_logement_dot_traitement_aide_finale(
                            aide_finale_29)
        except EmptyError:
            raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=1137,
                                                 start_column=12,
                                                 end_line=1137,
                                                 end_column=34,
                                                 law_headings=["Calculette globale",
                                                 "Calcul de l'aide au logement effective",
                                                 "Prologue : aides au logement"]))
    traitement_aide_finale_3 = temp_traitement_aide_finale_5
    try:
        if not eligibilite_3:
            temp_aide_finale_formule_10 = money_of_cents_string("0")
        else:
            match_arg_746 = eligibilite_allocation_logement_dot_eligibilite_l841_2
            if match_arg_746.code == TypeEligibiliteAllocationLogement_Code.PasEligible:
                _ = match_arg_746.value
                temp_aide_finale_formule_11 = True
            elif match_arg_746.code == TypeEligibiliteAllocationLogement_Code.AllocationLogementFamiliale:
                _ = match_arg_746.value
                temp_aide_finale_formule_11 = False
            elif match_arg_746.code == TypeEligibiliteAllocationLogement_Code.AllocationLogementSociale:
                _ = match_arg_746.value
                temp_aide_finale_formule_11 = False
            if (eligibilite_aide_personnalisee_logement_dot_eligibilite and
                not temp_aide_finale_formule_11):
                if (calcul_aide_personnalisee_logement_dot_traitement_aide_finale(
                    calcul_aide_personnalisee_logement_dot_aide_finale_formule) >
                    calcul_allocation_logement_dot_traitement_aide_finale(
                    calcul_allocation_logement_dot_aide_finale_formule)):
                    temp_aide_finale_formule_10 = calcul_aide_personnalisee_logement_dot_aide_finale_formule
                else:
                    temp_aide_finale_formule_10 = calcul_allocation_logement_dot_aide_finale_formule
            else:
                if eligibilite_aide_personnalisee_logement_dot_eligibilite:
                    temp_aide_finale_formule_10 = calcul_aide_personnalisee_logement_dot_aide_finale_formule
                else:
                    temp_aide_finale_formule_10 = calcul_allocation_logement_dot_aide_finale_formule
    except EmptyError:
        temp_aide_finale_formule_10 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1136,
                                             start_column=12, end_line=1136,
                                             end_column=31,
                                             law_headings=["Calculette globale",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    aide_finale_formule_8 = temp_aide_finale_formule_10
    return CalculetteAidesAuLogement(eligibilite = eligibilite_3,
        aide_finale_formule = aide_finale_formule_8,
        traitement_aide_finale = traitement_aide_finale_3,
        coefficents_enfants_garde_alternee_pris_en_compte = coefficents_enfants_garde_alternee_pris_en_compte_3)

def calculette_aides_au_logement_garde_alternee(calculette_aides_au_logement_garde_alternee_in:CalculetteAidesAuLogementGardeAlterneeIn):
    menage_5 = calculette_aides_au_logement_garde_alternee_in.menage_in
    demandeur_5 = calculette_aides_au_logement_garde_alternee_in.demandeur_in
    date_courante_22 = calculette_aides_au_logement_garde_alternee_in.date_courante_in
    ressources_menage_prises_en_compte_1 = calculette_aides_au_logement_garde_alternee_in.ressources_menage_prises_en_compte_in
    try:
        def temp_menage_sans_enfants_garde_alternee(personne_a_charge_14:PersonneACharge):
            match_arg_747 = personne_a_charge_14
            if match_arg_747.code == PersonneACharge_Code.EnfantACharge:
                enfant_15 = match_arg_747.value
                match_arg_748 = enfant_15.situation_garde_alternee
                if match_arg_748.code == SituationGardeAlternee_Code.PasDeGardeAlternee:
                    _ = match_arg_748.value
                    return True
                elif match_arg_748.code == SituationGardeAlternee_Code.GardeAlterneeCoefficientPriseEnCharge:
                    _ = match_arg_748.value
                    return False
            elif match_arg_747.code == PersonneACharge_Code.AutrePersonneACharge:
                _ = match_arg_747.value
                return True
        temp_menage_sans_enfants_garde_alternee_1 = Menage(prestations_recues = menage_5.prestations_recues,
            logement = menage_5.logement,
            personnes_a_charge = list_filter(temp_menage_sans_enfants_garde_alternee,
            menage_5.personnes_a_charge),
            nombre_autres_occupants_logement = menage_5.nombre_autres_occupants_logement,
            situation_familiale = menage_5.situation_familiale,
            condition_rattache_foyer_fiscal_parent_ifi = menage_5.condition_rattache_foyer_fiscal_parent_ifi,
            enfant_a_naitre_apres_quatrieme_mois_grossesse = menage_5.enfant_a_naitre_apres_quatrieme_mois_grossesse,
            personnes_agees_handicapees_foyer_r844_4 = menage_5.personnes_agees_handicapees_foyer_r844_4,
            residence = menage_5.residence)
    except EmptyError:
        temp_menage_sans_enfants_garde_alternee_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1206,
                                             start_column=11, end_line=1206,
                                             end_column=45,
                                             law_headings=["Calculette avec garde alternée",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    menage_sans_enfants_garde_alternee = temp_menage_sans_enfants_garde_alternee_1
    try:
        temp_calculette_dot_menage = menage_5
    except EmptyError:
        temp_calculette_dot_menage = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1217,
                                             start_column=14, end_line=1217,
                                             end_column=31,
                                             law_headings=["Calculette avec garde alternée",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calculette_dot_menage = temp_calculette_dot_menage
    try:
        temp_calculette_dot_demandeur = demandeur_5
    except EmptyError:
        temp_calculette_dot_demandeur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1219,
                                             start_column=14, end_line=1219,
                                             end_column=34,
                                             law_headings=["Calculette avec garde alternée",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calculette_dot_demandeur = temp_calculette_dot_demandeur
    try:
        temp_calculette_dot_date_courante = date_courante_22
    except EmptyError:
        temp_calculette_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1221,
                                             start_column=14, end_line=1221,
                                             end_column=38,
                                             law_headings=["Calculette avec garde alternée",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calculette_dot_date_courante = temp_calculette_dot_date_courante
    try:
        temp_calculette_dot_ressources_menage_prises_en_compte = ressources_menage_prises_en_compte_1
    except EmptyError:
        temp_calculette_dot_ressources_menage_prises_en_compte = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1223,
                                             start_column=14, end_line=1223,
                                             end_column=59,
                                             law_headings=["Calculette avec garde alternée",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calculette_dot_ressources_menage_prises_en_compte = temp_calculette_dot_ressources_menage_prises_en_compte
    result_28 = calculette_aides_au_logement(CalculetteAidesAuLogementIn(menage_in = calculette_dot_menage,
                                             demandeur_in = calculette_dot_demandeur,
                                             date_courante_in = calculette_dot_date_courante,
                                             ressources_menage_prises_en_compte_in = calculette_dot_ressources_menage_prises_en_compte))
    calculette_dot_eligibilite = result_28.eligibilite
    calculette_dot_aide_finale_formule = result_28.aide_finale_formule
    calculette_dot_traitement_aide_finale = result_28.traitement_aide_finale
    calculette_dot_coefficents_enfants_garde_alternee_pris_en_compte = result_28.coefficents_enfants_garde_alternee_pris_en_compte
    try:
        temp_calculette_sans_garde_alternee_dot_menage = menage_sans_enfants_garde_alternee
    except EmptyError:
        temp_calculette_sans_garde_alternee_dot_menage = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1225,
                                             start_column=14, end_line=1225,
                                             end_column=51,
                                             law_headings=["Calculette avec garde alternée",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calculette_sans_garde_alternee_dot_menage = temp_calculette_sans_garde_alternee_dot_menage
    try:
        temp_calculette_sans_garde_alternee_dot_demandeur = demandeur_5
    except EmptyError:
        temp_calculette_sans_garde_alternee_dot_demandeur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1227,
                                             start_column=14, end_line=1227,
                                             end_column=54,
                                             law_headings=["Calculette avec garde alternée",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calculette_sans_garde_alternee_dot_demandeur = temp_calculette_sans_garde_alternee_dot_demandeur
    try:
        temp_calculette_sans_garde_alternee_dot_date_courante = date_courante_22
    except EmptyError:
        temp_calculette_sans_garde_alternee_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1229,
                                             start_column=14, end_line=1229,
                                             end_column=58,
                                             law_headings=["Calculette avec garde alternée",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calculette_sans_garde_alternee_dot_date_courante = temp_calculette_sans_garde_alternee_dot_date_courante
    try:
        temp_calculette_sans_garde_alternee_dot_ressources_menage_prises_en_compte = ressources_menage_prises_en_compte_1
    except EmptyError:
        temp_calculette_sans_garde_alternee_dot_ressources_menage_prises_en_compte = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1232, start_column=5,
                                             end_line=1232, end_column=70,
                                             law_headings=["Calculette avec garde alternée",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    calculette_sans_garde_alternee_dot_ressources_menage_prises_en_compte = temp_calculette_sans_garde_alternee_dot_ressources_menage_prises_en_compte
    result_29 = calculette_aides_au_logement(CalculetteAidesAuLogementIn(menage_in = calculette_sans_garde_alternee_dot_menage,
                                             demandeur_in = calculette_sans_garde_alternee_dot_demandeur,
                                             date_courante_in = calculette_sans_garde_alternee_dot_date_courante,
                                             ressources_menage_prises_en_compte_in = calculette_sans_garde_alternee_dot_ressources_menage_prises_en_compte))
    calculette_sans_garde_alternee_dot_eligibilite = result_29.eligibilite
    calculette_sans_garde_alternee_dot_aide_finale_formule = result_29.aide_finale_formule
    calculette_sans_garde_alternee_dot_traitement_aide_finale = result_29.traitement_aide_finale
    calculette_sans_garde_alternee_dot_coefficents_enfants_garde_alternee_pris_en_compte = result_29.coefficents_enfants_garde_alternee_pris_en_compte
    try:
        temp_eligibilite_15 = calculette_dot_eligibilite
    except EmptyError:
        temp_eligibilite_15 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1213,
                                             start_column=12, end_line=1213,
                                             end_column=23,
                                             law_headings=["Calculette avec garde alternée",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    eligibilite_4 = temp_eligibilite_15
    try:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_6 = calculette_dot_coefficents_enfants_garde_alternee_pris_en_compte
    except EmptyError:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_6 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1207,
                                             start_column=11, end_line=1207,
                                             end_column=60,
                                             law_headings=["Calculette avec garde alternée",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    coefficents_enfants_garde_alternee_pris_en_compte_4 = temp_coefficents_enfants_garde_alternee_pris_en_compte_6
    try:
        if (list_length(coefficents_enfants_garde_alternee_pris_en_compte_4) ==
            integer_of_string("0")):
            temp_aide_finale = money_of_cents_string("0")
        else:
            def temp_aide_finale_1(sum1_2:Decimal, sum2_2:Decimal):
                return (sum1_2 + sum2_2)
            temp_aide_finale = ((calculette_dot_aide_finale_formule -
                calculette_sans_garde_alternee_dot_aide_finale_formule) *
                (list_reduce(temp_aide_finale_1, decimal_of_string("0."),
                             coefficents_enfants_garde_alternee_pris_en_compte_4) /
                decimal_of_integer(list_length(coefficents_enfants_garde_alternee_pris_en_compte_4))))
        temp_aide_finale_2 = calculette_dot_traitement_aide_finale((calculette_sans_garde_alternee_dot_aide_finale_formule +
                                                                   temp_aide_finale))
    except EmptyError:
        temp_aide_finale_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1214,
                                             start_column=12, end_line=1214,
                                             end_column=23,
                                             law_headings=["Calculette avec garde alternée",
                                             "Calcul de l'aide au logement effective",
                                             "Prologue : aides au logement"]))
    aide_finale_30 = temp_aide_finale_2
    return CalculetteAidesAuLogementGardeAlternee(eligibilite = eligibilite_4,
        aide_finale = aide_finale_30)
